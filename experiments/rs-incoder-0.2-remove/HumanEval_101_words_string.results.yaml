language: rs
name: HumanEval_101_words_string
results:
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().next().unwrap() != ',' {\n            word.push(s.chars().next().unwrap());\n\
    \        }\n        words.push(word);\n        s = String::from(s.chars().next().unwrap());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659748081
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        while\
    \ i < s.len() && s.chars().any(|c| c == ',' || c == ' ') {\n            word.push(s.chars().next().unwrap());\n\
    \            i += 1;\n        }\n        words.push(word);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"HHHHHHHHHHHHHHHHHHH\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"]`', /tmp/tmpgs16bs_t.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push_back(word);\n    }\n    return words;\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmppqujh0ek.rs:8:15\n  |\n8 |         words.push_back(word);\n\
    \  |               ^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppqujh0ek.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.is_whitespace() {\n                break;\n            }\n   \
    \         word.push(s.chars().next().unwrap());\n        }\n        words.push(word);\n\
    \        s = String::from(word.as_str());\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp534nc90y.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_whitespace`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.is_whitespace() {\n                break;\n            }\n   \
    \         word.push(s.chars().next().unwrap());\n            s.next();\n     \
    \   }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpc4gxued4.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_whitespace`\n\nerror[E0599]:\
    \ no method named `next` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpc4gxued4.rs:14:15\n   |\n14 |             s.next();\n   |          \
    \     ^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut words = s.split_whitespace();\n    for word\
    \ in words {\n        words.push(word);\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp78xytpwn.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp78xytpwn.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.is_whitespace() {\n                break;\n            }\n   \
    \         word.push(s.chars().next().unwrap());\n            s.next();\n     \
    \   }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpc4gxued4.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_whitespace`\n\nerror[E0599]:\
    \ no method named `next` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpc4gxued4.rs:14:15\n   |\n14 |             s.next();\n   |          \
    \     ^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(\",\");\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmphz14bz4z.rs:7:11\n  |\n7 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\
    \nerror[E0599]: no method named `as_slice` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmphz14bz4z.rs:7:34\n  |\n7 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `std::str::Split<'_,\
    \ &str>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmphz14bz4z.rs:8:5\n  |\n\
    4 | fn words_string(s: String) -> Vec<String> {\n  |                         \
    \      ----------- expected `Vec<String>` because of return type\n...\n8 |   \
    \  words\n  |     ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n\
    \  |\n  = note: expected struct `Vec<String>`\n             found struct `std::str::Split<'_,\
    \ &str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut split\
    \ = false;\n    while !s.is_empty() {\n        if s.is_whitespace() {\n      \
    \      split = true;\n        } else {\n            if split {\n             \
    \   words.push(s.trim_end());\n                split = false;\n            }\n\
    \            s.trim_end();\n        }\n    }\n    words\n}\n\nfn main() {\n  \
    \  let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpnbx1pltl.rs:9:14\n  |\n9 |         if s.is_whitespace()\
    \ {\n  |              ^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `split_whitespace`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpnbx1pltl.rs:19:5\n   |\n4  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n19 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ let mut j = i;\n        while j < s.len() && s.chars().any(|c| c == ',' || c\
    \ == ' ') {\n            word.push(s.chars().nth(j).unwrap());\n            j\
    \ = j + 1;\n        }\n        word.push(s.chars().nth(j).unwrap());\n       \
    \ words.push(word);\n        i = j;\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpavpocsih.rs:15:36

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut word\
    \ = \"\";\n    while !s.is_empty() {\n        let c = s.chars().next().unwrap();\n\
    \        if c == ',' || c == ' ' {\n            words.push(word);\n          \
    \  word = \"\";\n        } else {\n            word += c;\n        }\n    }\n\
    \    words.push(word);\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpnl4m_nh8.rs:14:13\n   |\n14 |             word += c;\n\
    \   |             ----^^^^^\n   |             |\n   |             cannot use `+=`\
    \ on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnl4m_nh8.rs:18:5\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    18 |     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        word.push_str(&s[i\
    \ .. i + 1]);\n        i += 1;\n        words.push(word);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"H\", \"i\", \",\", \" \", \"m\", \"y\", \" \", \"n\", \"a\", \"m\", \"e\"\
    , \" \", \"i\", \"s\", \" \", \"J\", \"o\", \"h\", \"n\"]`,\n right: `[\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]`', /tmp/tmpyu6dpl9a.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        let mut c = false;\n     \
    \   while !s.is_empty() {\n            if c == false {\n                if s.is_empty()\
    \ {\n                    break;\n                }\n                word.push(*s);\n\
    \                c = true;\n            } else {\n                word.push(*s);\n\
    \                c = false;\n            }\n            s = s.chars().next();\n\
    \        }\n        words.push(word);\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb907qeo7.rs:15:27\n   |\n\
    15 |                 word.push(*s);\n   |                           ^^ expected\
    \ `char`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb907qeo7.rs:18:27\n\
    \   |\n18 |                 word.push(*s);\n   |                           ^^\
    \ expected `char`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb907qeo7.rs:21:17\n\
    \   |\n21 |             s = s.chars().next();\n   |                 ^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Option<char>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        let mut c = false;\n\
    \        while !s.is_empty() {\n            if c == false {\n                let\
    \ mut c = s.chars().any(|c| c == ',' || c == ' ');\n            }\n          \
    \  if c == true {\n                word.push_str(&s.trim_end());\n           \
    \     s = String::from(\"\");\n            }\n            else {\n           \
    \     word.push_str(&s.trim_start());\n                s = String::from(\"\");\n\
    \            }\n        }\n        words.push_back(word);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpg2nffbcd.rs:23:15\n   |\n23 |         words.push_back(word);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() {\n\
    \            if s.is_whitespace() {\n                break;\n            }\n \
    \           word.push(s.chars().next().unwrap());\n            s = s.chars().skip(1).collect();\n\
    \        }\n        words.push_back(word);\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmppkcj46qx.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_ascii_whitespace`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `Vec<_>` in the current scope\n\
    \  --> /tmp/tmppkcj46qx.rs:16:15\n   |\n16 |         words.push_back(word);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut word\
    \ = \"\";\n    while !s.is_empty() {\n        let c = s.chars().next().unwrap();\n\
    \        if c == ',' || c == ' ' {\n            words.push(word);\n          \
    \  word = \"\";\n        } else {\n            word += c;\n        }\n    }\n\
    \    words.push(word);\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpnl4m_nh8.rs:14:13\n   |\n14 |             word += c;\n\
    \   |             ----^^^^^\n   |             |\n   |             cannot use `+=`\
    \ on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnl4m_nh8.rs:18:5\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    18 |     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ while i < s.len() && s.chars().any(|c| c == ',' || c == ' ') {\n           \
    \ word.push(s.chars().next().unwrap());\n            i += 1;\n        }\n    \
    \    words.push(word);\n        i += 1;\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"HHHHHHHHHHHHHHHHHHH\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"]`', /tmp/tmpps979vka.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        word.push_str(s);\n      \
    \  word.push(',');\n        word.push_str(s);\n        word.push(',');\n     \
    \   word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n  \
    \      word.push(',');\n        word.push_str(s);\n        word.push(',');\n \
    \       word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpdvo5sv02.rs:88:19\n\
    \   |\n88 |         word.push(',\n   |                   ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut words = s.split_whitespace();\n    for word\
    \ in words {\n        words.push(word);\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp78xytpwn.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp78xytpwn.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        let mut\
    \ j = i;\n        while j < s.len() && s.chars().any(|c| c == ',' || c == ' ')\
    \ {\n            word.push(s.chars().nth(j).unwrap());\n            j = j + 1;\n\
    \        }\n        word.push(s.chars().nth(j).unwrap());\n        words.push(word);\n\
    \        i = j;\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpwhv70zs1.rs:15:36

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        let mut c = false;\n     \
    \   while !s.is_empty() {\n            if s.chars().next().unwrap() == '-' {\n\
    \                c = true;\n                break;\n            }\n          \
    \  word.push_str(s.chars().next().unwrap());\n        }\n        if !c {\n   \
    \         word.push_str(\",\");\n        }\n        word.push_str(\",\");\n  \
    \      words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpma4jda_b.rs:15:27\n   |\n\
    15 |             word.push_str(s.chars().next().unwrap());\n   |             \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        while\
    \ i < s.len() && s.chars().any(|c| c == ',' || c == ' ') {\n            word.push(s.chars().next().unwrap());\n\
    \            i += 1;\n        }\n        words.push(word);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"HHHHHHHHHHHHHHHHHHH\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"]`', /tmp/tmpgs16bs_t.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut word\
    \ = \"\";\n    while !s.is_empty() {\n        word = s.split_whitespace().collect::<Vec<_>>().pop();\n\
    \        words.push(word);\n        s = String::from(&s[word.len()..]);\n    }\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjvtsb08j.rs:9:16\n  |\n7 |\
    \     let mut word = \"\";\n  |                    -- expected due to this value\n\
    8 |     while !s.is_empty() {\n9 |         word = s.split_whitespace().collect::<Vec<_>>().pop();\n\
    \  |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`,\
    \ found enum `Option`\n  |\n  = note: expected reference `&str`\n            \
    \      found enum `Option<&str>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjvtsb08j.rs:13:5\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    13 |     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s.chars().any(|c| c == ',' || c == ' ') {\n\
    \            words.push(s.split_whitespace().collect::<Vec<String>>());\n    \
    \        i += 1;\n        } else {\n            i += 1;\n        }\n    }\n  \
    \  words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpyjszeloi.rs:10:45\n     |\n10\
    \   |             words.push(s.split_whitespace().collect::<Vec<String>>());\n\
    \     |                                             ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyjszeloi.rs:16:5\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    16 |     words\n   |     ^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push_back(word);\n    }\n    return words;\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmppqujh0ek.rs:8:15\n  |\n8 |         words.push_back(word);\n\
    \  |               ^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppqujh0ek.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut delimiters\
    \ = vec![\".\", \",\", \";\", \":\", \"!\", \"?\"];\n    let mut delimiter = String::from(delimiters[0]);\n\
    \    let mut delimiter_index = 0;\n    let mut delimiter_index2 = 0;\n    let\
    \ mut delimiter_index3 = 0;\n    let mut delimiter_index4 = 0;\n    let mut delimiter_index5\
    \ = 0;\n    let mut delimiter_index6 = 0;\n    let mut delimiter_index7 = 0;\n\
    \    let mut delimiter_index8 = 0;\n    let mut delimiter_index9 = 0;\n    let\
    \ mut delimiter_index10 = 0;\n    let mut delimiter_index11 = 0;\n    let mut\
    \ delimiter_index12 = 0;\n    let mut delimiter_index13 = 0;\n    let mut delimiter_index14\
    \ = 0;\n    let mut delimiter_index15 = 0;\n    let mut delimiter_index16 = 0;\n\
    \    let mut delimiter_index17 = 0;\n    let mut delimiter_index18 = 0;\n    let\
    \ mut delimiter_index19 = 0;\n    let mut delimiter_index20 = 0;\n    let mut\
    \ delimiter_index21 = 0;\n    let mut delimiter_index22 = 0;\n    let mut delimiter_index23\
    \ = 0;\n    let mut delimiter_index24 = 0;\n    let mut delimiter_index25 = 0;\n\
    \    let mut delimiter_index26 = 0;\n    let mut delimiter_index27 = 0;\n    let\
    \ mut delimiter_index28 = 0;\n    let mut delimiter_index29 = 0;\n    let mut\
    \ delimiter_index30 = 0;\n    let mut delimiter_index31 = 0;\n    let mut delimiter_index32\
    \ = 0;\n    let mut delimiter_index33 = 0;\n    let mut delimiter_index34 = 0;\n\
    \    let mut delimiter_index35 = 0;\n    let mut delimiter_index36 = 0;\n    let\
    \ mut delimiter_index37 = 0;\n    let mut delimiter_index38 = 0;\n    let mut\
    \ delimiter_index39 = 0;\n    let mut delimiter_index40 = 0;\n    let mut delimiter_index41\
    \ = 0;\n    let mut delimiter_index42 = 0;\n    let mut delimiter_index43 = 0;\n\
    \    let mut delimiter_index44 = 0;\n    let mut delimiter_index45 = 0;\n    let\
    \ mut delimiter_index46 = 0;\n    let mut delimiter_index47 = 0;\n    let mut\
    \ delimiter_index48 = 0;\n    let mut delimiter_index49 = 0;\n    let mut delimiter_index50\
    \ = 0;\n    let mut delimiter_index51 = 0;\n    let mut delimiter_index52 = 0;\n\
    \    let mut delimiter_index53 = 0;\n    let mut delimiter_index54 = 0;\n    let\
    \ mut delimiter_index55 = 0;\n    let mut delimiter_index56 = 0;\n    let mut\
    \ delimiter_index57 = 0;\n    let mut delimiter_index58 = 0;\n    let mu\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqry0cmb6.rs:67:11\n   |\n\
    67 |     let mu\n   |           ^ help: add `;` here\n68 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqry0cmb6.rs:4:31\n  |\n\
    4 | fn words_string(s: String) -> Vec<String> {\n  |    ------------         \
    \      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        let mut c = false;\n     \
    \   while !s.is_empty() {\n            let c = s.chars().next().unwrap();\n  \
    \          if c == ',' {\n                word.push(c);\n                break;\n\
    \            }\n            word.push(c);\n            s = s.chars().next().unwrap();\n\
    \        }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n  \
    \  let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpexkl25zm.rs:17:17\n   |\n\
    6  |     let mut s = String::from(s);\n   |                 --------------- expected\
    \ due to this value\n...\n17 |             s = s.chars().next().unwrap();\n  \
    \ |                 ^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                 |\n   |                 expected struct\
    \ `String`, found `char`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        let mut\
    \ j = i;\n        while j < s.len() && s.chars().all(|c| !c.is_whitespace()) {\n\
    \            word.push(s.chars().next().unwrap());\n            j = j + 1;\n \
    \       }\n        word.push(s.chars().next().unwrap());\n        words.push(word);\n\
    \        i = j;\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976108
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ while i < s.len() && s.chars().any(|c| c == ',' || c == ' ') {\n           \
    \ word.push(s.chars().next().unwrap());\n            i += 1;\n        }\n    \
    \    words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"HHHHHHHHHHHHHHHHHHH\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"]`', /tmp/tmpqt9_7157.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(\",\");\n    for word in\
    \ words {\n        words.clear();\n        let mut words = word.split(\" \");\n\
    \        for word in words {\n            words.clear();\n            words.push(word);\n\
    \        }\n    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clear` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpp9zqg9b9.rs:8:15\n  |\n8 |         words.clear();\n\
    \  |               ^^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0599]:\
    \ no method named `clear` found for struct `std::str::Split` in the current scope\n\
    \  --> /tmp/tmpp9zqg9b9.rs:11:19\n   |\n11 |             words.clear();\n   |\
    \                   ^^^^^ method not found in `std::str::Split<'_, &str>`\n\n\
    error[E0599]: no method named `push` found for struct `std::str::Split` in the\
    \ current scope\n  --> /tmp/tmpp9zqg9b9.rs:12:19\n   |\n12 |             words.push(word);\n\
    \   |                   ^^^^ method not found in `std::str::Split<'_, &str>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpp9zqg9b9.rs:15:12\n   |\n4  |\
    \ fn words_string(s: String) -> Vec<String> {\n   |                          \
    \     ----------- expected `Vec<String>` because of return type\n...\n15 |   \
    \  return words;\n   |            ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `std::str::Split<'_,\
    \ &str>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut splits = s.split_whitespace();\n    for split\
    \ in splits {\n        words.push(split.to_string());\n    }\n    return words;\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmp9f9l9iku.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        let mut\
    \ j = i;\n        while j < s.len() && s[j] != ' ' {\n            word.push(s[j]);\n\
    \            j += 1\n        }\n        word.push(' ');\n        words.push(word);\n\
    \        i += j;\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpwxvsbib1.rs:11:30\n\
    \   |\n11 |         while j < s.len() && s[j] != ' ' {\n   |                 \
    \             ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpwxvsbib1.rs:12:23\n   |\n12 |             word.push(s[j]);\n  \
    \ |                       ^^^^ `String` cannot be indexed by `usize`\n   |\n \
    \  = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut splits = s.split_whitespace();\n    for split\
    \ in splits {\n        words.push(split.to_string());\n    }\n    words\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmp7s_j5ap9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() && s.chars().all(|c|\
    \ !c.is_whitespace()) {\n            word.push(s.chars().next().unwrap());\n \
    \       }\n        word.push(',');\n        word.push(' ');\n        words.push(word);\n\
    \        s = String::from(s.chars().skip_while(|c| !c.is_whitespace()).collect());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0283]: type annotations needed\n  --> /tmp/tmpzc9q2cvn.rs:15:13\n\
    \   |\n15 |         s = String::from(s.chars().skip_while(|c| !c.is_whitespace()).collect());\n\
    \   |             ^^^^^^^^^^^^ cannot infer type for type parameter `T` declared\
    \ on the trait `From`\n   |\n   = note: multiple `impl`s satisfying `String: From<_>`\
    \ found in the following crates: `alloc`, `core`:\n           - impl From<Box<str>>\
    \ for String;\n           - impl From<char> for String;\n           - impl<'a>\
    \ From<Cow<'a, str>> for String;\n           - impl<> From<&String> for String;\n\
    \           and 3 more\nhelp: consider specifying the type argument in the method\
    \ call\n   |\n15 |         s = String::from(s.chars().skip_while(|c| !c.is_whitespace()).collect::<B>());\n\
    \   |                                                                        \
    \      +++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0283`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(\",\").map(|x| x.trim()).collect();\n\
    \    words.sort_unstable();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n    words.dedup();\n    words.dedup();\n    words.dedup();\n\
    \    words.dedup();\n}\n\nfn main() {\n    let candidate = words_string;\n   \
    \ assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmppwzdldgd.rs:7:5\n \
    \ |\n6 |     let mut words = s.split(\",\").map(|x| x.trim()).collect();\n  |\
    \         --------- consider giving `words` a type\n7 |     words.sort_unstable();\n\
    \  |     ^^^^^ cannot infer type\n  |\n  = note: type must be known at this point\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmppwzdldgd.rs:4:31\n  |\n4 | fn words_string(s:\
    \ String) -> Vec<String> {\n  |    ------------               ^^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n  |\n  = note: expected struct `Vec<String>`\n\
    \          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0282, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        let mut\
    \ j = i;\n        while j < s.len() && s.chars().any(|c| c == ',' || c == ' ')\
    \ {\n            word.push(s.chars().nth(j).unwrap());\n            j = j + 1;\n\
    \        }\n        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp88p5szen.rs:59:3\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n8  |     while i < s.len()\
    \ {\n   |                       - this delimiter might not be properly closed...\n\
    ...\n49 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    59 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp88p5szen.rs:4:31\n\
    \  |\n4 | fn words_string(s: String) -> Vec<String> {\n  |    ------------   \
    \            ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().next().unwrap() != ',' {\n            word.push(s.chars().next().unwrap());\n\
    \        }\n        word.push(',');\n        word.push(' ');\n        word.push('\\\
    n');\n        word.push('\\r');\n        word.push('\\t');\n        word.push('\
    \ ');\n        word.push(' ');\n        word.push(' ');\n        word.push(' ');\n\
    \        word.push(' ');\n        word.push(' ');\n        word.push(' ');\n \
    \       word.push(' ');\n        word.push(' ');\n        word.push(' ');\n  \
    \      word.push(' ');\n        word.push(' ');\n        word.push(' ');\n   \
    \     word.push(' ');\n        word.push(' ');\n        word.push(' ');\n    \
    \    word.push(' ');\n        word.push(' ');\n        word.push(' ');\n     \
    \   word.push(' ');\n        word.push(' ');\n        word.push(' ');\n      \
    \  word.push(' ');\n        word.push(' ');\n        word.push(' ');\n       \
    \ word.push(' ');\n        word.push(' ');\n        word.push(' ');\n        word.push('\
    \ ');\n        word.push(' ');\n        word.push(' ');\n        word.push(' ');\n\
    \        word.push(' ');\n        word.push(' ');\n        word.push(' ');\n \
    \       word.push(' ');\n        word.push(' ');\n        word.push(' ');\n  \
    \      word.push(' ');\n        word.push(' ');\n        word.push(' ');\n   \
    \     word.push(' ');\n        word.push(' ');\n        word.push(' ');\n    \
    \    word.push(' ');\n        word.push(' ');\n        word.push(' ');\n     \
    \   word.push(' ');\n        word.push(' ');\n        word.push(' ');\n      \
    \  word.push(' ');\n        word.push(' ');\n        word.push(' ');\n       \
    \ word.push(' ');\n        word.push(' ');\n        word.push(' ');\n        word.push('\
    \ ');\n        word.push(' ');\n        word.push(' ');\n        word.push(' ');\n\
    \        word.push(' ');\n        word.push(' ');\n        word.push(' ');\n \
    \       word.push(' ');\n        word.push(' ');\n        word.push(' ');\n  \
    \      word.push(' ');\n        word.push(' ');\n        word.push(' ');\n   \
    \     word.push(' ');\n        \n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp70lcis_6.rs:98:3\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n7  |     while !s.is_empty()\
    \ {\n   |                         - this delimiter might not be properly closed...\n\
    ...\n88 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    98 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp70lcis_6.rs:4:31\n\
    \  |\n4 | fn words_string(s: String) -> Vec<String> {\n  |    ------------   \
    \            ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut word\
    \ = \"\";\n    while !s.is_empty() {\n        word = s.split_whitespace().first();\n\
    \        if !word.is_empty() {\n            words.push(word);\n        }\n   \
    \     s = s.split_whitespace().next();\n    }\n    words\n}\n\nfn main() {\n \
    \   let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `first` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp0kmfq2j9.rs:9:37\n  |\n9 |         word =\
    \ s.split_whitespace().first();\n  |                                     ^^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0kmfq2j9.rs:13:13\n   |\n6  |     let mut s = String::from(s);\n\
    \   |                 --------------- expected due to this value\n...\n13 |  \
    \       s = s.split_whitespace().next();\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Option<&str>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0kmfq2j9.rs:15:5\n   |\n4  | fn words_string(s: String)\
    \ -> Vec<String> {\n   |                               ----------- expected `Vec<String>`\
    \ because of return type\n...\n15 |     words\n   |     ^^^^^ expected struct\
    \ `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n   \
    \           found struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s.trim_end());\n\
    \        word.push(',');\n        \n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpvlu6w7ua.rs:88:3\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n7  |     while !s.is_empty()\
    \ {\n   |                         - this delimiter might not be properly closed...\n\
    ...\n78 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    88 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvlu6w7ua.rs:4:31\n\
    \  |\n4 | fn words_string(s: String) -> Vec<String> {\n  |    ------------   \
    \            ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.is_whitespace() {\n                break;\n            }\n   \
    \         word.push(s.chars().next().unwrap());\n            s.next();\n     \
    \   }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpc4gxued4.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_whitespace`\n\nerror[E0599]:\
    \ no method named `next` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpc4gxued4.rs:14:15\n   |\n14 |             s.next();\n   |          \
    \     ^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut word:\
    \ Vec<String> = Vec::new();\n    while !s.is_empty() {\n        let mut word =\
    \ Vec::new();\n        let mut c = s.chars();\n        while !c.next().is_none()\
    \ {\n            word.push(*c);\n        }\n        word.push(String::new());\n\
    \        word.push(String::new());\n        word.push(String::new());\n      \
    \  word.push(String::new());\n        word.push(String::new());\n        word.push(String::new());\n\
    \        word.push(String::new());\n        word.push(String::new());\n      \
    \  word.push(String::new());\n        word.push(String::new());\n        word.push(String::new());\n\
    \        word.push(String::new());\n        word.push(String::new());\n      \
    \  word.push(String::new());\n        word.push(String::new());\n        word.push(String::new());\n\
    \        word.push(String::new());\n        word.push(String::new());\n      \
    \  word.push(String::new());\n        word.push(String::new());\n        word.push(String::new());\n\
    \        word.push(String::new());\n        word.push(String::new());\n      \
    \  word.push(String::new());\n        word.push(String::new());\n        word.push(String::new());\n\
    \        word.push(String::new());\n        word.push(String::new());\n      \
    \  word.push(String::new());\n        word.push(String::new());\n        word.push(String::new());\n\
    \        word.push(String::new());\n        word.push(String::new());\n      \
    \  word.push(String::new());\n        word.push(String::new());\n        word.push(String::new());\n\
    \        word.push(String::new());\n        word.push(String::new());\n      \
    \  word.push(String::new());\n        word.push(String::new());\n        word.push(String::new());\n\
    \        word.push(String::new());\n        word.push(String::new());\n      \
    \  word.push(String::new());\n        word.push(String::new());\n        word.push(String::new());\n\
    \        word.push(String::new());\n        word.push(String::new());\n      \
    \  word.push(String::new());\n        word.push(String::new());\n        word.push(String::new());\n\
    \        word.push(String::new());\n        word.push(String::new());\n      \
    \  word.push(String::new());\n        word.push(String::new());\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpfj6i4r2_.rs:79:3\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n8  |     while !s.is_empty()\
    \ {\n   |                         - this delimiter might not be properly closed...\n\
    ...\n69 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    79 | }\n   |   ^\n\nerror[E0614]: type `Chars<'_>` cannot be dereferenced\n  -->\
    \ /tmp/tmpfj6i4r2_.rs:12:23\n   |\n12 |             word.push(*c);\n   |     \
    \                  ^^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfj6i4r2_.rs:4:31\n\
    \  |\n4 | fn words_string(s: String) -> Vec<String> {\n  |    ------------   \
    \            ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut words = s.split(\",\");\n    for word in words\
    \ {\n        words.push(word.trim());\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpfa4hcqfi.rs:8:15\n  |\n8 |         words.push(word.trim());\n\
    \  |               ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfa4hcqfi.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `std::str::Split<'_,\
    \ &str>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s.chars().any(|c| c == ',' || c == ' ') {\n\
    \            words.push_back(s.split_whitespace()[i]);\n            i += 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpbaa0k79k.rs:10:19\n   |\n10 |             words.push_back(s.split_whitespace()[i]);\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0608]:\
    \ cannot index into a value of type `SplitWhitespace<'_>`\n  --> /tmp/tmpbaa0k79k.rs:10:29\n\
    \   |\n10 |             words.push_back(s.split_whitespace()[i]);\n   |      \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut splitter = s.split_whitespace();\n    while\
    \ let Some(word) = splitter.next() {\n        words.push(word);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkt1iprqe.rs:10:5\n   |\n\
    4  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n10 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut delimiters\
    \ = vec![\".\", \",\", \";\", \"!\", \"?\"];\n    let mut delimiter = delimiters.first();\n\
    \    while !s.is_empty() {\n        if delimiter == delimiters.last() {\n    \
    \        delimiter = delimiters.first();\n        }\n        let mut word = String::from(\"\
    \");\n        while !s.is_empty() && delimiter == delimiters.last() {\n      \
    \      word.push(s.chars().next().unwrap());\n            s = s.chars().next().unwrap();\n\
    \        }\n        word.push(delimiter);\n        words.push(word);\n    }\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpskv15r26.rs:16:17\n   |\n\
    6  |     let mut s = String::from(s);\n   |                 --------------- expected\
    \ due to this value\n...\n16 |             s = s.chars().next().unwrap();\n  \
    \ |                 ^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                 |\n   |                 expected struct\
    \ `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpskv15r26.rs:18:19\n\
    \   |\n18 |         word.push(delimiter);\n   |                   ^^^^^^^^^ expected\
    \ `char`, found enum `Option`\n   |\n   = note: expected type `char`\n       \
    \       found enum `Option<&&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut j = i;\n        while j < s.len() &&\
    \ s.chars().all(|c| c == ',' || c == ' ') {\n            j = j + 1;\n        }\n\
    \        words.push(s.split_whitespace().collect::<Vec<_>>());\n        i = j;\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkuf0eds1.rs:16:5\n   |\n\
    4  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n16 |\
    \     words\n   |     ^^^^^ expected struct `String`, found struct `Vec`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<&str>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        word.push_str(&s[i\
    \ .. i + 1]);\n        i += 1;\n        words.push(word);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"H\", \"i\", \",\", \" \", \"m\", \"y\", \" \", \"n\", \"a\", \"m\", \"e\"\
    , \" \", \"i\", \"s\", \" \", \"J\", \"o\", \"h\", \"n\"]`,\n right: `[\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]`', /tmp/tmpyu6dpl9a.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        word.push_str(s);\n      \
    \  word.push(',');\n        word.push_str(s);\n        word.push(',');\n     \
    \   word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n  \
    \      word.push(',');\n        word.push_str(s);\n        word.push(',');\n \
    \       word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpdvo5sv02.rs:88:19\n\
    \   |\n88 |         word.push(',\n   |                   ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().next().unwrap() != ',' {\n            word.push(s.chars().next().unwrap());\n\
    \        }\n        words.push(word);\n        s = String::from(s.chars().next().unwrap());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659748081
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        word.push_str(s);\n      \
    \  word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\"\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpcyux_lmz.rs:92:109\n\
    \   |\n92 |       assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n   |  _____________________________________________________________________________________________________________^\n\
    93 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut words = s.split_whitespace();\n    for word\
    \ in words {\n        words.push(word);\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp78xytpwn.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp78xytpwn.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() {\n\
    \            if s.is_whitespace() {\n                break;\n            }\n \
    \           word.push(s.chars().next().unwrap());\n            s = s.chars().skip(1).collect();\n\
    \        }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n  \
    \  let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpzsopo4mq.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_ascii_whitespace`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().next().unwrap() == ',' {\n            word.push_str(&s.chars().next().unwrap());\n\
    \            s.push_str(&\"\");\n        }\n        word.push_str(&s.chars().next().unwrap());\n\
    \        words.push_back(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3vilvwj1.rs:10:27\n   |\n\
    10 |             word.push_str(&s.chars().next().unwrap());\n   |            \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3vilvwj1.rs:13:23\n   |\n13 |\
    \         word.push_str(&s.chars().next().unwrap());\n   |                   \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&char`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `Vec<_>` in the current scope\n\
    \  --> /tmp/tmp3vilvwj1.rs:14:15\n   |\n14 |         words.push_back(word);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut j = i;\n        while j < s.len() &&\
    \ s.chars().all(|c| !c.is_whitespace()) {\n            j = j + 1;\n        }\n\
    \        words.push(s.split_whitespace().collect::<Vec<_>>());\n        i = j;\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp56mdnz1j.rs:16:5\n   |\n\
    4  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n16 |\
    \     words\n   |     ^^^^^ expected struct `String`, found struct `Vec`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<&str>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ while i < s.len() && s.chars().any(|c| c == ',' || c == ' ') {\n           \
    \ word.push(s.chars().next().unwrap());\n            i += 1;\n        }\n    \
    \    words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"HHHHHHHHHHHHHHHHHHH\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"]`', /tmp/tmpqt9_7157.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        let mut\
    \ j = i;\n        while j < s.len() && s.chars().all(|c| !c.is_whitespace()) {\n\
    \            word.push(s.chars().next().unwrap());\n            j = j + 1;\n \
    \       }\n        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(s.chars().next().unwrap());\n\
    \        word.push(s.chars().next().unwrap());\n        word.push(\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp75z_c7_l.rs:69:3\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n8  |     while i < s.len()\
    \ {\n   |                       - this delimiter might not be properly closed...\n\
    ...\n59 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    69 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp75z_c7_l.rs:58:18\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - closing delimiter possibly meant for this\n...\n\
    58 |         word.push(\n   |                  ^ unclosed delimiter\n59 | }\n\
    \   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 1 argument\
    \ but 0 arguments were supplied\n    --> /tmp/tmp75z_c7_l.rs:58:14\n     |\n58\
    \   |         word.push(\n     |              ^^^^- supplied 0 arguments\n   \
    \  |              |\n     |              expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n --> /tmp/tmp75z_c7_l.rs:4:31\n\
    \  |\n4 | fn words_string(s: String) -> Vec<String> {\n  |    ------------   \
    \            ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() {\n\
    \            if let Some(letter) = s.chars().next() {\n                word.push(letter);\n\
    \                s = s.trim_left_matches(',');\n            } else {\n       \
    \         break;\n            }\n        }\n        words.push(word);\n      \
    \  s = String::from(\"\");\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: use of deprecated associated function `core::str::<impl str>::trim_left_matches`:\
    \ superseded by `trim_start_matches`\n  --> /tmp/tmpx2fluoqq.rs:12:23\n   |\n\
    12 |                 s = s.trim_left_matches(',');\n   |                     \
    \  ^^^^^^^^^^^^^^^^^ help: replace the use of the deprecated associated function:\
    \ `trim_start_matches`\n   |\n   = note: `#[warn(deprecated)]` on by default\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx2fluoqq.rs:12:21\n   |\n6  |\
    \     let mut s = String::from(s);\n   |                 --------------- expected\
    \ due to this value\n...\n12 |                 s = s.trim_left_matches(',');\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                     |\n   |                   \
    \  expected struct `String`, found `&str`\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        let mut c = s.chars();\n \
    \       while let Some(d) = c.next() {\n            word.push(d);\n        }\n\
    \        word.push(',');\n        word.push(' ');\n        words.push(word);\n\
    \        s = s.trim_end();\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3_g4_qps.rs:16:13\n   |\n\
    6  |     let mut s = String::from(s);\n   |                 --------------- expected\
    \ due to this value\n...\n16 |         s = s.trim_end();\n   |             ^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |             |\n  \
    \ |             expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut words = s.split_whitespace();\n    for word\
    \ in words {\n        words.push(word);\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp78xytpwn.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp78xytpwn.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(',');\n    for word in\
    \ words {\n        words.push_back(word.trim());\n    }\n    return words;\n}\n\
    \nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpzvqbw8e9.rs:8:15\n  |\n8 |         words.push_back(word.trim());\n\
    \  |               ^^^^^^^^^ method not found in `std::str::Split<'_, char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzvqbw8e9.rs:10:12\n   |\n4  |\
    \ fn words_string(s: String) -> Vec<String> {\n   |                          \
    \     ----------- expected `Vec<String>` because of return type\n...\n10 |   \
    \  return words;\n   |            ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `std::str::Split<'_,\
    \ char>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() {\n\
    \            if let Some(letter) = s.chars().next() {\n                word.push(letter);\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    words.push(word);\n        s = String::from(\"\");\n    }\n    words\n}\n\
    \nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976108
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        let mut c = s.chars();\n \
    \       while let Some(item) = c.next() {\n            if item.is_whitespace()\
    \ {\n                continue;\n            }\n            word.push(item.unwrap());\n\
    \        }\n        words.push(word);\n        s = String::from(word.as_str());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpj8n5088u.rs:14:28\n   |\n14 |             word.push(item.unwrap());\n\
    \   |                            ^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push_back(word);\n    }\n    return words;\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmppqujh0ek.rs:8:15\n  |\n8 |         words.push_back(word);\n\
    \  |               ^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppqujh0ek.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ while i < s.len() && s.chars().any(|c| c == ',' || c == ' ') {\n           \
    \ word.push(s.chars().next().unwrap());\n            i += 1;\n        }\n    \
    \    words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"HHHHHHHHHHHHHHHHHHH\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"]`', /tmp/tmpqt9_7157.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        word.push_str(s);\n      \
    \  word.push(',');\n        word.push(' ');\n        word.push_str(s);\n     \
    \   word.push(',');\n        word.push(' ');\n        word.push_str(s);\n    \
    \    word.push(',');\n        word.push(' ');\n        word.push_str(s);\n   \
    \     word.push(',');\n        word.push(' ');\n        word.push_str(s);\n  \
    \      word.push(',');\n        word.push(' ');\n        word.push_str(s);\n \
    \       word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpqic7n6wh.rs:88:19\n\
    \   |\n88 |         word.push(',\n   |                   ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpn4m4w5yf.rs:7:11\n  |\n7 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpn4m4w5yf.rs:7:34\n  |\n7 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpn4m4w5yf.rs:8:5\n  |\n4 | fn words_string(s:\
    \ String) -> Vec<String> {\n  |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n8 |     words\n  |     ^^^^^ expected\
    \ struct `Vec`, found struct `SplitWhitespace`\n  |\n  = note: expected struct\
    \ `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ let mut j = i;\n        while j < s.len() && s[j] == ' ' {\n            word.push_str(&s[j..]);\n\
    \            j += 1;\n        }\n        word.push_str(&s[j..]);\n        word.push_str(\"\
    ,\");\n        words.push(word);\n        i += 1;\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpminbqzjz.rs:11:30\n\
    \   |\n11 |         while j < s.len() && s[j] == ' ' {\n   |                 \
    \             ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.is_whitespace() {\n                break;\n            }\n   \
    \         word.push(s.chars().next().unwrap());\n        }\n        words.push(word);\n\
    \        s = String::from(word.as_str());\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp534nc90y.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_whitespace`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() {\n\
    \            if s.is_whitespace() {\n                break;\n            }\n \
    \           word.push(s.chars().next().unwrap());\n            s = s.chars().skip(1).collect();\n\
    \        }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n  \
    \  let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpzsopo4mq.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_ascii_whitespace`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(',');\n    for word in\
    \ words {\n        words.push_back(word);\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp9kfdlxti.rs:8:15\n  |\n8 |         words.push_back(word);\n\
    \  |               ^^^^^^^^^ method not found in `std::str::Split<'_, char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9kfdlxti.rs:10:12\n   |\n4  |\
    \ fn words_string(s: String) -> Vec<String> {\n   |                          \
    \     ----------- expected `Vec<String>` because of return type\n...\n10 |   \
    \  return words;\n   |            ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `std::str::Split<'_,\
    \ char>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(',');\n    words.clone_from_slice(words.iter().cloned());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpqya_kngp.rs:7:11\n  |\n7 |     words.clone_from_slice(words.iter().cloned());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `std::str::Split<'_, char>`\n\
    \nerror[E0599]: no method named `iter` found for struct `std::str::Split` in the\
    \ current scope\n --> /tmp/tmpqya_kngp.rs:7:34\n  |\n7 |     words.clone_from_slice(words.iter().cloned());\n\
    \  |                                  ^^^^ method not found in `std::str::Split<'_,\
    \ char>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqya_kngp.rs:8:5\n  |\n\
    4 | fn words_string(s: String) -> Vec<String> {\n  |                         \
    \      ----------- expected `Vec<String>` because of return type\n...\n8 |   \
    \  words\n  |     ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n\
    \  |\n  = note: expected struct `Vec<String>`\n             found struct `std::str::Split<'_,\
    \ char>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push_back(word);\n    }\n    return words;\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmppqujh0ek.rs:8:15\n  |\n8 |         words.push_back(word);\n\
    \  |               ^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppqujh0ek.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        let mut\
    \ j = i;\n        while j < s.len() && s.chars().any(|c| c == ',' || c == ' ')\
    \ {\n            word.push(s.chars().nth(j).unwrap());\n            j = j + 1;\n\
    \        }\n        word.push(s.chars().nth(j).unwrap());\n        words.push(word);\n\
    \        i = j;\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpwhv70zs1.rs:15:36

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        word.push_str(s);\n      \
    \  word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\",\");\n        word.push_str(s);\n        word.push_str(\"\
    ,\");\n        word.push_str(s);\n        word.push_str(\",\");\n        word.push_str(s);\n\
    \        word.push_str(\"\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpcyux_lmz.rs:92:109\n\
    \   |\n92 |       assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n   |  _____________________________________________________________________________________________________________^\n\
    93 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut words = s.split_whitespace();\n    for word\
    \ in words {\n        words.push(word);\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp78xytpwn.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp78xytpwn.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        let mut c = s.chars();\n \
    \       while !c.next().is_none() {\n            word.push(*c);\n        }\n \
    \       words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `Chars<'_>` cannot be dereferenced\n  --> /tmp/tmpudwuolh_.rs:11:23\n\
    \   |\n11 |             word.push(*c);\n   |                       ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.is_whitespace() {\n                break;\n            }\n   \
    \         word.push(s.chars().next().unwrap());\n            s = s.chars().skip(1).collect();\n\
    \        }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n  \
    \  let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpo2yt72_p.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_ascii_whitespace`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(\",\");\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmphz14bz4z.rs:7:11\n  |\n7 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\
    \nerror[E0599]: no method named `as_slice` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmphz14bz4z.rs:7:34\n  |\n7 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `std::str::Split<'_,\
    \ &str>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmphz14bz4z.rs:8:5\n  |\n\
    4 | fn words_string(s: String) -> Vec<String> {\n  |                         \
    \      ----------- expected `Vec<String>` because of return type\n...\n8 |   \
    \  words\n  |     ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n\
    \  |\n  = note: expected struct `Vec<String>`\n             found struct `std::str::Split<'_,\
    \ &str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(\",\");\n    for word in\
    \ words {\n        words.clear();\n        let mut words = word.splitn(2);\n \
    \       for word in words {\n            words.clear();\n            words.push(word);\n\
    \        }\n    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clear` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpcj13nnei.rs:8:15\n  |\n8 |         words.clear();\n\
    \  |               ^^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0061]:\
    \ this function takes 2 arguments but 1 argument was supplied\n    --> /tmp/tmpcj13nnei.rs:9:30\n\
    \     |\n9    |         let mut words = word.splitn(2);\n     |              \
    \                ^^^^^^ - supplied 1 argument\n     |                        \
    \      |\n     |                              expected 2 arguments\n     |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `clear` found\
    \ for struct `std::str::SplitN` in the current scope\n  --> /tmp/tmpcj13nnei.rs:11:19\n\
    \   |\n11 |             words.clear();\n   |                   ^^^^^ method not\
    \ found in `std::str::SplitN<'_, _>`\n\nerror[E0599]: no method named `push` found\
    \ for struct `std::str::SplitN` in the current scope\n  --> /tmp/tmpcj13nnei.rs:12:19\n\
    \   |\n12 |             words.push(word);\n   |                   ^^^^ method\
    \ not found in `std::str::SplitN<'_, _>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpcj13nnei.rs:15:12\n   |\n4  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n15 |     return words;\n   |            ^^^^^ expected\
    \ struct `Vec`, found struct `std::str::Split`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `std::str::Split<'_, &str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.chars().next().unwrap() == ',' {\n                word.push(s.chars().next().unwrap());\n\
    \                s.truncate(0);\n            } else {\n                word.push(s.chars().next().unwrap());\n\
    \                break;\n            }\n        }\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976108
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ while i < s.len() && s.chars().any(|c| c.is_whitespace()) {\n            i +=\
    \ 1;\n        }\n        if i < s.len() {\n            word = s.split_whitespace().collect();\n\
    \        }\n        i += 1;\n        words.push(word);\n    }\n    words\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"John\"]`', /tmp/tmpg5z_i29l.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        let mut c = s.chars();\n \
    \       while let Some(next) = c.next() {\n            word.push(next.unwrap());\n\
    \        }\n        words.push(word);\n        s = String::from(word.as_str());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpcrpyfryx.rs:11:28\n   |\n11 |             word.push(next.unwrap());\n\
    \   |                            ^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().next().unwrap() != ',' {\n            word.push(s.chars().next().unwrap());\n\
    \        }\n        word.push(',');\n        word.push(' ');\n        words.push(word);\n\
    \        s = String::from(s.chars().next().unwrap());\n    }\n    words\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976108
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().next().unwrap() == ',' {\n            word.push_str(s.chars().next().unwrap());\n\
    \            s.push_str(String::from(\",\"));\n        }\n        word.push_str(s);\n\
    \        word.push_str(String::from(\",\"));\n        words.push(word);\n    \
    \    s = String::from(\"\");\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr4f3gej1.rs:10:27\n   |\n\
    10 |             word.push_str(s.chars().next().unwrap());\n   |             \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr4f3gej1.rs:11:24\n   |\n11 |             s.push_str(String::from(\"\
    ,\"));\n   |                        ^^^^^^^^^^^^^^^^^\n   |                  \
    \      |\n   |                        expected `&str`, found struct `String`\n\
    \   |                        help: consider borrowing here: `&String::from(\"\
    ,\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr4f3gej1.rs:13:23\n   |\n\
    13 |         word.push_str(s);\n   |                       ^\n   |           \
    \            |\n   |                       expected `&str`, found struct `String`\n\
    \   |                       help: consider borrowing here: `&s`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr4f3gej1.rs:14:23\n   |\n14 |         word.push_str(String::from(\"\
    ,\"));\n   |                       ^^^^^^^^^^^^^^^^^\n   |                   \
    \    |\n   |                       expected `&str`, found struct `String`\n  \
    \ |                       help: consider borrowing here: `&String::from(\",\"\
    )`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(',');\n    words.clone_from_slice(words.iter().cloned());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpqya_kngp.rs:7:11\n  |\n7 |     words.clone_from_slice(words.iter().cloned());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `std::str::Split<'_, char>`\n\
    \nerror[E0599]: no method named `iter` found for struct `std::str::Split` in the\
    \ current scope\n --> /tmp/tmpqya_kngp.rs:7:34\n  |\n7 |     words.clone_from_slice(words.iter().cloned());\n\
    \  |                                  ^^^^ method not found in `std::str::Split<'_,\
    \ char>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqya_kngp.rs:8:5\n  |\n\
    4 | fn words_string(s: String) -> Vec<String> {\n  |                         \
    \      ----------- expected `Vec<String>` because of return type\n...\n8 |   \
    \  words\n  |     ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n\
    \  |\n  = note: expected struct `Vec<String>`\n             found struct `std::str::Split<'_,\
    \ char>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(',');\n    for word in\
    \ words {\n        words.insert(word.trim(), \"\");\n    }\n    return words;\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `insert` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp8d19_80f.rs:8:15\n  |\n8 |         words.insert(word.trim(),\
    \ \"\");\n  |               ^^^^^^ method not found in `std::str::Split<'_, char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8d19_80f.rs:10:12\n   |\n4  |\
    \ fn words_string(s: String) -> Vec<String> {\n   |                          \
    \     ----------- expected `Vec<String>` because of return type\n...\n10 |   \
    \  return words;\n   |            ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `std::str::Split<'_,\
    \ char>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() {\n\
    \            if s.is_whitespace() {\n                word.push_str(\" \");\n \
    \               break;\n            }\n            word.push_str(s.trim_end());\n\
    \            s = s.trim_end();\n        }\n        words.push_back(word);\n  \
    \  }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpi7h75h3m.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_ascii_whitespace`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi7h75h3m.rs:15:17\n   |\n6  |     let mut s\
    \ = String::from(s);\n   |                 --------------- expected due to this\
    \ value\n...\n15 |             s = s.trim_end();\n   |                 ^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                 |\n\
    \   |                 expected struct `String`, found `&str`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `Vec<_>` in the current scope\n\
    \  --> /tmp/tmpi7h75h3m.rs:17:15\n   |\n17 |         words.push_back(word);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() {\n\
    \            if s.starts_with(',') {\n                let mut s = String::from(s.trim_start().trim_end());\n\
    \                while !s.is_empty() {\n                    let c = s.chars().next().unwrap();\n\
    \                    if !c.is_digit() {\n                        break;\n    \
    \                }\n                    word.push(c);\n                    s =\
    \ s.trim_start();\n                }\n            } else {\n                let\
    \ mut s = String::from(s.trim_start().trim_end());\n                while !s.is_empty()\
    \ {\n                    let c = s.chars().next().unwrap();\n                \
    \    if !c.is_digit() {\n                        break;\n                    }\n\
    \                    word.push(c);\n                    s = s.trim_start();\n\
    \                }\n            }\n        }\n        words.push(word);\n    }\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmphn1zzx3v.rs:14:27\n    |\n14  |                     if !c.is_digit()\
    \ {\n    |                           ^^^^^^^^- supplied 0 arguments\n    |   \
    \                        |\n    |                           expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphn1zzx3v.rs:18:25\n   |\n11 |                 let mut s = String::from(s.trim_start().trim_end());\n\
    \   |                             --------------------------------------- expected\
    \ due to this value\n...\n18 |                     s = s.trim_start();\n   | \
    \                        ^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                         |\n   |                       \
    \  expected struct `String`, found `&str`\n\nerror[E0061]: this function takes\
    \ 1 argument but 0 arguments were supplied\n   --> /tmp/tmphn1zzx3v.rs:24:27\n\
    \    |\n24  |                     if !c.is_digit() {\n    |                  \
    \         ^^^^^^^^- supplied 0 arguments\n    |                           |\n\
    \    |                           expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphn1zzx3v.rs:28:25\n\
    \   |\n21 |                 let mut s = String::from(s.trim_start().trim_end());\n\
    \   |                             --------------------------------------- expected\
    \ due to this value\n...\n28 |                     s = s.trim_start();\n   | \
    \                        ^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                         |\n   |                       \
    \  expected struct `String`, found `&str`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          let c = s.chars().next().unwrap();\n            if c == ',' || c ==\
    \ ' ' {\n                break;\n            }\n            word.push(c);\n  \
    \      }\n        words.push(word);\n        s = String::from(word);\n    }\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `word`\n  --> /tmp/tmpo2nggzh6.rs:17:26\n\
    \   |\n8  |         let mut word = String::new();\n   |             -------- move\
    \ occurs because `word` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n16 |         words.push(word);\n   |                    ---- value\
    \ moved here\n17 |         s = String::from(word);\n   |                     \
    \     ^^^^ value used here after move\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(\",\").map(|x| x.trim()).collect();\n\
    \    words.sort();\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpzizj7fh2.rs:7:5\n \
    \ |\n6 |     let mut words = s.split(\",\").map(|x| x.trim()).collect();\n  |\
    \         --------- consider giving `words` a type\n7 |     words.sort();\n  |\
    \     ^^^^^ cannot infer type\n  |\n  = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().next().unwrap() != ',' {\n            word.push(s.chars().next().unwrap());\n\
    \        }\n        word.push(',');\n        words.push(word);\n        s = String::from(s.chars().next().unwrap());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976108
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ let mut j = i;\n        while j < s.len() && s.chars().any(|c| c == ',' || c\
    \ == ' ') {\n            word.push(s.chars().nth(j).unwrap());\n            j\
    \ = j + 1;\n        }\n        word.push(s.chars().nth(j).unwrap());\n       \
    \ words.push(word);\n        i = j;\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpavpocsih.rs:15:36

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().all(|c| !c.is_whitespace()) {\n            word.push(s.chars().next().unwrap());\n\
    \            s = s.chars().take_while(|c| !c.is_whitespace()).collect();\n   \
    \     }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976108
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ while i < s.len() && s.chars().any(|c| c == ',' || c == ' ') {\n           \
    \ word.push(s.chars().next().unwrap());\n            i += 1;\n        }\n    \
    \    words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"HHHHHHHHHHHHHHHHHHH\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"]`', /tmp/tmpjmk8r2mu.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(',');\n    for word in\
    \ words {\n        words.push(word.trim());\n    }\n    return words;\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpltvtx074.rs:8:15\n  |\n8 |         words.push(word.trim());\n\
    \  |               ^^^^ method not found in `std::str::Split<'_, char>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpltvtx074.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `std::str::Split<'_,\
    \ char>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        let mut\
    \ j = i;\n        while j < s.len() && s.chars().any(|c| c == ',' || c == ' ')\
    \ {\n            word.push(s.chars().nth(j).unwrap());\n            j = j + 1;\n\
    \        }\n        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp88p5szen.rs:59:3\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n8  |     while i < s.len()\
    \ {\n   |                       - this delimiter might not be properly closed...\n\
    ...\n49 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    59 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp88p5szen.rs:4:31\n\
    \  |\n4 | fn words_string(s: String) -> Vec<String> {\n  |    ------------   \
    \            ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        word.push_str(s);\n      \
    \  word.push(',');\n        word.push(' ');\n        word.push_str(s);\n     \
    \   word.push(',');\n        word.push(' ');\n        word.push_str(s);\n    \
    \    word.push(',');\n        word.push(' ');\n        word.push_str(s);\n   \
    \     word.push(',');\n        word.push(' ');\n        word.push_str(s);\n  \
    \      word.push(',');\n        word.push(' ');\n        word.push_str(s);\n \
    \       word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push(' ');\n        word.push_str(s);\n\
    \        word.push(',\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpqic7n6wh.rs:88:19\n\
    \   |\n88 |         word.push(',\n   |                   ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().all(|c| !c.is_whitespace()) {\n            word.push(s.chars().next().unwrap());\n\
    \            s = &s[1..];\n        }\n        words.push(word);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpib0b9zel.rs:11:17\n   |\n\
    6  |     let mut s = String::from(s);\n   |                 --------------- expected\
    \ due to this value\n...\n11 |             s = &s[1..];\n   |                \
    \ ^^^^^^^ expected struct `String`, found `&str`\n   |\nhelp: try using a conversion\
    \ method\n   |\n11 |             s = (&s[1..]).to_string();\n   |            \
    \     +       +++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        word.push_str(s);\n      \
    \  word.push(',');\n        word.push_str(s);\n        word.push(',');\n     \
    \   word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n  \
    \      word.push(',');\n        word.push_str(s);\n        word.push(',');\n \
    \       word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpdvo5sv02.rs:88:19\n\
    \   |\n88 |         word.push(',\n   |                   ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ while i < s.len() && s.chars().any(|c| c == ',' || c == ' ') {\n           \
    \ word.push(s.chars().next().unwrap());\n            i += 1;\n        }\n    \
    \    words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"HHHHHHHHHHHHHHHHHHH\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"]`', /tmp/tmpqt9_7157.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        let mut\
    \ j = i;\n        while j < s.len() && s.chars().any(|c| c == ',' || c == ' ')\
    \ {\n            word.push(s.chars().nth(j).unwrap());\n            j = j + 1;\n\
    \        }\n        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp88p5szen.rs:59:3\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n8  |     while i < s.len()\
    \ {\n   |                       - this delimiter might not be properly closed...\n\
    ...\n49 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    59 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp88p5szen.rs:4:31\n\
    \  |\n4 | fn words_string(s: String) -> Vec<String> {\n  |    ------------   \
    \            ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ while i < s.len() && s.chars().any(|c| c == ',' || c == ' ') {\n           \
    \ word.push(s.chars().next().unwrap());\n            i += 1;\n        }\n    \
    \    words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"HHHHHHHHHHHHHHHHHHH\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"]`', /tmp/tmpqt9_7157.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().next().unwrap() != ',' {\n            word.push(s.chars().next().unwrap());\n\
    \        }\n        word.push(',');\n        word.push(' ');\n        word.push('\\\
    n');\n        word.push('\\r');\n        word.push('\\t');\n        word.push('\
    \ ');\n        word.push(',');\n        word.push(' ');\n        word.push(',');\n\
    \        word.push(' ');\n        word.push(',');\n        word.push(' ');\n \
    \       word.push(',');\n        word.push(' ');\n        word.push(',');\n  \
    \      word.push(' ');\n        word.push(',');\n        word.push(' ');\n   \
    \     word.push(',');\n        word.push(' ');\n        word.push(',');\n    \
    \    word.push(' ');\n        word.push(',');\n        word.push(' ');\n     \
    \   word.push(',');\n        word.push(' ');\n        word.push(',');\n      \
    \  word.push(' ');\n        word.push(',');\n        word.push(' ');\n       \
    \ word.push(',');\n        word.push(' ');\n        word.push(',');\n        word.push('\
    \ ');\n        word.push(',');\n        word.push(' ');\n        word.push(',');\n\
    \        word.push(' ');\n        word.push(',');\n        word.push(' ');\n \
    \       word.push(',');\n        word.push(' ');\n        word.push(',');\n  \
    \      word.push(' ');\n        word.push(',');\n        word.push(' ');\n   \
    \     word.push(',');\n        word.push(' ');\n        word.push(',');\n    \
    \    word.push(' ');\n        word.push(',');\n        word.push(' ');\n     \
    \   word.push(',');\n        word.push(' ');\n        word.push(',');\n      \
    \  word.push(' ');\n        word.push(',');\n        word.push(' ');\n       \
    \ word.push(',');\n        word.push(' ');\n        word.push(',');\n        word.push('\
    \ ');\n        word.push(',');\n        word.push(' ');\n        word.push(',');\n\
    \        word.push(' ');\n        word.push(',');\n        word.push(' ');\n \
    \       word.push(',');\n        word.push(' ');\n        word.push(',');\n  \
    \      word.push(' ');\n        word.push(',');\n        word.push(' ');\n   \
    \     word.push(',');\n        \n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp2lbhowiw.rs:98:3\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n7  |     while !s.is_empty()\
    \ {\n   |                         - this delimiter might not be properly closed...\n\
    ...\n88 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    98 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2lbhowiw.rs:4:31\n\
    \  |\n4 | fn words_string(s: String) -> Vec<String> {\n  |    ------------   \
    \            ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut words = s.split_whitespace();\n    for word\
    \ in words {\n        words.push(word);\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp78xytpwn.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp78xytpwn.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1xi3_uu3.rs:7:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n7 |     words.collect::<Vec<_>>()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&str`\n  |\n\
    \  = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpmmnc532i.rs:7:11\n     |\n7  \
    \  |     words.collect::<Vec<String>>()\n     |           ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut j = i;\n        while j < s.len() &&\
    \ s.chars().any(|c| c == ',' || c == ' ') {\n            j = j + 1;\n        }\n\
    \        let word = s.split_at(j).collect::<Vec<String>>();\n        words.extend_from_slice(word);\n\
    \        i = j;\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `(&str, &str)` is not an iterator\n  --> /tmp/tmpwform_7d.rs:13:34\n\
    \   |\n13 |         let word = s.split_at(j).collect::<Vec<String>>();\n   | \
    \                                 ^^^^^^^ `(&str, &str)` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `(&str,\
    \ &str): Iterator`\n           which is required by `&mut (&str, &str): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        let mut c = s.chars();\n \
    \       while !c.next().is_none() {\n            word.push(*c);\n        }\n \
    \       words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `Chars<'_>` cannot be dereferenced\n  --> /tmp/tmpudwuolh_.rs:11:23\n\
    \   |\n11 |             word.push(*c);\n   |                       ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        let mut\
    \ j = i;\n        while j < s.len() && s.chars().any(|c| c == ',' || c == ' ')\
    \ {\n            word.push(s.chars().nth(j).unwrap());\n            j = j + 1;\n\
    \        }\n        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n        word.push(s.chars().nth(j).unwrap());\n\
    \        word.push(s.chars().nth(j).unwrap());\n\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp88p5szen.rs:59:3\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n8  |     while i < s.len()\
    \ {\n   |                       - this delimiter might not be properly closed...\n\
    ...\n49 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    59 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp88p5szen.rs:4:31\n\
    \  |\n4 | fn words_string(s: String) -> Vec<String> {\n  |    ------------   \
    \            ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() {\n\
    \            if s.starts_with(',') {\n                let mut s = String::from(s.trim_start().trim_end());\n\
    \                while !s.is_empty() {\n                    let c = s.chars().next().unwrap();\n\
    \                    if c == ',' {\n                        break;\n         \
    \           }\n                    word.push(c);\n                    s = s.trim_start();\n\
    \                }\n            } else {\n                let mut s = String::from(s.trim_end());\n\
    \                while !s.is_empty() {\n                    let c = s.chars().next().unwrap();\n\
    \                    if c == ' ' {\n                        break;\n         \
    \           }\n                    word.push(c);\n                    s = s.trim_end();\n\
    \                }\n            }\n        }\n        words.push_back(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplklslv3_.rs:18:25\n   |\n\
    11 |                 let mut s = String::from(s.trim_start().trim_end());\n  \
    \ |                             --------------------------------------- expected\
    \ due to this value\n...\n18 |                     s = s.trim_start();\n   | \
    \                        ^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                         |\n   |                       \
    \  expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmplklslv3_.rs:28:25\n   |\n21 |                 let mut s = String::from(s.trim_end());\n\
    \   |                             -------------------------- expected due to this\
    \ value\n...\n28 |                     s = s.trim_end();\n   |               \
    \          ^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                         |\n   |                         expected struct\
    \ `String`, found `&str`\n\nerror[E0599]: no method named `push_back` found for\
    \ struct `Vec<_>` in the current scope\n  --> /tmp/tmplklslv3_.rs:32:15\n   |\n\
    32 |         words.push_back(word);\n   |               ^^^^^^^^^ method not found\
    \ in `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        let mut c = s.chars();\n \
    \       while let Some(next) = c.next() {\n            word.push(next.unwrap());\n\
    \        }\n        words.push(word);\n        s = String::from(word.to_string());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpwmmdvd9z.rs:11:28\n   |\n11 |             word.push(next.unwrap());\n\
    \   |                            ^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() {\n\
    \            let c = s.chars().next().unwrap();\n            if !c.is_whitespace()\
    \ {\n                word.push(c);\n            } else {\n                break;\n\
    \            }\n        }\n        words.push(word);\n        s = String::from(\"\
    \");\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976108
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        let mut\
    \ j = i;\n        while j < s.len() && s.chars().all(|c| !c.is_whitespace()) {\n\
    \            word.push(s.chars().next().unwrap());\n            j = j + 1;\n \
    \       }\n        word.push(',');\n        word.push(' ');\n        word.push('\
    \ ');\n        word.push(' ');\n        word.push(' ');\n        word.push(' ');\n\
    \        word.push(' ');\n        word.push(' ');\n        word.push(' ');\n \
    \       word.push(' ');\n        word.push(' ');\n        word.push(' ');\n  \
    \      word.push(' ');\n        word.push(' ');\n        word.push(' ');\n   \
    \     word.push(' ');\n        word.push(' ');\n        word.push(' ');\n    \
    \    word.push(' ');\n        word.push(' ');\n        word.push(' ');\n     \
    \   word.push(' ');\n        word.push(' ');\n        word.push(' ');\n      \
    \  word.push(' ');\n        word.push(' ');\n        word.push(' ');\n       \
    \ word.push(' ');\n        word.push(' ');\n        word.push(' ');\n        word.push('\
    \ ');\n        word.push(' ');\n        word.push(' ');\n        word.push(' ');\n\
    \        word.push(' ');\n        word.push(' ');\n        word.push(' ');\n \
    \       word.push(' ');\n        word.push(' ');\n        word.push(' ');\n  \
    \      word.push(' ');\n        word.push(' ');\n        word.push(' ');\n   \
    \     word.push(' ');\n        word.push(' ');\n        word.push(' ');\n    \
    \    word.push(' ');\n        word.push(' ');\n        word.push(' ');\n     \
    \   word.push(' ');\n        word.push(' ');\n        word.push(' ');\n      \
    \  word.push(' ');\n        word.push(' ');\n        word.push(' ');\n       \
    \ word.push(' ');\n        word.push(' ');\n        word.push(' ');\n        word.push('\
    \ ');\n        word.push(' ');\n        word.push(' ');\n        word.push(' ');\n\
    \        word.push(' ');\n        word.push(' ');\n        word.push(' ');\n \
    \       word.push(' ');\n        word.push(' ');\n        word.push(' ');\n  \
    \      word.push(' ');\n        word.push(' ');\n        word.push(' ');\n   \
    \     word.push(' ');\n        \n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmplx7m0j5u.rs:98:3\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n8  |     while i < s.len()\
    \ {\n   |                       - this delimiter might not be properly closed...\n\
    ...\n88 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    98 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmplx7m0j5u.rs:4:31\n\
    \  |\n4 | fn words_string(s: String) -> Vec<String> {\n  |    ------------   \
    \            ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().next().unwrap() != ',' {\n            word.push(s.chars().next().unwrap());\n\
    \        }\n        word.push(',');\n        words.push(word);\n        s = String::from(s.chars().next().unwrap());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976108
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut split\
    \ = false;\n    while !s.is_empty() {\n        if s.is_whitespace() {\n      \
    \      split = true;\n        } else {\n            if !split {\n            \
    \    words.push(s);\n            }\n            split = false;\n        }\n  \
    \      s = s.trim_end().trim_start();\n    }\n    words\n}\n\nfn main() {\n  \
    \  let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpi9cgck8t.rs:9:14\n  |\n9 |         if s.is_whitespace()\
    \ {\n  |              ^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `split_ascii_whitespace`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpi9cgck8t.rs:17:13\n   |\n6  |     let mut s = String::from(s);\n\
    \   |                 --------------- expected due to this value\n...\n17 |  \
    \       s = s.trim_end().trim_start();\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |             |\n  \
    \ |             expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        let mut c = s.chars();\n \
    \       while !c.next().is_none() {\n            word.push(*c);\n        }\n \
    \       word.push(',');\n        word.push(' ');\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `Chars<'_>` cannot be dereferenced\n  --> /tmp/tmpb6gumnx8.rs:11:23\n\
    \   |\n11 |             word.push(*c);\n   |                       ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut j = i;\n        while j < s.len() &&\
    \ s.chars().any(|c| c == ',' || c == ' ') {\n            j += 1\n        }\n \
    \       words.push(s.split_whitespace().collect::<Vec<_>>());\n        i = j;\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpucbagjnb.rs:16:5\n   |\n\
    4  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n16 |\
    \     words\n   |     ^^^^^ expected struct `String`, found struct `Vec`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<&str>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpmmnc532i.rs:7:11\n     |\n7  \
    \  |     words.collect::<Vec<String>>()\n     |           ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() {\n\
    \            if s.is_whitespace() {\n                break;\n            }\n \
    \           word.push(s.chars().next().unwrap());\n            s = s.chars().skip(1).collect();\n\
    \        }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n  \
    \  let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpzsopo4mq.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_ascii_whitespace`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(',');\n    for word in\
    \ words {\n        words.push_back(word);\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp9kfdlxti.rs:8:15\n  |\n8 |         words.push_back(word);\n\
    \  |               ^^^^^^^^^ method not found in `std::str::Split<'_, char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9kfdlxti.rs:10:12\n   |\n4  |\
    \ fn words_string(s: String) -> Vec<String> {\n   |                          \
    \     ----------- expected `Vec<String>` because of return type\n...\n10 |   \
    \  return words;\n   |            ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `std::str::Split<'_,\
    \ char>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        let mut\
    \ j = i;\n        while j < s.len() && s.chars().all(|c| !c.is_whitespace()) {\n\
    \            word.push(s.chars().next().unwrap());\n            j = j + 1;\n \
    \       }\n        word.push(s.chars().next().unwrap());\n        words.push(word);\n\
    \        i = j;\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976108
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(',');\n    for word in\
    \ words {\n        words.clear();\n        let mut words = word.split_whitespace();\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clear` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpb524838w.rs:8:15\n  |\n8 |         words.clear();\n\
    \  |               ^^^^^ method not found in `std::str::Split<'_, char>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb524838w.rs:11:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n11 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `std::str::Split<'_,\
    \ char>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpn4m4w5yf.rs:7:11\n  |\n7 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpn4m4w5yf.rs:7:34\n  |\n7 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpn4m4w5yf.rs:8:5\n  |\n4 | fn words_string(s:\
    \ String) -> Vec<String> {\n  |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n8 |     words\n  |     ^^^^^ expected\
    \ struct `Vec`, found struct `SplitWhitespace`\n  |\n  = note: expected struct\
    \ `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.is_whitespace() {\n                break;\n            }\n   \
    \         word.push(s.chars().next().unwrap());\n            s.next();\n     \
    \   }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpc4gxued4.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_whitespace`\n\nerror[E0599]:\
    \ no method named `next` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpc4gxued4.rs:14:15\n   |\n14 |             s.next();\n   |          \
    \     ^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() {\n\
    \            if s.is_whitespace() {\n                break;\n            }\n \
    \           word.push(s.chars().next().unwrap());\n            s = s.chars().skip(1).collect();\n\
    \        }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n  \
    \  let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpzsopo4mq.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_ascii_whitespace`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.is_whitespace() {\n                break;\n            }\n   \
    \         word.push(*s);\n            s.next();\n        }\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp2q9zooq7.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_ascii_whitespace`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2q9zooq7.rs:13:23\n   |\n13 |             word.push(*s);\n\
    \   |                       ^^ expected `char`, found `str`\n\nerror[E0599]: no\
    \ method named `next` found for struct `String` in the current scope\n  --> /tmp/tmp2q9zooq7.rs:14:15\n\
    \   |\n14 |             s.next();\n   |               ^^^^ method not found in\
    \ `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s.chars().any(|c| c == ',' || c == ' ') {\n\
    \            words.push_back(s.split_whitespace()[i]);\n            i += 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpbaa0k79k.rs:10:19\n   |\n10 |             words.push_back(s.split_whitespace()[i]);\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0608]:\
    \ cannot index into a value of type `SplitWhitespace<'_>`\n  --> /tmp/tmpbaa0k79k.rs:10:29\n\
    \   |\n10 |             words.push_back(s.split_whitespace()[i]);\n   |      \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() {\n\
    \            if s.chars().next().unwrap() == ',' {\n                word.push_str(&word);\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().unwrap());\n\
    \                word.push_str(&s.chars().next().unwrap());\n                word.push_str(&s.chars().next().\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp54j1p67f.rs:60:3\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n7  |     while !s.is_empty()\
    \ {\n   |                         - unclosed delimiter\n8  |         let mut word\
    \ = String::from(\"\");\n9  |         while !s.is_empty() {\n   |            \
    \                 - unclosed delimiter\n10 |             if s.chars().next().unwrap()\
    \ == ',' {\n   |                                                 - this delimiter\
    \ might not be properly closed...\n...\n50 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n60 | }\n   |   ^\n\nerror: unexpected token:\
    \ `)`\n  --> /tmp/tmp54j1p67f.rs:50:1\n   |\n50 | }\n   | ^\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmp54j1p67f.rs:49:30\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                                           - closing\
    \ delimiter possibly meant for this\n...\n49 |                 word.push_str(&s.chars().next().\n\
    \   |                              ^ unclosed delimiter\n50 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp54j1p67f.rs:12:31\n\
    \   |\n12 |                 word.push_str(&s.chars().next().unwrap());\n   | \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found\
    \ `char`\n   |\n   = note: expected reference `&str`\n              found reference\
    \ `&char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp54j1p67f.rs:13:31\n\
    \   |\n13 |                 word.push_str(&s.chars().next().unwrap());\n   | \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found\
    \ `char`\n   |\n   = note: expected reference `&str`\n              found reference\
    \ `&char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp54j1p67f.rs:14:31\n\
    \   |\n14 |                 word.push_str(&s.chars().next().unwrap());\n   | \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found\
    \ `char`\n   |\n   = note: expected reference `&str`\n              found reference\
    \ `&char`\n\nerror[E03"
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut words = s.split_whitespace();\n    for word\
    \ in words {\n        words.push(word);\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp78xytpwn.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp78xytpwn.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        word.push_str(s);\n      \
    \  word.push(',');\n        word.push_str(s);\n        word.push(',');\n     \
    \   word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n  \
    \      word.push(',');\n        word.push_str(s);\n        word.push(',');\n \
    \       word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpdvo5sv02.rs:88:19\n\
    \   |\n88 |         word.push(',\n   |                   ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut j = i;\n        while j < s.len() &&\
    \ s.chars().any(|c| c == ',' || c == ' ') {\n            j = j + 1;\n        }\n\
    \        words.push(s.split_whitespace().collect::<Vec<_>>());\n        i = j;\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqq91nu1h.rs:16:5\n   |\n\
    4  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n16 |\
    \     words\n   |     ^^^^^ expected struct `String`, found struct `Vec`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<&str>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&s[s.len() - 1..]);\n        word.push_str(&s[0..s.len()\
    \ - 1]);\n        word.push_str(&\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpphfxqzf2.rs:55:3\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n7  |     while !s.is_empty()\
    \ {\n   |                         - this delimiter might not be properly closed...\n\
    ...\n45 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    55 | }\n   |   ^\n\nerror: expected expression, found `)`\n  --> /tmp/tmpphfxqzf2.rs:45:1\n\
    \   |\n45 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpphfxqzf2.rs:44:22\n   |\n4  | fn words_string(s: String)\
    \ -> Vec<String> {\n   |                                           - closing delimiter\
    \ possibly meant for this\n...\n44 |         word.push_str(&\n   |           \
    \           ^ unclosed delimiter\n45 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpphfxqzf2.rs:4:31\n  |\n4 | fn words_string(s:\
    \ String) -> Vec<String> {\n  |    ------------               ^^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n  |\n  = note: expected struct `Vec<String>`\n\
    \          found unit type `()`\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(\",\").map(|s| s.trim()).collect();\n\
    \    words.sort_unstable();\n    words\n}\n\nfn main() {\n    let candidate =\
    \ words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp4540pku4.rs:7:5\n \
    \ |\n6 |     let mut words = s.split(\",\").map(|s| s.trim()).collect();\n  |\
    \         --------- consider giving `words` a type\n7 |     words.sort_unstable();\n\
    \  |     ^^^^^ cannot infer type\n  |\n  = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1xi3_uu3.rs:7:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n7 |     words.collect::<Vec<_>>()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&str`\n  |\n\
    \  = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().next().unwrap() != ',' {\n            word.push(s.chars().next().unwrap());\n\
    \        }\n        words.push(word);\n        s = String::from(s.chars().next().unwrap());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659748081
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s.chars().any(|c| c == ',' || c == ' ') {\n\
    \            words.push_back(s.split_whitespace().collect::<Vec<String>>().to_owned());\n\
    \            i += 1;\n        } else {\n            words.push_back(s.split_whitespace().collect::<Vec<String>>().to_owned());\n\
    \            i += 1;\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpbzgkgr1w.rs:10:19\n   |\n10 |             words.push_back(s.split_whitespace().collect::<Vec<String>>().to_owned());\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&str`\n    --> /tmp/tmpbzgkgr1w.rs:10:50\n     |\n10   |          \
    \   words.push_back(s.split_whitespace().collect::<Vec<String>>().to_owned());\n\
    \     |                                                  ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0599]: no method named `push_back` found for\
    \ struct `Vec<_>` in the current scope\n  --> /tmp/tmpbzgkgr1w.rs:13:19\n   |\n\
    13 |             words.push_back(s.split_whitespace().collect::<Vec<String>>().to_owned());\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&str`\n    --> /tmp/tmpbzgkgr1w.rs:13:50\n     |\n13   |          \
    \   words.push_back(s.split_whitespace().collect::<Vec<String>>().to_owned());\n\
    \     |                                                  ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut j = i;\n        while j < s.len() &&\
    \ s.chars().any(|c| c == ',' || c == ' ') {\n            j = j + 1;\n        }\n\
    \        words.push(&s[i..j]);\n        i = j;\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyk0jntdd.rs:16:5\n   |\n\
    4  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n16 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        word.push_str(s);\n      \
    \  word.push(',');\n        word.push_str(s);\n        word.push(',');\n     \
    \   word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n  \
    \      word.push(',');\n        word.push_str(s);\n        word.push(',');\n \
    \       word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',');\n        word.push_str(s);\n        word.push(',');\n\
    \        word.push_str(s);\n        word.push(',');\n        word.push_str(s);\n\
    \        word.push(',\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpdvo5sv02.rs:88:19\n\
    \   |\n88 |         word.push(',\n   |                   ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
