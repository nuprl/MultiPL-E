language: rs
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that contain given substring\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpxczqda53.rs:5:32\n  |\n5 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n --> /tmp/tmpxczqda53.rs:6:10\n  |\n6 |   \
    \      .collect()\n  |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748509
