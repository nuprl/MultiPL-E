language: rs
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_value {\n        \
    \    max_value = n;\n        }\n    }\n    for n in numbers {\n        if n ==\
    \ max_value {\n            result.push(n);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpuyogtfgd.rs:11:14\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for n in numbers {\n   \
    \ |              -------\n    |              |\n    |              `numbers` moved\
    \ due to this implicit call to `.into_iter()`\n    |              help: consider\
    \ borrowing to avoid moving into the for loop: `&numbers`\n...\n11  |     for\
    \ n in numbers {\n    |              ^^^^^^^ value used here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `numbers`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = result.len();\n        }\n        result.push(number);\n    }\n\
    \    result.push(max_number);\n    result.push(max_index);\n    result\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpk39jxjf8.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpk39jxjf8.rs:15:17\n   |\n15 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     result.push(max_index.try_into().unwrap());\n   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut\
    \ max_numbers: Vec<isize> = Vec::new();\n    for n in numbers {\n        if n\
    \ > max_number {\n            max_number = n;\n            max_numbers.clear();\n\
    \        }\n        if n == max_number {\n            max_numbers.push(n);\n \
    \       }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpx9evior_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmtnh2uyb.rs:13:21\n   |\n\
    13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmtnh2uyb.rs:14:26\n   |\n14 |\
    \             max_number = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    14 |             max_number = *number;\n   |                          +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut\
    \ max_numbers: Vec<isize> = Vec::new();\n    for number in numbers {\n       \
    \ if number > max_number {\n            max_number = number;\n            max_numbers.clear();\n\
    \        }\n        if max_numbers.is_empty() {\n            max_numbers.push(*number);\n\
    \        } else {\n            max_numbers.push(*number);\n            if max_number\
    \ > max_numbers.last() {\n                max_numbers.clear();\n            }\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpwj8zojlh.rs:12:30\n\
    \   |\n12 |             max_numbers.push(*number);\n   |                     \
    \         ^^^^^^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  -->\
    \ /tmp/tmpwj8zojlh.rs:14:30\n   |\n14 |             max_numbers.push(*number);\n\
    \   |                              ^^^^^^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwj8zojlh.rs:15:29\n   |\n15 |             if max_number > max_numbers.last()\
    \ {\n   |                             ^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<&isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        let mut max_number = numbers[i];\n \
    \       for number in numbers[i..] {\n            if number > max_number {\n \
    \               max_number = number;\n            }\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n   --> /tmp/tmpqbrh4tif.rs:14:23\n    |\n14  |         for\
    \ number in numbers[i..] {\n    |                       ^^^^^^^^^^^^ doesn't have\
    \ a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `[isize]`\n    = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nnote: required by `into_iter`\n\nerror[E0277]:\
    \ `[isize]` is not an iterator\n   --> /tmp/tmpqbrh4tif.rs:14:23\n    |\n14  |\
    \         for number in numbers[i..] {\n    |                       ^^^^^^^^^^^^\
    \ `[isize]` is not an iterator\n    |\n    = help: the trait `Iterator` is not\
    \ implemented for `[isize]`\n    = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nnote: required by `into_iter`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] >= max_number {\n            result.push(max_number);\n\
    \            max_number = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result.push(max_number);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp86fzehpd.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut current_max = numbers[0];\n    for number in numbers.iter() {\n        if\
    \ number > current_max {\n            max_numbers.push(current_max);\n       \
    \     current_max = number;\n        } else {\n            current_max = number;\n\
    \        }\n    }\n    max_numbers.push(current_max);\n    max_numbers\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4_m2brvp.rs:7:21\n  |\n7 |\
    \         if number > current_max {\n  |                     ^^^^^^^^^^^\n  |\
    \                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&current_max`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp4_m2brvp.rs:9:27\n  |\n9 |             current_max\
    \ = number;\n  |                           ^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |             current_max\
    \ = *number;\n  |                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4_m2brvp.rs:11:27\n   |\n11 |             current_max = number;\n\
    \   |                           ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n11 |             current_max =\
    \ *number;\n   |                           +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_numbers.push(numbers[i]);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkpxlut3f.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_index = 0;\n    for n in numbers {\n        if n > max_so_far {\n\
    \            max_so_far = n;\n            max_so_far_index = n;\n        }\n \
    \   }\n    let mut max_so_far_rolling_max = [max_so_far];\n    for i in 1..numbers.len()\
    \ {\n        let mut max_so_far_rolling_max_i = [max_so_far];\n        for n in\
    \ max_so_far_rolling_max {\n            max_so_far_rolling_max_i.push(n);\n  \
    \      }\n        max_so_far_rolling_max = max_so_far_rolling_max_i;\n    }\n\
    \    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for array `[isize; 1]` in the\
    \ current scope\n  --> /tmp/tmpwigv95s7.rs:16:38\n   |\n16 |             max_so_far_rolling_max_i.push(n);\n\
    \   |                                      ^^^^ method not found in `[isize; 1]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwigv95s7.rs:20:5\n   |\n3  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n20 |     max_so_far_rolling_max\n   |     ^^^^^^^^^^^^^^^^^^^^^^- help: try\
    \ using a conversion method: `.to_vec()`\n   |     |\n   |     expected struct\
    \ `Vec`, found array `[isize; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found array `[isize; 1]`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut\
    \ max_numbers: Vec<isize> = Vec::new();\n    for n in numbers {\n        if n\
    \ > max_number {\n            max_number = n;\n            max_numbers.clear();\n\
    \        }\n        if n == max_number {\n            max_numbers.push(n);\n \
    \       }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpx9evior_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n      \
    \  if n > max_value {\n            max_value = n;\n            max_index = result.len();\n\
    \        }\n        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp00jaqvq8.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp00jaqvq8.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp00jaqvq8.rs:15:17\n   |\n15 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     result.push(max_index.try_into().unwrap());\n   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(max_number);\n            max_number\
    \ = number;\n        } else {\n            max_number = number;\n        }\n \
    \   }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpewbr9x1y.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_numbers.push(numbers[i]);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkpxlut3f.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index\
    \ = 0;\n    for &n in numbers {\n        if n > max {\n            max = n;\n\
    \            max_index = n;\n        }\n    }\n    let mut max_rolling_numbers\
    \ = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i] > max\
    \ {\n            max = numbers[i];\n            max_index = i;\n        }\n  \
    \  }\n    for i in 0..numbers.len() {\n        if numbers[i] > max {\n       \
    \     max = numbers[i];\n            max_index = i;\n        }\n    }\n    for\
    \ i in 0..numbers.len() {\n        if numbers[i] > max {\n            max = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n\
    \        if numbers[i] > max {\n            max = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i] > max {\n \
    \           max = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n          \
    \  max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n       \
    \ if numbers[i] > max {\n            max = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i] > max {\n \
    \           max = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n          \
    \  max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n       \
    \ if numbers[i] > max {\n            max = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i] > max {\n \
    \           max = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    for i in 0..\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmp48rlpzi0.rs:116:1\n    |\n\
    116 | }\n    | ^ expected `{`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp48rlpzi0.rs:6:9\n\
    \  |\n6 |     for &n in numbers {\n  |         ^^    ------- this expression has\
    \ type `isize`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp48rlpzi0.rs:16:25\n   |\n16 |             max_index\
    \ = i;\n   |                         ^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp48rlpzi0.rs:22:25\n   |\n22 |             max_index\
    \ = i;\n   |                         ^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp48rlpzi0.rs:28:25\n   |\n28 |             max_index\
    \ = i;\n   |                         ^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp48rlpzi0.rs:34:25\n   |\n34 |             max_index\
    \ = i;\n   |                         ^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp48rlpzi0.rs:40:25\n   |\n40 |             max_index\
    \ = i;\n   |                         ^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp48rlpzi0.rs:46:25\n   |\n46 |             max_index\
    \ = i;\n   |                         ^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp48rlpzi0.rs:52:25\n   |\n52 |             max_index\
    \ = i;\n   |                         ^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp48rlpzi0.rs:58:25\n   |\n58 |             max_index\
    \ = i;\n   |                         ^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp48rlpzi0.rs:64:25\n   |\n64 |             max_index\
    \ = i;\n   |                         ^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp48rlpzi0.rs:70:25\n   |\n70 |             max_index\
    \ = i;\n   |                         ^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched ty"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_index = 0;\n    let mut max_so_far_rolling_max = 0;\n    for &n in\
    \ numbers {\n        if n > max_so_far {\n            max_so_far = n;\n      \
    \      max_so_far_index = numbers.iter().position(|&n| n == max_so_far).unwrap();\n\
    \            max_so_far_rolling_max = max_so_far;\n        }\n        max_so_far_rolling_max\
    \ = max_so_far_rolling_max.max(&n);\n    }\n    let mut max_so_far_rolling_max_index\
    \ = numbers.iter().position(|&n| n == max_so_far_rolling_max).unwrap();\n    let\
    \ mut max_so_far_rolling_max_rolling_max = 0;\n    for &n in numbers {\n     \
    \   if n == max_so_far_rolling_max {\n            max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max;\n        }\n        max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max.max(&n);\n    }\n    let mut max_so_far_rolling_max_rolling_max_index\
    \ = numbers.iter().position(|&n| n == max_so_far_rolling_max_rolling_max).unwrap();\n\
    \    let mut max_so_far_rolling_max_rolling_max_rolling_max = 0;\n    for &n in\
    \ numbers {\n        if n == max_so_far_rolling_max_rolling_max {\n          \
    \  max_so_far_rolling_max_rolling_max_rolling_max = max_so_far_rolling_max_rolling_max;\n\
    \        }\n        max_so_far_rolling_max_rolling_max_rolling_max = max_so_far_rolling_max_rolling_max_rolling_max.max(&n);\n\
    \    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index = numbers.iter().position(|&n|\
    \ n == max_so_far_rolling_max_rolling_max_rolling_max).unwrap();\n    let mut\
    \ max_so_far_rolling_max_rolling_max_rolling_max_rolling_max = 0;\n    for &n\
    \ in numbers {\n        if n == max_so_far_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max =\
    \ max_so_far_rolling_max_rolling_max_rolling_max;\n        }\n        max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max_rolling_max_rolling_max.max(&n);\n    }\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwlxtv6x1.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwlxtv6x1.rs:13:61\n   |\n13 |         max_so_far_rolling_max\
    \ = max_so_far_rolling_max.max(&n);\n   |                                    \
    \                         ^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ removing the borrow\n   |\n13 -         max_so_far_rolling_max = max_so_far_rolling_max.max(&n);\n\
    13 +         max_so_far_rolling_max = max_so_far_rolling_max.max(n);\n   | \n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpwlxtv6x1.rs:17:9\n   |\n17 |   \
    \  for &n in numbers {\n   |         ^^    ------- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwlxtv6x1.rs:21:85\n   |\n21 |         max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max.max(&n);\n   |                        \
    \                                                             ^^ expected `isize`,\
    \ found reference\n   |\n   = note:   expected type `isize`\n           found\
    \ reference `&_`\nhelp: consider removing the borrow\n   |\n21 -         max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max.max(&n);\n21 +         max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max.max(n);\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwlxtv6x1.rs:25:9\n   |\n25 |     for &n in numbers {\n\
    \   |         ^^    ------- this expression has type `isize`\n   |         |\n\
    \   |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwlxtv6x1.rs:29:109\n   |\n29 |         max_so_far_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(max_number);\n            max_number\
    \ = number;\n        } else {\n            max_number = number;\n        }\n \
    \   }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpewbr9x1y.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        let mut max_number = numbers[i];\n \
    \       for number in numbers[i..] {\n            if number > max_number {\n \
    \               max_number = number;\n            }\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n   --> /tmp/tmpqbrh4tif.rs:14:23\n    |\n14  |         for\
    \ number in numbers[i..] {\n    |                       ^^^^^^^^^^^^ doesn't have\
    \ a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `[isize]`\n    = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nnote: required by `into_iter`\n\nerror[E0277]:\
    \ `[isize]` is not an iterator\n   --> /tmp/tmpqbrh4tif.rs:14:23\n    |\n14  |\
    \         for number in numbers[i..] {\n    |                       ^^^^^^^^^^^^\
    \ `[isize]` is not an iterator\n    |\n    = help: the trait `Iterator` is not\
    \ implemented for `[isize]`\n    = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nnote: required by `into_iter`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for number in numbers {\n        if number > max_element\
    \ {\n            max_element = number;\n            max_index = number;\n    \
    \    }\n    }\n    let mut max_elements: Vec<isize> = Vec::new();\n    for i in\
    \ 0..numbers.len() {\n        if numbers[i] > max_element {\n            max_elements.push(numbers[i]);\n\
    \        }\n    }\n    max_elements\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7pjc7hq7.rs:9:25\n  |\n9 |\
    \             max_index = number;\n  |                         ^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_numbers.push(max_number);\n\
    \            max_numbers.push(numbers[i]);\n        } else {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers.reverse();\n    max_numbers.insert(0, max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp7qd_l7c9.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_so_far = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_so_far {\n            max_so_far = number;\n        }\n        if number\
    \ > max_so_far_so_far {\n            max_so_far_so_far = number;\n        }\n\
    \    }\n    let mut max_so_far_so_far_so_far = numbers[0];\n    for number in\
    \ numbers {\n        if number > max_so_far_so_far {\n            max_so_far_so_far\
    \ = number;\n        }\n        if number > max_so_far_so_far_so_far {\n     \
    \       max_so_far_so_far_so_far = number;\n        }\n        if number > max_so_far_so_far_so_far_so_far\
    \ {\n            max_so_far_so_far_so_far_so_far = number;\n        }\n    }\n\
    \    let mut max_so_far_so_far_so_far_so_far = numbers[0];\n    for number in\
    \ numbers {\n        if number > max_so_far_so_far_so_far {\n            max_so_far_so_far_so_far_so_far\
    \ = number;\n        }\n        if number > max_so_far_so_far_so_far_so_far {\n\
    \            max_so_far_so_far_so_far_so_far_so_far = number;\n        }\n   \
    \     if number > max_so_far_so_far_so_far_so_far_so_far {\n            max_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = number;\n        }\n    }\n    let mut max_so_far_so_far_so_far_so_far_so_far\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_so_far_so_far_so_far_so_far\
    \ {\n            max_so_far_so_far_so_far_so_far_so_far_so_far = number;\n   \
    \     }\n        if number > max_so_far_so_far_so_far_so_far_so_far {\n      \
    \      max_so_far_so_far_so_far_so_far_so_far_so_far_so_far = number;\n      \
    \  }\n        if number > max_so_far_so_far_so_far_so_far_so_far_so_far {\n  \
    \          max_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far = number;\n\
    \        }\n    }\n    let mu\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpp9r_wgxr.rs:50:11\n   |\n\
    50 |     let mu\n   |           ^ help: add `;` here\n51 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `max_so_far_so_far_so_far_so_far` in\
    \ this scope\n  --> /tmp/tmpp9r_wgxr.rs:22:21\n   |\n22 |         if number >\
    \ max_so_far_so_far_so_far_so_far {\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_so_far_so_far`\n\
    \nerror[E0425]: cannot find value `max_so_far_so_far_so_far_so_far` in this scope\n\
    \  --> /tmp/tmpp9r_wgxr.rs:23:13\n   |\n23 |             max_so_far_so_far_so_far_so_far\
    \ = number;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `max_so_far_so_far_so_far`\n\nerror[E0425]: cannot\
    \ find value `max_so_far_so_far_so_far_so_far_so_far` in this scope\n  --> /tmp/tmpp9r_wgxr.rs:32:13\n\
    \   |\n32 |             max_so_far_so_far_so_far_so_far_so_far = number;\n   |\
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with\
    \ a similar name exists: `max_so_far_so_far_so_far_so_far`\n\nerror[E0425]: cannot\
    \ find value `max_so_far_so_far_so_far_so_far_so_far` in this scope\n  --> /tmp/tmpp9r_wgxr.rs:34:21\n\
    \   |\n34 |         if number > max_so_far_so_far_so_far_so_far_so_far {\n   |\
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `max_so_far_so_far_so_far_so_far`\n\nerror[E0425]:\
    \ cannot find value `max_so_far_so_far_so_far_so_far_so_far_so_far` in this scope\n\
    \  --> /tmp/tmpp9r_wgxr.rs:35:13\n   |\n35 |             max_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = number;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `max_so_far_so_far_so_far_so_far`\n\
    \nerror[E0425]: cannot find value `max_so_far_so_far_so_far_so_far_so_far_so_far`\
    \ in this scope\n  --> /tmp/tmpp9r_wgxr.rs:41:13\n   |\n41 |             max_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = number;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n        if\
    \ number > max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = max_so_far_index;\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value\
    \ {\n            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value\
    \ {\n            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value\
    \ {\n            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value\
    \ {\n            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value\
    \ {\n            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_index = max_so_far\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3ocncvhu.rs:53:54\n   |\n\
    53 |     let mut max_so_far_rolling_max_index = max_so_far\n   |             \
    \                                         ^ help: add `;` here\n54 | }\n   | -\
    \ unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3ocncvhu.rs:7:21\n\
    \  |\n7 |         if number > max_so_far {\n  |                     ^^^^^^^^^^\n\
    \  |                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp3ocncvhu.rs:8:26\n  |\n4 |     let mut max_so_far\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n8 |             max_so_far = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |             max_so_far = *number;\n  |                \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ocncvhu.rs:15:21\n\
    \   |\n15 |         if number > max_so_far_rolling_max_value {\n   |         \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                     |\n   |  \
    \                   expected `&isize`, found `isize`\n   |                   \
    \  help: consider borrowing here: `&max_so_far_rolling_max_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3ocncvhu.rs:16:44\n   |\n13 |     let mut max_so_far_rolling_max_value\
    \ = max_so_far;\n   |                                            ---------- expected\
    \ due to this value\n...\n16 |             max_so_far_rolling_max_value = number;\n\
    \   |                                            ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |        \
    \     max_so_far_rolling_max_value = *number;\n   |                          \
    \                  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ocncvhu.rs:23:21\n\
    \   |\n23 |         if number > max_so_far_rolling_max_value {\n   |         \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                     |\n   |  \
    \                   expected `&isize`"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            max_value = numbers[i];\n  \
    \          max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            result.push(max_index);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp2n5n120s.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp2n5n120s.rs:18:5\n   |\n3  | fn rolling_max(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n18 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_numbers.push(numbers[i]);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkpxlut3f.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n        if\
    \ number > max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    vec![max_so_far, max_so_far_index]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl9wk_iux.rs:7:21\n  |\n7 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpl9wk_iux.rs:8:26\n  |\n4 |     let mut max_so_far\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n8 |             max_so_far = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |             max_so_far = *number;\n  |                \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl9wk_iux.rs:12:22\n\
    \   |\n12 |     vec![max_so_far, max_so_far_index]\n   |                     \
    \ ^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    12 |     vec![max_so_far, max_so_far_index.try_into().unwrap()]\n   |        \
    \                              ++++++++++++++++++++\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_index = 0;\n    for n in numbers {\n        if n > max_so_far {\n\
    \            max_so_far = n;\n            max_so_far_index = n;\n        }\n \
    \   }\n    let mut max_so_far_rolling_max = [max_so_far];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_so_far {\n            max_so_far_rolling_max.push(numbers[i]);\n\
    \        }\n    }\n    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for array `[isize; 1]` in the\
    \ current scope\n  --> /tmp/tmpftpkl21m.rs:15:36\n   |\n15 |             max_so_far_rolling_max.push(numbers[i]);\n\
    \   |                                    ^^^^ method not found in `[isize; 1]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpftpkl21m.rs:18:5\n   |\n3  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n18 |     max_so_far_rolling_max\n   |     ^^^^^^^^^^^^^^^^^^^^^^- help: try\
    \ using a conversion method: `.to_vec()`\n   |     |\n   |     expected struct\
    \ `Vec`, found array `[isize; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found array `[isize; 1]`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgz_1bxzm.rs:13:21\n   |\n\
    13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgz_1bxzm.rs:14:26\n   |\n5  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n14 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n14 |             max_number = *number;\n\
    \   |                          +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmtnh2uyb.rs:13:21\n   |\n\
    13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmtnh2uyb.rs:14:26\n   |\n14 |\
    \             max_number = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    14 |             max_number = *number;\n   |                          +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_number {\n            max_number = number;\n        }\n\
    \    }\n    max_numbers.push(max_number);\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprxucta43.rs:7:21\n  |\n7 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmprxucta43.rs:8:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n8 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |             max_number = *number;\n  |                \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprxucta43.rs:13:21\n\
    \   |\n13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprxucta43.rs:14:30\n   |\n14 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n14 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp7_uc3tw3.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(max_number);\n            max_number\
    \ = number;\n        } else {\n            max_number = number;\n        }\n \
    \   }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpewbr9x1y.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            max_value = numbers[i];\n  \
    \          max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            result.push(max_index);\n  \
    \          max_value = numbers[i];\n            max_index = i;\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpvlac0tbp.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpvlac0tbp.rs:20:5\n   |\n3  | fn rolling_max(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n20 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpj7klxmrh.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut\
    \ max_pos = 0;\n    for pos in 1..numbers.len() {\n        if numbers[pos] > max_value\
    \ {\n            max_value = numbers[pos];\n            max_pos = pos;\n     \
    \   }\n    }\n    vec![max_value, max_pos]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ls2s65r.rs:12:21\n   |\n\
    12 |     vec![max_value, max_pos]\n   |                     ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     vec![max_value, max_pos.try_into().unwrap()]\n\
    \   |                            ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut\
    \ max_numbers: Vec<isize> = Vec::new();\n    for number in numbers {\n       \
    \ if number > max_number {\n            max_number = number;\n            max_numbers.clear();\n\
    \        }\n        if number == max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpvop6yeyh.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    for value in numbers {\n        if value > max_value {\n\
    \            max_value = value;\n        }\n    }\n    for value in numbers {\n\
    \        if value == max_value {\n            result.push(value);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpwu_v_teg.rs:11:18\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for value in numbers {\n\
    \    |                  ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n11  |     for value in numbers {\n    |                  ^^^^^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `numbers`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n6   |   \
    \  for value in &numbers {\n    |                  +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for n in numbers {\n        if n > max_number {\n\
    \            max_number = n;\n            max_index = n;\n        }\n    }\n \
    \   let mut max_numbers = Vec::new();\n    for i in 0..numbers.len() {\n     \
    \   if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmv6ami0u.rs:9:25\n  |\n5 |\
    \     let mut max_index: usize = 0;\n  |                        ----- expected\
    \ due to this type\n...\n9 |             max_index = n;\n  |                 \
    \        ^ expected `usize`, found `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_index = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \      if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n        }\n    }\n    vec![max_so_far_rolling_max, max_so_far, max_so_far_index]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprz5kn3re.rs:8:21\n  |\n8 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmprz5kn3re.rs:9:26\n  |\n4 |     let mut max_so_far\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n9 |             max_so_far = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             max_so_far = *number;\n  |                \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprz5kn3re.rs:12:21\n\
    \   |\n12 |         if number > max_so_far_rolling_max {\n   |               \
    \      ^^^^^^^^^^^^^^^^^^^^^^\n   |                     |\n   |              \
    \       expected `&isize`, found integer\n   |                     help: consider\
    \ borrowing here: `&max_so_far_rolling_max`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprz5kn3re.rs:13:38\n   |\n6  |     let mut max_so_far_rolling_max\
    \ = 0;\n   |                                      - expected due to this value\n\
    ...\n13 |             max_so_far_rolling_max = number;\n   |                 \
    \                     ^^^^^^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n13 |             max_so_far_rolling_max = *number;\n\
    \   |                                      +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprz5kn3re.rs:16:46\n   |\n16 |     vec![max_so_far_rolling_max,\
    \ max_so_far, max_so_far_index]\n   |                                        \
    \      ^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     vec![max_so_far_rolling_max, max_so_far, max_so_far_index.try_into().unwrap()]\n\
    \   |                                                              ++++++++++++++++++++\n\
    \nerror: aborting due to 5 previous errors\n\nFor"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers.reverse();\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpkqsyrvqg.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_iter = numbers.iter().cloned().rev().take(numbers.len()).rev();\n\
    \    let mut max_so_far_iter = max_so_far_iter.map(|x| {\n        if x > max_so_far\
    \ {\n            max_so_far = x;\n        }\n        x\n    });\n    max_so_far_iter.for_each(|x|\
    \ {\n        if x > max_so_far {\n            max_so_far = x;\n        }\n   \
    \ });\n    max_so_far_iter\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm1qsbrn1.rs:17:5\n   |\n\
    3  |   fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |             \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n6  |       let mut max_so_far_iter = max_so_far_iter.map(|x| {\n\
    \   |  ___________________________________________________-\n7  | |         if\
    \ x > max_so_far {\n8  | |             max_so_far = x;\n9  | |         }\n10 |\
    \ |         x\n11 | |     });\n   | |_____- the found closure\n...\n17 |     \
    \  max_so_far_iter\n   |       ^^^^^^^^^^^^^^^ expected struct `Vec`, found struct\
    \ `Map`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct\
    \ `Map<Rev<std::iter::Take<Rev<Cloned<std::slice::Iter<'_, isize>>>>>, [closure@/tmp/tmpm1qsbrn1.rs:6:51:\
    \ 11:6]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpj7klxmrh.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    let mut max_value = numbers[0];\n\
    \    for &n in numbers {\n        if n > max_number {\n            max_number\
    \ = n;\n            max_index = -1;\n            max_value = n;\n        }\n \
    \       if n == max_number {\n            result.push(max_value);\n          \
    \  max_index = result.len() - 1;\n            max_value = n;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmlliprw7.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpmlliprw7.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpmlliprw7.rs:11:25\n   |\n11 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbkd6y44_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for n in numbers {\n        if n > max_element {\n\
    \            max_element = n;\n            max_index = n;\n        }\n    }\n\
    \    let mut max_elements = Vec::new();\n    for i in 0..numbers.len() {\n   \
    \     if numbers[i] > max_element {\n            max_element = numbers[i];\n \
    \           max_index = i;\n        }\n        if i == max_index {\n         \
    \   max_elements.push(max_element);\n        }\n    }\n    max_elements\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvk3k1l2o.rs:9:25\n  |\n5 |\
    \     let mut max_index: usize = 0;\n  |                        ----- expected\
    \ due to this type\n...\n9 |             max_index = n;\n  |                 \
    \        ^ expected `usize`, found `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbkd6y44_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_number {\n            max_number = number;\n        }\n\
    \    }\n    max_numbers.push(max_number);\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprxucta43.rs:7:21\n  |\n7 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmprxucta43.rs:8:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n8 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |             max_number = *number;\n  |                \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprxucta43.rs:13:21\n\
    \   |\n13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprxucta43.rs:14:30\n   |\n14 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n14 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n\
    \        if i == max_index {\n            result.push(max_number);\n        }\
    \ else {\n            result.push(numbers[i]);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp89wh5s2c.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_number {\n            max_number = number;\n        }\n\
    \    }\n    max_numbers.push(max_number);\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprxucta43.rs:7:21\n  |\n7 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmprxucta43.rs:8:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n8 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |             max_number = *number;\n  |                \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprxucta43.rs:13:21\n\
    \   |\n13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprxucta43.rs:14:30\n   |\n14 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n14 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] >= max_number {\n    \
    \        max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers.reverse();\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpapuy5pg_.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_value {\n            max_value = number;\n        }\n    }\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_value {\n            result.push(number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplc7p8_yq.rs:7:21\n  |\n7 |\
    \         if number > max_value {\n  |                     ^^^^^^^^^\n  |    \
    \                 |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_value`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmplc7p8_yq.rs:8:25\n  |\n5 |     let mut max_value\
    \ = numbers[0];\n  |                         ---------- expected due to this value\n\
    ...\n8 |             max_value = number;\n  |                         ^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    8 |             max_value = *number;\n  |                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplc7p8_yq.rs:12:21\n   |\n12 |         if number\
    \ > max_value {\n   |                     ^^^^^^^^^\n   |                    \
    \ |\n   |                     expected `&isize`, found `isize`\n   |         \
    \            help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplc7p8_yq.rs:16:5\n   |\n3  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n16 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &i in numbers {\n      \
    \  if i > max_value {\n            max_value = i;\n            max_index = i;\n\
    \        }\n    }\n    for i in numbers {\n        if i == max_value {\n     \
    \       result.push(max_index);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp72d_q5dy.rs:7:9\n  |\n7 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers.reverse();\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpkqsyrvqg.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index\
    \ = -1;\n    for n in numbers {\n        if n > max {\n            max = n;\n\
    \            max_index = n;\n        }\n    }\n    vec![max]\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpx2h1fsfc.rs:4:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            max_value = numbers[i];\n  \
    \          max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] >= max_value {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    for i in max_index..numbers.len() {\n        result.push(numbers[i]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpgar3bkbk.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_index = number;\n     \
    \   }\n    }\n    let mut max_numbers = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpilwnpknf.rs:9:25\n  |\n5 |\
    \     let mut max_index: usize = 0;\n  |                        ----- expected\
    \ due to this type\n...\n9 |             max_index = number;\n  |            \
    \             ^^^^^^ expected `usize`, found `isize`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_numbers.push(numbers[i]);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkpxlut3f.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx\
    \ = 1;\n    for &n in numbers {\n        if n > max {\n            max = n;\n\
    \            max_idx = 1;\n        }\n        if n == max {\n            max_idx\
    \ += 1;\n        }\n    }\n    let mut max_idx = max_idx - 1;\n    let mut max_value\
    \ = max;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value = max_value\
    \ - 1;\n    let mut max_value = max_value - 1;\n    let mut max_\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpc83gs6ib.rs:66:17\n   |\n\
    66 |     let mut max_\n   |                 ^ help: add `;` here\n67 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpc83gs6ib.rs:6:9\n\
    \  |\n6 |     for &n in numbers {\n  |         ^^    ------- this expression has\
    \ type `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpc83gs6ib.rs:3:40\n  |\n3 | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |    -----------                         ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp1apvfiqy.rs:4:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_numbers.push(numbers[i]);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkpxlut3f.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max {\n            max\
    \ = n;\n        }\n        if n > max_so_far {\n            max_so_far = n;\n\
    \        }\n    }\n    vec![max, max_so_far]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp31cwkfdx.rs:4:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    let mut result: Vec<isize> = vec![];\n    for i\
    \ in 0..numbers.len() {\n        if i == max_index {\n            result.push(max_element);\n\
    \        } else {\n            result.push(numbers[i]);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpuvo9q8km.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    let mut max_elements: Vec<isize> = Vec::new();\n\
    \    max_elements.push(max_element);\n    let mut max_index: usize = 0;\n    for\
    \ index in 0..numbers.len() {\n        if numbers[index] > max_element {\n   \
    \         max_elements.push(numbers[index]);\n            max_index = index;\n\
    \        }\n    }\n    max_elements\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp_n0_g176.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(max_number);\n            max_number\
    \ = number;\n        } else {\n            max_number = number;\n        }\n \
    \   }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpewbr9x1y.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.insert(0, max_number);\n\
    \    max_numbers.insert(0, max_index);\n    max_numbers\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp6ke8kunk.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6ke8kunk.rs:14:27\n   |\n14 |     max_numbers.insert(0, max_index);\n\
    \   |                           ^^^^^^^^^ expected `isize`, found `usize`\n  \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n14 |     max_numbers.insert(0, max_index.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpj7klxmrh.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for number in\
    \ numbers {\n        if number > max_number {\n            max_number = number;\n\
    \            max_index = -1;\n        }\n        if number == max_number {\n \
    \           max_index += 1;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptsqyb6ke.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmptsqyb6ke.rs:10:25\n   |\n10 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_numbers.push(numbers[i]);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkpxlut3f.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &i in numbers {\n      \
    \  if i > max_value {\n            max_value = i;\n            max_index = i;\n\
    \        }\n    }\n    for i in numbers {\n        if i == max_value {\n     \
    \       result.push(max_index);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp72d_q5dy.rs:7:9\n  |\n7 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_index = 0;\n    let mut max_so_far_rolling_max = 0;\n    for n in\
    \ numbers {\n        if n > max_so_far {\n            max_so_far = n;\n      \
    \      max_so_far_index = n;\n            max_so_far_rolling_max = n;\n      \
    \  }\n        if n == max_so_far {\n            max_so_far_rolling_max += max_so_far_index;\n\
    \        }\n    }\n    let mut max_so_far_rolling_max_vec: Vec<isize> = vec![max_so_far_rolling_max];\n\
    \    for i in 1..max_so_far_rolling_max_vec.len() {\n        max_so_far_rolling_max_vec.push((max_so_far_rolling_max_vec[i\
    \ - 1] + max_so_far_rolling_max_vec[i]) / 2);\n    }\n    max_so_far_rolling_max_vec\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmps03jez2v.rs:4:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgz_1bxzm.rs:13:21\n   |\n\
    13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgz_1bxzm.rs:14:26\n   |\n5  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n14 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n14 |             max_number = *number;\n\
    \   |                          +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n      \
    \  if n > max_value {\n            max_value = n;\n            max_index = result.len();\n\
    \        }\n        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp00jaqvq8.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp00jaqvq8.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp00jaqvq8.rs:15:17\n   |\n15 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     result.push(max_index.try_into().unwrap());\n   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbkd6y44_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &number in numbers {\n \
    \       if number > max_number {\n            max_number = number;\n         \
    \   max_index = result.len();\n        }\n        result.push(number);\n    }\n\
    \    result.push(max_number);\n    result.push(max_index);\n    result\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1tjrfxhw.rs:7:9\n  |\n7 |\
    \     for &number in numbers {\n  |         ^^^^^^^    ------- this expression\
    \ has type `Option<isize>`\n  |         |\n  |         expected `isize`, found\
    \ reference\n  |         help: you can probably remove the explicit borrow: `number`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp1tjrfxhw.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp1tjrfxhw.rs:15:17\n   |\n15 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     result.push(max_index.try_into().unwrap());\n   |                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    for value in numbers {\n        if value > max_value {\n\
    \            result.push(max_value);\n            max_value = value;\n       \
    \ } else {\n            max_value = value;\n        }\n    }\n    result.push(max_value);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpx8hxrh7a.rs:5:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for n in numbers {\n        if n > max_element {\n\
    \            max_element = n;\n            max_index = n;\n        }\n    }\n\
    \    let mut max_elements: Vec<isize> = vec![max_element];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_element {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n        max_elements.push(max_element);\n\
    \    }\n    max_elements.push(max_element);\n    max_elements\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9yiob1ej.rs:9:25\n  |\n5 |\
    \     let mut max_index: usize = 0;\n  |                        ----- expected\
    \ due to this type\n...\n9 |             max_index = n;\n  |                 \
    \        ^ expected `usize`, found `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for n in numbers {\n        if n > max_element {\n\
    \            max_element = n;\n            max_index = n;\n        }\n    }\n\
    \    let mut max_elements = Vec::new();\n    for i in 0..numbers.len() {\n   \
    \     if numbers[i] > max_element {\n            max_element = numbers[i];\n \
    \           max_index = i;\n        }\n        if i == max_index {\n         \
    \   max_elements.push(max_element);\n        }\n    }\n    max_elements\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvk3k1l2o.rs:9:25\n  |\n5 |\
    \     let mut max_index: usize = 0;\n  |                        ----- expected\
    \ due to this type\n...\n9 |             max_index = n;\n  |                 \
    \        ^ expected `usize`, found `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_number {\n            max_number = number;\n        }\n\
    \    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n \
    \       max_numbers.push(max_numbers[i - 1] + numbers[i - 1]);\n    }\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkpoetdiz.rs:7:21\n  |\n7 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpkpoetdiz.rs:8:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n8 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |             max_number = *number;\n  |                \
    \          +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpj7klxmrh.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut\
    \ max_numbers: Vec<isize> = Vec::new();\n    for number in numbers {\n       \
    \ if number > max_number {\n            max_number = number;\n            max_numbers.clear();\n\
    \        }\n        if max_numbers.len() == 0 {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers[max_numbers.len() - 1]\
    \ {\n                max_numbers.push(number);\n            }\n        }\n   \
    \ }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpzorn5nci.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_element\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n      \
    \  if n > max_element {\n            max_element = n;\n            max_index =\
    \ result.len();\n        }\n        result.push(n);\n    }\n    result.push(max_element);\n\
    \    result.truncate(max_index + 1);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg2jcn82t.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpg2jcn82t.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for number in numbers {\n        if number > max_element\
    \ {\n            max_element = number;\n            max_index = number;\n    \
    \    }\n    }\n    let mut max_elements = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > max_element {\n            max_elements.push(numbers[i]);\n\
    \        }\n    }\n    max_elements\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8az9lx5u.rs:9:25\n  |\n5 |\
    \     let mut max_index: usize = 0;\n  |                        ----- expected\
    \ due to this type\n...\n9 |             max_index = number;\n  |            \
    \             ^^^^^^ expected `usize`, found `isize`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbkd6y44_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for number in numbers {\n        if number > max_element\
    \ {\n            max_element = number;\n            max_index = number;\n    \
    \    }\n    }\n    let mut max_elements: Vec<isize> = Vec::new();\n    for i in\
    \ 0..numbers.len() {\n        if numbers[i] > max_element {\n            max_elements.push(numbers[i]);\n\
    \        }\n    }\n    max_elements\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7pjc7hq7.rs:9:25\n  |\n9 |\
    \             max_index = number;\n  |                         ^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut current_max = numbers[0];\n    for number in numbers {\n        if number\
    \ > current_max {\n            max_numbers.push(current_max);\n            current_max\
    \ = number;\n        } else {\n            current_max = number;\n        }\n\
    \    }\n    max_numbers.push(current_max);\n    max_numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp8__jepwu.rs:5:27

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_numbers.push(numbers[i]);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkpxlut3f.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgz_1bxzm.rs:13:21\n   |\n\
    13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgz_1bxzm.rs:14:26\n   |\n5  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n14 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n14 |             max_number = *number;\n\
    \   |                          +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(max_number);\n            max_number\
    \ = number;\n        } else {\n            max_number = number;\n        }\n \
    \   }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpewbr9x1y.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ >= max_number {\n            max_numbers.push(numbers[i]);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpgiedg70x.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_rolling_max = 0;\n    for n in numbers {\n        if n > max_so_far\
    \ {\n            max_so_far_rolling_max = n;\n            max_so_far = n;\n  \
    \      } else {\n            max_so_far_rolling_max = max_so_far_rolling_max;\n\
    \        }\n    }\n    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ko7ylug.rs:14:5\n   |\n\
    3  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n14 |     max_so_far_rolling_max\n   |     ^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_number {\n            max_number = number;\n        }\n\
    \    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n \
    \       max_numbers.push(max_numbers[i - 1]);\n    }\n    max_numbers\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0blfsfpr.rs:7:21\n  |\n7 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp0blfsfpr.rs:8:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n8 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |             max_number = *number;\n  |                \
    \          +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp7_uc3tw3.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_value {\n\
    \            result.push(number);\n            max_value = number;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpcoxtmiiq.rs:5:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        let mut max_number = numbers[i];\n \
    \       for number in numbers[i..] {\n            if number > max_number {\n \
    \               max_number = number;\n            }\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n   --> /tmp/tmpqbrh4tif.rs:14:23\n    |\n14  |         for\
    \ number in numbers[i..] {\n    |                       ^^^^^^^^^^^^ doesn't have\
    \ a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `[isize]`\n    = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nnote: required by `into_iter`\n\nerror[E0277]:\
    \ `[isize]` is not an iterator\n   --> /tmp/tmpqbrh4tif.rs:14:23\n    |\n14  |\
    \         for number in numbers[i..] {\n    |                       ^^^^^^^^^^^^\
    \ `[isize]` is not an iterator\n    |\n    = help: the trait `Iterator` is not\
    \ implemented for `[isize]`\n    = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nnote: required by `into_iter`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747994
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpj7klxmrh.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_element\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_element {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_element {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmplcdfzszr.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_numbers.push(numbers[i]);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkpxlut3f.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_element\
    \ = numbers[0];\n    let mut max_index = -1;\n    for index in 1..numbers.len()\
    \ {\n        if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    result.push(max_element);\n\
    \    for index in 1..numbers.len() {\n        if numbers[index] > max_element\
    \ {\n            result.push(numbers[index]);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpv8pbudf6.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbkd6y44_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = result.len();\n        }\n        result.push(number);\n\
    \    }\n    result.push(max_number);\n    result.push(max_index);\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg7yuathx.rs:8:21\n  |\n8 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpg7yuathx.rs:9:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n9 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             max_number = *number;\n  |                \
    \          +\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n\
    \ --> /tmp/tmpg7yuathx.rs:6:25\n  |\n6 |     let mut max_index = -1;\n  |    \
    \                     ^^ the trait `Neg` is not implemented for `usize`\n  |\n\
    \  = help: the following other types implement trait `Neg`:\n            &f32\n\
    \            &f64\n            &i128\n            &i16\n            &i32\n   \
    \         &i64\n            &i8\n            &isize\n          and 8 others\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpg7yuathx.rs:14:17\n   |\n14 |  \
    \   result.push(max_number);\n   |                 ^^^^^^^^^^\n   |          \
    \       |\n   |                 expected `&isize`, found `isize`\n   |       \
    \          help: consider borrowing here: `&max_number`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg7yuathx.rs:15:17\n   |\n15 |     result.push(max_index);\n\
    \   |                 ^^^^^^^^^ expected `&isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg7yuathx.rs:16:5\n   |\n3  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(max_number);\n            max_number\
    \ = number;\n        } else {\n            max_number = number;\n        }\n \
    \   }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpewbr9x1y.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for number in\
    \ numbers.iter() {\n        if number > max_number {\n            max_number =\
    \ number;\n            max_index = -1;\n        }\n        if number == max_number\
    \ {\n            max_index += 1;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers.push(max_index);\n    max_numbers\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpja9gen8_.rs:8:21\n  |\n8 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpja9gen8_.rs:9:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n9 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             max_number = *number;\n  |                \
    \          +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpja9gen8_.rs:12:19\n\
    \   |\n12 |         if number == max_number {\n   |                   ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_index = 0;\n    for n in numbers {\n        if n > max_so_far {\n\
    \            max_so_far = n;\n            max_so_far_index = n;\n        }\n \
    \   }\n    let mut max_so_far_rolling_max = [max_so_far];\n    for i in 1..numbers.len()\
    \ {\n        let mut max_so_far_rolling_max_index = 0;\n        for n in numbers\
    \ {\n            if n > max_so_far_rolling_max[max_so_far_rolling_max_index] {\n\
    \                max_so_far_rolling_max[max_so_far_rolling_max_index] = n;\n \
    \               max_so_far_rolling_max_index = n;\n            }\n        }\n\
    \        max_so_far_rolling_max.push(max_so_far_rolling_max_index);\n    }\n \
    \   max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkq444upb.rs:18:48\n   |\n\
    14 |         let mut max_so_far_rolling_max_index = 0;\n   |                 \
    \                               - expected due to this value\n...\n18 |      \
    \           max_so_far_rolling_max_index = n;\n   |                          \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0599]: no method\
    \ named `push` found for array `[isize; 1]` in the current scope\n  --> /tmp/tmpkq444upb.rs:21:32\n\
    \   |\n21 |         max_so_far_rolling_max.push(max_so_far_rolling_max_index);\n\
    \   |                                ^^^^ method not found in `[isize; 1]`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkq444upb.rs:23:5\n   |\n3  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n23 |     max_so_far_rolling_max\n   |     ^^^^^^^^^^^^^^^^^^^^^^- help: try\
    \ using a conversion method: `.to_vec()`\n   |     |\n   |     expected struct\
    \ `Vec`, found array `[isize; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found array `[isize; 1]`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            max_value = numbers[i];\n  \
    \          max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            result.push(numbers[i]);\n \
    \       }\n    }\n    result.push(max_value);\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpx3i4tybc.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut\
    \ max_numbers: Vec<isize> = Vec::new();\n    for n in numbers {\n        if n\
    \ > max_number {\n            max_number = n;\n            max_numbers.clear();\n\
    \        }\n        if n == max_number {\n            max_numbers.push(n);\n \
    \       }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpx9evior_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747994
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n        \
    \    max_numbers.push(max_number);\n            max_number = numbers[i];\n   \
    \     }\n    }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpqv8ioo94.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for number in\
    \ numbers {\n        if number > max_number {\n            max_number = number;\n\
    \            max_index = -1;\n        }\n        if number == max_number {\n \
    \           max_index += 1;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptsqyb6ke.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmptsqyb6ke.rs:10:25\n   |\n10 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    for value in numbers {\n        if value > max_value {\n\
    \            max_value = value;\n        }\n    }\n    for value in numbers {\n\
    \        if value == max_value {\n            result.push(value);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpwu_v_teg.rs:11:18\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for value in numbers {\n\
    \    |                  ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n11  |     for value in numbers {\n    |                  ^^^^^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `numbers`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n6   |   \
    \  for value in &numbers {\n    |                  +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_value {\n\
    \            result.push(number);\n            max_value = number;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpcoxtmiiq.rs:5:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(max_number);\n            max_number\
    \ = number;\n        } else {\n            max_number = number;\n        }\n \
    \   }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpewbr9x1y.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgz_1bxzm.rs:13:21\n   |\n\
    13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgz_1bxzm.rs:14:26\n   |\n5  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n14 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n14 |             max_number = *number;\n\
    \   |                          +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut current_max = numbers[0];\n    for number in numbers {\n        if number\
    \ > current_max {\n            max_numbers.push(current_max);\n            current_max\
    \ = number;\n        } else {\n            current_max = number;\n        }\n\
    \    }\n    max_numbers.push(current_max);\n    max_numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp8__jepwu.rs:5:27

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers\
    \ {\n        if n > max_number {\n            max_number = n;\n            max_index\
    \ = -1;\n        }\n        if n == max_number {\n            max_index += 1;\n\
    \        }\n        max_numbers.push(max_index);\n    }\n    max_numbers\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw2rzo_qv.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut\
    \ max_index = -1;\n    for &n in numbers {\n        if n > max_value {\n     \
    \       max_value = n;\n            max_index = -1;\n        }\n        if n ==\
    \ max_value {\n            max_index += 1;\n        }\n    }\n    let mut max_value\
    \ = max_value;\n    let mut max_index = max_index;\n    let mut max_value = max_value;\n\
    \    let mut max_index = max_index;\n    let mut max_value = max_value;\n    let\
    \ mut max_index = max_index;\n    let mut max_value = max_value;\n    let mut\
    \ max_index = max_index;\n    let mut max_value = max_value;\n    let mut max_index\
    \ = max_index;\n    let mut max_value = max_value;\n    let mut max_index = max_index;\n\
    \    let mut max_value = max_value;\n    let mut max_index = max_index;\n    let\
    \ mut max_value = max_value;\n    let mut max_index = max_index;\n    let mut\
    \ max_value = max_value;\n    let mut max_index = max_index;\n    let mut max_value\
    \ = max_value;\n    let mut max_index = max_index;\n    let mut max_value = max_value;\n\
    \    let mut max_index = max_index;\n    let mut max_value = max_value;\n    let\
    \ mut max_index = max_index;\n    let mut max_value = max_value;\n    let mut\
    \ max_index = max_index;\n    let mut max_value = max_value;\n    let mut max_index\
    \ = max_index;\n    let mut max_value = max_value;\n    let mut max_index = max_index;\n\
    \    let mut max_value = max_value;\n    let mut max_index = max_index;\n    let\
    \ mut max_value = max_value;\n    let mut max_index = max_index;\n    let mut\
    \ max_value = max_value;\n    let mut max_index = max_index;\n    let mut max_value\
    \ = max_value;\n    let mut max_index = max_index;\n    let mut max_value = max_value;\n\
    \    let mut max_index = max_index;\n    let mut max_value = max_value;\n    let\
    \ mut max_index = max_index;\n    let mut max_value = max_value;\n    let mut\
    \ max_index = max_index;\n    let mut max_value = max_value;\n    let mut max_index\
    \ = max_index;\n    let mut max_value = max_value;\n    let mut max_index = max_index;\n\
    \    let mut max_value = max_value;\n    let mut max_index = max_index;\n    let\
    \ mut max_value = max_value;\n    let mut max_index = max_index;\n    let mut\
    \ max_value = max_value;\n    let mut max_index = max_index;\n    let mut max_value\
    \ = max_value;\n    let mut max_index = max_index;\n    let mut max_value = max_value;\n\
    \    let mut max_\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcy49vmjz.rs:72:17\n   |\n\
    72 |     let mut max_\n   |                 ^ help: add `;` here\n73 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpcy49vmjz.rs:6:9\n\
    \  |\n6 |     for &n in numbers {\n  |         ^^    ------- this expression has\
    \ type `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpcy49vmjz.rs:3:40\n  |\n3 | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |    -----------                         ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in numbers.iter().rev() {\n        if max_element\
    \ < numbers[index] {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_index, max_element]\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpcxkpm7tt.rs:7:26\n\
    \  |\n7 |         if max_element < numbers[index] {\n  |                     \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpcxkpm7tt.rs:8:27\n\
    \  |\n8 |             max_element = numbers[index];\n  |                     \
    \      ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpcxkpm7tt.rs:9:25\n  |\n5 |    \
    \ let mut max_index: usize = 0;\n  |                        ----- expected due\
    \ to this type\n...\n9 |             max_index = index;\n  |                 \
    \        ^^^^^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcxkpm7tt.rs:12:10\n   |\n12 |     vec![max_index, max_element]\n\
    \   |          ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     vec![max_index.try_into().unwrap(), max_element]\n   |       \
    \            ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_index = 0;\n    for &n in numbers {\n        if n > max_so_far {\n\
    \            max_so_far = n;\n            max_so_far_index = i;\n        }\n \
    \   }\n    let mut max_so_far_rolling_max = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        if i == max_so_far_index {\n            max_so_far_rolling_max.push(max_so_far);\n\
    \        } else {\n            max_so_far_rolling_max.push(numbers[i]);\n    \
    \    }\n    }\n    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n --> /tmp/tmpanb1qjto.rs:9:32\n\
    \  |\n9 |             max_so_far_index = i;\n  |                             \
    \   ^ help: a local variable with a similar name exists: `n`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpanb1qjto.rs:6:9\n  |\n6 |     for &n in numbers\
    \ {\n  |         ^^    ------- this expression has type `Option<isize>`\n  | \
    \        |\n  |         expected `isize`, found reference\n  |         help: you\
    \ can probably remove the explicit borrow: `n`\n  |\n  = note:   expected type\
    \ `isize`\n          found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpj7klxmrh.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for number in numbers {\n        if number > max_element\
    \ {\n            max_element = number;\n            max_index = number;\n    \
    \    }\n    }\n    let mut max_elements: Vec<isize> = Vec::new();\n    for i in\
    \ 0..numbers.len() {\n        if numbers[i] > max_element {\n            max_elements.push(numbers[i]);\n\
    \        }\n    }\n    max_elements\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7pjc7hq7.rs:9:25\n  |\n9 |\
    \             max_index = number;\n  |                         ^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp1apvfiqy.rs:4:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers.reverse();\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpkqsyrvqg.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpj7klxmrh.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_value {\n        \
    \    result.push(max_value);\n            max_value = n;\n        } else {\n \
    \           max_value = n;\n        }\n    }\n    result.push(max_value);\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpx2448yuu.rs:5:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_numbers.push(numbers[i]);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkpxlut3f.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = result.len();\n        }\n        result.push(number);\n\
    \    }\n    result.push(max_number);\n    result.push(max_index);\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg7yuathx.rs:8:21\n  |\n8 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpg7yuathx.rs:9:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n9 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             max_number = *number;\n  |                \
    \          +\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n\
    \ --> /tmp/tmpg7yuathx.rs:6:25\n  |\n6 |     let mut max_index = -1;\n  |    \
    \                     ^^ the trait `Neg` is not implemented for `usize`\n  |\n\
    \  = help: the following other types implement trait `Neg`:\n            &f32\n\
    \            &f64\n            &i128\n            &i16\n            &i32\n   \
    \         &i64\n            &i8\n            &isize\n          and 8 others\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpg7yuathx.rs:14:17\n   |\n14 |  \
    \   result.push(max_number);\n   |                 ^^^^^^^^^^\n   |          \
    \       |\n   |                 expected `&isize`, found `isize`\n   |       \
    \          help: consider borrowing here: `&max_number`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg7yuathx.rs:15:17\n   |\n15 |     result.push(max_index);\n\
    \   |                 ^^^^^^^^^ expected `&isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg7yuathx.rs:16:5\n   |\n3  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut current_number = 0;\n    let mut max_number = numbers[0];\n    for number\
    \ in numbers {\n        if number > max_number {\n            max_number = number;\n\
    \        }\n        if number == current_number {\n            max_numbers.push(max_number);\n\
    \        } else {\n            max_numbers.push(current_number);\n        }\n\
    \        current_number = number;\n    }\n    max_numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp79ymy2rg.rs:6:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &i in numbers {\n      \
    \  if i > max_value {\n            max_value = i;\n            max_index = i;\n\
    \        }\n    }\n    for i in numbers {\n        if i == max_value {\n     \
    \       result.push(max_index);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp72d_q5dy.rs:7:9\n  |\n7 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index\
    \ = 0;\n    for n in numbers {\n        if n > max {\n            max = n;\n \
    \           max_index = 0;\n        }\n        if n == max {\n            max_index\
    \ += 1;\n        }\n    }\n    vec![max; max_index]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp_8kttyi2.rs:4:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976085
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_value {\n            result.push(number);\n            max_value = number;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprxjc6y8o.rs:7:21\n  |\n7 |\
    \         if number > max_value {\n  |                     ^^^^^^^^^\n  |    \
    \                 |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_value`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmprxjc6y8o.rs:9:25\n  |\n5 |     let mut max_value\
    \ = numbers[0];\n  |                         ---------- expected due to this value\n\
    ...\n9 |             max_value = number;\n  |                         ^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |             max_value = *number;\n  |                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprxjc6y8o.rs:12:5\n   |\n3  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n12 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut current_max = numbers[0];\n    for number in numbers.iter().rev() {\n  \
    \      if number > current_max {\n            max_numbers.push(current_max);\n\
    \            current_max = number;\n        } else {\n            current_max\
    \ = number;\n        }\n    }\n    max_numbers.push(current_max);\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnl4_53hm.rs:7:21\n  |\n7 |\
    \         if number > current_max {\n  |                     ^^^^^^^^^^^\n  |\
    \                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&current_max`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpnl4_53hm.rs:9:27\n  |\n5 |     let mut current_max\
    \ = numbers[0];\n  |                           ---------- expected due to this\
    \ value\n...\n9 |             current_max = number;\n  |                     \
    \      ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             current_max = *number;\n  |               \
    \            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnl4_53hm.rs:11:27\n\
    \   |\n5  |     let mut current_max = numbers[0];\n   |                      \
    \     ---------- expected due to this value\n...\n11 |             current_max\
    \ = number;\n   |                           ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             current_max\
    \ = *number;\n   |                           +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmtnh2uyb.rs:13:21\n   |\n\
    13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmtnh2uyb.rs:14:26\n   |\n14 |\
    \             max_number = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    14 |             max_number = *number;\n   |                          +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmppz1wrul_.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &i in numbers {\n      \
    \  if i > max_value {\n            result.push(max_value);\n            max_value\
    \ = i;\n            max_index = result.len() - 1;\n        } else {\n        \
    \    max_value = i;\n            max_index = result.len() - 1;\n        }\n  \
    \  }\n    result.push(max_value);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpiysek3o8.rs:7:9\n  |\n7 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpiysek3o8.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_number {\n            max_number = number;\n        }\n\
    \    }\n    max_numbers.push(max_number);\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprxucta43.rs:7:21\n  |\n7 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmprxucta43.rs:8:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n8 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |             max_number = *number;\n  |                \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprxucta43.rs:13:21\n\
    \   |\n13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprxucta43.rs:14:30\n   |\n14 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n14 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbkd6y44_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_max\
    \ = numbers[0];\n    let mut current_max_index = -1;\n    for &n in numbers {\n\
    \        if n > current_max {\n            current_max = n;\n            current_max_index\
    \ = result.len();\n        }\n        result.push(current_max);\n    }\n    result.push(current_max);\n\
    \    result.push(current_max);\n    result[current_max_index..].iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp147829y3.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp147829y3.rs:6:33\n\
    \  |\n6 |     let mut current_max_index = -1;\n  |                           \
    \      ^^ the trait `Neg` is not implemented for `usize`\n  |\n  = help: the following\
    \ other types implement trait `Neg`:\n            &f32\n            &f64\n   \
    \         &i128\n            &i16\n            &i32\n            &i64\n      \
    \      &i8\n            &isize\n          and 8 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_so_far = numbers[0];\n    for n in numbers {\n        if n > max_so_far\
    \ {\n            max_so_far = n;\n        }\n        if n > max_so_far_so_far\
    \ {\n            max_so_far_so_far = n;\n        }\n    }\n    let mut max_so_far_so_far_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_so_far_so_far {\n\
    \            max_so_far_so_far = n;\n        }\n        if n > max_so_far_so_far_so_far\
    \ {\n            max_so_far_so_far_so_far = n;\n        }\n        if n > max_so_far_so_far_so_far_so_far\
    \ {\n            max_so_far_so_far_so_far_so_far = n;\n        }\n    }\n    let\
    \ mut max_so_far_so_far_so_far_so_far = numbers[0];\n    for n in numbers {\n\
    \        if n > max_so_far_so_far_so_far {\n            max_so_far_so_far_so_far\
    \ = n;\n        }\n        if n > max_so_far_so_far_so_far_so_far {\n        \
    \    max_so_far_so_far_so_far_so_far = n;\n        }\n        if n > max_so_far_so_far_so_far_so_far_so_far\
    \ {\n            max_so_far_so_far_so_far_so_far_so_far = n;\n        }\n    }\n\
    \    let mut max_so_far_so_far_so_far_so_far_so_far = numbers[0];\n    for n in\
    \ numbers {\n        if n > max_so_far_so_far_so_far_so_far {\n            max_so_far_so_far_so_far_so_far\
    \ = n;\n        }\n        if n > max_so_far_so_far_so_far_so_far_so_far {\n \
    \           max_so_far_so_far_so_far_so_far_so_far = n;\n        }\n        if\
    \ n > max_so_far_so_far_so_far_so_far_so_far_so_far {\n            max_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = n;\n        }\n    }\n    max_so_far_so_far_so_far_so_far_so_far_so_far\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `max_so_far_so_far_so_far_so_far` in this\
    \ scope\n  --> /tmp/tmpkb5vf1bx.rs:22:16\n   |\n22 |         if n > max_so_far_so_far_so_far_so_far\
    \ {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `max_so_far_so_far_so_far`\n\nerror[E0425]: cannot\
    \ find value `max_so_far_so_far_so_far_so_far` in this scope\n  --> /tmp/tmpkb5vf1bx.rs:23:13\n\
    \   |\n23 |             max_so_far_so_far_so_far_so_far = n;\n   |           \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name\
    \ exists: `max_so_far_so_far_so_far`\n\nerror[E0425]: cannot find value `max_so_far_so_far_so_far_so_far_so_far`\
    \ in this scope\n  --> /tmp/tmpkb5vf1bx.rs:34:16\n   |\n34 |         if n > max_so_far_so_far_so_far_so_far_so_far\
    \ {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `max_so_far_so_far_so_far_so_far`\n\nerror[E0425]:\
    \ cannot find value `max_so_far_so_far_so_far_so_far_so_far` in this scope\n \
    \ --> /tmp/tmpkb5vf1bx.rs:35:13\n   |\n35 |             max_so_far_so_far_so_far_so_far_so_far\
    \ = n;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `max_so_far_so_far_so_far_so_far`\n\nerror[E0425]:\
    \ cannot find value `max_so_far_so_far_so_far_so_far_so_far_so_far` in this scope\n\
    \  --> /tmp/tmpkb5vf1bx.rs:46:16\n   |\n46 |         if n > max_so_far_so_far_so_far_so_far_so_far_so_far\
    \ {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a\
    \ local variable with a similar name exists: `max_so_far_so_far_so_far_so_far_so_far`\n\
    \nerror[E0425]: cannot find value `max_so_far_so_far_so_far_so_far_so_far_so_far`\
    \ in this scope\n  --> /tmp/tmpkb5vf1bx.rs:47:13\n   |\n47 |             max_so_far_so_far_so_far_so_far_so_far_so_far\
    \ = n;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a\
    \ local variable with a similar name exists: `max_so_far_so_far_so_far_so_far_so_far`\n\
    \nerror[E0425]: cannot find value `max_so_far_so_far_so_far_so_far_so_far_so_fa"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        let mut max_number = numbers[i];\n \
    \       for number in numbers[i..] {\n            if number > max_number {\n \
    \               max_number = number;\n            }\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n   --> /tmp/tmpqbrh4tif.rs:14:23\n    |\n14  |         for\
    \ number in numbers[i..] {\n    |                       ^^^^^^^^^^^^ doesn't have\
    \ a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `[isize]`\n    = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nnote: required by `into_iter`\n\nerror[E0277]:\
    \ `[isize]` is not an iterator\n   --> /tmp/tmpqbrh4tif.rs:14:23\n    |\n14  |\
    \         for number in numbers[i..] {\n    |                       ^^^^^^^^^^^^\
    \ `[isize]` is not an iterator\n    |\n    = help: the trait `Iterator` is not\
    \ implemented for `[isize]`\n    = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nnote: required by `into_iter`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747994
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbkd6y44_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_value {\n\
    \            max_value = number;\n        }\n    }\n    for number in numbers\
    \ {\n        if number == max_value {\n            result.push(number);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp47m1001c.rs:11:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n11  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n6   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbkd6y44_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for number in\
    \ numbers {\n        if number > max_number {\n            max_number = number;\n\
    \            max_index = -1;\n        }\n        if number == max_number {\n \
    \           max_index += 1;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers.reverse();\n    max_numbers.insert(max_index, max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpo955rdtc.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpo955rdtc.rs:10:25\n   |\n10 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers\
    \ {\n        if n > max_number {\n            max_number = n;\n            max_index\
    \ = -1;\n        }\n        if n == max_number {\n            max_numbers.push(max_number);\n\
    \            max_index += 1;\n        }\n    }\n    max_numbers.push((max_index\
    \ + 1));\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmp8l2salxk.rs:17:22\n\
    \   |\n17 |     max_numbers.push((max_index + 1));\n   |                     \
    \ ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n17 -     max_numbers.push((max_index + 1));\n\
    17 +     max_numbers.push(max_index + 1);\n   | \n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp8l2salxk.rs:7:9\n  |\n7 |     for &n in numbers {\n  |         ^^\
    \    ------- this expression has type `Option<isize>`\n  |         |\n  |    \
    \     expected `isize`, found reference\n  |         help: you can probably remove\
    \ the explicit borrow: `n`\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &i in numbers {\n      \
    \  if i > max_value {\n            max_value = i;\n            max_index = i;\n\
    \        }\n    }\n    for i in numbers {\n        if i == max_value {\n     \
    \       result.push(max_index);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp72d_q5dy.rs:7:9\n  |\n7 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_max\
    \ = numbers[0];\n    for n in numbers {\n        if n > current_max {\n      \
    \      result.push(current_max);\n            current_max = n;\n        } else\
    \ {\n            current_max = n;\n        }\n    }\n    result.push(current_max);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpxd7tr_62.rs:5:27

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976085
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    for value in numbers {\n        if value > max_value {\n\
    \            result.push(max_value);\n            max_value = value;\n       \
    \ } else {\n            max_value = value;\n        }\n    }\n    result.push(max_value);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpx8hxrh7a.rs:5:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_number {\n            max_number = number;\n        }\n\
    \    }\n    max_numbers.push(max_number);\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprxucta43.rs:7:21\n  |\n7 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmprxucta43.rs:8:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n8 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |             max_number = *number;\n  |                \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprxucta43.rs:13:21\n\
    \   |\n13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprxucta43.rs:14:30\n   |\n14 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n14 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_value {\n        \
    \    result.push(max_value);\n            max_value = n;\n        } else {\n \
    \           max_value = n;\n        }\n    }\n    result.push(max_value);\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpx2448yuu.rs:5:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpj7klxmrh.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_number {\n       \
    \     result.push(max_number);\n            max_number = n;\n        } else {\n\
    \            max_number = n;\n        }\n    }\n    result.push(max_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp5qaa09na.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976085
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(max_number);\n            max_number\
    \ = number;\n        } else {\n            max_number = number;\n        }\n \
    \   }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpewbr9x1y.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    let mut max_value = numbers[0];\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_value {\n      \
    \      max_value = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_value {\n      \
    \      result.push(max_index);\n            max_value = numbers[i];\n        \
    \    max_index = i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp_d7j9y2d.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp_d7j9y2d.rs:21:5\n   |\n3  | fn rolling_max(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n21 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut\
    \ max_index = -1;\n    for index in 1..numbers.len() {\n        if numbers[index]\
    \ > max_value {\n            max_value = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_value, max_index]\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpdmgkg__4.rs:5:25\n\
    \  |\n5 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdmgkg__4.rs:12:21\n   |\n12 |     vec![max_value, max_index]\n   | \
    \                    ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |     vec![max_value, max_index.try_into().unwrap()]\n   |   \
    \                           ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_index = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number\
    \ in numbers {\n        if number > max_so_far {\n            max_so_far = number;\n\
    \            max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \            max_so_far_rolling_max = number;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_max_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \        }\n    }\n    let mut max_so_far_rolling_max_rolling_max = 0;\n    for\
    \ number in numbers {\n        if number == max_so_far {\n            max_so_far_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_index\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_max_rolling_max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_max_rolling_max_rolling_max = number;\n        }\n\
    \    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index = 0;\n\
    \    for number in numbers {\n        if number == max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = numbers.iter().position(|&x| x == number).unwrap();\n        }\n    }\n  \
    \  let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max = 0;\n \
    \   for number in numbers {\n        if number == max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_roll\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9_vcr9z1.rs:56:64\n   |\n\
    56 |     let mut max_so_far_rolling_max_rolling_max_rolling_max_roll\n   |   \
    \                                                             ^ help: add `;`\
    \ here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp9_vcr9z1.rs:3:40\n  |\n3 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n  |    -----------                         ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &i in numbers {\n        if i > max {\n            max = i;\n\
    \            max_index = i;\n        }\n    }\n    let mut max_rolling_numbers\
    \ = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i] > max\
    \ {\n            max_rolling_numbers.push(max);\n            max = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_rolling_numbers.push(max);\n\
    \    max_rolling_numbers.extend_from_slice(&numbers[max_index..]);\n    max_rolling_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgyf1ypnk.rs:6:9\n  |\n6 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgyf1ypnk.rs:17:25\n   |\n5  |     let mut max_index\
    \ = -1;\n   |                         -- expected due to this value\n...\n17 |\
    \             max_index = i;\n   |                         ^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpgyf1ypnk.rs:21:44\n   |\n21 |     max_rolling_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \   |                                            ^^^^^^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `RangeFrom<isize>`\n   = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n             <RangeFrom<usize> as SliceIndex<[T]>>\n\
    \             <RangeFrom<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeFrom<isize>>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            max_value = numbers[i];\n  \
    \          max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            result.push(max_index);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp2n5n120s.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp2n5n120s.rs:18:5\n   |\n3  | fn rolling_max(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n18 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut\
    \ max_numbers: Vec<isize> = Vec::new();\n    for n in numbers {\n        if n\
    \ > max_number {\n            max_number = n;\n            max_numbers.clear();\n\
    \        }\n        if n == max_number {\n            max_numbers.push(n);\n \
    \       }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpx9evior_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n      \
    \  if n > max_value {\n            max_value = n;\n            max_index = result.len();\n\
    \        }\n        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp00jaqvq8.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp00jaqvq8.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp00jaqvq8.rs:15:17\n   |\n15 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     result.push(max_index.try_into().unwrap());\n   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n      \
    \  if n > max_number {\n            max_number = n;\n            max_index = result.len();\n\
    \        }\n        result.push(n);\n    }\n    result.push(max_number);\n   \
    \ result.push(max_index);\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpix21_xos.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpix21_xos.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpix21_xos.rs:15:17\n   |\n15 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     result.push(max_index.try_into().unwrap());\n   |                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_number {\n            max_numbers.push(max_number);\n  \
    \          max_number = number;\n        } else {\n            max_number = number;\n\
    \        }\n    }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplhr87wp_.rs:7:21\n  |\n7 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmplhr87wp_.rs:9:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n9 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             max_number = *number;\n  |                \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplhr87wp_.rs:11:26\n\
    \   |\n5  |     let mut max_number = numbers[0];\n   |                       \
    \   ---------- expected due to this value\n...\n11 |             max_number =\
    \ number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             max_number\
    \ = *number;\n   |                          +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n      \
    \  if n > max_value {\n            max_value = n;\n            max_index = result.len();\n\
    \        }\n        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp00jaqvq8.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp00jaqvq8.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp00jaqvq8.rs:15:17\n   |\n15 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     result.push(max_index.try_into().unwrap());\n   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpikg7nsvg.rs:12:19\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n12  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        let mut max_number = numbers[i];\n \
    \       for number in numbers[i..] {\n            if number > max_number {\n \
    \               max_number = number;\n            }\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n   --> /tmp/tmpqbrh4tif.rs:14:23\n    |\n14  |         for\
    \ number in numbers[i..] {\n    |                       ^^^^^^^^^^^^ doesn't have\
    \ a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `[isize]`\n    = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nnote: required by `into_iter`\n\nerror[E0277]:\
    \ `[isize]` is not an iterator\n   --> /tmp/tmpqbrh4tif.rs:14:23\n    |\n14  |\
    \         for number in numbers[i..] {\n    |                       ^^^^^^^^^^^^\
    \ `[isize]` is not an iterator\n    |\n    = help: the trait `Iterator` is not\
    \ implemented for `[isize]`\n    = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nnote: required by `into_iter`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747994
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(max_number);\n            max_number\
    \ = number;\n        } else {\n            max_number = number;\n        }\n \
    \   }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpewbr9x1y.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747994
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_number {\n            max_number = number;\n        }\n\
    \    }\n    max_numbers.push(max_number);\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprxucta43.rs:7:21\n  |\n7 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmprxucta43.rs:8:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n8 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |             max_number = *number;\n  |                \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprxucta43.rs:13:21\n\
    \   |\n13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprxucta43.rs:14:30\n   |\n14 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n14 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &i in numbers {\n      \
    \  if i > max_value {\n            result.push(max_value);\n            max_value\
    \ = i;\n            max_index = result.len() - 1;\n        } else {\n        \
    \    max_value = i;\n            max_index = result.len() - 1;\n        }\n  \
    \  }\n    result.push(max_value);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpiysek3o8.rs:7:9\n  |\n7 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpiysek3o8.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_numbers[i-1] {\n\
    \            max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpyr40e3d0.rs:12:17\n\
    \    |\n3   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n6   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n12  |     for i in 1..numbers.len() {\n    |          \
    \       ^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `numbers`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n6   |     for number in &numbers {\n    |               \
    \    +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpj7klxmrh.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbkd6y44_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbkd6y44_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_number {\n            max_number = number;\n        }\n\
    \    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n \
    \       let mut max_number = numbers[i];\n        for number in numbers.iter().rev()\
    \ {\n            if number > max_number {\n                max_number = number;\n\
    \            }\n        }\n        max_numbers.push(max_number);\n    }\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7wljt70t.rs:7:21\n  |\n7 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp7wljt70t.rs:8:26\n  |\n5 |     let mut max_number\
    \ = numbers[0];\n  |                          ---------- expected due to this\
    \ value\n...\n8 |             max_number = number;\n  |                      \
    \    ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |             max_number = *number;\n  |                \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7wljt70t.rs:15:25\n\
    \   |\n15 |             if number > max_number {\n   |                       \
    \  ^^^^^^^^^^\n   |                         |\n   |                         expected\
    \ `&isize`, found `isize`\n   |                         help: consider borrowing\
    \ here: `&max_number`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7wljt70t.rs:16:30\n\
    \   |\n13 |         let mut max_number = numbers[i];\n   |                   \
    \           ---------- expected due to this value\n...\n16 |                 max_number\
    \ = number;\n   |                              ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |        \
    \         max_number = *number;\n   |                              +\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_index = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number\
    \ in numbers {\n        if number > max_so_far {\n            max_so_far = number;\n\
    \            max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \            max_so_far_rolling_max = number;\n        }\n    }\n    Vec::from(max_so_far_rolling_max)\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `Vec<_, _>: From<isize>` is not satisfied\n\
    \  --> /tmp/tmpxsyv18er.rs:14:5\n   |\n14 |     Vec::from(max_so_far_rolling_max)\n\
    \   |     ^^^^^^^^^ the trait `From<isize>` is not implemented for `Vec<_, _>`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T,\
    \ A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut\
    \ [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as\
    \ From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8>\
    \ as From<&str>>\n           and 2 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmtnh2uyb.rs:13:21\n   |\n\
    13 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmtnh2uyb.rs:14:26\n   |\n14 |\
    \             max_number = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    14 |             max_number = *number;\n   |                          +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for number in\
    \ numbers {\n        if number > max_number {\n            max_number = number;\n\
    \            max_index = -1;\n        }\n        if number == max_number {\n \
    \           max_index += 1;\n        }\n    }\n    max_numbers.extend_from_slice(&[max_number]);\n\
    \    max_numbers.extend_from_slice(&[max_index]);\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp_dhfixx6.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976085
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n      \
    \  if n > max_value {\n            max_value = n;\n            max_index = result.len();\n\
    \        }\n        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp00jaqvq8.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp00jaqvq8.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp00jaqvq8.rs:15:17\n   |\n15 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     result.push(max_index.try_into().unwrap());\n   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut\
    \ max_numbers = Vec::new();\n    for n in numbers {\n        if n > max_number\
    \ {\n            max_number = n;\n            max_numbers.clear();\n        }\n\
    \        if n == max_number {\n            max_numbers.push(n);\n        }\n \
    \   }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpiylo82vl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976085
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpj7klxmrh.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = result.len();\n        }\n        result.push(number);\n    }\n\
    \    result.push(max_number);\n    result.push(max_index);\n    result\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpk39jxjf8.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpk39jxjf8.rs:15:17\n   |\n15 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     result.push(max_index.try_into().unwrap());\n   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747993
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] < max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers.reverse();\n\
    \    max_numbers.insert(0, max_index);\n    max_numbers\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpohrbzhpd.rs:6:25\n\
    \  |\n6 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpohrbzhpd.rs:20:27\n   |\n20 |     max_numbers.insert(0, max_index);\n\
    \   |                           ^^^^^^^^^ expected `isize`, found `usize`\n  \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |     max_numbers.insert(0, max_index.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut\
    \ max_so_far_index = 0;\n    for &n in numbers {\n        if n > max_so_far {\n\
    \            max_so_far = n;\n            max_so_far_index = i;\n        }\n \
    \   }\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n    let mut\
    \ max_so_far_rolling_max_value = max_so_far;\n    for &n in numbers {\n      \
    \  if n == max_so_far {\n            max_so_far_rolling_max_index += 1;\n    \
    \    }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n    for\
    \ &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp1dbqsgif.rs:78:3\n\
    \   |\n3  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n68 |  \
    \   for &n in numbers {\n   |                       - this delimiter might not\
    \ be properly closed...\n69 |         if n == max_so\n70 | }\n   | - ...as it\
    \ matches this but it has different indentation\n...\n78 | }\n   |   ^\n\nerror:\
    \ expected `{`, found `}`\n  --> /tmp/tmp1dbqsgif.rs:70:1\n   |\n69 |        \
    \ if n == max_so\n   |         -- this `if` expression has a condition, but no\
    \ block\n70 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value `i` in\
    \ this scope\n --> /tmp/tmp1dbqsgif.rs:9:32\n  |\n9 |             max_so_far_index\
    \ = i;\n  |                                ^ help: a local variable with a similar\
    \ name exists: `n`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1dbqsgif.rs:6:9\n\
    \  |\n6 |     for &n in numbers {\n  |         ^^    ------- this expression has\
    \ type `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1dbqsgif.rs:14:9\n   |\n14 |     for &n in numbers\
    \ {\n   |         ^^    ------- this expression has type `Option<isize>`\n   |\
    \         |\n   |         expected `isize`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1dbqsgif.rs:20:9\n   |\n20 |     for &n in numbers {\n   |    \
    \     ^^    ------- this expression has type `Option<isize>`\n   |         |\n\
    \   |         expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `n`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1dbqsgif.rs:26:9\n\
    \   |\n26 |     for &n in numbers {\n   |         "
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in numbers.iter().rev() {\n        if max_element\
    \ < numbers[index] {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_index, max_element]\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpcxkpm7tt.rs:7:26\n\
    \  |\n7 |         if max_element < numbers[index] {\n  |                     \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpcxkpm7tt.rs:8:27\n\
    \  |\n8 |             max_element = numbers[index];\n  |                     \
    \      ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpcxkpm7tt.rs:9:25\n  |\n5 |    \
    \ let mut max_index: usize = 0;\n  |                        ----- expected due\
    \ to this type\n...\n9 |             max_index = index;\n  |                 \
    \        ^^^^^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcxkpm7tt.rs:12:10\n   |\n12 |     vec![max_index, max_element]\n\
    \   |          ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     vec![max_index.try_into().unwrap(), max_element]\n   |       \
    \            ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n        \
    \    max_numbers.push(max_number);\n            max_number = numbers[i];\n   \
    \     }\n    }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpqv8ioo94.rs:5:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in numbers.iter().rev()\
    \ {\n        if i > max_value {\n            max_value = i;\n            max_index\
    \ = i;\n        }\n    }\n    for i in numbers.iter().rev() {\n        if i ==\
    \ max_index {\n            result.push(max_value);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp02edhchd.rs:8:16\n  |\n8 |\
    \         if i > max_value {\n  |                ^^^^^^^^^\n  |              \
    \  |\n  |                expected `&isize`, found `isize`\n  |               \
    \ help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp02edhchd.rs:9:25\n  |\n5 |     let mut max_value = numbers[0];\n\
    \  |                         ---------- expected due to this value\n...\n9 | \
    \            max_value = i;\n  |                         ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |           \
    \  max_value = *i;\n  |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02edhchd.rs:10:25\n   |\n6  |     let mut max_index = -1;\n\
    \   |                         -- expected due to this value\n...\n10 |       \
    \      max_index = i;\n   |                         ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     max_index = *i;\n   |                         +\n\nerror[E0277]: can't compare\
    \ `&isize` with `{integer}`\n  --> /tmp/tmp02edhchd.rs:14:14\n   |\n14 |     \
    \    if i == max_index {\n   |              ^^ no implementation for `&isize ==\
    \ {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 1
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in numbers.iter().rev() {\n        if max_element\
    \ < numbers[index] {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_index, max_element]\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpcxkpm7tt.rs:7:26\n\
    \  |\n7 |         if max_element < numbers[index] {\n  |                     \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpcxkpm7tt.rs:8:27\n\
    \  |\n8 |             max_element = numbers[index];\n  |                     \
    \      ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpcxkpm7tt.rs:9:25\n  |\n5 |    \
    \ let mut max_index: usize = 0;\n  |                        ----- expected due\
    \ to this type\n...\n9 |             max_index = index;\n  |                 \
    \        ^^^^^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcxkpm7tt.rs:12:10\n   |\n12 |     vec![max_index, max_element]\n\
    \   |          ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     vec![max_index.try_into().unwrap(), max_element]\n   |       \
    \            ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976084
- exit_code: 101
  program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbkd6y44_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976084
