name: HumanEval_3_below_zero
language: rs
prompt: "/// You're given a list of deposit and withdrawal operations on a bank account\
  \ that starts with\n/// zero balance. Your task is to detect if at any point the\
  \ balance of account fallls below zero, and\n/// at that point function should return\
  \ True. Otherwise it should return False.\nfn below_zero(operations: Vec<isize>)\
  \ -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
  \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]),\
  \ false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
  \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
completions: ["    let mut balance = 0;\n    for operation in operations {\n     \
    \   match operation {\n            1 => balance += 1,\n            -1 => balance\
    \ -= 1,\n            _ => (),\n        }\n    }\n    balance < 0", "    let mut\
    \ balance = operations.iter().sum();\n    balance < 0", "    let mut balance =\
    \ operations.iter().sum();\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, i| balance + i);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, op| {\n        match op {\n            Deposit(amount) => {\n    \
    \            acc += amount;\n                acc\n            }\n            Withdraw(amount)\
    \ => {\n                acc -= amount;\n                acc\n            }\n \
    \       }\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, i| {\n\
    \        balance + i\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| {\n        match op {\n            Deposit(amount) => balance + amount,\n\
    \            Withdraw(amount) => balance - amount,\n        }\n    });\n    balance\
    \ < 0", "    let mut balance = 0;\n    for op in operations {\n        if op ==\
    \ 1 {\n            balance += 1;\n        } else if op == 2 {\n            balance\
    \ -= 1;\n        }\n    }\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Deposit(amount) => balance\
    \ + amount,\n            Withdraw(amount) => balance - amount,\n        }\n  \
    \  });\n    balance < 0", "    let mut balance = operations.iter().sum();\n  \
    \  balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        match operation {\n            1 => balance + operation,\n\
    \            -1 => balance - operation,\n            _ => balance,\n        }\n\
    \    });\n\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        match operation {\n            1 => balance\
    \ + 1,\n            -1 => balance - 1,\n            _ => balance,\n        }\n\
    \    });\n\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0"]
stop_tokens:
- "\n}"
