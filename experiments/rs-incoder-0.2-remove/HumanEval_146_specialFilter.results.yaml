language: rs
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n > 10 {\n            if n % 2 == 0 {\n            \
    \    if nums[0] % 2 == 0 && nums[nums.len() - 1] % 2 == 0 {\n                \
    \    count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums`\n   --> /tmp/tmp2_9eu9hr.rs:10:20\n\
    \    |\n5   | fn specialFilter(nums: Vec<isize>) -> isize {\n    |           \
    \       ---- move occurs because `nums` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n6   |     let mut count = 0;\n7   |     for n in\
    \ nums {\n    |              ----\n    |              |\n    |              `nums`\
    \ moved due to this implicit call to `.into_iter()`\n    |              help:\
    \ consider borrowing to avoid moving into the for loop: `&nums`\n...\n10  |  \
    \               if nums[0] % 2 == 0 && nums[nums.len() - 1] % 2 == 0 {\n    |\
    \                    ^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `nums`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n            count +=\
    \ 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpv44gy2u8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && num % 2 == 1 && num % 3 == 1 && num %\
    \ 5 == 1 {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpcmmt_2i4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for n\
    \ in nums {\n        if n > 10 && n % 2 == 1 {\n            cnt += 1;\n      \
    \  }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n \
    \   assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp4q39ni_k.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n            count +=\
    \ 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpv44gy2u8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            if num % 2 == 0 {\n      \
    \          if num % 10 == 1 {\n                    count += 1;\n             \
    \   }\n                if num % 10 == 3 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 5 || num % 10 == 7 {\n     \
    \               count += 1;\n                }\n                if num % 10 ==\
    \ 9 {\n                    count += 1;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpusflv9rw.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n % 2 == 0 {\n            if n % 10 == 1 {\n       \
    \         if n % 11 == 1 {\n                    count += 1;\n                }\n\
    \            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpcculzrqt.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n % 2 == 0 {\n            if n % 10 == 1 && n % 10 ==\
    \ 3 && n % 10 == 5 && n % 10 == 7 && n % 10 == 9 {\n                count += 1;\n\
    \            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpw08qgx17.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for n\
    \ in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n            cnt += 1;\n\
    \        }\n        if n % 10 == 3 && n % 100 != 13 {\n            cnt += 1;\n\
    \        }\n        if n % 10 == 5 && n % 100 != 15 {\n            cnt += 1;\n\
    \        }\n        if n % 10 == 7 && n % 100 != 17 {\n            cnt += 1;\n\
    \        }\n        if n % 10 == 9 && n % 100 != 19 {\n            cnt += 1;\n\
    \        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp9fovgopw.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n      \
    \          count += 1;\n            }\n            if num % 2 == 0 {\n       \
    \         if num % 10 == 1 {\n                    count += 1;\n              \
    \  }\n                if num % 10 == 3 {\n                    count += 1;\n  \
    \              }\n                if num % 10 == 5 || num % 10 == 7 || num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpm96cwjdu.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n            count +=\
    \ 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpv44gy2u8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            if num % 2 == 0 {\n      \
    \          if num % 3 == 0 {\n                    if num % 5 == 0 {\n        \
    \                count += 1;\n                    }\n                }\n     \
    \       }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpc6mle9t9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for n\
    \ in nums {\n        if n % 2 == 0 && n % 3 == 0 && (n % 5 == 0 || n % 7 == 0)\
    \ && n % 9 == 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp71idogwa.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n % 2 == 0 {\n            if n % 10 == 1 {\n       \
    \         if n % 11 == 1 {\n                    count += 1;\n                }\n\
    \            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpcculzrqt.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n % 2 == 0 {\n            if n % 10 == 1 {\n       \
    \         if n % 100 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n  \
    \  let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp46uoskmq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n % 2 == 1 && n % 3 == 1 && n % 5 == 1 && n % 7 == 1\
    \ && n % 9 == 1 {\n            count += 1;\n        }\n    }\n    return count;\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2l1lyo5f.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n            count +=\
    \ 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpv44gy2u8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            if num % 2 == 0 {\n      \
    \          if num % 10 == 1 {\n                    count += 1;\n             \
    \   }\n                if num % 10 == 3 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 5 || num % 10 == 7 {\n     \
    \               count += 1;\n                }\n                if num % 10 ==\
    \ 9 {\n                    count += 1;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpusflv9rw.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n      \
    \          count += 1;\n            }\n            if num % 2 == 0 {\n       \
    \         if num % 10 == 1 {\n                    count += 1;\n              \
    \  }\n                if num % 10 == 3 {\n                    count += 1;\n  \
    \              }\n                if num % 10 == 5 || num % 10 == 7 || num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpm96cwjdu.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n            count +=\
    \ 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n            count\
    \ += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpv44gy2u8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749167
