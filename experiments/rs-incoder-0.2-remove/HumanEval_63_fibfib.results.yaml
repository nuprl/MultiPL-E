language: rs
name: HumanEval_63_fibfib
results:
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib: isize = 0;\n    for i\
    \ in 0..(n-2) {\n        fibfib = fibfib + fibfib(n-1) + fibfib(n-2);\n    }\n\
    \    fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmpoa6gfrws.rs:19:27\n\
    \   |\n17 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n18 |     for i in 0..(n-2) {\n19 |         fibfib = fibfib + fibfib(n-1)\
    \ + fibfib(n-2);\n   |                           ^^^^^^-----\n   |           \
    \                |\n   |                           call expression requires function\n\
    \nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpoa6gfrws.rs:19:41\n\
    \   |\n17 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n18 |     for i in 0..(n-2) {\n19 |         fibfib = fibfib + fibfib(n-1)\
    \ + fibfib(n-2);\n   |                                         ^^^^^^-----\n \
    \  |                                         |\n   |                         \
    \                call expression requires function\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0618`.\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    if n == 3 {\n        return 1;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ mut fibfib: isize = 0;\n    for i in 0..n {\n        fibfib = fibfib + fibfib\
    \ + fibfib;\n    }\n    fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp0zl3cv_o.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    if n == 3 {\n        return 1;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    if n == 3 {\n        return 2;\n    }\n    let mut\
    \ fibfib: isize = 0;\n    let mut fibfib1: isize = 0;\n    let mut fibfib2: isize\
    \ = 0;\n    let mut fibfib3: isize = 0;\n    let mut fibfib4: isize = 0;\n   \
    \ let mut fibfib5: isize = 0;\n    let mut fibfib6: isize = 0;\n    let mut fibfib7:\
    \ isize = 0;\n    let mut fibfib8: isize = 0;\n    let mut fibfib9: isize = 0;\n\
    \    let mut fibfib10: isize = 0;\n    let mut fibfib11: isize = 0;\n    let mut\
    \ fibfib12: isize = 0;\n    let mut fibfib13: isize = 0;\n    let mut fibfib14:\
    \ isize = 0;\n    let mut fibfib15: isize = 0;\n    let mut fibfib16: isize =\
    \ 0;\n    let mut fibfib17: isize = 0;\n    let mut fibfib18: isize = 0;\n   \
    \ let mut fibfib19: isize = 0;\n    let mut fibfib20: isize = 0;\n    let mut\
    \ fibfib21: isize = 0;\n    let mut fibfib22: isize = 0;\n    let mut fibfib23:\
    \ isize = 0;\n    let mut fibfib24: isize = 0;\n    let mut fibfib25: isize =\
    \ 0;\n    let mut fibfib26: isize = 0;\n    let mut fibfib27: isize = 0;\n   \
    \ let mut fibfib28: isize = 0;\n    let mut fibfib29: isize = 0;\n    let mut\
    \ fibfib30: isize = 0;\n    let mut fibfib31: isize = 0;\n    let mut fibfib32:\
    \ isize = 0;\n    let mut fibfib33: isize = 0;\n    let mut fibfib34: isize =\
    \ 0;\n    let mut fibfib35: isize = 0;\n    let mut fibfib36: isize = 0;\n   \
    \ let mut fibfib37: isize = 0;\n    let mut fibfib38: isize = 0;\n    let mut\
    \ fibfib39: isize = 0;\n    let mut fibfib40: isize = 0;\n    let mut fibfib41:\
    \ isize = 0;\n    let mut fibfib42: isize = 0;\n    let mut fibfib43: isize\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy82tgn_4.rs:63:28\n   |\n\
    63 |     let mut fibfib43: isize\n   |                            ^ help: add\
    \ `;` here\n64 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpy82tgn_4.rs:7:24\n  |\n7 | fn fibfib(n: isize) -> isize {\n  | \
    \   ------              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib1 = fibfib(n-1);\n    let\
    \ mut fibfib2 = fibfib(n-2);\n    let mut fibfib3 = fibfib(n-3);\n    fibfib3\
    \ = fibfib1 + fibfib2 + fibfib3;\n    fibfib3\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpwnxz4o0c.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    let mut fibfib: isize = 0;\n    for _ in 0..(n-2) {\n\
    \        fibfib = fibfib + fibfib(n-1);\n    }\n    fibfib\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmpurt3yr3z.rs:19:27\n\
    \   |\n17 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n18 |     for _ in 0..(n-2) {\n19 |         fibfib = fibfib + fibfib(n-1);\n\
    \   |                           ^^^^^^-----\n   |                           |\n\
    \   |                           call expression requires function\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0618`.\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib: isize = 0;\n    for _\
    \ in 0..(n-2) {\n        fibfib = fibfib + fibfib + fibfib;\n    }\n    fibfib\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp245r6qll.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib: isize = 0;\n    for _\
    \ in 0..n {\n        fibfib = fibfib + fibfib - 1;\n    }\n    fibfib\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-31`,\n right: `4`', /tmp/tmpsrjzdc_w.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib: isize = 0;\n    let mut\
    \ fibfib1 = fibfib(n-1);\n    let mut fibfib2 = fibfib(n-2);\n    let mut fibfib3\
    \ = fibfib(n-3);\n    fibfib += fibfib1 + fibfib2 + fibfib3;\n    fibfib\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmpcv4zovb5.rs:18:23\n\
    \   |\n17 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n18 |     let mut fibfib1 = fibfib(n-1);\n   |                \
    \       ^^^^^^-----\n   |                       |\n   |                      \
    \ call expression requires function\n\nerror[E0618]: expected function, found\
    \ `isize`\n  --> /tmp/tmpcv4zovb5.rs:19:23\n   |\n17 |     let mut fibfib: isize\
    \ = 0;\n   |         ---------- `fibfib` has type `isize`\n18 |     let mut fibfib1\
    \ = fibfib(n-1);\n19 |     let mut fibfib2 = fibfib(n-2);\n   |              \
    \         ^^^^^^-----\n   |                       |\n   |                    \
    \   call expression requires function\n\nerror[E0618]: expected function, found\
    \ `isize`\n  --> /tmp/tmpcv4zovb5.rs:20:23\n   |\n17 |     let mut fibfib: isize\
    \ = 0;\n   |         ---------- `fibfib` has type `isize`\n...\n20 |     let mut\
    \ fibfib3 = fibfib(n-3);\n   |                       ^^^^^^-----\n   |       \
    \                |\n   |                       call expression requires function\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659976513
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    let mut fibfib1 = fibfib(n-1);\n    let mut fibfib2\
    \ = fibfib(n-2);\n    let mut fibfib3 = fibfib(n-3);\n    fibfib3 += fibfib2;\n\
    \    fibfib2 += fibfib1;\n    fibfib1 += fibfib3;\n    fibfib3\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmplrxir9zz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib1 = fibfib(n-1);\n    let\
    \ mut fibfib2 = fibfib(n-2);\n    let mut fibfib3 = fibfib(n-3);\n    fibfib3\
    \ += fibfib1 + fibfib2;\n    fibfib3\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp_is2_l4e.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    let mut fibfib1 = fibfib(n-1);\n    let mut fibfib2 =\
    \ fibfib(n-2);\n    let mut fibfib3 = fibfib(n-3);\n    fibfib3 += fibfib2;\n\
    \    fibfib2 += fibfib1;\n    fibfib1 += fibfib3;\n    fibfib3\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpeluzjpd4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpa3gso5ro.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib1 = fibfib(n-1);\n    let\
    \ mut fibfib2 = fibfib(n-2);\n    let mut fibfib3 = fibfib(n-3);\n    fibfib3\
    \ = fibfib1 + fibfib2 + fibfib3;\n    fibfib3\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpwnxz4o0c.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    if n == 3 {\n        return 2;\n    }\n    let mut\
    \ fibfib: isize = 0;\n    for _ in 0..n {\n        fibfib = fibfib + fibfib -\
    \ fibfib + fibfib - fibfib;\n    }\n    fibfib\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpiae1kb5h.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyzyvqwvs.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnec2dq6e.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976514
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnec2dq6e.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyzyvqwvs.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ mut fibfib1 = fibfib(n-1);\n    let mut fibfib2 = fibfib(n-2);\n    let mut\
    \ fibfib3 = fibfib(n-3);\n    fibfib3 = fibfib1 + fibfib2 + fibfib3;\n    return\
    \ fibfib3;\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    if n == 3 {\n        return 1;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    if n == 3 {\n        return 2;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptyg7xe9s.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib: isize = 0;\n    for i\
    \ in 0..(n-2) {\n        fibfib = fibfib + fibfib(n-1) + fibfib(n-2);\n    }\n\
    \    fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmpoa6gfrws.rs:19:27\n\
    \   |\n17 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n18 |     for i in 0..(n-2) {\n19 |         fibfib = fibfib + fibfib(n-1)\
    \ + fibfib(n-2);\n   |                           ^^^^^^-----\n   |           \
    \                |\n   |                           call expression requires function\n\
    \nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpoa6gfrws.rs:19:41\n\
    \   |\n17 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n18 |     for i in 0..(n-2) {\n19 |         fibfib = fibfib + fibfib(n-1)\
    \ + fibfib(n-2);\n   |                                         ^^^^^^-----\n \
    \  |                                         |\n   |                         \
    \                call expression requires function\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0618`.\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyzyvqwvs.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    if n == 3 {\n        return 1;\n    }\n    let mut\
    \ fibfib: isize = 0;\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    return fibfib;\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmpw2q82x1u.rs:21:15\n\
    \   |\n20 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n21 |     fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \   |               ^^^^^^-----\n   |               |\n   |               call\
    \ expression requires function\n\nerror[E0618]: expected function, found `isize`\n\
    \  --> /tmp/tmpw2q82x1u.rs:21:29\n   |\n20 |     let mut fibfib: isize = 0;\n\
    \   |         ---------- `fibfib` has type `isize`\n21 |     fibfib += fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n   |                             ^^^^^^-----\n\
    \   |                             |\n   |                             call expression\
    \ requires function\n\nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpw2q82x1u.rs:21:43\n\
    \   |\n20 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n21 |     fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \   |                                           ^^^^^^-----\n   |            \
    \                               |\n   |                                      \
    \     call expression requires function\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    if n == 3 {\n        return 2;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptyg7xe9s.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ mut fibfib: isize = 0;\n    for i in 0..(n-2) {\n        fibfib = fibfib + fibfib(n-1)\
    \ + fibfib(n-2);\n    }\n    return fibfib;\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmpl5ohznyx.rs:16:27\n\
    \   |\n14 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n15 |     for i in 0..(n-2) {\n16 |         fibfib = fibfib + fibfib(n-1)\
    \ + fibfib(n-2);\n   |                           ^^^^^^-----\n   |           \
    \                |\n   |                           call expression requires function\n\
    \nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpl5ohznyx.rs:16:41\n\
    \   |\n14 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n15 |     for i in 0..(n-2) {\n16 |         fibfib = fibfib + fibfib(n-1)\
    \ + fibfib(n-2);\n   |                                         ^^^^^^-----\n \
    \  |                                         |\n   |                         \
    \                call expression requires function\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0618`.\n"
  stdout: ''
  timestamp: 1659976513
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib: isize = 0;\n    let mut\
    \ fibfib1 = fibfib(n-1);\n    let mut fibfib2 = fibfib(n-2);\n    let mut fibfib3\
    \ = fibfib(n-3);\n    fibfib += fibfib1 + fibfib2 + fibfib3;\n    fibfib\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmpcv4zovb5.rs:18:23\n\
    \   |\n17 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n18 |     let mut fibfib1 = fibfib(n-1);\n   |                \
    \       ^^^^^^-----\n   |                       |\n   |                      \
    \ call expression requires function\n\nerror[E0618]: expected function, found\
    \ `isize`\n  --> /tmp/tmpcv4zovb5.rs:19:23\n   |\n17 |     let mut fibfib: isize\
    \ = 0;\n   |         ---------- `fibfib` has type `isize`\n18 |     let mut fibfib1\
    \ = fibfib(n-1);\n19 |     let mut fibfib2 = fibfib(n-2);\n   |              \
    \         ^^^^^^-----\n   |                       |\n   |                    \
    \   call expression requires function\n\nerror[E0618]: expected function, found\
    \ `isize`\n  --> /tmp/tmpcv4zovb5.rs:20:23\n   |\n17 |     let mut fibfib: isize\
    \ = 0;\n   |         ---------- `fibfib` has type `isize`\n...\n20 |     let mut\
    \ fibfib3 = fibfib(n-3);\n   |                       ^^^^^^-----\n   |       \
    \                |\n   |                       call expression requires function\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659976513
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyzyvqwvs.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ mut fibfib1 = fibfib(n-1);\n    let mut fibfib2 = fibfib(n-2);\n    let mut\
    \ fibfib3 = fibfib(n-3);\n    fibfib3 = fibfib1 + fibfib2 + fibfib3;\n    fibfib3\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib: isize = 0;\n    for i\
    \ in 0..n {\n        fibfib = fibfib + fibfib + fibfib;\n    }\n    fibfib\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpk_tmc_3d.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ mut fibfib1 = fibfib(n-1);\n    let mut fibfib2 = fibfib(n-2);\n    let mut\
    \ fibfib3 = fibfib(n-3);\n    fibfib3 = fibfib1 + fibfib2 + fibfib3;\n    fibfib3\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976514
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ mut fibfib: isize = 0;\n    for i in 0..n {\n        fibfib = fibfib + fibfib\
    \ + fibfib;\n    }\n    fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp0zl3cv_o.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyzyvqwvs.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib: isize = 0;\n    for i\
    \ in 0..n {\n        fibfib = fibfib + fibfib + fibfib;\n    }\n    fibfib\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpk_tmc_3d.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ mut fibfib: isize = 0;\n    let mut fibfib2 = fibfib;\n    let mut fibfib3 =\
    \ fibfib2;\n    let mut fibfib4 = fibfib3;\n    let mut fibfib5 = fibfib4;\n \
    \   let mut fibfib6 = fibfib5;\n    let mut fibfib7 = fibfib6;\n    let mut fibfib8\
    \ = fibfib7;\n    let mut fibfib9 = fibfib8;\n    let mut fibfib10 = fibfib9;\n\
    \    let mut fibfib11 = fibfib10;\n    let mut fibfib12 = fibfib11;\n    let mut\
    \ fibfib13 = fibfib12;\n    let mut fibfib14 = fibfib13;\n    let mut fibfib15\
    \ = fibfib14;\n    let mut fibfib16 = fibfib15;\n    let mut fibfib17 = fibfib16;\n\
    \    let mut fibfib18 = fibfib17;\n    let mut fibfib19 = fibfib18;\n    let mut\
    \ fibfib20 = fibfib19;\n    let mut fibfib21 = fibfib20;\n    let mut fibfib22\
    \ = fibfib21;\n    let mut fibfib23 = fibfib22;\n    let mut fibfib24 = fibfib23;\n\
    \    let mut fibfib25 = fibfib24;\n    let mut fibfib26 = fibfib25;\n    let mut\
    \ fibfib27 = fibfib26;\n    let mut fibfib28 = fibfib27;\n    let mut fibfib29\
    \ = fibfib28;\n    let mut fibfib30 = fibfib29;\n    let mut fibfib31 = fibfib30;\n\
    \    let mut fibfib32 = fibfib31;\n    let mut fibfib33 = fibfib32;\n    let mut\
    \ fibfib34 = fibfib33;\n    let mut fibfib35 = fibfib34;\n    let mut fibfib36\
    \ = fibfib35;\n    let mut fibfib37 = fibfib36;\n    let mut fibfib38 = fibfib37;\n\
    \    let mut fibfib39 = fibfib38;\n    let mut fibfib40 = fibfib39;\n    let mut\
    \ fibfib41 = fibfib40;\n    let mut fibfib42 = fibfib41;\n    let mut fibfib43\
    \ = fibfib42;\n    let mut fibfib44 = fib\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdyaz5clh.rs:57:27\n   |\n\
    57 |     let mut fibfib44 = fib\n   |                           ^ help: add `;`\
    \ here\n58 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `fib`\
    \ in this scope\n  --> /tmp/tmpdyaz5clh.rs:57:24\n   |\n57 |     let mut fibfib44\
    \ = fib\n   |                        ^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpdyaz5clh.rs:7:24\n  |\n7 | fn fibfib(n: isize)\
    \ -> isize {\n  |    ------              ^^^^^ expected `isize`, found `()`\n\
    \  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib1 = fibfib(n-1);\n    let\
    \ mut fibfib2 = fibfib(n-2);\n    let mut fibfib3 = fibfib(n-3);\n    fibfib3\
    \ = fibfib1 + fibfib2 + fibfib3;\n    fibfib3\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpwnxz4o0c.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    let mut fibfib: isize = 0;\n    for _ in 0..(n-2) {\n\
    \        fibfib = fibfib + fibfib(n-1);\n    }\n    fibfib\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmpsw9fipo5.rs:19:27\n\
    \   |\n17 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n18 |     for _ in 0..(n-2) {\n19 |         fibfib = fibfib + fibfib(n-1);\n\
    \   |                           ^^^^^^-----\n   |                           |\n\
    \   |                           call expression requires function\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0618`.\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib: isize = 0;\n    for i\
    \ in 0..n {\n        fibfib = fibfib + fibfib + fibfib;\n    }\n    fibfib\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpk_tmc_3d.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    let mut fibfib: isize = 0;\n    fibfib = fibfib + fibfib\
    \ + fibfib;\n    fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpw9vwp8pj.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyzyvqwvs.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    let mut fibfib: isize = 0;\n    let mut fibfib2: isize\
    \ = 1;\n    let mut fibfib3: isize = 2;\n    for _ in 0..n {\n        fibfib +=\
    \ fibfib2;\n        fibfib2 += fibfib3;\n        fibfib3 += fibfib;\n    }\n \
    \   fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `53`,\n right: `4`', /tmp/tmp44jm20gz.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyzyvqwvs.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut fibfib: isize = 0;\n    for _\
    \ in 0..n {\n        fibfib = fibfib + fibfib + fibfib;\n    }\n    fibfib\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpbfrxp2qh.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    if n == 3 {\n        return 2;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptyg7xe9s.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp3zygrzk3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749222
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ mut fibfib: isize = 0;\n    for i in 0..n {\n        fibfib = fibfib + fibfib\
    \ + fibfib;\n    }\n    return fibfib;\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpw2i8f97r.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976514
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749222
