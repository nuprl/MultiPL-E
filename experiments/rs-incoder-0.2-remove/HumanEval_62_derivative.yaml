name: HumanEval_62_derivative
language: rs
prompt: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n/// Return derivative of this polynomial in the same form.\nfn derivative(xs:\
  \ Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
  \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
  \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
  \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
  }\n"
completions: ["    let mut result = Vec::new();\n    for i in 0..(xs.len() - 1) {\n\
    \        result.push(xs[i + 1] - xs[i]);\n    }\n    result", "    let mut dx:\
    \ Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx", "    let mut\
    \ result = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i] * xs[i] / xs.len());\n    }\n    result", "    let mut result =\
    \ Vec::new();\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1]\
    \ - xs[i]);\n    }\n    result", "    let mut result = Vec::new();\n    let mut\
    \ x = 1;\n    for &x in xs {\n        result.push((x * x) - x);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i]\
    \ * xs[i + 1]);\n    }\n    result", "    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx", "    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result", "    let mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n\
    \    dx.pop();\n    dx", "    let mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n\
    \    dx.reverse();\n    dx", "    let mut result = Vec::new();\n    for i in xs.iter()\
    \ {\n        result.push(i * i);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result", "    let mut result = Vec::new();\n    for i in 0..(xs.len()\
    \ - 1) {\n        result.push(xs[i + 1] - xs[i]);\n    }\n    result", "    let\
    \ mut result = Vec::new();\n    let mut x = 1;\n    for i in xs.iter() {\n   \
    \     result.push(x * i);\n        x *= i;\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result", "    let mut result = Vec::new();\n  \
    \  for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len() as isize);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ - 1]);\n    }\n    result", "    let mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n\
    \    dx.pop();\n    dx", "    let mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx", "    let mut result = Vec::new();\n  \
    \  for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n   \
    \ }\n    result"]
stop_tokens:
- "\n}"
