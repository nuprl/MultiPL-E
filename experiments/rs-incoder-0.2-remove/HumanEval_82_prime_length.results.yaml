language: rs
name: HumanEval_82_prime_length
results:
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    string.len() == prime_length(string.len())\n}\n\nfn main()\
    \ {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"\
    Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n\
    \    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"\
    orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n\
    \    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"\
    MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n \
    \   assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"\
    gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"\
    M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3m9nb5cy.rs:5:34\n  |\n5 |\
    \     string.len() == prime_length(string.len())\n  |                        \
    \          ^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                                  |\n  |                                 \
    \ expected struct `String`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp3m9nb5cy.rs:5:21\n  |\n5 |     string.len() == prime_length(string.len())\n\
    \  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `bool`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length: usize = 0;\n    for ch in string.chars()\
    \ {\n        if ch >= '0' && ch <= '9' {\n            prime_length += 1;\n   \
    \     }\n    }\n    if prime_length == 0 {\n        return false;\n    }\n   \
    \ let mut prime_length: usize = 0;\n    for ch in string.chars() {\n        if\
    \ ch >= '0' && ch <= '9' {\n            prime_length += 1;\n        }\n    }\n\
    \    if prime_length == 0 {\n        return false;\n    }\n    let mut prime_length:\
    \ usize = 0;\n    for ch in string.chars() {\n        if ch >= '0' && ch <= '9'\
    \ {\n            prime_length += 1;\n        }\n    }\n    if prime_length ==\
    \ 0 {\n        return false;\n    }\n    let mut prime_length: usize = 0;\n  \
    \  for ch in string.chars() {\n        if ch >= '0' && ch <= '9' {\n         \
    \   prime_length += 1;\n        }\n    }\n    if prime_length == 0 {\n       \
    \ return false;\n    }\n    let mut prime_length: usize = 0;\n    for ch in string.chars()\
    \ {\n        if ch >= '0' && ch <= '9' {\n            prime_length += 1;\n   \
    \     }\n    }\n    if prime_length == 0 {\n        return false;\n    }\n   \
    \ let mut prime_length: usize = 0;\n    for ch in string.chars() {\n        if\
    \ ch >= '0' && ch <= '9' {\n            prime_length += 1;\n        }\n    }\n\
    \    if prime_length == 0 {\n        return false;\n    }\n    let mut prime_length:\
    \ usize = 0;\n    for ch in string.chars() {\n        if ch >= '0' && ch <= '9'\
    \ {\n            prime_length += 1;\n        }\n    }\n    if prime_length ==\
    \ 0 {\n        return false;\n    }\n    let mut prime_length: usize = 0;\n  \
    \  for ch in string.chars() {\n        if ch >= '0' && ch <= '9' {\n         \
    \   prime_length += 1;\n        }\n    }\n    if prime_length == 0 {\n       \
    \ return false;\n    }\n    let mut prime_length: usize = 0;\n    for ch in string.chars()\
    \ {\n        if ch >= '0' && ch <= '9' {\n            prime_length += 1;\n   \
    \     }\n    }\n    if prime_length == 0 {\n        return false;\n    }\n   \
    \ let mut prime_length: usize = 0;\n    for ch in string.chars() {\n        if\
    \ ch >= '0' && ch <= '9' {\n            prime_length\n}\n\nfn main() {\n    let\
    \ candidate = prime_length;\n    assert_eq!(candidate(String::from(\"Hello\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n    assert_eq!(candidate(String::from(\"\
    kittens\")), true);\n    assert_eq!(candidate(String::from(\"orange\")), false);\n\
    \    assert_eq!(candidate(String::from(\"wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    world\")), true);\n    assert_eq!(candidate(String::from(\"MadaM\")), true);\n\
    \    assert_eq!(candidate(String::from(\"Wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"HI\")), true);\n    assert_eq!(candidate(String::from(\"\
    go\")), true);\n    assert_eq!(candidate(String::from(\"gogo\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n    assert_eq!(candidate(String::from(\"\
    Madam\")), true);\n    assert_eq!(candidate(String::from(\"M\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp__mm9qa4.rs:110:3\n\
    \    |\n4   | fn prime_length(string: String) -> bool {\n    |               \
    \                          - unclosed delimiter\n...\n87  |     for ch in string.chars()\
    \ {\n    |                              - unclosed delimiter\n88  |         if\
    \ ch >= '0' && ch <= '9' {\n    |                                   - this delimiter\
    \ might not be properly closed...\n89  |             prime_length\n90  | }\n \
    \   | - ...as it matches this but it has different indentation\n...\n110 | }\n\
    \    |   ^\n\nerror[E0434]: can't capture dynamic environment in a fn item\n \
    \ --> /tmp/tmp__mm9qa4.rs:93:21\n   |\n93 |     let candidate = prime_length;\n\
    \   |                     ^^^^^^^^^^^^\n   |\n   = help: use the `|| { ... }`\
    \ closure form instead\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp__mm9qa4.rs:89:13\n\
    \   |\n88 | /         if ch >= '0' && ch <= '9' {\n89 | |             prime_length\n\
    \   | |             ^^^^^^^^^^^^ expected `()`, found `usize`\n90 | | }\n   |\
    \ |_- expected this to be `()`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp__mm9qa4.rs:87:5\n\
    \    |\n4   |   fn prime_length(string: String) -> bool {\n    |             \
    \                         ---- expected `bool` because of return type\n...\n87\
    \  | /     for ch in string.chars() {\n88  | |         if ch >= '0' && ch <= '9'\
    \ {\n89  | |             prime_length\n90  | | }\n...   |\n109 | |     assert_eq!(candidate(String::from(\"\
    0\")), false);\n110 | | }\n    | |__^ expected `bool`, found `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0434.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 101
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length: usize = 0;\n    for ch in string.chars()\
    \ {\n        if prime_length == 0 {\n            prime_length += 1;\n        }\
    \ else if prime_length == 1 {\n            if ch != ' ' {\n                prime_length\
    \ += 1;\n            }\n        } else {\n            if ch != ' ' {\n       \
    \         prime_length += 2;\n            }\n        }\n    }\n    prime_length\
    \ == string.len()\n}\n\nfn main() {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"\
    Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n\
    \    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"\
    orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n\
    \    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"\
    MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n \
    \   assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"\
    gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"\
    M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn1m2jnrg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 101
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    string.len() > 2 && string.len() <= 100 && string.chars().all(|c|\
    \ {\n        c >= '0' && c <= '9'\n    })\n}\n\nfn main() {\n    let candidate\
    \ = prime_length;\n    assert_eq!(candidate(String::from(\"Hello\")), true);\n\
    \    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n    assert_eq!(candidate(String::from(\"\
    kittens\")), true);\n    assert_eq!(candidate(String::from(\"orange\")), false);\n\
    \    assert_eq!(candidate(String::from(\"wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    world\")), true);\n    assert_eq!(candidate(String::from(\"MadaM\")), true);\n\
    \    assert_eq!(candidate(String::from(\"Wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"HI\")), true);\n    assert_eq!(candidate(String::from(\"\
    go\")), true);\n    assert_eq!(candidate(String::from(\"gogo\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n    assert_eq!(candidate(String::from(\"\
    Madam\")), true);\n    assert_eq!(candidate(String::from(\"M\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpefvhwvm3.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length: usize = 0;\n    for c in string.chars()\
    \ {\n        if c % 2 == 0 {\n            continue;\n        }\n        for d\
    \ in 2..(c / 2) {\n            if c % d == 0 {\n                prime_length +=\
    \ 1;\n                break;\n            }\n        }\n        if prime_length\
    \ == c {\n            return true;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"\
    Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n\
    \    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"\
    orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n\
    \    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"\
    MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n \
    \   assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"\
    gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"\
    M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `char` by `{integer}`\n --> /tmp/tmph9ac0dh4.rs:7:14\n\
    \  |\n7 |         if c % 2 == 0 {\n  |            - ^ - {integer}\n  |       \
    \     |\n  |            char\n\nerror[E0369]: cannot divide `char` by `{integer}`\n\
    \  --> /tmp/tmph9ac0dh4.rs:10:24\n   |\n10 |         for d in 2..(c / 2) {\n \
    \  |                      - ^ - {integer}\n   |                      |\n   | \
    \                     char\n\nerror[E0369]: cannot mod `char` by `{integer}`\n\
    \  --> /tmp/tmph9ac0dh4.rs:11:18\n   |\n11 |             if c % d == 0 {\n   |\
    \                - ^ - {integer}\n   |                |\n   |                char\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmph9ac0dh4.rs:16:28\n   |\n16 |\
    \         if prime_length == c {\n   |                            ^ expected `usize`,\
    \ found `char`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length: usize = 0;\n    for ch in string.chars()\
    \ {\n        if prime_length == 0 {\n            if ch % 2 == 0 {\n          \
    \      prime_length += 1;\n            }\n        } else {\n            if ch\
    \ % 3 == 0 {\n                prime_length += 1;\n            }\n        }\n \
    \   }\n    prime_length == string.len()\n}\n\nfn main() {\n    let candidate =\
    \ prime_length;\n    assert_eq!(candidate(String::from(\"Hello\")), true);\n \
    \   assert_eq!(candidate(String::from(\"abcdcba\")), true);\n    assert_eq!(candidate(String::from(\"\
    kittens\")), true);\n    assert_eq!(candidate(String::from(\"orange\")), false);\n\
    \    assert_eq!(candidate(String::from(\"wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    world\")), true);\n    assert_eq!(candidate(String::from(\"MadaM\")), true);\n\
    \    assert_eq!(candidate(String::from(\"Wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"HI\")), true);\n    assert_eq!(candidate(String::from(\"\
    go\")), true);\n    assert_eq!(candidate(String::from(\"gogo\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n    assert_eq!(candidate(String::from(\"\
    Madam\")), true);\n    assert_eq!(candidate(String::from(\"M\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `char` by `{integer}`\n --> /tmp/tmpq138bkko.rs:8:19\n\
    \  |\n8 |             if ch % 2 == 0 {\n  |                -- ^ - {integer}\n\
    \  |                |\n  |                char\n\nerror[E0369]: cannot mod `char`\
    \ by `{integer}`\n  --> /tmp/tmpq138bkko.rs:12:19\n   |\n12 |             if ch\
    \ % 3 == 0 {\n   |                -- ^ - {integer}\n   |                |\n  \
    \ |                char\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    string.len() == prime_length(string.len())\n}\n\nfn main()\
    \ {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"\
    Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n\
    \    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"\
    orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n\
    \    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"\
    MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n \
    \   assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"\
    gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"\
    M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3m9nb5cy.rs:5:34\n  |\n5 |\
    \     string.len() == prime_length(string.len())\n  |                        \
    \          ^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                                  |\n  |                                 \
    \ expected struct `String`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp3m9nb5cy.rs:5:21\n  |\n5 |     string.len() == prime_length(string.len())\n\
    \  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `bool`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length: usize = 0;\n    let mut prime_length_string:\
    \ String = string.to_string();\n    let mut prime_length_string: String = prime_length_string.to_owned();\n\
    \    let mut prime_length_string: String = prime_length_string.to_owned();\n \
    \   let mut prime_length_string: String = prime_length_string.to_owned();\n  \
    \  let mut prime_length_string: String = prime_length_string.to_owned();\n   \
    \ let mut prime_length_string: String = prime_length_string.to_owned();\n    let\
    \ mut prime_length_string: String = prime_length_string.to_owned();\n    let mut\
    \ prime_length_string: String = prime_length_string.to_owned();\n    let mut prime_length_string:\
    \ String = prime_length_string.to_owned();\n    let mut prime_length_string: String\
    \ = prime_length_string.to_owned();\n    let mut prime_length_string: String =\
    \ prime_length_string.to_owned();\n    let mut prime_length_string: String = prime_length_string.to_owned();\n\
    \    let mut prime_length_string: String = prime_length_string.to_owned();\n \
    \   let mut prime_length_string: String = prime_length_string.to_owned();\n  \
    \  let mut prime_length_string: String = prime_length_string.to_owned();\n   \
    \ let mut prime_length_string: String = prime_length_string.to_owned();\n    let\
    \ mut prime_length_string: String = prime_length_string.to_owned();\n    let mut\
    \ prime_length_string: String = prime_length_string.to_owned();\n    let mut prime_length_string:\
    \ String = prime_length_string.to_owned();\n    let mut prime_length_string: String\
    \ = prime_length_string.to_owned();\n    let mut prime_length_string: String =\
    \ prime_length_string.to_owned();\n    let mut prime_length_string: String = prime_length_string.to_owned();\n\
    \    let mut prime_length_string: String = prime_length_string.to_owned();\n \
    \   let mut prime_length_string: String = prime_length_string.to_owned();\n  \
    \  let mut prime_length_string: String = prime_length_string.to_owned();\n   \
    \ let mut prime_length_string: String = prime_length_string.to_owned();\n    let\
    \ mut prime_length_string: String = prime_length_string.to_owned();\n    let mut\
    \ prime_length_string: String = prime_length_string.to_owned();\n    let mu\n\
    }\n\nfn main() {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"\
    Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n\
    \    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"\
    orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n\
    \    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"\
    MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n \
    \   assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"\
    gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"\
    M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmplg1ftvhz.rs:34:11\n   |\n\
    34 |     let mu\n   |           ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmplg1ftvhz.rs:4:36\n  |\n\
    4 | fn prime_length(string: String) -> bool {\n  |    ------------           \
    \         ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length: usize = 0;\n    for ch in string.chars()\
    \ {\n        if !is_prime(ch as usize) {\n            prime_length += 1;\n   \
    \     }\n    }\n    prime_length == string.len()\n}\n\nfn main() {\n    let candidate\
    \ = prime_length;\n    assert_eq!(candidate(String::from(\"Hello\")), true);\n\
    \    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n    assert_eq!(candidate(String::from(\"\
    kittens\")), true);\n    assert_eq!(candidate(String::from(\"orange\")), false);\n\
    \    assert_eq!(candidate(String::from(\"wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    world\")), true);\n    assert_eq!(candidate(String::from(\"MadaM\")), true);\n\
    \    assert_eq!(candidate(String::from(\"Wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"HI\")), true);\n    assert_eq!(candidate(String::from(\"\
    go\")), true);\n    assert_eq!(candidate(String::from(\"gogo\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n    assert_eq!(candidate(String::from(\"\
    Madam\")), true);\n    assert_eq!(candidate(String::from(\"M\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmp0t49fl6x.rs:7:13\n\
    \  |\n7 |         if !is_prime(ch as usize) {\n  |             ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 101
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length: usize = 0;\n    for ch in string.chars()\
    \ {\n        if ch >= '0' && ch <= '9' {\n            prime_length += 1;\n   \
    \     }\n    }\n    if prime_length == 0 {\n        return false;\n    }\n   \
    \ let mut prime_length_inverse: usize = 1;\n    for i in 1..prime_length {\n \
    \       prime_length_inverse *= i;\n    }\n    if prime_length_inverse % prime_length\
    \ == 0 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n \
    \   let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"Hello\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n    assert_eq!(candidate(String::from(\"\
    kittens\")), true);\n    assert_eq!(candidate(String::from(\"orange\")), false);\n\
    \    assert_eq!(candidate(String::from(\"wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    world\")), true);\n    assert_eq!(candidate(String::from(\"MadaM\")), true);\n\
    \    assert_eq!(candidate(String::from(\"Wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"HI\")), true);\n    assert_eq!(candidate(String::from(\"\
    go\")), true);\n    assert_eq!(candidate(String::from(\"gogo\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n    assert_eq!(candidate(String::from(\"\
    Madam\")), true);\n    assert_eq!(candidate(String::from(\"M\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_zvvztkg.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 101
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length: usize = 0;\n    for ch in string.chars()\
    \ {\n        if prime_length == 0 {\n            prime_length = ch as usize;\n\
    \        }\n        if prime_length == ch as usize {\n            prime_length\
    \ += 1;\n        }\n        if prime_length == ch as usize * ch as usize {\n \
    \           return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = prime_length;\n    assert_eq!(candidate(String::from(\"Hello\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n    assert_eq!(candidate(String::from(\"\
    kittens\")), true);\n    assert_eq!(candidate(String::from(\"orange\")), false);\n\
    \    assert_eq!(candidate(String::from(\"wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    world\")), true);\n    assert_eq!(candidate(String::from(\"MadaM\")), true);\n\
    \    assert_eq!(candidate(String::from(\"Wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"HI\")), true);\n    assert_eq!(candidate(String::from(\"\
    go\")), true);\n    assert_eq!(candidate(String::from(\"gogo\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n    assert_eq!(candidate(String::from(\"\
    Madam\")), true);\n    assert_eq!(candidate(String::from(\"M\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpalbq6are.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length: usize = 0;\n    for ch in string.chars()\
    \ {\n        if prime_length == 0 {\n            prime_length += 1;\n        }\n\
    \        if prime_length == ch {\n            prime_length += 1;\n        }\n\
    \    }\n    prime_length == string.len()\n}\n\nfn main() {\n    let candidate\
    \ = prime_length;\n    assert_eq!(candidate(String::from(\"Hello\")), true);\n\
    \    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n    assert_eq!(candidate(String::from(\"\
    kittens\")), true);\n    assert_eq!(candidate(String::from(\"orange\")), false);\n\
    \    assert_eq!(candidate(String::from(\"wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    world\")), true);\n    assert_eq!(candidate(String::from(\"MadaM\")), true);\n\
    \    assert_eq!(candidate(String::from(\"Wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"HI\")), true);\n    assert_eq!(candidate(String::from(\"\
    go\")), true);\n    assert_eq!(candidate(String::from(\"gogo\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n    assert_eq!(candidate(String::from(\"\
    Madam\")), true);\n    assert_eq!(candidate(String::from(\"M\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyc8ra96j.rs:10:28\n   |\n\
    10 |         if prime_length == ch {\n   |                            ^^ expected\
    \ `usize`, found `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length: usize = 0;\n    for ch in string.chars()\
    \ {\n        if ch >= '0' && ch <= '9' {\n            prime_length += 1;\n   \
    \     }\n    }\n    if prime_length == 0 {\n        return false;\n    }\n   \
    \ if prime_length == 1 {\n        return true;\n    }\n    let mut prime_length2:\
    \ usize = 1;\n    for ch in string.chars() {\n        if ch >= '0' && ch <= '9'\
    \ {\n            prime_length2 += 1;\n        }\n    }\n    if prime_length2 ==\
    \ prime_length {\n        return true;\n    }\n    let mut prime_length3: usize\
    \ = 2;\n    for ch in string.chars() {\n        if ch >= '0' && ch <= '9' {\n\
    \            prime_length3 += 1;\n        }\n    }\n    if prime_length3 == prime_length\
    \ {\n        return true;\n    }\n    let mut prime_length4: usize = 3;\n    for\
    \ ch in string.chars() {\n        if ch >= '0' && ch <= '9' {\n            prime_length4\
    \ += 1;\n        }\n    }\n    if prime_length4 == prime_length {\n        return\
    \ true;\n    }\n    let mut prime_length5: usize = 4;\n    for ch in string.chars()\
    \ {\n        if ch >= '0' && ch <= '9' {\n            prime_length5 += 1;\n  \
    \      }\n    }\n    if prime_length5 == prime_length {\n        return true;\n\
    \    }\n    let mut prime_length6: usize = 5;\n    for ch in string.chars() {\n\
    \        if ch >= '0' && ch <= '9' {\n            prime_length6 += 1;\n      \
    \  }\n    }\n    if prime_length6 == prime_length {\n        return true;\n  \
    \  }\n    let mut prime_length7: usize = 6;\n    for ch in string.chars() {\n\
    \        if ch >= '0' && ch <= '9' {\n            prime_length7 += 1;\n      \
    \  }\n    }\n    if prime_length7 == prime_length {\n        return true;\n  \
    \  }\n    let mut prime_length8: usize = 7;\n    for ch in string.chars() {\n\
    \        if ch >= '0' && ch <= '9' {\n            prime_length8 += 1;\n      \
    \  }\n    }\n    if prime_length8 == prime_length {\n        return true;\n  \
    \  }\n    let mut prime_length9: usize = 8;\n    for ch in string.chars() {\n\
    \        if ch >= '0' && ch <= '9' {\n            prime_length9 += 1;\n      \
    \  }\n}\n\nfn main() {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"\
    Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n\
    \    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"\
    orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n\
    \    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"\
    MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n \
    \   assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"\
    gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"\
    M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmparlrktlm.rs:105:3\n\
    \    |\n4   | fn prime_length(string: String) -> bool {\n    |               \
    \                          - unclosed delimiter\n...\n81  |     for ch in string.chars()\
    \ {\n    |                              - this delimiter might not be properly\
    \ closed...\n...\n85  | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n105 | }\n    |   ^\n\nerror[E0434]: can't capture dynamic\
    \ environment in a fn item\n  --> /tmp/tmparlrktlm.rs:88:21\n   |\n88 |     let\
    \ candidate = prime_length;\n   |                     ^^^^^^^^^^^^\n   |\n   =\
    \ help: use the `|| { ... }` closure form instead\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmparlrktlm.rs:4:36\n  |\n4 | fn prime_length(string: String)\
    \ -> bool {\n  |    ------------                    ^^^^ expected `bool`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0434.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 101
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    string.len() > 2 && string.len() < 100\n}\n\nfn main()\
    \ {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"\
    Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n\
    \    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"\
    orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n\
    \    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"\
    MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n \
    \   assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"\
    gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"\
    M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1ztb7tzp.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length = 0;\n    for c in string.chars()\
    \ {\n        if c % 2 == 0 {\n            prime_length += 1;\n        }\n    }\n\
    \    if prime_length == 0 {\n        false\n    } else {\n        true\n    }\n\
    }\n\nfn main() {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"\
    Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n\
    \    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"\
    orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n\
    \    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"\
    MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n \
    \   assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"\
    gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"\
    M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `char` by `{integer}`\n --> /tmp/tmpyybce2qd.rs:7:14\n\
    \  |\n7 |         if c % 2 == 0 {\n  |            - ^ - {integer}\n  |       \
    \     |\n  |            char\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 101
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    string.len() > 1 && string.len() <= 100\n}\n\nfn main()\
    \ {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"\
    Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n\
    \    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"\
    orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n\
    \    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"\
    MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n \
    \   assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"\
    gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"\
    M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpv2pzm8m8.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length: usize = 0;\n    for ch in string.chars()\
    \ {\n        if prime_length == 0 {\n            prime_length = ch as usize;\n\
    \        }\n        if prime_length == ch as usize {\n            prime_length\
    \ += 1;\n        }\n    }\n    prime_length == string.length()\n}\n\nfn main()\
    \ {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"\
    Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n\
    \    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"\
    orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n\
    \    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"\
    MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n \
    \   assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"\
    gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"\
    M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmppxlv4b0h.rs:14:28\n   |\n14 |     prime_length\
    \ == string.length()\n   |                            ^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    let mut prime_length = 0;\n    for c in string.chars()\
    \ {\n        if !is_prime(c.as_bytes()) {\n            prime_length += 1;\n  \
    \      }\n    }\n    prime_length == string.len()\n}\n\nfn main() {\n    let candidate\
    \ = prime_length;\n    assert_eq!(candidate(String::from(\"Hello\")), true);\n\
    \    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n    assert_eq!(candidate(String::from(\"\
    kittens\")), true);\n    assert_eq!(candidate(String::from(\"orange\")), false);\n\
    \    assert_eq!(candidate(String::from(\"wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    world\")), true);\n    assert_eq!(candidate(String::from(\"MadaM\")), true);\n\
    \    assert_eq!(candidate(String::from(\"Wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"HI\")), true);\n    assert_eq!(candidate(String::from(\"\
    go\")), true);\n    assert_eq!(candidate(String::from(\"gogo\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n    assert_eq!(candidate(String::from(\"\
    Madam\")), true);\n    assert_eq!(candidate(String::from(\"M\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmp7au3ns0i.rs:7:13\n\
    \  |\n7 |         if !is_prime(c.as_bytes()) {\n  |             ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0599]: no method named `as_bytes` found for type `char`\
    \ in the current scope\n --> /tmp/tmp7au3ns0i.rs:7:24\n  |\n7 |         if !is_prime(c.as_bytes())\
    \ {\n  |                        ^^^^^^^^ method not found in `char`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 1
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    string.len() == prime_length(string.len())\n}\n\nfn main()\
    \ {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"\
    Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n\
    \    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"\
    orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n\
    \    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"\
    MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n \
    \   assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"\
    gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"\
    M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3m9nb5cy.rs:5:34\n  |\n5 |\
    \     string.len() == prime_length(string.len())\n  |                        \
    \          ^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                                  |\n  |                                 \
    \ expected struct `String`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp3m9nb5cy.rs:5:21\n  |\n5 |     string.len() == prime_length(string.len())\n\
    \  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `bool`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747579
- exit_code: 101
  program: "/// Write a function that takes a string and returns True if the string\n\
    /// length is a prime number or False otherwise\n/// Examples\nfn prime_length(string:\
    \ String) -> bool {\n    string.len() > 1 && string.len() <= 100 && string.chars().all(|c|\
    \ {\n        c >= '0' && c <= '9'\n    })\n}\n\nfn main() {\n    let candidate\
    \ = prime_length;\n    assert_eq!(candidate(String::from(\"Hello\")), true);\n\
    \    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n    assert_eq!(candidate(String::from(\"\
    kittens\")), true);\n    assert_eq!(candidate(String::from(\"orange\")), false);\n\
    \    assert_eq!(candidate(String::from(\"wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    world\")), true);\n    assert_eq!(candidate(String::from(\"MadaM\")), true);\n\
    \    assert_eq!(candidate(String::from(\"Wow\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"HI\")), true);\n    assert_eq!(candidate(String::from(\"\
    go\")), true);\n    assert_eq!(candidate(String::from(\"gogo\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n    assert_eq!(candidate(String::from(\"\
    Madam\")), true);\n    assert_eq!(candidate(String::from(\"M\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpstavxuku.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747579
