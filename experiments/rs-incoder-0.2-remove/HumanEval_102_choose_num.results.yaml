language: rs
name: HumanEval_102_choose_num
results:
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut result = x;\n    let\
    \ mut remainder = y;\n    while remainder > 0 {\n        if remainder % 2 == 0\
    \ {\n            result = result + 1;\n        }\n        remainder = remainder\
    \ / 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpmo4k_gdc.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num: isize = 0;\n  \
    \  let mut even: isize = 0;\n    let mut odd: isize = 0;\n    while num < y {\n\
    \        if even < x {\n            even += 1;\n            num += 1\n       \
    \ } else {\n            odd += 1;\n        }\n    }\n    if even > x {\n     \
    \   even = x\n    }\n    if odd > y {\n        odd = y\n    }\n    if even > odd\
    \ {\n        even = odd\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747374
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num: isize = 0;\n  \
    \  while num < x || num < y {\n        if num % 2 == 0 {\n            num = num\
    \ + 2;\n        } else {\n            num = num + 1;\n        }\n    }\n    return\
    \ num;\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpt32e1zmu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(x,\
    \ y)\n    } else {\n        choose_num(y, x)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut max_num = -1;\n    let\
    \ mut min_num = x;\n    loop {\n        if min_num > y {\n            break;\n\
    \        }\n        if max_num < min_num {\n            max_num = min_num;\n \
    \       }\n        if max_num % 2 == 0 {\n            max_num += 1;\n        }\n\
    \        min_num += 1;\n    }\n    max_num\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpomo9_hi0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut num = x;\n    \n    while num < y {\n     \
    \   if num % 2 == 0 {\n            num = num + 2\n        } else {\n         \
    \   num = num + 1\n        }\n    }\n    \n    num\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: destructuring assignments are unstable\n --> /tmp/tmpfipn7mco.rs:7:16\n\
    \  |\n7 |         (x, y) = (y, x)\n  |         ------ ^\n  |         |\n  |  \
    \       cannot assign to this expression\n  |\n  = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126>\
    \ for more information\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0658`.\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut even: isize = 0;\n \
    \   let mut odd: isize = 0;\n    while even < y && odd < x {\n        if x % 2\
    \ == 0 {\n            even += 1;\n            x /= 2;\n        } else {\n    \
    \        odd += 1;\n            x /= 2;\n        }\n    }\n    if even < y {\n\
    \        even\n    } else {\n        odd\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmptltdowog.rs:11:13\n\
    \   |\n5  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n11 |             x\
    \ /= 2;\n   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `x`\n  --> /tmp/tmptltdowog.rs:14:13\n \
    \  |\n5  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n14 |             x\
    \ /= 2;\n   |             ^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut x: isize = 0;\n    let\
    \ mut y: isize = 0;\n    loop {\n        if x % 2 == 0 {\n            x = x +\
    \ 1;\n        } else {\n            x = x + 2;\n        }\n        if y % 2 ==\
    \ 0 {\n            y = y + 1;\n        } else {\n            y = y + 2;\n    \
    \    }\n        if x >= y {\n            return -1;\n        }\n    }\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpmchva47z.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut even = x;\n    let mut odd = y;\n    \n   \
    \ while even > 0 || odd > 0 {\n        if even % 2 == 0 {\n            even /=\
    \ 2;\n        } else {\n            odd /= 2;\n        }\n    }\n    \n    if\
    \ even == 0 {\n        even = -1;\n    }\n    \n    if odd > 0 {\n        odd\n\
    \    } else {\n        even\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpt_qm4_ez.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmpt_qm4_ez.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(x,\
    \ y)\n    } else {\n        choose_num(y, x)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut x: isize = 0;\n    let mut y: isize = 0;\n\
    \    \n    while x < y {\n        \n        if x % 2 == 0 {\n            x = x\
    \ + 1;\n        } else {\n            y = y + 1;\n        }\n    }\n    \n   \
    \ if x == y {\n        x\n    } else {\n        -1\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `x` is never read\n --> /tmp/tmpl159fe48.rs:7:10\n\
    \  |\n7 |         (x, y) = (y, x)\n  |          ^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nwarning:\
    \ value assigned to `y` is never read\n --> /tmp/tmpl159fe48.rs:7:13\n  |\n7 |\
    \         (x, y) = (y, x)\n  |             ^\n  |\n  = help: maybe it is overwritten\
    \ before being read?\n\nerror[E0384]: cannot assign to immutable argument `x`\n\
    \ --> /tmp/tmpl159fe48.rs:7:10\n  |\n5 | fn choose_num(x: isize, y: isize) ->\
    \ isize {\n  |               - help: consider making this binding mutable: `mut\
    \ x`\n6 |     if x > y {\n7 |         (x, y) = (y, x)\n  |          ^ cannot assign\
    \ to immutable argument\n\nerror[E0384]: cannot assign to immutable argument `y`\n\
    \ --> /tmp/tmpl159fe48.rs:7:13\n  |\n5 | fn choose_num(x: isize, y: isize) ->\
    \ isize {\n  |                         - help: consider making this binding mutable:\
    \ `mut y`\n6 |     if x > y {\n7 |         (x, y) = (y, x)\n  |             ^\
    \ cannot assign to immutable argument\n\nerror: aborting due to 2 previous errors;\
    \ 2 warnings emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut num: isize = 0;\n    let mut even: isize =\
    \ 0;\n    \n    while even < x {\n        even += y;\n        num += 1\n    }\n\
    \    \n    num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmp0y1oykd2.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmp0y1oykd2.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num = x;\n    while\
    \ num < y {\n        if num % 2 == 0 {\n            num = num + 2;\n        }\
    \ else {\n            num = num + 1;\n        }\n    }\n    num\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmps2i15azg.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num: isize = 0;\n  \
    \  while num < x || num < y {\n        if num % 2 == 0 {\n            num = num\
    \ + 2;\n        } else {\n            num = num + 1;\n        }\n    }\n    if\
    \ num == x || num == y {\n        return -1;\n    }\n    return num;\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmp2if5i1cm.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut result = x;\n    while\
    \ result < y {\n        if result % 2 == 0 {\n            result = result + 1;\n\
    \        } else {\n            result = result + 2;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpofwxckjk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    if x > y {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y > x {\n        return choose_num(x, y / 2)\n    }\n    return\
    \ -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmph58d1rsq.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(x,\
    \ y)\n    } else {\n        choose_num(y, x)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(x,\
    \ y)\n    } else {\n        choose_num(y, x)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut x: isize = 0;\n    let mut y: isize = 0;\n\
    \    \n    while x < y {\n        (x, y) = (x + y, x + y)\n    }\n    \n    if\
    \ x == y {\n        x\n    } else {\n        -1\n    }\n}\n\nfn main() {\n   \
    \ let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `x` is never read\n --> /tmp/tmpxlqsnvmv.rs:7:10\n\
    \  |\n7 |         (x, y) = (y, x)\n  |          ^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nwarning:\
    \ value assigned to `y` is never read\n --> /tmp/tmpxlqsnvmv.rs:7:13\n  |\n7 |\
    \         (x, y) = (y, x)\n  |             ^\n  |\n  = help: maybe it is overwritten\
    \ before being read?\n\nerror[E0384]: cannot assign to immutable argument `x`\n\
    \ --> /tmp/tmpxlqsnvmv.rs:7:10\n  |\n5 | fn choose_num(x: isize, y: isize) ->\
    \ isize {\n  |               - help: consider making this binding mutable: `mut\
    \ x`\n6 |     if x > y {\n7 |         (x, y) = (y, x)\n  |          ^ cannot assign\
    \ to immutable argument\n\nerror[E0384]: cannot assign to immutable argument `y`\n\
    \ --> /tmp/tmpxlqsnvmv.rs:7:13\n  |\n5 | fn choose_num(x: isize, y: isize) ->\
    \ isize {\n  |                         - help: consider making this binding mutable:\
    \ `mut y`\n6 |     if x > y {\n7 |         (x, y) = (y, x)\n  |             ^\
    \ cannot assign to immutable argument\n\nerror: aborting due to 2 previous errors;\
    \ 2 warnings emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut max_num: isize = 0;\n    let mut min_num: isize\
    \ = 0;\n    \n    for i in 0..x {\n        if i % 2 == 0 {\n            max_num\
    \ = i;\n        }\n    }\n    for i in 0..y {\n        if i % 2 == 0 {\n     \
    \       min_num = i;\n        }\n    }\n    \n    if max_num == min_num {\n  \
    \      return -1;\n    }\n    \n    for i in 0..x {\n        if i % 2 == 0 {\n\
    \            if max_num < i {\n                max_num = i;\n            }\n \
    \       }\n    }\n    for i in 0..y {\n        if i % 2 == 0 {\n            if\
    \ min_num > i {\n                min_num = i;\n            }\n        }\n    }\n\
    \    \n    if max_num == min_num {\n        return -1;\n    }\n    \n    return\
    \ max_num;\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmp5bdz58x7.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmp5bdz58x7.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut even = x;\n    let mut odd = y;\n    \n   \
    \ while even > 0 && odd > 0 {\n        if even % 2 == 0 {\n            even /=\
    \ 2;\n        } else {\n            odd /= 2;\n        }\n    }\n    \n    if\
    \ even > 0 {\n        even\n    } else {\n        odd\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmphkmub_zq.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmphkmub_zq.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num: isize = 1;\n  \
    \  while num < y {\n        if num % 2 == 0 {\n            num = num * 3 + 1\n\
    \        } else {\n            num = num * 3\n        }\n    }\n    return num\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `27`,\n right: `14`', /tmp/tmpfietyscv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(x,\
    \ y)\n    } else {\n        choose_num(y, x)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut num: isize = 0;\n    \n    while num < x ||\
    \ num < y {\n        if num % 2 == 0 {\n            num /= 2;\n        } else\
    \ {\n            num = num * 3 + 1;\n        }\n    }\n    \n    num\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmplh5ru4cn.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmplh5ru4cn.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut result = x;\n    while\
    \ result <= y {\n        if result % 2 == 0 {\n            result = result + 1;\n\
    \        } else {\n            result = result + 2;\n        }\n    }\n    if\
    \ result == x {\n        result = -1;\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `14`', /tmp/tmpzzfh7q1p.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num: isize = 0;\n  \
    \  while num < x || num < y {\n        if num % 2 == 0 {\n            num = num\
    \ + 2;\n        } else {\n            num = num + 1;\n        }\n    }\n    num\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpp1z09i3c.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut num: isize = 0;\n    \n    while num < x {\n\
    \        if num % 2 == 0 {\n            num = num + 2\n        } else {\n    \
    \        num = num + 1\n        }\n    }\n    \n    while num > y {\n        if\
    \ num % 2 == 0 {\n            num = num - 2\n        } else {\n            num\
    \ = num - 1\n        }\n    }\n    \n    num\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpew32h3qy.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmpew32h3qy.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut even = x;\n    let mut odd = y;\n    \n   \
    \ while even > 0 && odd > 0 {\n        if even % 2 == 0 {\n            even /=\
    \ 2;\n        } else {\n            odd /= 2;\n        }\n    }\n    \n    if\
    \ even > 0 {\n        even\n    } else {\n        -1\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpcm4vw0v1.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmpcm4vw0v1.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num: isize = 0;\n  \
    \  while num < x || num < y {\n        if num % 2 == 0 {\n            num = num\
    \ + 2;\n        } else {\n            num = num + 1;\n        }\n    }\n    return\
    \ num;\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpt32e1zmu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num = x;\n    while\
    \ num < y {\n        if num % 2 == 0 {\n            num = num + 2;\n        }\
    \ else {\n            num = num + 1;\n        }\n    }\n    num\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmps2i15azg.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    if x > y {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y > x {\n        return choose_num(x, y / 2)\n    }\n    return\
    \ -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmph58d1rsq.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(x,\
    \ y)\n    } else {\n        choose_num(y, x)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(x,\
    \ y)\n    } else {\n        choose_num(y, x)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(x,\
    \ y)\n    } else {\n        choose_num(y, x)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut even = x;\n    let mut odd = y;\n    \n   \
    \ while even > 0 && odd > 0 {\n        if even % 2 == 0 {\n            even /=\
    \ 2;\n        } else {\n            odd /= 2;\n        }\n    }\n    \n    if\
    \ even > 0 {\n        even\n    } else {\n        odd\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmphkmub_zq.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmphkmub_zq.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num: isize = 0;\n  \
    \  while num < x || num < y {\n        if num % 2 == 0 {\n            num = num\
    \ + 2;\n        } else {\n            num = num + 1;\n        }\n    }\n    num\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpp1z09i3c.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    let mut num: isize = 0\n    \n    while num < x {\n   \
    \     num = num + y\n    }\n    \n    num\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `while`\n  --> /tmp/tmpcnfcks91.rs:10:27\n\
    \   |\n10 |     let mut num: isize = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     \n12 |     while num < x {\n   |     ----- unexpected\
    \ token\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num: isize = 0;\n  \
    \  let mut flag = false;\n    while num < y {\n        if flag {\n           \
    \ flag = false;\n        } else {\n            if num % 2 == 0 {\n           \
    \     num += 1;\n            } else {\n                flag = true;\n        \
    \    }\n        }\n    }\n    if flag {\n        -1\n    } else {\n        num\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976081
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num: isize = 0;\n  \
    \  while num < x || num < y {\n        if num % 2 == 0 {\n            num = num\
    \ + 2;\n        } else {\n            num = num + 1;\n        }\n    }\n    return\
    \ num;\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpt32e1zmu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747369
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut num: isize = 0;\n    \n    while num < x {\n\
    \        num = num + y;\n    }\n    \n    while num > y {\n        num = num -\
    \ x;\n    }\n    \n    num\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmp0uy0d37x.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmp0uy0d37x.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num = x;\n    while\
    \ num < y {\n        if num % 2 == 0 {\n            num = num + 1;\n        }\
    \ else {\n            num = num - 1;\n        }\n    }\n    num\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut result = x;\n    let\
    \ mut even = 1;\n    while even <= y {\n        if even % 2 == 0 {\n         \
    \   result = even;\n            even += 1;\n        }\n        even += 1;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `-1`', /tmp/tmp9t95i8gm.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num = x;\n    while\
    \ num < y {\n        if num % 2 == 0 {\n            num = num + 2;\n        }\
    \ else {\n            num = num + 1;\n        }\n    }\n    if num > y {\n   \
    \     -1\n    } else {\n        num\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpto8sxtzi.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        return\
    \ -1\n    }\n    let mut num: isize = 0\n    while num < x {\n        num = num\
    \ + y\n    }\n    while num > y {\n        num = num - x\n    }\n    num\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `while`\n  --> /tmp/tmpgeep4x8j.rs:9:27\n\
    \   |\n9  |     let mut num: isize = 0\n   |                           ^ help:\
    \ add `;` here\n10 |     while num < x {\n   |     ----- unexpected token\n\n\
    error: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        return\
    \ -1\n    }\n    let mut num: isize = 0\n    for i in 1..y {\n        if x % i\
    \ == 0 {\n            num = i\n        }\n    }\n    num\n}\n\nfn main() {\n \
    \   let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmprp29ctly.rs:9:27\n\
    \   |\n9  |     let mut num: isize = 0\n   |                           ^ help:\
    \ add `;` here\n10 |     for i in 1..y {\n   |     --- unexpected token\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num = x;\n    while\
    \ num < y {\n        if num % 2 == 0 {\n            num = num * 3 + 1\n      \
    \  } else {\n            num = num * 3\n        }\n    }\n    num\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `37`,\n right: `14`', /tmp/tmpif2vp2w9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    let mut num: isize = (x as isize) + (y as isize);\n    let\
    \ mut even: isize = 0;\n    let mut odd: isize = 0;\n    while num > 0 {\n   \
    \     if num % 2 == 0 {\n            even += 1;\n        } else {\n          \
    \  odd += 1;\n        }\n        num -= 1;\n    }\n    if even > odd {\n     \
    \   even\n    } else {\n        odd\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmp5plbvh8s.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmp5plbvh8s.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        if x %\
    \ 2 == 0 {\n            x\n        } else {\n            y\n        }\n    } else\
    \ {\n        if y % 2 == 0 {\n            y\n        } else {\n            x\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpn7p46qi4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        return\
    \ -1\n    }\n    let mut max_num: isize = 0;\n    let mut min_num: isize = x;\n\
    \    while min_num < y {\n        if max_num < min_num {\n            max_num\
    \ = min_num;\n        }\n        if max_num % 2 == 0 {\n            max_num +=\
    \ 1;\n        }\n        else {\n            max_num -= 1;\n        }\n      \
    \  min_num += 1;\n    }\n    return max_num;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpgcm4bckg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num: isize = 0;\n  \
    \  let mut even: isize = 0;\n    let mut odd: isize = 0;\n    while num < y {\n\
    \        if even < x {\n            even = even + 1;\n            num = num +\
    \ even;\n        } else {\n            odd = odd + 1;\n            num = num +\
    \ odd;\n        }\n    }\n    if even > x {\n        even = even - 1;\n      \
    \  num = num + even;\n    }\n    if odd > y {\n        odd = odd - 1;\n      \
    \  num = num + odd;\n    }\n    if even > x {\n        even = even - 1;\n    \
    \    num = num + even;\n    }\n    if odd > y {\n        odd = odd - 1;\n    \
    \    num = num + odd;\n    }\n    if even > x {\n        even = even - 1;\n  \
    \      num = num + even;\n    }\n    if odd > y {\n        odd = odd - 1;\n  \
    \      num = num + odd;\n    }\n    if even > x {\n        even = even - 1;\n\
    \        num = num + even;\n    }\n    if odd > y {\n        odd = odd - 1;\n\
    \        num = num + odd;\n    }\n    if even > x {\n        even = even - 1;\n\
    \        num = num + even;\n    }\n    if odd > y {\n        odd = odd - 1;\n\
    \        num = num + odd;\n    }\n    if even > x {\n        even = even - 1;\n\
    \        num = num + even;\n    }\n    if odd > y {\n        odd = odd - 1;\n\
    \        num = num + odd;\n    }\n    if even > x {\n        even = even - 1;\n\
    \        num = num + even;\n    }\n    if odd > y {\n        odd = odd - 1;\n\
    \        num = num + odd;\n    }\n    if even > x {\n        even = even - 1;\n\
    \        num = num + even;\n    }\n    if odd > y {\n        odd = odd - 1;\n\
    \        num = num + odd;\n    }\n    if even > x {\n        even = even - 1;\n\
    \        num = num + even;\n    }\n    if odd > y {\n        odd = odd - 1;\n\
    \        num = num + odd;\n    }\n    if even > x {\n        even = even - 1;\n\
    \        num = num + even;\n    }\n    if odd > y {\n        odd = odd - 1;\n\
    \        num = num + odd;\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa4u8y0yb.rs:94:16\n   |\n\
    94 |       if odd > y {\n   |  ________________^\n95 | |         odd = odd - 1;\n\
    96 | |         num = num + odd;\n97 | |     }\n   | |_____^ expected `isize`,\
    \ found `()`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut even = x;\n    let mut odd = y;\n    \n   \
    \ while even > 0 && odd > 0 {\n        if even % 2 == 0 {\n            even /=\
    \ 2;\n        } else {\n            odd /= 2;\n        }\n    }\n    \n    if\
    \ even > 0 {\n        even\n    } else {\n        -1\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpcm4vw0v1.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmpcm4vw0v1.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num = x;\n    while\
    \ num < y {\n        if num % 2 == 0 {\n            num = num + 2;\n        }\
    \ else {\n            num = num + 1;\n        }\n    }\n    if num == y {\n  \
    \      num\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpm__y_0j0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num: isize = 0;\n  \
    \  while num < x || num < y {\n        if num % 2 == 0 {\n            num = num\
    \ + 2;\n        } else {\n            num = num + 1;\n        }\n    }\n    num\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpp1z09i3c.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        if x %\
    \ 2 == 0 {\n            x\n        } else {\n            y\n        }\n    } else\
    \ {\n        if y % 2 == 0 {\n            y\n        } else {\n            x\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpn7p46qi4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut max_num: isize = 0;\n\
    \    let mut min_num = y;\n    while min_num < x {\n        max_num = max_num\
    \ * 2 + 1;\n        min_num = min_num * 2 + 1;\n    }\n    if max_num == x {\n\
    \        max_num\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpxy5w0u9o.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut even: isize = 0;\n \
    \   let mut odd: isize = 0;\n    while even < y && odd < x {\n        if x % 2\
    \ == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n  \
    \      }\n    }\n    if even > y {\n        even = -1\n    } else if odd > x {\n\
    \        odd = -1\n    }\n    even\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpivtbwme1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(x,\
    \ y)\n    } else {\n        choose_num(y, x)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(x,\
    \ y)\n    } else {\n        choose_num(y, x)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut num = 1\n    \n    while num < y {\n      \
    \  if x % 2 == 0 {\n            num += 1\n        }\n        \n        x /= 2\n\
    \    }\n    \n    num\n}\n\nfn main() {\n    let candidate = choose_num;\n   \
    \ assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `while`\n  --> /tmp/tmp9q_9w5ka.rs:10:20\n\
    \   |\n10 |     let mut num = 1\n   |                    ^ help: add `;` here\n\
    11 |     \n12 |     while num < y {\n   |     ----- unexpected token\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    let mut num: isize = 0\n    \n    for i in 0..x {\n   \
    \     if i % 2 == 0 {\n            num = i\n            break\n        }\n   \
    \ }\n    \n    for i in 0..y {\n        if i % 2 == 0 {\n            num = i\n\
    \            break\n        }\n    }\n    \n    return num\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpbd5570bm.rs:10:27\n\
    \   |\n10 |     let mut num: isize = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     \n12 |     for i in 0..x {\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpbd5570bm.rs:14:20\n\
    \   |\n14 |             num = i\n   |                    ^ help: add `;` here\n\
    15 |             break\n   |             ----- unexpected token\n\nerror: expected\
    \ `;`, found keyword `break`\n  --> /tmp/tmpbd5570bm.rs:21:20\n   |\n21 |    \
    \         num = i\n   |                    ^ help: add `;` here\n22 |        \
    \     break\n   |             ----- unexpected token\n\nerror: aborting due to\
    \ 3 previous errors\n\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut num: isize = 0;\n    \n    while num < x {\n\
    \        num = num + y;\n    }\n    \n    while num > y {\n        num = num -\
    \ x;\n    }\n    \n    num\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmp0uy0d37x.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmp0uy0d37x.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    if x % 2 == y % 2 {\n        return choose_num(x\
    \ / 2, y / 2)\n    }\n    if x > y {\n        return choose_num(x / 2, y)\n  \
    \  }\n    return choose_num(x, y / 2)\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp24tcx28x.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num = x;\n    while\
    \ num < y {\n        if num % 2 == 0 {\n            num = num + 2;\n        }\
    \ else {\n            num = num + 1;\n        }\n    }\n    num\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmps2i15azg.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut even = x;\n    let mut\
    \ odd = y;\n    \n    while even > 0 && odd > 0 {\n        if even % 2 == 0 {\n\
    \            even /= 2;\n        } else {\n            odd /= 2;\n        }\n\
    \    }\n    \n    if even > 0 {\n        even\n    } else {\n        odd\n   \
    \ }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmpxo4grri8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(x,\
    \ y)\n    } else {\n        choose_num(y, x)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut num: isize = 0;\n    \n    while num < x {\n\
    \        num <<= 1;\n        num |= 1;\n    }\n    \n    while num < y {\n   \
    \     num <<= 1;\n        num |= 1;\n    }\n    \n    num\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpc7whauj1.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmpc7whauj1.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut even = x;\n    let mut odd = y;\n    \n   \
    \ while even > 0 && odd > 0 {\n        if even % 2 == 0 {\n            even /=\
    \ 2;\n        } else {\n            odd /= 2;\n        }\n    }\n    \n    if\
    \ even > 0 {\n        even\n    } else {\n        odd\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmphkmub_zq.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmphkmub_zq.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut num: isize = 0;\n    let mut even: isize =\
    \ 0;\n    \n    while even < y {\n        if num < x {\n            even = even\
    \ + 1;\n            num = num + 2;\n        } else {\n            even = even\
    \ + 2;\n            num = num + 4;\n        }\n    }\n    \n    if even > y {\n\
    \        even = -1;\n    }\n    \n    even\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmp75g9h4fg.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmp75g9h4fg.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut x = x;\n    let mut y = y;\n    \n    while\
    \ x < y {\n        if x % 2 == 0 {\n            x = x + 1;\n        } else {\n\
    \            y = y - 1;\n        }\n    }\n    \n    if x == y {\n        x\n\
    \    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpeapuzs0k.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmpeapuzs0k.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    let mut num: isize = 0;\n  \
    \  let mut even: isize = 0;\n    let mut odd: isize = 0;\n    while num < y {\n\
    \        if even > y {\n            even = even * 2;\n            odd = 0;\n \
    \       }\n        if even < x {\n            even = even * 2;\n            odd\
    \ = 0;\n        }\n        if even + odd > y {\n            even = even * 2;\n\
    \            odd = 0;\n        }\n        if even + odd < x {\n            even\
    \ = even * 2;\n            odd = 0;\n        }\n        num = num + 1;\n    }\n\
    \    if even > y {\n        even = even * 2;\n        odd = 0;\n    }\n    if\
    \ even < x {\n        even = even * 2;\n        odd = 0;\n    }\n    if even +\
    \ odd > y {\n        even = even * 2;\n        odd = 0;\n    }\n    if even +\
    \ odd < x {\n        even = even * 2;\n        odd = 0;\n    }\n    even\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmpr758qgd2.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut num: isize = 0;\n    \n    for i in 1..y {\n\
    \        if x % i == 0 {\n            num = i;\n            break;\n        }\n\
    \    }\n    \n    if num == 0 {\n        -1\n    } else {\n        num\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpnc_3x7f5.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmpnc_3x7f5.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x <= y {\n        if x %\
    \ 2 == 0 {\n            return x\n        } else {\n            return y\n   \
    \     }\n    } else {\n        if y % 2 == 0 {\n            return y\n       \
    \ } else {\n            return x\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpffgzahdy.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    let mut num: isize = 0;\n    let mut even: isize = 0;\n \
    \   let mut odd: isize = 0;\n    while num < y {\n        if even < x {\n    \
    \        even += 1;\n            num += 1\n        } else {\n            odd +=\
    \ 1;\n        }\n    }\n    if even > x {\n        even = x - even\n    }\n  \
    \  if odd > y {\n        odd = y - odd\n    }\n    if even > odd {\n        even\
    \ = odd\n    }\n    even\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmp8on18d47.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmp8on18d47.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut result = x;\n    \n    while result < y {\n\
    \        result *= 2;\n        if result > y {\n            return -1;\n     \
    \   }\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpdwa5frz3.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmpdwa5frz3.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x > y {\n        (x, y) =\
    \ (y, x)\n    }\n    \n    let mut max_num = x;\n    let mut min_num = y;\n  \
    \  \n    while max_num < min_num {\n        max_num += 2;\n        min_num -=\
    \ 2;\n    }\n    \n    while max_num % 2 == 0 {\n        max_num += 1;\n    }\n\
    \    \n    while min_num % 2 == 0 {\n        min_num -= 1;\n    }\n    \n    if\
    \ max_num == min_num {\n        return -1\n    }\n    \n    max_num\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmptsskap4s.rs:7:10\n\
    \  |\n5 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n6 |     if x > y {\n7 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmptsskap4s.rs:7:13\n  |\n\
    5 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n6 |     if x > y {\n\
    7 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    fn choose_num(x: isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747375
