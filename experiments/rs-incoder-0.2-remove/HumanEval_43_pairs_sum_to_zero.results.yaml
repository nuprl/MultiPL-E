language: rs
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ pairs = Vec::new();\n    for &i in l {\n        for &j in l {\n            if\
    \ i != j && i + j == 0 {\n                pairs.push((i, j));\n            }\n\
    \        }\n    }\n    pairs.len() == l.len() / 2 && pairs.iter().all(|&(i, j)|\
    \ i + j == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprifb33v1.rs:6:9\n  |\n6 |\
    \     for &i in l {\n  |         ^^    - this expression has type `isize`\n  |\
    \         |\n  |         expected `isize`, found reference\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmprifb33v1.rs:7:13\n  |\n7 |         for &j in l {\n  |          \
    \   ^^    - this expression has type `isize`\n  |             |\n  |         \
    \    expected `isize`, found reference\n  |\n  = note:   expected type `isize`\n\
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ pairs = Vec::new();\n    for i in l {\n        for j in l {\n            if\
    \ i != j && i + j == 0 {\n                pairs.push((i, j));\n            }\n\
    \        }\n    }\n    pairs.len() > 1\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmp6frcy_w9.rs:7:18\n\
    \    |\n4   | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n5   |     let mut pairs = Vec::new();\n6   |     for i in\
    \ l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    7   |         for j in l {\n    |                  ^ `l` moved due to this implicit\
    \ call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `l`\nhelp: consider borrowing\
    \ to avoid moving into the for loop\n    |\n7   |         for j in &l {\n    |\
    \                  ~~\nhelp: consider borrowing to avoid moving into the for loop\n\
    \    |\n6   |     for i in &l {\n    |              ~~\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ pairs = Vec::new();\n    let mut sum = 0;\n    for &i in l {\n        pairs.push((i,\
    \ sum));\n        sum += i;\n    }\n    let mut seen = HashSet::new();\n    for\
    \ &(i, sum) in pairs {\n        if seen.contains(&sum) {\n            return false;\n\
    \        }\n        seen.insert(sum);\n    }\n    true\n}\n\nfn main() {\n   \
    \ let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp3i8aqs2_.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp3i8aqs2_.rs:7:9\n  |\n7 |     for &i in l {\n\
    \  |         ^^    - this expression has type `isize`\n  |         |\n  |    \
    \     expected `isize`, found reference\n  |\n  = note:   expected type `isize`\n\
    \          found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3i8aqs2_.rs:12:9\n\
    \   |\n12 |     for &(i, sum) in pairs {\n   |         ^^^^^^^^^    ----- this\
    \ expression has type `(_, {integer})`\n   |         |\n   |         expected\
    \ tuple, found reference\n   |\n   = note:  expected tuple `(_, {integer})`\n\
    \           found reference `&_`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqt19fjwo.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpqt19fjwo.rs:6:9\n  |\n6 |     for &i in l {\n  |       \
    \  ^^    - this expression has type `isize`\n  |         |\n  |         expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen = HashSet::new();\n    for i in l {\n        if seen.contains(&i) {\n \
    \           return true;\n        }\n        seen.insert(i);\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp8_d3i15g.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ pairs = Vec::new();\n    for i in l {\n        for j in l {\n            if\
    \ i != j && i + j == 0 {\n                pairs.push((i, j));\n            }\n\
    \        }\n    }\n    pairs.len() == l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmpz4brs10t.rs:7:18\n\
    \    |\n4   | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n5   |     let mut pairs = Vec::new();\n6   |     for i in\
    \ l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    7   |         for j in l {\n    |                  ^ `l` moved due to this implicit\
    \ call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `l`\nhelp: consider borrowing\
    \ to avoid moving into the for loop\n    |\n7   |         for j in &l {\n    |\
    \                  ~~\nhelp: consider borrowing to avoid moving into the for loop\n\
    \    |\n6   |     for i in &l {\n    |              ~~\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ pairs = vec![];\n    let mut sum = 0;\n    for &i in l {\n        if i != 0\
    \ {\n            pairs.push((i, sum));\n            sum += i;\n        }\n   \
    \ }\n    for &(i, sum) in pairs {\n        if sum == 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg6vj9kok.rs:7:9\n  |\n7 |\
    \     for &i in l {\n  |         ^^    - this expression has type `isize`\n  |\
    \         |\n  |         expected `isize`, found reference\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpg6vj9kok.rs:13:9\n   |\n13 |     for &(i, sum) in pairs {\n   |\
    \         ^^^^^^^^^    ----- this expression has type `(_, {integer})`\n   | \
    \        |\n   |         expected tuple, found reference\n   |\n   = note:  expected\
    \ tuple `(_, {integer})`\n           found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ pairs = Vec::new();\n    for i in l {\n        for j in l {\n            if\
    \ i + j == 0 {\n                pairs.push((i, j));\n            }\n        }\n\
    \    }\n    pairs.len() == 2 && pairs.iter().all(|&(_, x)| x == 0)\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmpfhhcd5rz.rs:7:18\n\
    \    |\n4   | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n5   |     let mut pairs = Vec::new();\n6   |     for i in\
    \ l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    7   |         for j in l {\n    |                  ^ `l` moved due to this implicit\
    \ call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `l`\nhelp: consider borrowing\
    \ to avoid moving into the for loop\n    |\n7   |         for j in &l {\n    |\
    \                  ~~\nhelp: consider borrowing to avoid moving into the for loop\n\
    \    |\n6   |     for i in &l {\n    |              ~~\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp557opyl8.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp557opyl8.rs:5:36\n  |\n5 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp557opyl8.rs:6:9\n  |\n6 |     for &i in l {\n  |       \
    \  ^^    - this expression has type `isize`\n  |         |\n  |         expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0412, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqt19fjwo.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpqt19fjwo.rs:6:9\n  |\n6 |     for &i in l {\n  |       \
    \  ^^    - this expression has type `isize`\n  |         |\n  |         expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpmetmq0bt.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpmetmq0bt.rs:5:36\n  |\n5 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpmetmq0bt.rs:6:9\n  |\n6 |     for &i in l {\n  |       \
    \  ^^    - this expression has type `isize`\n  |         |\n  |         expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0412, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == 2\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n --> /tmp/tmpva6ol7xg.rs:9:25\n\
    \  |\n9 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2\n\
    \  |                         ^^                                      ^^\n  |\n\
    help: split the comparison into two\n  |\n9 |     sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() && l.iter().filter(|&i| i == 0).count() == 2\n  |          \
    \                                                       +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpva6ol7xg.rs:6:9\n  |\n6 |     for\
    \ &i in l {\n  |         ^^    - this expression has type `isize`\n  |       \
    \  |\n  |         expected `isize`, found reference\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0277]: can't compare\
    \ `&isize` with `{integer}`\n --> /tmp/tmpva6ol7xg.rs:9:51\n  |\n9 |     sum ==\
    \ 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2\n  |             \
    \                                      ^^ no implementation for `&isize == {integer}`\n\
    \  |\n  = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpva6ol7xg.rs:9:68\n  |\n9 |    \
    \ sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2\n  |      \
    \                                                              ^ expected `bool`,\
    \ found integer\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp557opyl8.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp557opyl8.rs:5:36\n  |\n5 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp557opyl8.rs:6:9\n  |\n6 |     for &i in l {\n  |       \
    \  ^^    - this expression has type `isize`\n  |         |\n  |         expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0412, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqt19fjwo.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpqt19fjwo.rs:6:9\n  |\n6 |     for &i in l {\n  |       \
    \  ^^    - this expression has type `isize`\n  |         |\n  |         expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp557opyl8.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp557opyl8.rs:5:36\n  |\n5 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp557opyl8.rs:6:9\n  |\n6 |     for &i in l {\n  |       \
    \  ^^    - this expression has type `isize`\n  |         |\n  |         expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0412, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ pairs = Vec::new();\n    for &i in l {\n        for &j in l {\n            if\
    \ i == j {\n                continue;\n            }\n            if i + j ==\
    \ 0 {\n                pairs.push((i, j));\n            }\n        }\n    }\n\
    \    pairs.len() == 2 && pairs.iter().all(|&(i, j)| i == j)\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpumz3qonk.rs:6:9\n  |\n6 |\
    \     for &i in l {\n  |         ^^    - this expression has type `isize`\n  |\
    \         |\n  |         expected `isize`, found reference\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpumz3qonk.rs:7:13\n  |\n7 |         for &j in l {\n  |          \
    \   ^^    - this expression has type `isize`\n  |             |\n  |         \
    \    expected `isize`, found reference\n  |\n  = note:   expected type `isize`\n\
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqt19fjwo.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpqt19fjwo.rs:6:9\n  |\n6 |     for &i in l {\n  |       \
    \  ^^    - this expression has type `isize`\n  |         |\n  |         expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqt19fjwo.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpqt19fjwo.rs:6:9\n  |\n6 |     for &i in l {\n  |       \
    \  ^^    - this expression has type `isize`\n  |         |\n  |         expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ pairs = Vec::new();\n    for &i in l {\n        for &j in l {\n            if\
    \ i + j == 0 {\n                pairs.push((i, j));\n            }\n        }\n\
    \    }\n    pairs.len() == 2 && pairs.iter().all(|&(i, j)| i == j)\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzqjuh6o7.rs:6:9\n  |\n6 |\
    \     for &i in l {\n  |         ^^    - this expression has type `isize`\n  |\
    \         |\n  |         expected `isize`, found reference\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpzqjuh6o7.rs:7:13\n  |\n7 |         for &j in l {\n  |          \
    \   ^^    - this expression has type `isize`\n  |             |\n  |         \
    \    expected `isize`, found reference\n  |\n  = note:   expected type `isize`\n\
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqt19fjwo.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpqt19fjwo.rs:6:9\n  |\n6 |     for &i in l {\n  |       \
    \  ^^    - this expression has type `isize`\n  |         |\n  |         expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748991
