language: rs
name: HumanEval_0_has_close_elements
results:
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        } else\
    \ if n - min_number < min_distance {\n            min_number = n;\n          \
    \  min_distance = n - min_number;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzzbrv56y.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        let mut min_dist = threshold;\n\
    \        let mut min_idx = -1;\n        for (i, &x) in numbers.iter().enumerate()\
    \ {\n            let dist = x - i;\n            if dist < min_dist {\n       \
    \         min_dist = dist;\n                min_idx = i;\n            }\n    \
    \    }\n        min_dist < threshold\n    })\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `usize` from `f64`\n --> /tmp/tmpwxkqpk72.rs:8:26\n\
    \  |\n8 |             let dist = x - i;\n  |                          ^ no implementation\
    \ for `f64 - usize`\n  |\n  = help: the trait `Sub<usize>` is not implemented\
    \ for `f64`\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n -->\
    \ /tmp/tmpwxkqpk72.rs:6:27\n  |\n6 |         let mut min_idx = -1;\n  |      \
    \                     ^^ the trait `Neg` is not implemented for `usize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n    let mut min_distance = threshold;\n\
    \    let mut min_number = numbers_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    loop {\n        let mut min_number_iter = min_number.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmphuho1ent.rs:39:3\n\
    \   |\n3  | fn has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool {\n\
    \   |                                                                  - unclosed\
    \ delimiter\n...\n8  |     loop {\n   |          - this delimiter might not be\
    \ properly closed...\n...\n28 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n39 | }\n   |   ^\n\nerror: expected one of `(`, `.`, `;`,\
    \ `?`, `else`, or an operator, found `::`\n  --> /tmp/tmphuho1ent.rs:27:79\n \
    \  |\n27 |         let mut min_number_iter = min_number_iter.into_iter().cloned().collect::\n\
    \   |                                                                        \
    \       ^^ expected one of `(`, `.`, `;`, `?`, `else`, or an operator\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmphuho1ent.rs:5:20\n\
    \  |\n5 |     numbers_sorted.sort_unstable();\n  |                    ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n\nerror[E0271]: type mismatch\
    \ resolving `<std::vec::IntoIter<f64> as Iterator>::Item == &_`\n  --> /tmp/tmphuho1ent.rs:10:63\n\
    \   |\n10 |         let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \   |                                                               ^^^^^^ expected\
    \ `f64`, found reference\n   |\n   = note:   expected type `f64`\n           found\
    \ reference `&_`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<std::vec::IntoIter<f64>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmphuho1ent.rs:10:72\n \
    \  |\n10 |           let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \   |                                                                        \
    \  ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<f64>>` due to\
    \ unsatisfied trait bounds\n   |\n   = note: the following trait bounds were not\
    \ satisfied:\n           `<std::vec::IntoIter<f64> as Iterator>::Item = &_`\n\
    \           which is required by `Cloned<std::vec::IntoIter<f64>>: Iterator`\n\
    \           `Clone"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut i = 0;\n    let mut j = 1;\n    while i < numbers_copy.len() - 1\
    \ && j < numbers_copy.len() {\n        if numbers_copy[i] - numbers_copy[j] >\
    \ threshold {\n            return true;\n        }\n        if numbers_copy[i]\
    \ - numbers_copy[j] < -threshold {\n            return false;\n        }\n   \
    \     i += 1;\n        j += 1\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpceh3iu6f.rs:5:18\n\
    \  |\n5 |     numbers_copy.sort();\n  |                  ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut i = 0;\n    let mut j = 1;\n    while i < numbers_copy.len() && j\
    \ < numbers_copy.len() {\n        if numbers_copy[i] < numbers_copy[j] {\n   \
    \         i += 1;\n        } else {\n            j += 1;\n        }\n        if\
    \ j == numbers_copy.len() {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmph_lxjzui.rs:5:18\n\
    \  |\n5 |     numbers_copy.sort();\n  |                  ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut min_distance = threshold;\n    let mut min_element = numbers_copy[0];\n\
    \    for &n in numbers_copy {\n        let distance = n - min_element;\n     \
    \   if distance < min_distance {\n            min_distance = distance;\n     \
    \       min_element = n;\n        }\n    }\n    min_distance < threshold\n}\n\n\
    fn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpx0jtt3_e.rs:5:18\n\
    \  |\n5 |     numbers_copy.sort();\n  |                  ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpx0jtt3_e.rs:8:9\n\
    \  |\n8 |     for &n in numbers_copy {\n  |         ^^    ------------ this expression\
    \ has type `f64`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |\n  = note:   expected type `f64`\n          found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if n < threshold {\n            close = true;\n            break;\n       \
    \ }\n    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdwyihrr8.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut min_distance = threshold;\n    let mut min_number = numbers_copy[0];\n\
    \    let mut min_number_index = numbers_copy.len() - 1;\n    let mut max_number\
    \ = numbers_copy[0];\n    let mut max_number_index = numbers_copy.len() - 1;\n\
    \    for i in 1..numbers_copy.len() {\n        let distance = numbers_copy[i]\
    \ - numbers_copy[i - 1];\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_number = numbers_copy[i];\n            min_number_index\
    \ = i;\n        }\n        if distance > max_distance {\n            max_distance\
    \ = distance;\n            max_number = numbers_copy[i];\n            max_number_index\
    \ = i;\n        }\n    }\n    min_number_index != max_number_index\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `max_distance` in this scope\n  --> /tmp/tmp6imbvy6c.rs:18:23\n\
    \   |\n18 |         if distance > max_distance {\n   |                       ^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `min_distance`\n\nerror[E0425]:\
    \ cannot find value `max_distance` in this scope\n  --> /tmp/tmp6imbvy6c.rs:19:13\n\
    \   |\n19 |             max_distance = distance;\n   |             ^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `min_distance`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp6imbvy6c.rs:5:18\n\
    \  |\n5 |     numbers_copy.sort();\n  |                  ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        let mut min_dist = threshold;\n\
    \        let mut min_idx = -1;\n        for (i, &x) in numbers.iter().enumerate()\
    \ {\n            let dist = x - &numbers[i];\n            if dist < min_dist {\n\
    \                min_dist = dist;\n                min_idx = i;\n            }\n\
    \        }\n        min_idx != -1\n    })\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpdq7fspsg.rs:6:27\n\
    \  |\n6 |         let mut min_idx = -1;\n  |                           ^^ the\
    \ trait `Neg` is not implemented for `usize`\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmpdq7fspsg.rs:14:20\n   |\n14 |  \
    \       min_idx != -1\n   |                    ^^\n   |                    |\n\
    \   |                    cannot apply unary operator `-`\n   |               \
    \     help: you may have meant the maximum value of `usize`: `usize::MAX`\n  \
    \ |\n   = note: unsigned values cannot be negated\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0600.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n    let mut i = 0;\n    let mut j = 1;\n\
    \    while i < numbers_sorted.len() && j < numbers_sorted.len() {\n        if\
    \ numbers_sorted[i] < numbers_sorted[j] {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n        if i == numbers_sorted.len() || j\
    \ == numbers_sorted.len() {\n            return false;\n        }\n    }\n   \
    \ numbers_sorted.len() >= 2 && numbers_sorted[i] == numbers_sorted[j] && numbers_sorted[i]\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpq6g4l1wi.rs:5:20\n\
    \  |\n5 |     numbers_sorted.sort_unstable();\n  |                    ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if close.load(Ordering::Relaxed) {\n            break;\n        }\n       \
    \ if n < threshold {\n            close = true;\n        } else {\n          \
    \  close = false;\n            break;\n        }\n    }\n    close\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmpzsid78po.rs:6:23\n  |\n6 |         if close.load(Ordering::Relaxed)\
    \ {\n  |                       ^^^^^^^^ use of undeclared type `Ordering`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpzsid78po.rs:5:9\n  |\n5 |     for\
    \ &n in numbers {\n  |         ^^    ------- this expression has type `f64`\n\
    \  |         |\n  |         expected `f64`, found reference\n  |\n  = note:  \
    \ expected type `f64`\n          found reference `&_`\n\nerror[E0599]: no method\
    \ named `load` found for type `bool` in the current scope\n --> /tmp/tmpzsid78po.rs:6:18\n\
    \  |\n6 |         if close.load(Ordering::Relaxed) {\n  |                  ^^^^\
    \ method not found in `bool`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_element\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = std::f64::abs(n\
    \ - min_element);\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_element = n;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmpd0y7w1c6.rs:7:34\n\
    \  |\n7 |         let distance = std::f64::abs(n - min_element);\n  |        \
    \                          ^^^ not found in `std::f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpd0y7w1c6.rs:6:9\n  |\n6 |     for &n in numbers {\n  | \
    \        ^^    ------- this expression has type `f64`\n  |         |\n  |    \
    \     expected `f64`, found reference\n  |\n  = note:   expected type `f64`\n\
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().sorted();\n\
    \    let mut min_distance = threshold;\n    let mut min_element = numbers_sorted.next().unwrap();\n\
    \    for element in numbers_sorted {\n        if element - min_element > threshold\
    \ {\n            min_distance = element - min_element;\n            min_element\
    \ = element;\n        }\n    }\n    min_distance < threshold\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpdaclwfon.rs:4:54\n  |\n4 |     let mut numbers_sorted\
    \ = numbers.iter().cloned().sorted();\n  |                                   \
    \                   ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, f64>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    for &n in numbers {\n\
    \        for &m in numbers {\n            if *n < m && *n - *m > min_dist {\n\
    \                min_dist = (*n - *m).abs();\n            }\n        }\n    }\n\
    \    min_dist < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoepwp7d6.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpoepwp7d6.rs:6:13\n  |\n6 |         for &m in\
    \ numbers {\n  |             ^^    ------- this expression has type `f64`\n  |\
    \             |\n  |             expected `f64`, found reference\n  |\n  = note:\
    \   expected type `f64`\n          found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        numbers.iter().any(|y|\
    \ {\n            abs(x - y) < threshold\n        })\n    })\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n --> /tmp/tmpjsyn487e.rs:6:13\n\
    \  |\n6 |             abs(x - y) < threshold\n  |             ^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    for &n in numbers_copy {\n        if n == threshold {\n            return\
    \ true;\n        }\n        if numbers.iter().any(|&n| n == n) {\n           \
    \ return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp0g99t_b3.rs:5:18\n\
    \  |\n5 |     numbers_copy.sort();\n  |                  ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0g99t_b3.rs:6:9\n\
    \  |\n6 |     for &n in numbers_copy {\n  |         ^^    ------------ this expression\
    \ has type `f64`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |\n  = note:   expected type `f64`\n          found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while i < numbers.len()\
    \ && j < numbers.len() {\n        if numbers[i] - numbers[j] > threshold {\n \
    \           return true;\n        }\n        if numbers[j] - numbers[i] > threshold\
    \ {\n            return false;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyfbdzgja.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n\n    for &n in numbers_sorted {\n     \
    \   if n == threshold {\n            return true;\n        }\n        if n ==\
    \ numbers_sorted[numbers_sorted.len() - 1] {\n            return false;\n    \
    \    }\n    }\n\n    false\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7qsl6oi4.rs:5:20\n\
    \  |\n5 |     numbers_sorted.sort_unstable();\n  |                    ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp7qsl6oi4.rs:7:9\n  |\n7 |     for &n in numbers_sorted {\n  |  \
    \       ^^    -------------- this expression has type `f64`\n  |         |\n \
    \ |         expected `f64`, found reference\n  |\n  = note:   expected type `f64`\n\
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        numbers.iter().any(|y|\
    \ {\n            abs(x - y) < threshold\n        })\n    })\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n --> /tmp/tmpjsyn487e.rs:6:13\n\
    \  |\n6 |             abs(x - y) < threshold\n  |             ^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for idx in 0..numbers.len() {\n        let dist = numbers[idx] - threshold;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_idx\
    \ = idx;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpagjpd9fu.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpagjpd9fu.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for idx in 0..numbers.len() {\n        let dist = numbers[idx] - threshold;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_idx\
    \ = idx;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpagjpd9fu.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpagjpd9fu.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|n| f64::abs(n - threshold) < f64::abs(n\
    \ - numbers.last()))\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `Option<&f64>` from `&f64`\n --> /tmp/tmpu740h6ou.rs:4:65\n\
    \  |\n4 |     numbers.iter().any(|n| f64::abs(n - threshold) < f64::abs(n - numbers.last()))\n\
    \  |                                                                 ^ no implementation\
    \ for `&f64 - Option<&f64>`\n  |\n  = help: the trait `Sub<Option<&f64>>` is not\
    \ implemented for `&f64`\n  = help: the following other types implement trait\
    \ `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n\
    \            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n    \
    \        <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n          \
    \  <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48\
    \ others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < numbers.len() && j < numbers.len() {\n        if numbers[i]\
    \ > numbers[j] {\n            close = true;\n            break;\n        }\n \
    \       if numbers[i] < numbers[j] {\n            close = false;\n           \
    \ break;\n        }\n        i += 1;\n        j += 1;\n    }\n    close\n}\n\n\
    fn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps_zh40fx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if n < threshold {\n            close = true;\n            break;\n       \
    \ }\n    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdwyihrr8.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for &n in numbers {\n        if min_dist > n {\n            min_dist = n;\n\
    \            min_idx = -1;\n        }\n        if min_dist == n {\n          \
    \  min_idx = 0;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwact5yhp.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for (idx, number) in numbers.iter().enumerate() {\n        let dist = number.abs()\
    \ - min_dist;\n        if dist < threshold {\n            min_dist = dist;\n \
    \           min_idx = idx;\n        }\n    }\n    min_idx != -1\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpxw0gwnw2.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpxw0gwnw2.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for &n in numbers {\n        let dist = std::f64::abs(n - min_dist);\n  \
    \      if dist < threshold {\n            min_dist = n;\n            min_idx =\
    \ numbers.iter().position(|&n| n == min_dist).unwrap();\n        }\n    }\n  \
    \  min_idx != -1\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmpp_mn9q1s.rs:7:30\n\
    \  |\n7 |         let dist = std::f64::abs(n - min_dist);\n  |               \
    \               ^^^ not found in `std::f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpp_mn9q1s.rs:6:9\n  |\n6 |     for &n in numbers {\n  |         ^^\
    \    ------- this expression has type `Option<f64>`\n  |         |\n  |      \
    \   expected `f64`, found reference\n  |         help: you can probably remove\
    \ the explicit borrow: `n`\n  |\n  = note:   expected type `f64`\n          found\
    \ reference `&_`\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n\
    \ --> /tmp/tmpp_mn9q1s.rs:5:23\n  |\n5 |     let mut min_idx = -1;\n  |      \
    \                 ^^ the trait `Neg` is not implemented for `usize`\n  |\n  =\
    \ help: the following other types implement trait `Neg`:\n            &f32\n \
    \           &f64\n            &i128\n            &i16\n            &i32\n    \
    \        &i64\n            &i8\n            &isize\n          and 8 others\n\n\
    error[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmpp_mn9q1s.rs:13:16\n\
    \   |\n13 |     min_idx != -1\n   |                ^^\n   |                |\n\
    \   |                cannot apply unary operator `-`\n   |                help:\
    \ you may have meant the maximum value of `usize`: `usize::MAX`\n   |\n   = note:\
    \ unsigned values cannot be negated\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425, E0600.\nFor more\
    \ information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        let mut min_dist = threshold;\n\
    \        let mut min_idx = -1;\n        for (i, &x) in numbers.iter().enumerate()\
    \ {\n            let dist = x - i;\n            if dist < min_dist {\n       \
    \         min_dist = dist;\n                min_idx = i;\n            }\n    \
    \    }\n        min_idx == -1\n    })\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `usize` from `f64`\n --> /tmp/tmpl9wunec_.rs:8:26\n\
    \  |\n8 |             let dist = x - i;\n  |                          ^ no implementation\
    \ for `f64 - usize`\n  |\n  = help: the trait `Sub<usize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Sub<Rhs>`:\n\
    \            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n      \
    \      <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n          \
    \  <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a\
    \ i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpl9wunec_.rs:6:27\n\
    \  |\n6 |         let mut min_idx = -1;\n  |                           ^^ the\
    \ trait `Neg` is not implemented for `usize`\n  |\n  = help: the following other\
    \ types implement trait `Neg`:\n            &f32\n            &f64\n         \
    \   &i128\n            &i16\n            &i32\n            &i64\n            &i8\n\
    \            &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmpl9wunec_.rs:14:20\n   |\n14 |  \
    \       min_idx == -1\n   |                    ^^\n   |                    |\n\
    \   |                    cannot apply unary operator `-`\n   |               \
    \     help: you may have meant the maximum value of `usize`: `usize::MAX`\n  \
    \ |\n   = note: unsigned values cannot be negated\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0600.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_element\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = std::f64::abs(n\
    \ - min_element);\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_element = n;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmpd0y7w1c6.rs:7:34\n\
    \  |\n7 |         let distance = std::f64::abs(n - min_element);\n  |        \
    \                          ^^^ not found in `std::f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpd0y7w1c6.rs:6:9\n  |\n6 |     for &n in numbers {\n  | \
    \        ^^    ------- this expression has type `f64`\n  |         |\n  |    \
    \     expected `f64`, found reference\n  |\n  = note:   expected type `f64`\n\
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - numbers.iter().next().unwrap())\
    \ < threshold)\n}\n\nfn main() {\n    let candidate = has_close_elements;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpypmxg15b.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - numbers.iter().next().unwrap())\
    \ < threshold)\n}\n\nfn main() {\n    let candidate = has_close_elements;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpypmxg15b.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < numbers_copy.len() && j\
    \ < numbers_copy.len() {\n        if numbers_copy[i] < numbers_copy[j] {\n   \
    \         i += 1;\n        } else {\n            j += 1;\n        }\n        if\
    \ i == numbers_copy.len() || j == numbers_copy.len() {\n            return false;\n\
    \        }\n    }\n    numbers_copy[i] < threshold\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpengjidjj.rs:5:18\n\
    \    |\n5   |     numbers_copy.sort();\n    |                  ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        } else\
    \ if n < min_number + min_distance {\n            min_number = n;\n          \
    \  min_distance = n - min_number;\n        }\n    }\n    min_number < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphu2n75ga.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    for &n in numbers_copy {\n        if n == 0.0 {\n            continue;\n\
    \        }\n        for &m in numbers_copy {\n            if m == 0.0 {\n    \
    \            continue;\n            }\n            if abs(n - m) < threshold {\n\
    \                return true;\n            }\n        }\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpjmrb_2j7.rs:14:16\n\
    \   |\n14 |             if abs(n - m) < threshold {\n   |                ^^^ not\
    \ found in this scope\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \   --> /tmp/tmpjmrb_2j7.rs:5:18\n    |\n5   |     numbers_copy.sort();\n    |\
    \                  ^^^^ the trait `Ord` is not implemented for `f64`\n    |\n\
    \    = help: the following other types implement trait `Ord`:\n              i128\n\
    \              i16\n              i32\n              i64\n              i8\n \
    \             isize\n              u128\n              u16\n            and 4\
    \ others\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpjmrb_2j7.rs:6:9\n  |\n6 |     for &n in numbers_copy\
    \ {\n  |         ^^    ------------ this expression has type `Option<f64>`\n \
    \ |         |\n  |         expected `f64`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `f64`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjmrb_2j7.rs:10:13\n   |\n10 |         for &m in numbers_copy {\n\
    \   |             ^^    ------------ this expression has type `Option<f64>`\n\
    \   |             |\n   |             expected `f64`, found reference\n   |  \
    \           help: you can probably remove the explicit borrow: `m`\n   |\n   =\
    \ note:   expected type `f64`\n           found reference `&_`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_distance\
    \ = threshold;\n    while i < numbers.len() && j < numbers.len() {\n        if\
    \ numbers[i] > numbers[j] {\n            i += 1;\n        } else {\n         \
    \   j += 1;\n        }\n        if min_distance > numbers[i] - numbers[j] {\n\
    \            min_distance = numbers[i] - numbers[j];\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 6 but the
    index is 6'', /tmp/tmpjqub30d2.rs:13:40

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for n in numbers {\n       \
    \ if n < threshold {\n            close = true;\n            break;\n        }\n\
    \    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpascowndl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = std::f64::MAX;\n\
    \        for &m in numbers {\n            if m == n {\n                continue;\n\
    \            }\n            let distance = n.abs() - m.abs();\n            if\
    \ distance < distance {\n                distance = std::f64::MAX;\n         \
    \   }\n        }\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_number = n;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoucdpyys.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpoucdpyys.rs:8:13\n  |\n8 |         for &m in\
    \ numbers {\n  |             ^^    ------- this expression has type `Option<f64>`\n\
    \  |             |\n  |             expected `f64`, found reference\n  |     \
    \        help: you can probably remove the explicit borrow: `m`\n  |\n  = note:\
    \   expected type `f64`\n          found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| x < threshold)\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp09cos98_.rs:4:32\n  |\n4 |\
    \     numbers.iter().any(|x| x < threshold)\n  |                             \
    \   ^^^^^^^^^\n  |                                |\n  |                     \
    \           expected `&f64`, found `f64`\n  |                                help:\
    \ consider borrowing here: `&threshold`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut i = 0;\n    let mut j = 1;\n    while i < numbers_copy.len() && j\
    \ < numbers_copy.len() {\n        if numbers_copy[i] < numbers_copy[j] {\n   \
    \         i += 1;\n        } else {\n            j += 1;\n        }\n        if\
    \ i == numbers_copy.len() || j == numbers_copy.len() {\n            return false;\n\
    \        }\n    }\n    numbers_copy[i] < threshold\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp_pl90g5s.rs:5:18\n\
    \    |\n5   |     numbers_copy.sort();\n    |                  ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut min_dist = threshold;\n\
    \    for &n in numbers {\n        for &m in numbers {\n            if n == m {\n\
    \                continue;\n            }\n            let dist = std::f64::abs(n\
    \ - m);\n            if dist < min_dist {\n                close = true;\n   \
    \             min_dist = dist;\n            }\n        }\n    }\n    close\n}\n\
    \nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmphtfuxdhn.rs:11:34\n\
    \   |\n11 |             let dist = std::f64::abs(n - m);\n   |               \
    \                   ^^^ not found in `std::f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmphtfuxdhn.rs:6:9\n  |\n6 |     for &n in numbers {\n  |         ^^\
    \    ------- this expression has type `Option<f64>`\n  |         |\n  |      \
    \   expected `f64`, found reference\n  |         help: you can probably remove\
    \ the explicit borrow: `n`\n  |\n  = note:   expected type `f64`\n          found\
    \ reference `&_`\n\nerror[E0308]: mismatched types\n --> /tmp/tmphtfuxdhn.rs:7:13\n\
    \  |\n7 |         for &m in numbers {\n  |             ^^    ------- this expression\
    \ has type `Option<f64>`\n  |             |\n  |             expected `f64`, found\
    \ reference\n  |             help: you can probably remove the explicit borrow:\
    \ `m`\n  |\n  = note:   expected type `f64`\n          found reference `&_`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        let mut min_dist = threshold;\n\
    \        let mut min_idx = -1;\n        for (i, &x) in numbers.iter().enumerate()\
    \ {\n            let dist = x - i;\n            if dist < min_dist {\n       \
    \         min_dist = dist;\n                min_idx = i;\n            }\n    \
    \    }\n        min_dist < threshold\n    })\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `usize` from `f64`\n --> /tmp/tmpwxkqpk72.rs:8:26\n\
    \  |\n8 |             let dist = x - i;\n  |                          ^ no implementation\
    \ for `f64 - usize`\n  |\n  = help: the trait `Sub<usize>` is not implemented\
    \ for `f64`\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n -->\
    \ /tmp/tmpwxkqpk72.rs:6:27\n  |\n6 |         let mut min_idx = -1;\n  |      \
    \                     ^^ the trait `Neg` is not implemented for `usize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = std::f64::MAX;\n    for &n in numbers {\n        let distance = std::f64::MAX;\n\
    \        for &m in numbers {\n            if m == n {\n                continue;\n\
    \            }\n            let distance = n.abs() - m.abs();\n            if\
    \ distance < distance {\n                distance = distance;\n            }\n\
    \        }\n        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    if min_distance < threshold\
    \ {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe4tgc61w.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpe4tgc61w.rs:8:13\n  |\n8 |         for &m in\
    \ numbers {\n  |             ^^    ------- this expression has type `Option<f64>`\n\
    \  |             |\n  |             expected `f64`, found reference\n  |     \
    \        help: you can probably remove the explicit borrow: `m`\n  |\n  = note:\
    \   expected type `f64`\n          found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for (i, &number) in numbers.iter().enumerate() {\n        let dist = number.abs()\
    \ - min_dist;\n        if dist < threshold {\n            min_dist = dist;\n \
    \           min_idx = i;\n        }\n    }\n    min_idx != -1\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp7verc2w_.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmp7verc2w_.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n        }\n        if n - min_number < min_distance {\n\
    \            min_distance = n - min_number;\n            min_number = n;\n   \
    \     }\n    }\n    min_number < threshold\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_2zo8fn4.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut i = 0;\n    while i\
    \ < numbers.len() {\n        if numbers[i] - numbers[i - 1] < threshold {\n  \
    \          close = true;\n            break;\n        }\n        i += 1;\n   \
    \ }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpt4f990ua.rs:7:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        let mut min_dist = threshold;\n\
    \        let mut min_idx = -1;\n        for (i, &x) in numbers.iter().enumerate()\
    \ {\n            let dist = x - &numbers[i];\n            if dist < min_dist {\n\
    \                min_dist = dist;\n                min_idx = i;\n            }\n\
    \        }\n        min_idx == -1\n    })\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpvi59hbs0.rs:6:27\n\
    \  |\n6 |         let mut min_idx = -1;\n  |                           ^^ the\
    \ trait `Neg` is not implemented for `usize`\n  |\n  = help: the following other\
    \ types implement trait `Neg`:\n            &f32\n            &f64\n         \
    \   &i128\n            &i16\n            &i32\n            &i64\n            &i8\n\
    \            &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmpvi59hbs0.rs:14:20\n   |\n14 |  \
    \       min_idx == -1\n   |                    ^^\n   |                    |\n\
    \   |                    cannot apply unary operator `-`\n   |               \
    \     help: you may have meant the maximum value of `usize`: `usize::MAX`\n  \
    \ |\n   = note: unsigned values cannot be negated\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0600.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = std::f64::MAX;\n\
    \        for &m in numbers {\n            if m == n {\n                continue;\n\
    \            }\n            let distance = n.abs() - m.abs();\n            if\
    \ distance < distance {\n                distance = distance;\n            }\n\
    \        }\n        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxl499ljn.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpxl499ljn.rs:8:13\n  |\n8 |         for &m in\
    \ numbers {\n  |             ^^    ------- this expression has type `Option<f64>`\n\
    \  |             |\n  |             expected `f64`, found reference\n  |     \
    \        help: you can probably remove the explicit borrow: `m`\n  |\n  = note:\
    \   expected type `f64`\n          found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|&x| x < threshold)\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2012dbi0.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for (i, &num) in numbers.iter().enumerate() {\n        let dist = std::f64::abs(num\
    \ - threshold);\n        if dist < min_dist {\n            min_dist = dist;\n\
    \            min_idx = i;\n        }\n    }\n    min_idx != -1\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmpdwnb7rv8.rs:7:30\n\
    \  |\n7 |         let dist = std::f64::abs(num - threshold);\n  |            \
    \                  ^^^ not found in `std::f64`\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n --> /tmp/tmpdwnb7rv8.rs:5:23\n  |\n5 |     let\
    \ mut min_idx = -1;\n  |                       ^^ the trait `Neg` is not implemented\
    \ for `usize`\n  |\n  = help: the following other types implement trait `Neg`:\n\
    \            &f32\n            &f64\n            &i128\n            &i16\n   \
    \         &i32\n            &i64\n            &i8\n            &isize\n      \
    \    and 8 others\n\nerror[E0600]: cannot apply unary operator `-` to type `usize`\n\
    \  --> /tmp/tmpdwnb7rv8.rs:13:16\n   |\n13 |     min_idx != -1\n   |         \
    \       ^^\n   |                |\n   |                cannot apply unary operator\
    \ `-`\n   |                help: you may have meant the maximum value of `usize`:\
    \ `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425,\
    \ E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        if n == 0.0 {\n     \
    \       continue;\n        }\n        let dist = std::f64::abs(n - min_dist);\n\
    \        if dist < threshold {\n            min_dist = n;\n            min_idx\
    \ = i;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmpbjeqkp4k.rs:10:30\n\
    \   |\n10 |         let dist = std::f64::abs(n - min_dist);\n   |            \
    \                  ^^^ not found in `std::f64`\n\nerror[E0277]: can't compare\
    \ `&f64` with `{float}`\n --> /tmp/tmpbjeqkp4k.rs:7:14\n  |\n7 |         if n\
    \ == 0.0 {\n  |              ^^ no implementation for `&f64 == {float}`\n  |\n\
    \  = help: the trait `PartialEq<{float}>` is not implemented for `&f64`\n  = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n            f32\n\
    \            f64\n            i128\n            i16\n            i32\n       \
    \     i64\n            i8\n            isize\n          and 6 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbjeqkp4k.rs:12:24\n   |\n4  |     let mut min_dist\
    \ = threshold;\n   |                        --------- expected due to this value\n\
    ...\n12 |             min_dist = n;\n   |                        ^ expected `f64`,\
    \ found `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |    \
    \         min_dist = *n;\n   |                        +\n\nerror[E0277]: the trait\
    \ bound `usize: Neg` is not satisfied\n --> /tmp/tmpbjeqkp4k.rs:5:23\n  |\n5 |\
    \     let mut min_idx = -1;\n  |                       ^^ the trait `Neg` is not\
    \ implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpbjeqkp4k.rs:16:16\n   |\n16 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425, E0600.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        let dist = n.abs() -\
    \ min_dist;\n        if dist < 0.0 {\n            min_dist = dist;\n         \
    \   min_idx = i;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpr4af9ug9.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpr4af9ug9.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if n < threshold {\n            close = true;\n            break;\n       \
    \ }\n    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdwyihrr8.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n\n    let mut min_distance = threshold;\n\
    \    let mut min_element = numbers_sorted.first().unwrap();\n    for element in\
    \ numbers_sorted {\n        if element - min_element < min_distance {\n      \
    \      min_distance = element - min_element;\n            min_element = element;\n\
    \        }\n    }\n\n    min_distance < threshold\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp79xnq2a3.rs:5:20\n\
    \     |\n5    |     numbers_sorted.sort_unstable();\n     |                  \
    \  ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n     |\n     =\
    \ help: the following other types implement trait `Ord`:\n               i128\n\
    \               i16\n               i32\n               i64\n               i8\n\
    \               isize\n               u128\n               u16\n             and\
    \ 4 others\nnote: required by a bound in `core::slice::<impl [T]>::sort_unstable`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp79xnq2a3.rs:12:27\n   |\n8  |\
    \     let mut min_element = numbers_sorted.first().unwrap();\n   |           \
    \                ------------------------------- expected due to this value\n\
    ...\n12 |             min_element = element;\n   |                           ^^^^^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found `f64`\n   |                           help: consider borrowing here: `&element`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_element\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = std::f64::abs(n\
    \ - min_element);\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_element = n;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmpd0y7w1c6.rs:7:34\n\
    \  |\n7 |         let distance = std::f64::abs(n - min_element);\n  |        \
    \                          ^^^ not found in `std::f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpd0y7w1c6.rs:6:9\n  |\n6 |     for &n in numbers {\n  | \
    \        ^^    ------- this expression has type `f64`\n  |         |\n  |    \
    \     expected `f64`, found reference\n  |\n  = note:   expected type `f64`\n\
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        }\n   \
    \     if n < min_number + min_distance {\n            min_number = n;\n      \
    \      min_distance = n - min_number;\n        }\n    }\n    min_number < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0sx_p2le.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if close {\n            break;\n        }\n        if n < threshold {\n   \
    \         close = true;\n        }\n    }\n    close\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwackc3fy.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| x < threshold)\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp09cos98_.rs:4:32\n  |\n4 |\
    \     numbers.iter().any(|x| x < threshold)\n  |                             \
    \   ^^^^^^^^^\n  |                                |\n  |                     \
    \           expected `&f64`, found `f64`\n  |                                help:\
    \ consider borrowing here: `&threshold`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if close {\n            break;\n        }\n        if n < threshold {\n   \
    \         close = true;\n        }\n    }\n    close\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwackc3fy.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if close.cmp(&n) < 0 {\n            close = n;\n        }\n    }\n    close\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3w_oz38d.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp3w_oz38d.rs:6:28\n  |\n6 |         if close.cmp(&n)\
    \ < 0 {\n  |                            ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3w_oz38d.rs:10:13\n\
    \   |\n10 |     close < threshold\n   |             ^^^^^^^^^ expected `bool`,\
    \ found `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - threshold) < f64::abs(x\
    \ - numbers[0]))\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw3ujftgo.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|n| {\n        let mut min_diff = threshold;\n\
    \        let mut max_diff = threshold;\n        for &n in numbers {\n        \
    \    if *n >= *min_diff && *n <= *max_diff {\n                min_diff = *n;\n\
    \            } else {\n                max_diff = *n;\n            }\n       \
    \ }\n        *min_diff <= *max_diff\n    })\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpneqrowl1.rs:7:13\n  |\n7 |\
    \         for &n in numbers {\n  |             ^^    ------- this expression has\
    \ type `Option<f64>`\n  |             |\n  |             expected `f64`, found\
    \ reference\n  |             help: you can probably remove the explicit borrow:\
    \ `n`\n  |\n  = note:   expected type `f64`\n          found reference `&_`\n\n\
    error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmpneqrowl1.rs:8:22\n\
    \  |\n8 |             if *n >= *min_diff && *n <= *max_diff {\n  |           \
    \           ^^^^^^^^^\n\nerror[E0614]: type `f64` cannot be dereferenced\n -->\
    \ /tmp/tmpneqrowl1.rs:8:41\n  |\n8 |             if *n >= *min_diff && *n <= *max_diff\
    \ {\n  |                                         ^^^^^^^^^\n\nerror[E0614]: type\
    \ `f64` cannot be dereferenced\n  --> /tmp/tmpneqrowl1.rs:14:9\n   |\n14 |   \
    \      *min_diff <= *max_diff\n   |         ^^^^^^^^^\n   |\nhelp: parentheses\
    \ are required to parse this as an expression\n   |\n7  ~         (for &n in numbers\
    \ {\n8  |             if *n >= *min_diff && *n <= *max_diff {\n9  |          \
    \       min_diff = *n;\n10 |             } else {\n11 |                 max_diff\
    \ = *n;\n12 |             }\n ...\n\nerror[E0614]: type `f64` cannot be dereferenced\n\
    \  --> /tmp/tmpneqrowl1.rs:14:22\n   |\n14 |         *min_diff <= *max_diff\n\
    \   |                      ^^^^^^^^^\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort();\n    let mut i = 0;\n    let mut j = 1;\n    while\
    \ i < numbers_sorted.len() && j < numbers_sorted.len() {\n        if numbers_sorted[i]\
    \ < numbers_sorted[j] {\n            i += 1;\n        } else if numbers_sorted[i]\
    \ > numbers_sorted[j] {\n            j += 1;\n        } else {\n            if\
    \ numbers_sorted[i] - numbers_sorted[j] < threshold {\n                i += 1;\n\
    \            } else {\n                j += 1;\n            }\n        }\n   \
    \ }\n    i != numbers_sorted.len()\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpgwvpz73f.rs:5:20\n\
    \    |\n5   |     numbers_sorted.sort();\n    |                    ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        }\n   \
    \     if n == min_number {\n            min_distance = std::f64::MAX;\n      \
    \  }\n        if n < min_number + min_distance {\n            return false;\n\
    \        }\n        min_distance = std::f64::MAX;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2itdy8v9.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n    let mut i = 0;\n    let mut j = 1;\n\
    \    while i < numbers_sorted.len() && j < numbers_sorted.len() {\n        if\
    \ numbers_sorted[i] < numbers_sorted[j] {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n        if i == numbers_sorted.len() || j\
    \ == numbers_sorted.len() {\n            return false;\n        }\n    }\n   \
    \ numbers_sorted.len() >= 2\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpe28wnybn.rs:5:20\n\
    \     |\n5    |     numbers_sorted.sort_unstable();\n     |                  \
    \  ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n     |\n     =\
    \ help: the following other types implement trait `Ord`:\n               i128\n\
    \               i16\n               i32\n               i64\n               i8\n\
    \               isize\n               u128\n               u16\n             and\
    \ 4 others\nnote: required by a bound in `core::slice::<impl [T]>::sort_unstable`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| x < threshold)\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp09cos98_.rs:4:32\n  |\n4 |\
    \     numbers.iter().any(|x| x < threshold)\n  |                             \
    \   ^^^^^^^^^\n  |                                |\n  |                     \
    \           expected `&f64`, found `f64`\n  |                                help:\
    \ consider borrowing here: `&threshold`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        let dist = n.abs() -\
    \ min_dist;\n        if dist < threshold {\n            min_dist = dist;\n   \
    \         min_idx = i;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp4gwb6u2r.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmp4gwb6u2r.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut found =\
    \ false;\n    while !found && i < numbers.len() && j < numbers.len() {\n     \
    \   if numbers[i] - numbers[j] < threshold {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n        if i == numbers.len() || j == numbers.len()\
    \ {\n            found = true;\n        }\n    }\n    found\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpv1cnyg7u.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut min_diff = threshold;\n\
    \    for &n in numbers {\n        if n == min_diff {\n            close = true;\n\
    \        } else {\n            min_diff = n;\n        }\n    }\n    close\n}\n\
    \nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_9chg73p.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if n < threshold {\n            close = true;\n            break;\n       \
    \ }\n    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdwyihrr8.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if n == threshold {\n            close = true;\n            break;\n      \
    \  }\n        if close {\n            if n == (n - threshold) {\n            \
    \    close = false;\n            }\n        } else {\n            if n == (n -\
    \ threshold + threshold) {\n                close = true;\n            }\n   \
    \     }\n    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_uh0hjc.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    for &n in numbers_copy {\n        if n == 0.0 {\n            continue;\n\
    \        }\n        if numbers_copy.iter().any(|&n2| n2 > n && n2 < threshold)\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpj_0ez_m0.rs:5:18\n\
    \    |\n5   |     numbers_copy.sort();\n    |                  ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpj_0ez_m0.rs:6:9\n\
    \  |\n6 |     for &n in numbers_copy {\n  |         ^^    ------------ this expression\
    \ has type `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for (i, &number) in numbers.iter().enumerate() {\n        let dist = number.abs()\
    \ - min_dist;\n        if dist < threshold {\n            min_dist = dist;\n \
    \           min_idx = i;\n        }\n    }\n    min_idx != -1\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp7verc2w_.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmp7verc2w_.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while i < numbers.len()\
    \ && j < numbers.len() {\n        if numbers[i] > numbers[j] {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n    }\n    i != numbers.len()\
    \ || j != numbers.len()\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmkg3viqy.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = None;\n    for &n in numbers {\n        let distance = n.abs() - threshold;\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = Some(n);\n        }\n    }\n    min_number.is_some()\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1x1e_em.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut i = 0;\n    let mut j = 1;\n    while i < numbers_copy.len() && j\
    \ < numbers_copy.len() {\n        if numbers_copy[i] < numbers_copy[j] {\n   \
    \         i += 1;\n        } else {\n            j += 1;\n        }\n        if\
    \ j == numbers_copy.len() {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmph_lxjzui.rs:5:18\n\
    \  |\n5 |     numbers_copy.sort();\n  |                  ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for &n in numbers {\n        if min_dist > n {\n            min_dist = n;\n\
    \            min_idx = -1;\n        }\n        if min_dist == n {\n          \
    \  min_idx += 1;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6_l5ej_m.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if close {\n            break;\n        }\n        if n < threshold {\n   \
    \         close = true;\n        }\n    }\n    close\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwackc3fy.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut min_value = numbers[0];\n\
    \    let mut max_value = numbers[0];\n    for &n in numbers {\n        if n <\
    \ min_value {\n            min_value = n;\n        }\n        if n > max_value\
    \ {\n            max_value = n;\n        }\n    }\n    for &n in numbers {\n \
    \       if n < min_value + threshold || n > max_value - threshold {\n        \
    \    close = true;\n            break;\n        }\n    }\n    close\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu5ckaj_u.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu5ckaj_u.rs:15:9\n   |\n15 |     for &n in numbers\
    \ {\n   |         ^^    ------- this expression has type `Option<f64>`\n   | \
    \        |\n   |         expected `f64`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `n`\n   |\n   = note:   expected type\
    \ `f64`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut min_distance = threshold;\n    let mut min_element = numbers_copy.iter().min();\n\
    \    for element in numbers_copy.iter().skip(1) {\n        let distance = element.distance_to(min_element);\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_element = element;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpirx8ieaa.rs:5:18\n\
    \    |\n5   |     numbers_copy.sort();\n    |                  ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0277]: the trait bound `f64: Ord` is\
    \ not satisfied\n    --> /tmp/tmpirx8ieaa.rs:7:47\n     |\n7    |     let mut\
    \ min_element = numbers_copy.iter().min();\n     |                           \
    \                    ^^^ the trait `Ord` is not implemented for `f64`\n     |\n\
    \     = help: the following other types implement trait `Ord`:\n             \
    \  i128\n               i16\n               i32\n               i64\n        \
    \       i8\n               isize\n               u128\n               u16\n  \
    \           and 4 others\n     = note: required because of the requirements on\
    \ the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0599]: no method named `distance_to` found for reference `&f64` in the\
    \ current scope\n --> /tmp/tmpirx8ieaa.rs:9:32\n  |\n9 |         let distance\
    \ = element.distance_to(min_element);\n  |                                ^^^^^^^^^^^\
    \ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpirx8ieaa.rs:12:27\n\
    \   |\n7  |     let mut min_element = numbers_copy.iter().min();\n   |       \
    \                    ------------------------- expected due to this value\n...\n\
    12 |             min_element = element;\n   |                           ^^^^^^^\
    \ expected enum `Option`, found `&f64`\n   |\n   = note:   expected enum `Option<&f64>`\n\
    \           found reference `&f64`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n12 |             min_element = Some(element);\n   |                   \
    \        +++++       +\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|n| {\n        let mut min_dist = threshold;\n\
    \        let mut min_idx = -1;\n        for (i, &n2) in numbers.iter().enumerate()\
    \ {\n            let dist = std::f64::abs(n - n2);\n            if dist < min_dist\
    \ {\n                min_dist = dist;\n                min_idx = i;\n        \
    \    }\n        }\n        min_idx != -1\n    })\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmp_5_9pcsr.rs:8:34\n\
    \  |\n8 |             let dist = std::f64::abs(n - n2);\n  |                 \
    \                 ^^^ not found in `std::f64`\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n --> /tmp/tmp_5_9pcsr.rs:6:27\n  |\n6 |     \
    \    let mut min_idx = -1;\n  |                           ^^ the trait `Neg` is\
    \ not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmp_5_9pcsr.rs:14:20\n   |\n14 |         min_idx\
    \ != -1\n   |                    ^^\n   |                    |\n   |         \
    \           cannot apply unary operator `-`\n   |                    help: you\
    \ may have meant the maximum value of `usize`: `usize::MAX`\n   |\n   = note:\
    \ unsigned values cannot be negated\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0425, E0600.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        } else\
    \ if n - min_number < min_distance {\n            min_number = n;\n          \
    \  min_distance = n - min_number;\n        }\n    }\n    min_number < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjibamxuw.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().sorted();\n\
    \    let mut i = 0;\n    let mut j = 1;\n    while i < numbers_sorted.len() &&\
    \ j < numbers_sorted.len() {\n        if numbers_sorted[i] - numbers_sorted[j]\
    \ < threshold {\n            i += 1;\n        } else {\n            j += 1;\n\
    \        }\n    }\n    i != numbers_sorted.len()\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmppryd9f1h.rs:4:54\n  |\n4 |     let mut numbers_sorted\
    \ = numbers.iter().cloned().sorted();\n  |                                   \
    \                   ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, f64>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = std::f64::MAX;\n    for &n in numbers {\n        let distance = n.abs() -\
    \ threshold;\n        if distance < min_distance {\n            min_distance =\
    \ distance;\n            min_number = n;\n        }\n    }\n    min_number !=\
    \ std::f64::MAX\n}\n\nfn main() {\n    let candidate = has_close_elements;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx4nev743.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut i = 0;\n    let mut j = 1;\n    while i < numbers_copy.len() && j\
    \ < numbers_copy.len() {\n        if numbers_copy[i] < numbers_copy[j] {\n   \
    \         i += 1;\n        } else {\n            j += 1;\n        }\n        if\
    \ i == numbers_copy.len() || j == numbers_copy.len() {\n            return false;\n\
    \        }\n    }\n    numbers_copy[i] < threshold\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp_pl90g5s.rs:5:18\n\
    \    |\n5   |     numbers_copy.sort();\n    |                  ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_element\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_element {\n     \
    \       min_element = n;\n        }\n        if n - min_element < min_distance\
    \ {\n            min_distance = n - min_element;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4x_ccu68.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        let mut min_dist = threshold;\n\
    \        let mut min_idx = -1;\n        for (i, &x) in numbers.iter().enumerate()\
    \ {\n            let dist = x - i;\n            if dist < min_dist {\n       \
    \         min_dist = dist;\n                min_idx = i;\n            }\n    \
    \    }\n        min_idx != -1\n    })\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `usize` from `f64`\n --> /tmp/tmppqvebdsf.rs:8:26\n\
    \  |\n8 |             let dist = x - i;\n  |                          ^ no implementation\
    \ for `f64 - usize`\n  |\n  = help: the trait `Sub<usize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Sub<Rhs>`:\n\
    \            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n      \
    \      <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n          \
    \  <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a\
    \ i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmppqvebdsf.rs:6:27\n\
    \  |\n6 |         let mut min_idx = -1;\n  |                           ^^ the\
    \ trait `Neg` is not implemented for `usize`\n  |\n  = help: the following other\
    \ types implement trait `Neg`:\n            &f32\n            &f64\n         \
    \   &i128\n            &i16\n            &i32\n            &i64\n            &i8\n\
    \            &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmppqvebdsf.rs:14:20\n   |\n14 |  \
    \       min_idx != -1\n   |                    ^^\n   |                    |\n\
    \   |                    cannot apply unary operator `-`\n   |               \
    \     help: you may have meant the maximum value of `usize`: `usize::MAX`\n  \
    \ |\n   = note: unsigned values cannot be negated\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0600.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        } else\
    \ if n < min_number + min_distance {\n            min_number = n;\n          \
    \  min_distance = n - min_number;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp64b4qkwb.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        numbers.iter().any(|y|\
    \ {\n            abs(x - y) < threshold\n        })\n    })\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n --> /tmp/tmpjsyn487e.rs:6:13\n\
    \  |\n6 |             abs(x - y) < threshold\n  |             ^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = std::f64::MAX;\n    for &n in numbers {\n        let distance = std::f64::MAX;\n\
    \        for &m in numbers {\n            if m == n {\n                continue;\n\
    \            }\n            let distance = n.abs() - m.abs();\n            if\
    \ distance < distance {\n                distance = std::f64::MAX;\n         \
    \   }\n        }\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_number = n;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwxabvq04.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpwxabvq04.rs:8:13\n  |\n8 |         for &m in\
    \ numbers {\n  |             ^^    ------- this expression has type `Option<f64>`\n\
    \  |             |\n  |             expected `f64`, found reference\n  |     \
    \        help: you can probably remove the explicit borrow: `m`\n  |\n  = note:\
    \   expected type `f64`\n          found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = std::f64::MAX;\n    for &n in numbers {\n        let distance = std::f64::MAX;\n\
    \        for &m in numbers {\n            if m == n {\n                continue;\n\
    \            }\n            let distance = n.abs() - m.abs();\n            if\
    \ distance < distance {\n                break;\n            }\n        }\n  \
    \      if distance < min_distance {\n            min_distance = distance;\n  \
    \          min_number = n;\n        }\n    }\n    min_distance < threshold\n}\n\
    \nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg3iwk4ca.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpg3iwk4ca.rs:8:13\n  |\n8 |         for &m in\
    \ numbers {\n  |             ^^    ------- this expression has type `Option<f64>`\n\
    \  |             |\n  |             expected `f64`, found reference\n  |     \
    \        help: you can probably remove the explicit borrow: `m`\n  |\n  = note:\
    \   expected type `f64`\n          found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|n| {\n        let mut diff = f64::MAX;\n\
    \        for &n in numbers {\n            if *n - n >= diff {\n              \
    \  diff = *n - n;\n            }\n        }\n        diff < threshold\n    })\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn5v2y5e_.rs:6:13\n  |\n6 |\
    \         for &n in numbers {\n  |             ^^    ------- this expression has\
    \ type `Option<f64>`\n  |             |\n  |             expected `f64`, found\
    \ reference\n  |             help: you can probably remove the explicit borrow:\
    \ `n`\n  |\n  = note:   expected type `f64`\n          found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for &n in numbers {\n        if min_dist > n {\n            min_dist = n;\n\
    \            min_idx = -1;\n        }\n        if min_dist == n {\n          \
    \  min_idx = 0;\n        }\n        if min_dist < n {\n            min_dist =\
    \ n;\n            min_idx = 1;\n        }\n    }\n    min_idx != -1\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppimk8wkp.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        }\n   \
    \     if min_distance > threshold {\n            return false;\n        }\n  \
    \      min_distance = std::f64::abs(n - min_number);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmp_qzafkz5.rs:14:34\n\
    \   |\n14 |         min_distance = std::f64::abs(n - min_number);\n   |      \
    \                            ^^^ not found in `std::f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_qzafkz5.rs:6:9\n  |\n6 |     for &n in numbers {\n  | \
    \        ^^    ------- this expression has type `Option<f64>`\n  |         |\n\
    \  |         expected `f64`, found reference\n  |         help: you can probably\
    \ remove the explicit borrow: `n`\n  |\n  = note:   expected type `f64`\n    \
    \      found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for idx in 0..numbers.len() {\n        let dist = numbers[idx] - threshold;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_idx\
    \ = idx;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpagjpd9fu.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpagjpd9fu.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = std::f64::MAX;\n    for n in numbers {\n        let distance = n.abs() - threshold;\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_number != std::f64::MAX\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9782m6i1.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if n == threshold {\n            close = true;\n            break;\n      \
    \  }\n        if close {\n            if n == (n - threshold).abs() {\n      \
    \          close = false;\n            }\n        }\n    }\n    close\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcyhwfock.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        numbers.iter().any(|y|\
    \ {\n            abs(x - y) < threshold\n        })\n    })\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n --> /tmp/tmpjsyn487e.rs:6:13\n\
    \  |\n6 |             abs(x - y) < threshold\n  |             ^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    for &n in numbers {\n\
    \        if min_dist > n {\n            min_dist = n;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3q2iohxx.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut min_diff = threshold;\n\
    \    for &n in numbers {\n        if *n < min_diff {\n            close = true;\n\
    \            min_diff = *n;\n        }\n    }\n    close\n}\n\nfn main() {\n \
    \   let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpee0sp12_.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = std::f64::abs(n\
    \ - min_number);\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_number = n;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmp8828mnt8.rs:7:34\n\
    \  |\n7 |         let distance = std::f64::abs(n - min_number);\n  |         \
    \                         ^^^ not found in `std::f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp8828mnt8.rs:6:9\n  |\n6 |     for &n in numbers {\n  | \
    \        ^^    ------- this expression has type `Option<f64>`\n  |         |\n\
    \  |         expected `f64`, found reference\n  |         help: you can probably\
    \ remove the explicit borrow: `n`\n  |\n  = note:   expected type `f64`\n    \
    \      found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = std::f64::MAX;\n    for number in numbers {\n        let distance = number.abs()\
    \ - threshold;\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_number = number;\n        }\n    }\n    min_number\
    \ != std::f64::MAX\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpe8gstvqk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        } else\
    \ {\n            min_distance = std::cmp::min(min_distance, n - min_number);\n\
    \        }\n    }\n    min_distance < threshold\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqv_sr59c.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpqv_sr59c.rs:11:28\n\
    \     |\n11   |             min_distance = std::cmp::min(min_distance, n - min_number);\n\
    \     |                            ^^^^^^^^^^^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\nnote: required by a bound in `std::cmp::min`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n        }\n        if min_distance > f64::abs(n - min_number)\
    \ {\n            min_distance = min_number - n;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpog1j4b0e.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().sorted();\n\
    \    let mut threshold = threshold * threshold;\n    let mut found = false;\n\
    \    while !found {\n        found = true;\n        for n in numbers_sorted {\n\
    \            if n == numbers_sorted.last() {\n                continue;\n    \
    \        }\n            if n - threshold < numbers_sorted.last() - n {\n     \
    \           found = false;\n                break;\n            }\n        }\n\
    \    }\n    found\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp9m_ae9xm.rs:4:54\n  |\n4 |     let mut numbers_sorted\
    \ = numbers.iter().cloned().sorted();\n  |                                   \
    \                   ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, f64>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for idx in 0..numbers.len() {\n        let dist = numbers[idx] - threshold;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_idx\
    \ = idx;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpagjpd9fu.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpagjpd9fu.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut i = 0;\n    let mut j = 1;\n    while i < numbers_copy.len() && j\
    \ < numbers_copy.len() {\n        if numbers_copy[i] < numbers_copy[j] {\n   \
    \         i += 1;\n        } else {\n            j += 1;\n        }\n        if\
    \ i == numbers_copy.len() || j == numbers_copy.len() {\n            return false;\n\
    \        }\n    }\n    numbers_copy[i] < threshold\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp_pl90g5s.rs:5:18\n\
    \    |\n5   |     numbers_copy.sort();\n    |                  ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        let dist = n.abs() -\
    \ min_dist;\n        if dist < threshold {\n            min_dist = dist;\n   \
    \         min_idx = i;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp4gwb6u2r.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmp4gwb6u2r.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut i = 0;\n    let mut j = 1;\n    while i < numbers_copy.len() && j\
    \ < numbers_copy.len() {\n        if numbers_copy[i] < numbers_copy[j] {\n   \
    \         i += 1;\n        } else {\n            j += 1;\n        }\n        if\
    \ i == numbers_copy.len() || j == numbers_copy.len() {\n            return false;\n\
    \        }\n    }\n    numbers_copy[i] < threshold\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp_pl90g5s.rs:5:18\n\
    \    |\n5   |     numbers_copy.sort();\n    |                  ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_element\
    \ = std::f64::MAX;\n    for &n in numbers {\n        let distance = std::f64::MAX;\n\
    \        for &m in numbers {\n            if m == n {\n                continue;\n\
    \            }\n            let distance = n.abs() - m.abs();\n            if\
    \ distance < distance {\n                distance = std::f64::MAX;\n         \
    \   }\n        }\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_element = n;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpotqc6_t6.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpotqc6_t6.rs:8:13\n  |\n8 |         for &m in\
    \ numbers {\n  |             ^^    ------- this expression has type `Option<f64>`\n\
    \  |             |\n  |             expected `f64`, found reference\n  |     \
    \        help: you can probably remove the explicit borrow: `m`\n  |\n  = note:\
    \   expected type `f64`\n          found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n    let mut i = 0;\n    let mut j = 1;\n\
    \    while i < numbers_sorted.len() && j < numbers_sorted.len() {\n        if\
    \ numbers_sorted[i] < numbers_sorted[j] {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n        if i == numbers_sorted.len() || j\
    \ == numbers_sorted.len() {\n            return false;\n        }\n    }\n   \
    \ numbers_sorted[i] == numbers_sorted[j]\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpqezjrotu.rs:5:20\n\
    \     |\n5    |     numbers_sorted.sort_unstable();\n     |                  \
    \  ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n     |\n     =\
    \ help: the following other types implement trait `Ord`:\n               i128\n\
    \               i16\n               i32\n               i64\n               i8\n\
    \               isize\n               u128\n               u16\n             and\
    \ 4 others\nnote: required by a bound in `core::slice::<impl [T]>::sort_unstable`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n\n    for &n in numbers_sorted {\n     \
    \   if n == 0.0 {\n            continue;\n        }\n\n        for &m in numbers_sorted\
    \ {\n            if m == 0.0 {\n                continue;\n            }\n\n \
    \           if abs(n - m) < threshold {\n                return true;\n      \
    \      }\n        }\n    }\n\n    false\n}\n\nfn main() {\n    let candidate =\
    \ has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp784gzzpd.rs:17:16\n\
    \   |\n17 |             if abs(n - m) < threshold {\n   |                ^^^ not\
    \ found in this scope\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmp784gzzpd.rs:5:20\n     |\n5    |     numbers_sorted.sort_unstable();\n\
    \     |                    ^^^^^^^^^^^^^ the trait `Ord` is not implemented for\
    \ `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::sort_unstable`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp784gzzpd.rs:7:9\n\
    \  |\n7 |     for &n in numbers_sorted {\n  |         ^^    -------------- this\
    \ expression has type `Option<f64>`\n  |         |\n  |         expected `f64`,\
    \ found reference\n  |         help: you can probably remove the explicit borrow:\
    \ `n`\n  |\n  = note:   expected type `f64`\n          found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp784gzzpd.rs:12:13\n   |\n12 |  \
    \       for &m in numbers_sorted {\n   |             ^^    -------------- this\
    \ expression has type `Option<f64>`\n   |             |\n   |             expected\
    \ `f64`, found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `m`\n   |\n   = note:   expected type `f64`\n           found reference\
    \ `&_`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        }\n   \
    \     if n < min_number + min_distance {\n            min_number = n;\n      \
    \      min_distance = threshold - n;\n        }\n    }\n    min_number < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi524ncip.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut found =\
    \ false;\n    while i < numbers.len() && j < numbers.len() {\n        if numbers[i]\
    \ < numbers[j] {\n            i += 1;\n        } else {\n            j += 1;\n\
    \        }\n        if i == numbers.len() || j == numbers.len() {\n          \
    \  found = true;\n            break;\n        }\n        if numbers[i] - numbers[j]\
    \ > threshold {\n            i += 1;\n        } else {\n            j += 1;\n\
    \        }\n    }\n    found\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsdvyb9xz.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|n| {\n        let mut min_diff = threshold;\n\
    \        let mut min_number = numbers.iter().min_by_key(|n| f64::abs(n - n)).unwrap();\n\
    \        for n in numbers {\n            let diff = f64::abs(n - min_number);\n\
    \            if diff < min_diff {\n                min_diff = diff;\n        \
    \        min_number = n;\n            }\n        }\n        min_diff < threshold\n\
    \    })\n}\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `&&f64` from `&&f64`\n --> /tmp/tmpfvs2hz7w.rs:6:71\n\
    \  |\n6 |         let mut min_number = numbers.iter().min_by_key(|n| f64::abs(n\
    \ - n)).unwrap();\n  |                                                       \
    \              - ^ - &&f64\n  |                                              \
    \                       |\n  |                                               \
    \                      &&f64\n\nerror[E0277]: the trait bound `f64: Ord` is not\
    \ satisfied\n    --> /tmp/tmpfvs2hz7w.rs:6:56\n     |\n6    |         let mut\
    \ min_number = numbers.iter().min_by_key(|n| f64::abs(n - n)).unwrap();\n    \
    \ |                                             ---------- ^^^^^^^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |                       \
    \                      |\n     |                                             required\
    \ by a bound introduced by this call\n     |\n     = help: the following other\
    \ types implement trait `Ord`:\n               i128\n               i16\n    \
    \           i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `std::iter::Iterator::min_by_key`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfvs2hz7w.rs:11:30\n   |\n6  |         let mut min_number\
    \ = numbers.iter().min_by_key(|n| f64::abs(n - n)).unwrap();\n   |           \
    \                   ------------------------------------------------------- expected\
    \ due to this value\n...\n11 |                 min_number = n;\n   |         \
    \                     ^\n   |                              |\n   |           \
    \                   expected `&f64`, found `f64`\n   |                       \
    \       help: consider borrowing here: `&n`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0369.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        let mut min_dist = threshold;\n\
    \        let mut min_idx = -1;\n        for (i, &x) in numbers.iter().enumerate()\
    \ {\n            if *x - x < min_dist {\n                min_dist = *x - x;\n\
    \                min_idx = i;\n            }\n        }\n        min_idx != -1\n\
    \    })\n}\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmpgbiy8oa1.rs:8:16\n\
    \  |\n8 |             if *x - x < min_dist {\n  |                ^^\n\nerror[E0614]:\
    \ type `f64` cannot be dereferenced\n --> /tmp/tmpgbiy8oa1.rs:9:28\n  |\n9 | \
    \                min_dist = *x - x;\n  |                            ^^\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpgbiy8oa1.rs:6:27\n\
    \  |\n6 |         let mut min_idx = -1;\n  |                           ^^ the\
    \ trait `Neg` is not implemented for `usize`\n  |\n  = help: the following other\
    \ types implement trait `Neg`:\n            &f32\n            &f64\n         \
    \   &i128\n            &i16\n            &i32\n            &i64\n            &i8\n\
    \            &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmpgbiy8oa1.rs:13:20\n   |\n13 |  \
    \       min_idx != -1\n   |                    ^^\n   |                    |\n\
    \   |                    cannot apply unary operator `-`\n   |               \
    \     help: you may have meant the maximum value of `usize`: `usize::MAX`\n  \
    \ |\n   = note: unsigned values cannot be negated\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0600, E0614.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        }\n   \
    \     if n < min_number + min_distance {\n            min_number = n;\n      \
    \      min_distance = threshold - min_number;\n        }\n    }\n    min_number\
    \ != 0.0\n}\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgol0db2f.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_element\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_element.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_element = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp22thldz4.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = std::f64::MAX;\n    for &n in numbers {\n        let distance = std::f64::MAX;\n\
    \        for &m in numbers {\n            if m == n {\n                continue;\n\
    \            }\n            let distance = n.abs() - m.abs();\n            if\
    \ distance < distance {\n                distance = n.abs() - m.abs();\n     \
    \       }\n            if distance < min_distance {\n                min_distance\
    \ = distance;\n                min_number = n;\n            }\n        }\n   \
    \ }\n    min_distance < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxwudli93.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpxwudli93.rs:8:13\n  |\n8 |         for &m in\
    \ numbers {\n  |             ^^    ------- this expression has type `Option<f64>`\n\
    \  |             |\n  |             expected `f64`, found reference\n  |     \
    \        help: you can probably remove the explicit borrow: `m`\n  |\n  = note:\
    \   expected type `f64`\n          found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if n < threshold {\n            close = true;\n            break;\n       \
    \ }\n    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdwyihrr8.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - threshold) < f64::abs(x\
    \ - numbers.last()))\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `Option<&f64>` from `&f64`\n --> /tmp/tmp75mwltqq.rs:4:65\n\
    \  |\n4 |     numbers.iter().any(|x| f64::abs(x - threshold) < f64::abs(x - numbers.last()))\n\
    \  |                                                                 ^ no implementation\
    \ for `&f64 - Option<&f64>`\n  |\n  = help: the trait `Sub<Option<&f64>>` is not\
    \ implemented for `&f64`\n  = help: the following other types implement trait\
    \ `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n\
    \            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n    \
    \        <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n          \
    \  <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48\
    \ others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for idx in 0..numbers.len() {\n        let dist = numbers[idx] - threshold;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_idx\
    \ = idx;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpagjpd9fu.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpagjpd9fu.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while !close && i < numbers.len() && j < numbers.len() {\n     \
    \   if numbers[i] - numbers[j] > threshold {\n            close = true;\n    \
    \    }\n        i += 1;\n        j += 1;\n    }\n    close\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp21phwsp_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = std::f64::MAX;\n\
    \        for &m in numbers {\n            if m == n {\n                continue;\n\
    \            }\n            let distance = n.abs() - m.abs();\n            if\
    \ distance < distance {\n                distance = n.abs() - m.abs();\n     \
    \       }\n        }\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_number = n;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps_r8dbei.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmps_r8dbei.rs:8:13\n  |\n8 |         for &m in\
    \ numbers {\n  |             ^^    ------- this expression has type `Option<f64>`\n\
    \  |             |\n  |             expected `f64`, found reference\n  |     \
    \        help: you can probably remove the explicit borrow: `m`\n  |\n  = note:\
    \   expected type `f64`\n          found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = std::f64::MAX;\n\
    \        for &m in numbers {\n            if m == n {\n                continue;\n\
    \            }\n            let distance = std::f64::MAX;\n            if m >\
    \ n {\n                distance = std::f64::MAX;\n            } else {\n     \
    \           distance = std::f64::MAX;\n            }\n            if distance\
    \ < min_distance {\n                min_distance = distance;\n               \
    \ min_number = m;\n            }\n        }\n    }\n    if min_distance < threshold\
    \ {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2rujclsz.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp2rujclsz.rs:8:13\n  |\n8 |         for &m in\
    \ numbers {\n  |             ^^    ------- this expression has type `Option<f64>`\n\
    \  |             |\n  |             expected `f64`, found reference\n  |     \
    \        help: you can probably remove the explicit borrow: `m`\n  |\n  = note:\
    \   expected type `f64`\n          found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    for &n in numbers {\n\
    \        let dist = n.abs() - min_dist;\n        if dist < threshold {\n     \
    \       return true;\n        }\n        min_dist = dist;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpisnh5uya.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut i = 0;\n    let mut j = 1;\n    while i < numbers_copy.len() && j\
    \ < numbers_copy.len() {\n        if numbers_copy[i] < numbers_copy[j] {\n   \
    \         i += 1;\n        } else {\n            j += 1;\n        }\n        if\
    \ i == numbers_copy.len() || j == numbers_copy.len() {\n            return false;\n\
    \        }\n    }\n    numbers_copy[i] < threshold\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp_pl90g5s.rs:5:18\n\
    \    |\n5   |     numbers_copy.sort();\n    |                  ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - numbers.iter().next().unwrap())\
    \ < threshold)\n}\n\nfn main() {\n    let candidate = has_close_elements;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpypmxg15b.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for n in numbers {\n       \
    \ if n == threshold {\n            close = true;\n        } else {\n         \
    \   close = false;\n            break;\n        }\n    }\n    close\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7ed_pf3e.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        }\n   \
    \     if n < min_number + min_distance {\n            min_number = n;\n      \
    \      min_distance = threshold - min_number;\n        }\n    }\n    min_number\
    \ == numbers[0]\n}\n\nfn main() {\n    let candidate = has_close_elements;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpefzpefwg.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if n == threshold {\n            close = true;\n            break;\n      \
    \  }\n        if close {\n            if n == (n - threshold).abs() {\n      \
    \          close = false;\n                break;\n            }\n        }\n\
    \    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw3kius4n.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    for &n in numbers {\n\
    \        if min_dist > n {\n            min_dist = n;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3q2iohxx.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut min_distance = threshold;\n    let mut min_element = numbers_copy[0];\n\
    \    for &n in numbers_copy {\n        let distance = n.abs() - min_element.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_element = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpisrjquwv.rs:5:18\n\
    \    |\n5   |     numbers_copy.sort();\n    |                  ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpisrjquwv.rs:8:9\n\
    \  |\n8 |     for &n in numbers_copy {\n  |         ^^    ------------ this expression\
    \ has type `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n    let mut i = 0;\n    let mut j = 1;\n\
    \    while i < numbers_sorted.len() && j < numbers_sorted.len() {\n        if\
    \ numbers_sorted[i] < numbers_sorted[j] {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n        if i == numbers_sorted.len() || j\
    \ == numbers_sorted.len() {\n            return false;\n        }\n    }\n   \
    \ numbers_sorted[i] == numbers_sorted[j]\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpqezjrotu.rs:5:20\n\
    \     |\n5    |     numbers_sorted.sort_unstable();\n     |                  \
    \  ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n     |\n     =\
    \ help: the following other types implement trait `Ord`:\n               i128\n\
    \               i16\n               i32\n               i64\n               i8\n\
    \               isize\n               u128\n               u16\n             and\
    \ 4 others\nnote: required by a bound in `core::slice::<impl [T]>::sort_unstable`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - numbers.iter().next().unwrap())\
    \ < threshold)\n}\n\nfn main() {\n    let candidate = has_close_elements;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpypmxg15b.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| x < threshold)\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp09cos98_.rs:4:32\n  |\n4 |\
    \     numbers.iter().any(|x| x < threshold)\n  |                             \
    \   ^^^^^^^^^\n  |                                |\n  |                     \
    \           expected `&f64`, found `f64`\n  |                                help:\
    \ consider borrowing here: `&threshold`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n    let mut last_element = numbers_sorted.last().unwrap();\n\
    \    for number in numbers_sorted {\n        if number - last_element > threshold\
    \ {\n            return true;\n        }\n        last_element = number;\n   \
    \ }\n    false\n}\n\nfn main() {\n    let candidate = has_close_elements;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpadnun4ep.rs:5:20\n\
    \     |\n5    |     numbers_sorted.sort_unstable();\n     |                  \
    \  ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n     |\n     =\
    \ help: the following other types implement trait `Ord`:\n               i128\n\
    \               i16\n               i32\n               i64\n               i8\n\
    \               isize\n               u128\n               u16\n             and\
    \ 4 others\nnote: required by a bound in `core::slice::<impl [T]>::sort_unstable`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpadnun4ep.rs:11:24\n   |\n6  |\
    \     let mut last_element = numbers_sorted.last().unwrap();\n   |           \
    \                 ------------------------------ expected due to this value\n\
    ...\n11 |         last_element = number;\n   |                        ^^^^^^\n\
    \   |                        |\n   |                        expected `&f64`, found\
    \ `f64`\n   |                        help: consider borrowing here: `&number`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|n| {\n        let mut diff = f64::MAX;\n\
    \        for n in numbers.iter() {\n            diff += n - n;\n        }\n  \
    \      diff < threshold\n    })\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwfnlnnp2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    for &n in numbers_copy {\n        if n == 0.0 {\n            continue;\n\
    \        }\n        for &m in numbers_copy {\n            if m == 0.0 {\n    \
    \            continue;\n            }\n            if abs(n - m) < threshold {\n\
    \                return true;\n            }\n        }\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpjmrb_2j7.rs:14:16\n\
    \   |\n14 |             if abs(n - m) < threshold {\n   |                ^^^ not\
    \ found in this scope\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \   --> /tmp/tmpjmrb_2j7.rs:5:18\n    |\n5   |     numbers_copy.sort();\n    |\
    \                  ^^^^ the trait `Ord` is not implemented for `f64`\n    |\n\
    \    = help: the following other types implement trait `Ord`:\n              i128\n\
    \              i16\n              i32\n              i64\n              i8\n \
    \             isize\n              u128\n              u16\n            and 4\
    \ others\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpjmrb_2j7.rs:6:9\n  |\n6 |     for &n in numbers_copy\
    \ {\n  |         ^^    ------------ this expression has type `Option<f64>`\n \
    \ |         |\n  |         expected `f64`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `f64`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjmrb_2j7.rs:10:13\n   |\n10 |         for &m in numbers_copy {\n\
    \   |             ^^    ------------ this expression has type `Option<f64>`\n\
    \   |             |\n   |             expected `f64`, found reference\n   |  \
    \           help: you can probably remove the explicit borrow: `m`\n   |\n   =\
    \ note:   expected type `f64`\n           found reference `&_`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        let mut min_dist = threshold;\n\
    \        let mut min_idx = -1;\n        for (i, &x) in numbers.iter().enumerate()\
    \ {\n            let dist = x - i;\n            if dist < min_dist {\n       \
    \         min_dist = dist;\n                min_idx = i;\n            }\n    \
    \    }\n        min_idx != -1\n    })\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `usize` from `f64`\n --> /tmp/tmppqvebdsf.rs:8:26\n\
    \  |\n8 |             let dist = x - i;\n  |                          ^ no implementation\
    \ for `f64 - usize`\n  |\n  = help: the trait `Sub<usize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Sub<Rhs>`:\n\
    \            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n      \
    \      <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n          \
    \  <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a\
    \ i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmppqvebdsf.rs:6:27\n\
    \  |\n6 |         let mut min_idx = -1;\n  |                           ^^ the\
    \ trait `Neg` is not implemented for `usize`\n  |\n  = help: the following other\
    \ types implement trait `Neg`:\n            &f32\n            &f64\n         \
    \   &i128\n            &i16\n            &i32\n            &i64\n            &i8\n\
    \            &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmppqvebdsf.rs:14:20\n   |\n14 |  \
    \       min_idx != -1\n   |                    ^^\n   |                    |\n\
    \   |                    cannot apply unary operator `-`\n   |               \
    \     help: you may have meant the maximum value of `usize`: `usize::MAX`\n  \
    \ |\n   = note: unsigned values cannot be negated\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0600.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while i < numbers.len()\
    \ && j < numbers.len() {\n        if numbers[i] > numbers[j] {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n    }\n    i != numbers.len()\
    \ || j != numbers.len()\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmkg3viqy.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if n < threshold {\n            close = true;\n            break;\n       \
    \ }\n    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdwyihrr8.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - threshold) < threshold)\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0079dxse.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - threshold) < f64::abs(x\
    \ - numbers.last()))\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `Option<&f64>` from `&f64`\n --> /tmp/tmp75mwltqq.rs:4:65\n\
    \  |\n4 |     numbers.iter().any(|x| f64::abs(x - threshold) < f64::abs(x - numbers.last()))\n\
    \  |                                                                 ^ no implementation\
    \ for `&f64 - Option<&f64>`\n  |\n  = help: the trait `Sub<Option<&f64>>` is not\
    \ implemented for `&f64`\n  = help: the following other types implement trait\
    \ `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n\
    \            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n    \
    \        <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n          \
    \  <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48\
    \ others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if *n >= *min_number {\n   \
    \         continue;\n        }\n        let distance = *n - min_number;\n    \
    \    if distance < min_distance {\n            min_distance = distance;\n    \
    \        min_number = n;\n        }\n    }\n    min_number != numbers[0]\n}\n\n\
    fn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyhzv6py3.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0614]:\
    \ type `f64` cannot be dereferenced\n --> /tmp/tmpyhzv6py3.rs:7:18\n  |\n7 | \
    \        if *n >= *min_number {\n  |                  ^^^^^^^^^^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < numbers.len() && j < numbers.len() {\n        if numbers[i]\
    \ > numbers[j] {\n            close = true;\n            break;\n        }\n \
    \       if numbers[i] < numbers[j] {\n            close = false;\n           \
    \ break;\n        }\n        i += 1;\n        j += 1;\n    }\n    close\n}\n\n\
    fn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps_zh40fx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for idx in 0..numbers.len() {\n        let dist = numbers[idx] - threshold;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_idx\
    \ = idx;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpagjpd9fu.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpagjpd9fu.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = std::f64::MAX;\n    for &n in numbers {\n        let distance = n.abs() -\
    \ threshold;\n        if distance < min_distance {\n            min_distance =\
    \ distance;\n            min_number = n;\n        }\n    }\n    min_number !=\
    \ std::f64::MAX\n}\n\nfn main() {\n    let candidate = has_close_elements;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx4nev743.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - numbers[0]) < threshold)\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg_n3l4k7.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - numbers[0]) < threshold)\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg_n3l4k7.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = std::f64::abs(n\
    \ - min_number);\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_number = n;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmp8828mnt8.rs:7:34\n\
    \  |\n7 |         let distance = std::f64::abs(n - min_number);\n  |         \
    \                         ^^^ not found in `std::f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp8828mnt8.rs:6:9\n  |\n6 |     for &n in numbers {\n  | \
    \        ^^    ------- this expression has type `Option<f64>`\n  |         |\n\
    \  |         expected `f64`, found reference\n  |         help: you can probably\
    \ remove the explicit borrow: `n`\n  |\n  = note:   expected type `f64`\n    \
    \      found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_number =\
    \ numbers[0];\n    for &n in numbers {\n        if n < min_number {\n        \
    \    min_number = n;\n            min_dist = threshold;\n        } else if n -\
    \ min_number < min_dist {\n            min_number = n;\n            min_dist =\
    \ n - min_number;\n        }\n    }\n    min_dist < threshold\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp5eo7ikh.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut min_distance = std::f64::MAX;\n\
    \    for &n in numbers {\n        let distance = n.abs() - threshold;\n      \
    \  if distance < min_distance {\n            min_distance = distance;\n      \
    \      close = true;\n        }\n    }\n    close\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp51_tmhe.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if close {\n            break;\n        }\n        if n < threshold {\n   \
    \         close = true;\n        } else {\n            close = false;\n      \
    \  }\n    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvf0_28a5.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < numbers.len() && j < numbers.len() {\n        if numbers[i]\
    \ - numbers[j] > threshold {\n            close = true;\n            break;\n\
    \        }\n        i += 1;\n        j += 1;\n    }\n    close\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdaqwk1xu.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut min_value = numbers[0];\n\
    \    let mut max_value = numbers[0];\n    for &n in numbers {\n        if n <\
    \ min_value {\n            min_value = n;\n        }\n        if n > max_value\
    \ {\n            max_value = n;\n        }\n    }\n    for &n in numbers {\n \
    \       if n < min_value + threshold || n > max_value - threshold {\n        \
    \    close = true;\n            break;\n        }\n    }\n    close\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu5ckaj_u.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu5ckaj_u.rs:15:9\n   |\n15 |     for &n in numbers\
    \ {\n   |         ^^    ------- this expression has type `Option<f64>`\n   | \
    \        |\n   |         expected `f64`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `n`\n   |\n   = note:   expected type\
    \ `f64`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < numbers.len() && j < numbers.len() {\n        if numbers[i]\
    \ > numbers[j] {\n            close = true;\n            break;\n        }\n \
    \       i += 1;\n        j += 1;\n    }\n    close\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpagrp65ql.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = std::f64::abs(n\
    \ - min_number);\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_number = n;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmp8828mnt8.rs:7:34\n\
    \  |\n7 |         let distance = std::f64::abs(n - min_number);\n  |         \
    \                         ^^^ not found in `std::f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp8828mnt8.rs:6:9\n  |\n6 |     for &n in numbers {\n  | \
    \        ^^    ------- this expression has type `Option<f64>`\n  |         |\n\
    \  |         expected `f64`, found reference\n  |         help: you can probably\
    \ remove the explicit borrow: `n`\n  |\n  = note:   expected type `f64`\n    \
    \      found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - numbers.iter().next().unwrap())\
    \ < threshold)\n}\n\nfn main() {\n    let candidate = has_close_elements;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpypmxg15b.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|n| {\n        let mut min_dist = threshold;\n\
    \        let mut min_idx = -1;\n        for (i, n) in numbers.iter().enumerate()\
    \ {\n            if *n < n {\n                continue;\n            }\n     \
    \       let dist = *n - n;\n            if dist < min_dist {\n               \
    \ min_dist = dist;\n                min_idx = i;\n            }\n        }\n \
    \       min_idx != -1\n    })\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkeme8rpa.rs:8:21\n  |\n8 |\
    \             if *n < n {\n  |                     ^ expected `f64`, found `&f64`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n8 |             if *n < *n\
    \ {\n  |                     +\n\nerror[E0277]: the trait bound `usize: Neg` is\
    \ not satisfied\n --> /tmp/tmpkeme8rpa.rs:6:27\n  |\n6 |         let mut min_idx\
    \ = -1;\n  |                           ^^ the trait `Neg` is not implemented for\
    \ `usize`\n  |\n  = help: the following other types implement trait `Neg`:\n \
    \           &f32\n            &f64\n            &i128\n            &i16\n    \
    \        &i32\n            &i64\n            &i8\n            &isize\n       \
    \   and 8 others\n\nerror[E0600]: cannot apply unary operator `-` to type `usize`\n\
    \  --> /tmp/tmpkeme8rpa.rs:17:20\n   |\n17 |         min_idx != -1\n   |     \
    \               ^^\n   |                    |\n   |                    cannot\
    \ apply unary operator `-`\n   |                    help: you may have meant the\
    \ maximum value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot\
    \ be negated\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0600.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_element\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_element;\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_element = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp58soxol0.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut min_distance = threshold;\n    let mut min_element = numbers_copy[0];\n\
    \    let mut min_element_index = numbers_copy.iter().position(|x| *x == min_element);\n\
    \    for i in 1..numbers_copy.len() {\n        let distance = numbers_copy[i]\
    \ - min_element;\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_element = numbers_copy[i];\n            min_element_index\
    \ = i;\n        }\n    }\n    min_element_index != numbers_copy.len() - 1\n}\n\
    \nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpc4t48n_r.rs:5:18\n\
    \    |\n5   |     numbers_copy.sort();\n    |                  ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc4t48n_r.rs:14:33\n\
    \   |\n8  |     let mut min_element_index = numbers_copy.iter().position(|x| *x\
    \ == min_element);\n   |                                 ---------------------------------------------------\
    \ expected due to this value\n...\n14 |             min_element_index = i;\n \
    \  |                                 ^ expected enum `Option`, found `usize`\n\
    \   |\n   = note: expected enum `Option<usize>`\n              found type `usize`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |             min_element_index\
    \ = Some(i);\n   |                                 +++++ +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc4t48n_r.rs:17:26\n   |\n17 |     min_element_index !=\
    \ numbers_copy.len() - 1\n   |                          ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<usize>`\n\
    \              found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n17 |     min_element_index != Some(numbers_copy.len() - 1)\n   |      \
    \                    +++++                      +\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if n < threshold {\n            close = true;\n            break;\n       \
    \ }\n    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdwyihrr8.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_element\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = std::f64::MAX;\n\
    \        for &m in numbers {\n            if m == n {\n                continue;\n\
    \            }\n            let distance = std::f64::MAX;\n            if m <\
    \ n {\n                distance = std::f64::MAX;\n            } else {\n     \
    \           distance = std::f64::MAX;\n            }\n            if distance\
    \ < distance {\n                distance = std::f64::MAX;\n            }\n   \
    \     }\n        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_element = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplebdsikq.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmplebdsikq.rs:8:13\n  |\n8 |         for &m in\
    \ numbers {\n  |             ^^    ------- this expression has type `Option<f64>`\n\
    \  |             |\n  |             expected `f64`, found reference\n  |     \
    \        help: you can probably remove the explicit borrow: `m`\n  |\n  = note:\
    \   expected type `f64`\n          found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < numbers.len() && j < numbers.len() {\n        if numbers[i]\
    \ < numbers[j] {\n            close = true;\n        } else {\n            close\
    \ = false;\n        }\n        if close {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n    }\n    close\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpblb18hsx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - threshold) < f64::abs(x\
    \ - numbers.last()))\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `Option<&f64>` from `&f64`\n --> /tmp/tmp75mwltqq.rs:4:65\n\
    \  |\n4 |     numbers.iter().any(|x| f64::abs(x - threshold) < f64::abs(x - numbers.last()))\n\
    \  |                                                                 ^ no implementation\
    \ for `&f64 - Option<&f64>`\n  |\n  = help: the trait `Sub<Option<&f64>>` is not\
    \ implemented for `&f64`\n  = help: the following other types implement trait\
    \ `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n\
    \            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n    \
    \        <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n          \
    \  <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48\
    \ others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut min_dist = threshold;\n\
    \    for n in numbers {\n        let dist = std::f64::abs(n - min_dist);\n   \
    \     if dist < threshold {\n            close = true;\n            break;\n \
    \       }\n        min_dist = n;\n    }\n    close\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmpfx_tsdvh.rs:7:30\n\
    \  |\n7 |         let dist = std::f64::abs(n - min_dist);\n  |               \
    \               ^^^ not found in `std::f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n    for &n in numbers_sorted {\n       \
    \ if n == threshold {\n            return true;\n        }\n        if n == numbers[numbers_sorted.len()\
    \ - 1] {\n            return false;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpamm0xe5w.rs:5:20\n\
    \     |\n5    |     numbers_sorted.sort_unstable();\n     |                  \
    \  ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n     |\n     =\
    \ help: the following other types implement trait `Ord`:\n               i128\n\
    \               i16\n               i32\n               i64\n               i8\n\
    \               isize\n               u128\n               u16\n             and\
    \ 4 others\nnote: required by a bound in `core::slice::<impl [T]>::sort_unstable`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpamm0xe5w.rs:6:9\n  |\n6 |     for\
    \ &n in numbers_sorted {\n  |         ^^    -------------- this expression has\
    \ type `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    while i < numbers.len()\
    \ && j < numbers.len() {\n        if numbers[i] - numbers[j] < threshold {\n \
    \           i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    i != numbers.len()\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpt466c6pn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for idx in 0..numbers.len() {\n        let dist = numbers[idx] - threshold;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_idx\
    \ = idx;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpagjpd9fu.rs:5:23\n\
    \  |\n5 |     let mut min_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpagjpd9fu.rs:13:16\n   |\n13 |     min_idx\
    \ != -1\n   |                ^^\n   |                |\n   |                cannot\
    \ apply unary operator `-`\n   |                help: you may have meant the maximum\
    \ value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976081
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| f64::abs(x - numbers.iter().next().unwrap())\
    \ < threshold)\n}\n\nfn main() {\n    let candidate = has_close_elements;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpypmxg15b.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.clone();\n    numbers_sorted.sort();\n\
    \    for &n in numbers_sorted {\n        if n == threshold {\n            return\
    \ true;\n        }\n        if n == numbers_sorted[numbers_sorted.len() - 1] {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpsirib1gb.rs:5:20\n\
    \    |\n5   |     numbers_sorted.sort();\n    |                    ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsirib1gb.rs:6:9\n\
    \  |\n6 |     for &n in numbers_sorted {\n  |         ^^    -------------- this\
    \ expression has type `Option<f64>`\n  |         |\n  |         expected `f64`,\
    \ found reference\n  |         help: you can probably remove the explicit borrow:\
    \ `n`\n  |\n  = note:   expected type `f64`\n          found reference `&_`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_element\
    \ = numbers[0];\n    for &n in numbers {\n        if *n - *min_element < min_distance\
    \ {\n            min_distance = *n - *min_element;\n            min_element =\
    \ n;\n        }\n    }\n    min_distance < threshold\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1dt475jn.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0614]:\
    \ type `f64` cannot be dereferenced\n --> /tmp/tmp1dt475jn.rs:7:17\n  |\n7 | \
    \        if *n - *min_element < min_distance {\n  |                 ^^^^^^^^^^^^\n\
    \nerror[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmp1dt475jn.rs:8:33\n\
    \  |\n8 |             min_distance = *n - *min_element;\n  |                 \
    \                ^^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if n < threshold {\n            close = true;\n            break;\n       \
    \ }\n    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdwyihrr8.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut i = 0;\n    while i\
    \ < numbers.len() {\n        if numbers[i] - numbers[i - 1] < threshold {\n  \
    \          close = true;\n            break;\n        }\n        i += 1;\n   \
    \ }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpt4f990ua.rs:7:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = std::f64::MAX;\n    for &n in numbers {\n        let distance = n.abs() -\
    \ threshold;\n        if distance < min_distance {\n            min_distance =\
    \ distance;\n            min_number = n;\n        }\n    }\n    min_number !=\
    \ std::f64::MAX\n}\n\nfn main() {\n    let candidate = has_close_elements;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx4nev743.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for &n in numbers {\n        if min_dist > n {\n            min_dist = n;\n\
    \            min_idx = -1;\n        }\n        if min_dist == n {\n          \
    \  min_idx++;\n        }\n    }\n    min_idx != -1\n}\n\nfn main() {\n    let\
    \ candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0),\
    \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp5_uon64i.rs:12:20\n\
    \   |\n12 |             min_idx++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n12 |             { let tmp =\
    \ min_idx; min_idx += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    12 -             min_idx++;\n12 +             min_idx += 1;\n   | \n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp5_uon64i.rs:6:9\n  |\n6 |     for &n in numbers\
    \ {\n  |         ^^    ------- this expression has type `Option<f64>`\n  |   \
    \      |\n  |         expected `f64`, found reference\n  |         help: you can\
    \ probably remove the explicit borrow: `n`\n  |\n  = note:   expected type `f64`\n\
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = std::f64::MAX;\n    for &n in numbers {\n        let distance = n.abs() -\
    \ threshold;\n        if distance < min_distance {\n            min_distance =\
    \ distance;\n            min_number = n;\n        }\n    }\n    min_number !=\
    \ std::f64::MAX\n}\n\nfn main() {\n    let candidate = has_close_elements;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx4nev743.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_iter = numbers.iter();\n    let mut min_distance\
    \ = threshold;\n    let mut min_element = numbers_iter.next();\n    while let\
    \ Some(element) = min_element {\n        let distance = numbers_iter.next().unwrap().distance(element);\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_element = element;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distance` found for reference `&f64` in\
    \ the current scope\n --> /tmp/tmpmdzho77t.rs:8:53\n  |\n8 |         let distance\
    \ = numbers_iter.next().unwrap().distance(element);\n  |                     \
    \                                ^^^^^^^^ method not found in `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmdzho77t.rs:11:27\n   |\n6  |     let mut min_element\
    \ = numbers_iter.next();\n   |                           ------------------- expected\
    \ due to this value\n...\n11 |             min_element = element;\n   |      \
    \                     ^^^^^^^ expected enum `Option`, found `&f64`\n   |\n   =\
    \ note:   expected enum `Option<&f64>`\n           found reference `&f64`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |             min_element =\
    \ Some(element);\n   |                           +++++       +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    for &n in numbers {\n\
    \        if min_dist > n {\n            min_dist = n;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3q2iohxx.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    let mut min_idx = -1;\n\
    \    for &n in numbers {\n        let dist = std::f64::abs(n - min_dist);\n  \
    \      if dist < min_dist {\n            min_dist = dist;\n            min_idx\
    \ = Some(numbers.iter().position(|&n| n == n).unwrap());\n        }\n    }\n \
    \   min_idx != None\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmp6b7_dkqj.rs:7:30\n\
    \  |\n7 |         let dist = std::f64::abs(n - min_dist);\n  |               \
    \               ^^^ not found in `std::f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp6b7_dkqj.rs:6:9\n  |\n6 |     for &n in numbers {\n  |         ^^\
    \    ------- this expression has type `Option<f64>`\n  |         |\n  |      \
    \   expected `f64`, found reference\n  |         help: you can probably remove\
    \ the explicit borrow: `n`\n  |\n  = note:   expected type `f64`\n          found\
    \ reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6b7_dkqj.rs:10:23\n\
    \   |\n5  |     let mut min_idx = -1;\n   |                       -- expected\
    \ due to this value\n...\n10 |             min_idx = Some(numbers.iter().position(|&n|\
    \ n == n).unwrap());\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found enum `Option`\n   |\n   = note: expected type `{integer}`\n\
    \              found enum `Option<usize>`\n\nerror[E0277]: can't compare `{integer}`\
    \ with `Option<_>`\n  --> /tmp/tmp6b7_dkqj.rs:13:13\n   |\n13 |     min_idx !=\
    \ None\n   |             ^^ no implementation for `{integer} == Option<_>`\n \
    \  |\n   = help: the trait `PartialEq<Option<_>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        numbers.iter().any(|y|\
    \ {\n            abs(x - y) < threshold\n        })\n    })\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n --> /tmp/tmpjsyn487e.rs:6:13\n\
    \  |\n6 |             abs(x - y) < threshold\n  |             ^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n        }\n    }\n    for &n in numbers {\n        let\
    \ distance = n - min_number;\n        if distance < min_distance {\n         \
    \   min_distance = distance;\n            min_number = n;\n        }\n    }\n\
    \    min_number != 0.0\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd0534i_l.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<f64>`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd0534i_l.rs:11:9\n   |\n11 |     for &n in numbers\
    \ {\n   |         ^^    ------- this expression has type `Option<f64>`\n   | \
    \        |\n   |         expected `f64`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `n`\n   |\n   = note:   expected type\
    \ `f64`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort();\n    for &n in numbers_sorted {\n        if n == threshold\
    \ {\n            return true;\n        }\n        if n == numbers_sorted[numbers_sorted.len()\
    \ - 1] {\n            return false;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp4hxwsykx.rs:5:20\n\
    \    |\n5   |     numbers_sorted.sort();\n    |                    ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4hxwsykx.rs:6:9\n\
    \  |\n6 |     for &n in numbers_sorted {\n  |         ^^    -------------- this\
    \ expression has type `Option<f64>`\n  |         |\n  |         expected `f64`,\
    \ found reference\n  |         help: you can probably remove the explicit borrow:\
    \ `n`\n  |\n  = note:   expected type `f64`\n          found reference `&_`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < numbers.len() && j < numbers.len() {\n        if numbers[i]\
    \ > numbers[j] {\n            close = true;\n            break;\n        }\n \
    \       if numbers[i] < numbers[j] {\n            close = false;\n           \
    \ break;\n        }\n        i += 1;\n        j += 1;\n    }\n    close\n}\n\n\
    fn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps_zh40fx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
