language: rs
name: HumanEval_0_has_close_elements
results:
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        } else\
    \ if n - min_number < min_distance {\n            min_number = n;\n          \
    \  min_distance = n - min_number;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzzbrv56y.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        let mut min_dist = threshold;\n\
    \        let mut min_idx = -1;\n        for (i, &x) in numbers.iter().enumerate()\
    \ {\n            let dist = x - i;\n            if dist < min_dist {\n       \
    \         min_dist = dist;\n                min_idx = i;\n            }\n    \
    \    }\n        min_dist < threshold\n    })\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `usize` from `f64`\n --> /tmp/tmpwxkqpk72.rs:8:26\n\
    \  |\n8 |             let dist = x - i;\n  |                          ^ no implementation\
    \ for `f64 - usize`\n  |\n  = help: the trait `Sub<usize>` is not implemented\
    \ for `f64`\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n -->\
    \ /tmp/tmpwxkqpk72.rs:6:27\n  |\n6 |         let mut min_idx = -1;\n  |      \
    \                     ^^ the trait `Neg` is not implemented for `usize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n    let mut min_distance = threshold;\n\
    \    let mut min_number = numbers_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    loop {\n        let mut min_number_iter = min_number.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_number_iter = min_number_iter.into_iter().cloned().collect::\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmphuho1ent.rs:39:3\n\
    \   |\n3  | fn has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool {\n\
    \   |                                                                  - unclosed\
    \ delimiter\n...\n8  |     loop {\n   |          - this delimiter might not be\
    \ properly closed...\n...\n28 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n39 | }\n   |   ^\n\nerror: expected one of `(`, `.`, `;`,\
    \ `?`, `else`, or an operator, found `::`\n  --> /tmp/tmphuho1ent.rs:27:79\n \
    \  |\n27 |         let mut min_number_iter = min_number_iter.into_iter().cloned().collect::\n\
    \   |                                                                        \
    \       ^^ expected one of `(`, `.`, `;`, `?`, `else`, or an operator\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmphuho1ent.rs:5:20\n\
    \  |\n5 |     numbers_sorted.sort_unstable();\n  |                    ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n\nerror[E0271]: type mismatch\
    \ resolving `<std::vec::IntoIter<f64> as Iterator>::Item == &_`\n  --> /tmp/tmphuho1ent.rs:10:63\n\
    \   |\n10 |         let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \   |                                                               ^^^^^^ expected\
    \ `f64`, found reference\n   |\n   = note:   expected type `f64`\n           found\
    \ reference `&_`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<std::vec::IntoIter<f64>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmphuho1ent.rs:10:72\n \
    \  |\n10 |           let mut min_number_iter = min_number_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \   |                                                                        \
    \  ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<f64>>` due to\
    \ unsatisfied trait bounds\n   |\n   = note: the following trait bounds were not\
    \ satisfied:\n           `<std::vec::IntoIter<f64> as Iterator>::Item = &_`\n\
    \           which is required by `Cloned<std::vec::IntoIter<f64>>: Iterator`\n\
    \           `Clone"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut i = 0;\n    let mut j = 1;\n    while i < numbers_copy.len() - 1\
    \ && j < numbers_copy.len() {\n        if numbers_copy[i] - numbers_copy[j] >\
    \ threshold {\n            return true;\n        }\n        if numbers_copy[i]\
    \ - numbers_copy[j] < -threshold {\n            return false;\n        }\n   \
    \     i += 1;\n        j += 1\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpceh3iu6f.rs:5:18\n\
    \  |\n5 |     numbers_copy.sort();\n  |                  ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut i = 0;\n    let mut j = 1;\n    while i < numbers_copy.len() && j\
    \ < numbers_copy.len() {\n        if numbers_copy[i] < numbers_copy[j] {\n   \
    \         i += 1;\n        } else {\n            j += 1;\n        }\n        if\
    \ j == numbers_copy.len() {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmph_lxjzui.rs:5:18\n\
    \  |\n5 |     numbers_copy.sort();\n  |                  ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut min_distance = threshold;\n    let mut min_element = numbers_copy[0];\n\
    \    for &n in numbers_copy {\n        let distance = n - min_element;\n     \
    \   if distance < min_distance {\n            min_distance = distance;\n     \
    \       min_element = n;\n        }\n    }\n    min_distance < threshold\n}\n\n\
    fn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpx0jtt3_e.rs:5:18\n\
    \  |\n5 |     numbers_copy.sort();\n  |                  ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpx0jtt3_e.rs:8:9\n\
    \  |\n8 |     for &n in numbers_copy {\n  |         ^^    ------------ this expression\
    \ has type `f64`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |\n  = note:   expected type `f64`\n          found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if n < threshold {\n            close = true;\n            break;\n       \
    \ }\n    }\n    close\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdwyihrr8.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    let mut min_distance = threshold;\n    let mut min_number = numbers_copy[0];\n\
    \    let mut min_number_index = numbers_copy.len() - 1;\n    let mut max_number\
    \ = numbers_copy[0];\n    let mut max_number_index = numbers_copy.len() - 1;\n\
    \    for i in 1..numbers_copy.len() {\n        let distance = numbers_copy[i]\
    \ - numbers_copy[i - 1];\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_number = numbers_copy[i];\n            min_number_index\
    \ = i;\n        }\n        if distance > max_distance {\n            max_distance\
    \ = distance;\n            max_number = numbers_copy[i];\n            max_number_index\
    \ = i;\n        }\n    }\n    min_number_index != max_number_index\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `max_distance` in this scope\n  --> /tmp/tmp6imbvy6c.rs:18:23\n\
    \   |\n18 |         if distance > max_distance {\n   |                       ^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `min_distance`\n\nerror[E0425]:\
    \ cannot find value `max_distance` in this scope\n  --> /tmp/tmp6imbvy6c.rs:19:13\n\
    \   |\n19 |             max_distance = distance;\n   |             ^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `min_distance`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp6imbvy6c.rs:5:18\n\
    \  |\n5 |     numbers_copy.sort();\n  |                  ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold\n\
    }\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7_c6yh8.rs:6:9\n  |\n6 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        let mut min_dist = threshold;\n\
    \        let mut min_idx = -1;\n        for (i, &x) in numbers.iter().enumerate()\
    \ {\n            let dist = x - &numbers[i];\n            if dist < min_dist {\n\
    \                min_dist = dist;\n                min_idx = i;\n            }\n\
    \        }\n        min_idx != -1\n    })\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpdq7fspsg.rs:6:27\n\
    \  |\n6 |         let mut min_idx = -1;\n  |                           ^^ the\
    \ trait `Neg` is not implemented for `usize`\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmpdq7fspsg.rs:14:20\n   |\n14 |  \
    \       min_idx != -1\n   |                    ^^\n   |                    |\n\
    \   |                    cannot apply unary operator `-`\n   |               \
    \     help: you may have meant the maximum value of `usize`: `usize::MAX`\n  \
    \ |\n   = note: unsigned values cannot be negated\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0600.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n    let mut i = 0;\n    let mut j = 1;\n\
    \    while i < numbers_sorted.len() && j < numbers_sorted.len() {\n        if\
    \ numbers_sorted[i] < numbers_sorted[j] {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n        if i == numbers_sorted.len() || j\
    \ == numbers_sorted.len() {\n            return false;\n        }\n    }\n   \
    \ numbers_sorted.len() >= 2 && numbers_sorted[i] == numbers_sorted[j] && numbers_sorted[i]\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpq6g4l1wi.rs:5:20\n\
    \  |\n5 |     numbers_sorted.sort_unstable();\n  |                    ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut close = false;\n    for &n in numbers {\n      \
    \  if close.load(Ordering::Relaxed) {\n            break;\n        }\n       \
    \ if n < threshold {\n            close = true;\n        } else {\n          \
    \  close = false;\n            break;\n        }\n    }\n    close\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmpzsid78po.rs:6:23\n  |\n6 |         if close.load(Ordering::Relaxed)\
    \ {\n  |                       ^^^^^^^^ use of undeclared type `Ordering`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpzsid78po.rs:5:9\n  |\n5 |     for\
    \ &n in numbers {\n  |         ^^    ------- this expression has type `f64`\n\
    \  |         |\n  |         expected `f64`, found reference\n  |\n  = note:  \
    \ expected type `f64`\n          found reference `&_`\n\nerror[E0599]: no method\
    \ named `load` found for type `bool` in the current scope\n --> /tmp/tmpzsid78po.rs:6:18\n\
    \  |\n6 |         if close.load(Ordering::Relaxed) {\n  |                  ^^^^\
    \ method not found in `bool`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_distance = threshold;\n    let mut min_element\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = std::f64::abs(n\
    \ - min_element);\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_element = n;\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmpd0y7w1c6.rs:7:34\n\
    \  |\n7 |         let distance = std::f64::abs(n - min_element);\n  |        \
    \                          ^^^ not found in `std::f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpd0y7w1c6.rs:6:9\n  |\n6 |     for &n in numbers {\n  | \
    \        ^^    ------- this expression has type `f64`\n  |         |\n  |    \
    \     expected `f64`, found reference\n  |\n  = note:   expected type `f64`\n\
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().sorted();\n\
    \    let mut min_distance = threshold;\n    let mut min_element = numbers_sorted.next().unwrap();\n\
    \    for element in numbers_sorted {\n        if element - min_element > threshold\
    \ {\n            min_distance = element - min_element;\n            min_element\
    \ = element;\n        }\n    }\n    min_distance < threshold\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpdaclwfon.rs:4:54\n  |\n4 |     let mut numbers_sorted\
    \ = numbers.iter().cloned().sorted();\n  |                                   \
    \                   ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, f64>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut min_dist = threshold;\n    for &n in numbers {\n\
    \        for &m in numbers {\n            if *n < m && *n - *m > min_dist {\n\
    \                min_dist = (*n - *m).abs();\n            }\n        }\n    }\n\
    \    min_dist < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoepwp7d6.rs:5:9\n  |\n5 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `f64`\n  |         |\n  |         expected `f64`, found reference\n  |\n  =\
    \ note:   expected type `f64`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpoepwp7d6.rs:6:13\n  |\n6 |         for &m in\
    \ numbers {\n  |             ^^    ------- this expression has type `f64`\n  |\
    \             |\n  |             expected `f64`, found reference\n  |\n  = note:\
    \   expected type `f64`\n          found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    numbers.iter().any(|x| {\n        numbers.iter().any(|y|\
    \ {\n            abs(x - y) < threshold\n        })\n    })\n}\n\nfn main() {\n\
    \    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n --> /tmp/tmpjsyn487e.rs:6:13\n\
    \  |\n6 |             abs(x - y) < threshold\n  |             ^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n\
    \    for &n in numbers_copy {\n        if n == threshold {\n            return\
    \ true;\n        }\n        if numbers.iter().any(|&n| n == n) {\n           \
    \ return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp0g99t_b3.rs:5:18\n\
    \  |\n5 |     numbers_copy.sort();\n  |                  ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0g99t_b3.rs:6:9\n\
    \  |\n6 |     for &n in numbers_copy {\n  |         ^^    ------------ this expression\
    \ has type `f64`\n  |         |\n  |         expected `f64`, found reference\n\
    \  |\n  = note:   expected type `f64`\n          found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while i < numbers.len()\
    \ && j < numbers.len() {\n        if numbers[i] - numbers[j] > threshold {\n \
    \           return true;\n        }\n        if numbers[j] - numbers[i] > threshold\
    \ {\n            return false;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyfbdzgja.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748739
- exit_code: 1
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\nfn has_close_elements(numbers: Vec<f64>, threshold:\
    \ f64) -> bool {\n    let mut numbers_sorted = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    numbers_sorted.sort_unstable();\n\n    for &n in numbers_sorted {\n     \
    \   if n == threshold {\n            return true;\n        }\n        if n ==\
    \ numbers_sorted[numbers_sorted.len() - 1] {\n            return false;\n    \
    \    }\n    }\n\n    false\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7qsl6oi4.rs:5:20\n\
    \  |\n5 |     numbers_sorted.sort_unstable();\n  |                    ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp7qsl6oi4.rs:7:9\n  |\n7 |     for &n in numbers_sorted {\n  |  \
    \       ^^    -------------- this expression has type `f64`\n  |         |\n \
    \ |         expected `f64`, found reference\n  |\n  = note:   expected type `f64`\n\
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748739
