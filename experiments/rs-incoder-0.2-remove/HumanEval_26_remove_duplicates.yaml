name: HumanEval_26_remove_duplicates
language: rs
prompt: "/// From a list of integers, remove all elements that occur more than once.\n\
  /// Keep order of elements left the same as in the input.\nfn remove_duplicates(numbers:\
  \ Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
  \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
  }\n"
completions: ["    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\
    \    for n in numbers {\n        if seen.insert(n).is_some() {\n            result.push(n);\n\
    \        }\n    }\n    result", "    let mut seen = HashSet::new();\n    numbers.dedup();\n\
    \    numbers.dedup();\n    numbers.dedup();\n    numbers.dedup();\n    numbers",
  "    let mut numbers_set = HashSet::new();\n    for number in numbers {\n      \
    \  if numbers_set.insert(number).is_some() {\n            numbers_set.insert(number);\n\
    \        }\n    }\n    numbers_set.into_iter().map(|x| x).collect()", "    let\
    \ mut seen = HashSet::new();\n    numbers.dedup();\n    numbers.iter().filter(|&x|\
    \ seen.insert(x)).collect()", "    let mut numbers_set = HashSet::new();\n   \
    \ for n in numbers {\n        if !numbers_set.insert(n) {\n            numbers_set.insert(n);\n\
    \        }\n    }\n    numbers_set.into_iter().collect()", "    let mut numbers_set\
    \ = HashSet::new();\n    for n in numbers {\n        if numbers_set.insert(n).is_some()\
    \ {\n            numbers_set.insert(n);\n        }\n    }\n    numbers_set.into_iter().map(|n|\
    \ n as isize).collect()", "    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    numbers.dedup();\n    numbers.dedup();\n    numbers.dedup();\n    numbers",
  "    let mut seen = HashSet::new();\n    numbers.dedup().collect::<Vec<_>>()", " \
    \   let mut seen = HashSet::new();\n    numbers.dedup().collect::<Vec<_>>()",
  "    let mut seen = HashSet::new();\n    numbers.dedup();\n    numbers.into_iter().filter(|&x|\
    \ seen.insert(x)).collect()", "    let mut seen = HashSet::new();\n    numbers.dedup();\n\
    \    numbers.into_iter().filter(|&x| seen.insert(x).is_some()).collect()", " \
    \   let mut seen = HashSet::new();\n    numbers.dedup();\n    numbers.into_iter().filter(|&x|\
    \ seen.insert(x)).collect()", "    let mut seen = HashSet::new();\n    numbers.dedup();\n\
    \    numbers.into_iter().filter(|&x| seen.insert(x).is_some()).collect()", " \
    \   let mut seen = HashSet::new();\n    numbers.dedup();\n    numbers.dedup();\n\
    \    numbers.dedup();\n    numbers", "    let mut seen = HashSet::new();\n   \
    \ numbers.dedup().filter(|&x| seen.insert(x)).collect()", "    let mut seen =\
    \ HashSet::new();\n    numbers.dedup_by()\n        .filter(|&x| seen.insert(x).is_some())\n\
    \        .collect()", "    let mut seen = HashSet::new();\n    numbers.dedup().collect::<Vec<_>>()",
  "    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n    for n\
    \ in numbers {\n        if seen.insert(n).is_some() {\n            result.push(n);\n\
    \        }\n    }\n    result", "    let mut seen = HashSet::new();\n    numbers.dedup_by()\n\
    \        .filter(|&x| seen.insert(x).is_some())\n        .collect()", "    let\
    \ mut seen = HashSet::new();\n    numbers.dedup_by()\n        .filter(|&n| seen.insert(n).is_some())\n\
    \        .collect()"]
stop_tokens:
- "\n}"
