language: rs
name: HumanEval_90_next_smallest
results:
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n      \
    \  smallest_index = 0;\n    }\n    Some(smallest[smallest_index + 1])\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl5ggd833.rs:9:60\n  |\n9 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0608]:\
    \ cannot index into a value of type `&isize`\n  --> /tmp/tmpl5ggd833.rs:13:10\n\
    \   |\n13 |     Some(smallest[smallest_index + 1])\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_idx = lst.iter().position(|x|\
    \ *x == smallest);\n    if smallest_idx == lst.len() {\n        return None;\n\
    \    }\n    smallest = lst.iter().nth(smallest_idx + 1).unwrap();\n    Some(smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwia0vi1t.rs:6:58\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().position(|x| *x == smallest);\n  |   \
    \                                                       ^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n  |\n  = note: expected type `isize`\n             found\
    \ enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwia0vi1t.rs:7:24\n\
    \  |\n7 |     if smallest_idx == lst.len() {\n  |                        ^^^^^^^^^\n\
    \  |                        |\n  |                        expected enum `Option`,\
    \ found `usize`\n  |                        help: try using a variant of the expected\
    \ enum: `Some(lst.len())`\n  |\n  = note: expected enum `Option<usize>`\n    \
    \         found type `usize`\n\nerror[E0369]: cannot add `{integer}` to `Option<usize>`\n\
    \  --> /tmp/tmpwia0vi1t.rs:10:44\n   |\n10 |     smallest = lst.iter().nth(smallest_idx\
    \ + 1).unwrap();\n   |                               ------------ ^ - {integer}\n\
    \   |                               |\n   |                               Option<usize>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwia0vi1t.rs:10:16\n   |\n10 |\
    \     smallest = lst.iter().nth(smallest_idx + 1).unwrap();\n   |            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                |\n   |  \
    \              expected enum `Option`, found `&isize`\n   |                help:\
    \ try using a variant of the expected enum: `Some(lst.iter().nth(smallest_idx\
    \ + 1).unwrap())`\n   |\n   = note:   expected enum `Option<&isize>`\n       \
    \    found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwia0vi1t.rs:11:10\n\
    \   |\n11 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<&isize>`\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest_value == smallest {\n        smallest_index += 1;\n    }\n  \
    \  smallest_index\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmvmv2g8j.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmvmv2g8j.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0277]: can't compare `&isize` with\
    \ `Option<&isize>`\n  --> /tmp/tmpmvmv2g8j.rs:14:23\n   |\n14 |     if smallest_value\
    \ == smallest {\n   |                       ^^ no implementation for `&isize ==\
    \ Option<&isize>`\n   |\n   = help: the trait `PartialEq<Option<&isize>>` is not\
    \ implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmvmv2g8j.rs:17:5\n\
    \   |\n4  | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n   |       \
    \                               ------------- expected `Option<isize>` because\
    \ of return type\n...\n17 |     smallest_index\n   |     ^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<isize>`\n\
    \              found type `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().cloned().enumerate().filter(|(i, _)| {\n        i == 0 || lst[i]\
    \ < lst[i-1]\n    }).next()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&usize` with `{integer}`\n --> /tmp/tmpl8f7nrch.rs:6:11\n\
    \  |\n6 |         i == 0 || lst[i] < lst[i-1]\n  |           ^^ no implementation\
    \ for `&usize == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `&usize`\n --> /tmp/tmpl8f7nrch.rs:6:19\n  |\n6 |         i == 0 || lst[i]\
    \ < lst[i-1]\n  |                   ^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&usize`\n  = note: required because of the requirements on the impl of\
    \ `Index<&usize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpl8f7nrch.rs:5:5\n\
    \  |\n4 |   fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |        \
    \                                ------------- expected `Option<isize>` because\
    \ of return type\n5 | /     lst.iter().cloned().enumerate().filter(|(i, _)| {\n\
    6 | |         i == 0 || lst[i] < lst[i-1]\n7 | |     }).next()\n  | |_____________^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, isize)>`\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n      \
    \  return Some(smallest);\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_index2 = lst.iter().position(|x| *x == smallest_value).unwrap();\n\
    \    if smallest_index2 == lst.len() - 1 {\n        return Some(smallest);\n \
    \   }\n    let mut smallest_value2 = lst.iter().nth(smallest_index2).unwrap();\n\
    \    if smallest_value2 < smallest {\n        smallest = smallest_value2;\n  \
    \      smallest_index = smallest_index2;\n    }\n    if smallest_index == lst.len()\
    \ - 1 {\n        return Some(smallest);\n    }\n    let mut smallest_value3 =\
    \ lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index3 = lst.iter().position(|x|\
    \ *x == smallest_value3).unwrap();\n    if smallest_index3 == lst.len() - 1 {\n\
    \        return Some(smallest);\n    }\n    let mut smallest_value4 = lst.iter().nth(smallest_index3).unwrap();\n\
    \    if smallest_value4 < smallest {\n        smallest = smallest_value4;\n  \
    \      smallest_index = smallest_index3;\n    }\n    if smallest_index == lst.len()\
    \ - 1 {\n        return Some(smallest);\n    }\n    let mut smallest_value5 =\
    \ lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index5 = lst.iter().position(|x|\
    \ *x == smallest_value5).unwrap();\n    if smallest_index5 == lst.len() - 1 {\n\
    \        return Some(smallest);\n    }\n    let mut smallest_value6 = lst.iter().nth(smallest_index5).unwrap();\n\
    \    if smallest_value6 < smallest {\n        smallest = smallest_value6;\n  \
    \      smallest_index = smallest_index5;\n    }\n    if smallest_index == lst.len()\
    \ - 1 {\n        return Some(smallest);\n    }\n    let mut smallest_value7 =\
    \ lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index7 = lst.iter().position(|x|\
    \ *x == smallest_value7).unwrap();\n    if smalle\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmpyz3lpw7_.rs:55:1\n   |\n\
    54 |     if smalle\n   |     -- this `if` expression has a condition, but no block\n\
    55 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpyz3lpw7_.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyz3lpw7_.rs:11:21\n   |\n11 |         return\
    \ Some(smallest);\n   |                     ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |         return Some(*smallest);\n\
    \   |                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyz3lpw7_.rs:14:61\n\
    \   |\n14 |     let mut smallest_index2 = lst.iter().position(|x| *x == smallest_value).unwrap();\n\
    \   |                                                             ^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n14 |     let mut smallest_index2 = lst.iter().position(|x| *x == *smallest_value).unwrap();\n\
    \   |                                                             +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyz3lpw7_.rs:16:21\n   |\n16 |         return\
    \ Some(smallest);\n   |                     ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n16 |         return Some(*smallest);\n\
    \   |                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyz3lpw7_.rs:24:21\n\
    \   |\n24 |         return Some(smallest);\n   |                     ^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n24 |         return Some(*smallest);\n   |                     +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyz3lpw7_.rs:27:61\n   |\n27 |     let"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, i)| i < lst.len() - 2).next()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuwcl5eyv.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, i)| i < lst.len() - 2).next()\n  |  \
    \                                              ^^^^^^^^^^^^^ expected `&&isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpuwcl5eyv.rs:5:5\n\
    \  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |          \
    \                            ------------- expected `Option<isize>` because of\
    \ return type\n5 |     lst.iter().enumerate().filter(|(_, i)| i < lst.len() -\
    \ 2).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest_value == smallest {\n        return None;\n    }\n    let mut\
    \ smallest_index = lst.iter().position(|&x| x == smallest_value).unwrap();\n \
    \   if smallest_index == 0 {\n        return None;\n    }\n    let mut smallest_value\
    \ = lst.iter().nth(smallest_index).unwrap();\n    if smallest_value == smallest\
    \ {\n        return None;\n    }\n    smallest_index\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnk5rytzp.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnk5rytzp.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0277]: can't compare `&isize` with\
    \ `Option<&isize>`\n  --> /tmp/tmpnk5rytzp.rs:14:23\n   |\n14 |     if smallest_value\
    \ == smallest {\n   |                       ^^ no implementation for `&isize ==\
    \ Option<&isize>`\n   |\n   = help: the trait `PartialEq<Option<&isize>>` is not\
    \ implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnk5rytzp.rs:17:60\n\
    \   |\n17 |     let mut smallest_index = lst.iter().position(|&x| x == smallest_value).unwrap();\n\
    \   |                                                            ^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n17 |     let mut smallest_index = lst.iter().position(|&x| x == *smallest_value).unwrap();\n\
    \   |                                                            +\n\nerror[E0277]:\
    \ can't compare `&isize` with `Option<&isize>`\n  --> /tmp/tmpnk5rytzp.rs:22:23\n\
    \   |\n22 |     if smallest_value == smallest {\n   |                       ^^\
    \ no implementation for `&isize == Option<&isize>`\n   |\n   = help: the trait\
    \ `PartialEq<Option<&isize>>` is not implemented for `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnk5rytzp.rs:25:5\n   |\n4  | fn next_smallest(lst:\
    \ Vec<isize>) -> Option<isize> {\n   |                                      -------------\
    \ expected `Option<isize>` because of return type\n...\n25 |     smallest_index\n\
    \   |     ^^^^^^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note:\
    \ expected enum `Option<isize>`\n              "
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_value = lst.iter()[smallest_index];\n   \
    \ if smallest_index == 0 {\n        smallest_value = lst.iter().min();\n    }\n\
    \    smallest_index -= 1;\n    smallest_value\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdqsbkex4.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdqsbkex4.rs:9:59\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \  |                                                           ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0608]: cannot index into a value\
    \ of type `std::slice::Iter<'_, isize>`\n  --> /tmp/tmpdqsbkex4.rs:13:30\n   |\n\
    13 |     let mut smallest_value = lst.iter()[smallest_index];\n   |          \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdqsbkex4.rs:18:5\n   |\n4  | fn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n   |                                      -------------\
    \ expected `Option<isize>` because of return type\n...\n18 |     smallest_value\n\
    \   |     ^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ enum `Option<isize>`\n              found enum `Option<&isize>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0608.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut second_smallest = lst.iter().skip(smallest_index).min();\n\
    \    if second_smallest == lst.len() {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5vbzi1wn.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5vbzi1wn.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5vbzi1wn.rs:14:27\n\
    \   |\n14 |     if second_smallest == lst.len() {\n   |                      \
    \     ^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note: expected\
    \ enum `Option<&isize>`\n              found type `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5vbzi1wn.rs:17:10\n   |\n17 |     Some(second_smallest)\n\
    \   |          ^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n \
    \  = note: expected type `isize`\n              found enum `Option<&isize>`\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \n    for &x in lst {\n        if *x < smallest_value {\n            smallest_value\
    \ = x;\n            smallest_index = lst.iter().position(|x| *x == smallest_value).unwrap();\n\
    \        }\n    }\n\n    Some(smallest_value)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8vz8y3bt.rs:10:60\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \   |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \   |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8vz8y3bt.rs:13:9\n   |\n13 |     for &x in lst\
    \ {\n   |         ^^    --- this expression has type `isize`\n   |         |\n\
    \   |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8vz8y3bt.rs:16:60\n   |\n16 |             smallest_index = lst.iter().position(|x|\
    \ *x == smallest_value).unwrap();\n   |                                      \
    \                      ^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n16 |             smallest_index\
    \ = lst.iter().position(|x| *x == *smallest_value).unwrap();\n   |           \
    \                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8vz8y3bt.rs:20:10\n   |\n20 |     Some(smallest_value)\n\
    \   |          ^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n20 |     Some(*smallest_value)\n   |       \
    \   +\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).min()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6xpl0sd.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    for i in lst.iter().skip(smallest_index + 1) {\n        if *i < smallest_value\
    \ {\n            smallest_value = i;\n            smallest_index = i;\n      \
    \  }\n    }\n    Some(smallest_value)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa4vyzh66.rs:12:17\n   |\n\
    12 |         if *i < smallest_value {\n   |                 ^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |         if *i < *smallest_value {\n   |                 +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa4vyzh66.rs:14:30\n   |\n14 |             smallest_index\
    \ = i;\n   |                              ^ expected `usize`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa4vyzh66.rs:17:10\n   |\n17 |\
    \     Some(smallest_value)\n   |          ^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |     Some(*smallest_value)\n\
    \   |          +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n      \
    \  return Some(smallest);\n    }\n    let mut smallest_index = smallest_index\
    \ + 1;\n    while smallest_index < lst.len() {\n        if *lst[smallest_index]\
    \ < *smallest {\n            smallest = *lst[smallest_index];\n            smallest_index\
    \ = smallest_index;\n        } else {\n            smallest_index += 1;\n    \
    \    }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl8gyb9mu.rs:9:60\n  |\n9 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl8gyb9mu.rs:11:21\n   |\n11 |         return\
    \ Some(smallest);\n   |                     ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |         return Some(*smallest);\n\
    \   |                     +\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpl8gyb9mu.rs:15:12\n   |\n15 |         if *lst[smallest_index] <\
    \ *smallest {\n   |            ^^^^^^^^^^^^^^^^^^^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpl8gyb9mu.rs:16:24\n   |\n16 |        \
    \     smallest = *lst[smallest_index];\n   |                        ^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl8gyb9mu.rs:22:10\n   |\n22 |\
    \     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n22 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_idx = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_idx == lst.len() - 1 {\n        smallest_idx\
    \ = 0;\n    }\n    Some(smallest[smallest_idx + 1])\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxl4f0b5q.rs:9:58\n  |\n9 |\
    \     let mut smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_idx = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \  |                                                          +\n\nerror[E0608]:\
    \ cannot index into a value of type `&isize`\n  --> /tmp/tmpxl4f0b5q.rs:13:10\n\
    \   |\n13 |     Some(smallest[smallest_idx + 1])\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_idx = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_idx == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_idx = smallest_idx + 1;\n    let mut smallest_val\
    \ = lst.iter().nth(smallest_idx).unwrap();\n    while smallest_idx < lst.len()\
    \ {\n        if lst.iter().nth(smallest_idx).unwrap() < smallest_val {\n     \
    \       smallest_val = lst.iter().nth(smallest_idx).unwrap();\n            smallest_idx\
    \ = smallest_idx + 1;\n        }\n        smallest_idx = smallest_idx + 1;\n \
    \   }\n    Some(smallest_val)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgaqnrgaz.rs:6:58\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgaqnrgaz.rs:19:10\n\
    \   |\n19 |     Some(smallest_val)\n   |          ^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |  \
    \   Some(*smallest_val)\n   |          +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = -1;\n    for &i\
    \ in lst {\n        if i < smallest {\n            smallest = i;\n           \
    \ smallest_index = i;\n        }\n    }\n    Some(smallest_index)\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptnfy2miw.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, x)| x < lst.len() - 2).next()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8jrmtw7w.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, x)| x < lst.len() - 2).next()\n  |  \
    \                                              ^^^^^^^^^^^^^ expected `&&isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8jrmtw7w.rs:5:5\n\
    \  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |          \
    \                            ------------- expected `Option<isize>` because of\
    \ return type\n5 |     lst.iter().enumerate().filter(|(_, x)| x < lst.len() -\
    \ 2).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    if smallest_index == 0 {\n        smallest = lst.iter().max();\n\
    \        smallest_index = lst.iter().position(|&x| x > smallest).unwrap();\n \
    \   }\n    Some(lst[smallest_index + 1])\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwzgylno1.rs:6:59\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \  |                                                           ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwzgylno1.rs:12:55\n\
    \   |\n12 |         smallest_index = lst.iter().position(|&x| x > smallest).unwrap();\n\
    \   |                                                       ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n\n    let mut second_smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    let mut second_smallest_index = lst.iter().position(|x| *x == second_smallest).unwrap();\n\
    \    if second_smallest_index == 0 {\n        return None;\n    }\n\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj_2xhmw1.rs:10:60\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \   |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \   |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj_2xhmw1.rs:16:67\n   |\n16 |     let mut second_smallest_index\
    \ = lst.iter().position(|x| *x == second_smallest).unwrap();\n   |           \
    \                                                        ^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |     let mut second_smallest_index = lst.iter().position(|x| *x == *second_smallest).unwrap();\n\
    \   |                                                                   +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpj_2xhmw1.rs:21:10\n   |\n21 |  \
    \   Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |     Some(*second_smallest)\n\
    \   |          +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_idx = 1;\n    for idx in lst.iter().skip(smallest_idx).rev()\
    \ {\n        if *idx < smallest {\n            smallest = *idx;\n            smallest_idx\
    \ = idx;\n        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7gg9c2ky.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7gg9c2ky.rs:11:19\n\
    \   |\n11 |         if *idx < smallest {\n   |                   ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7gg9c2ky.rs:12:24\n   |\n12 |             smallest = *idx;\n   |   \
    \                     ^^^^ expected enum `Option`, found `isize`\n   |\n   = note:\
    \ expected enum `Option<&isize>`\n              found type `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7gg9c2ky.rs:13:28\n   |\n13 |             smallest_idx\
    \ = idx;\n   |                            ^^^ expected `usize`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7gg9c2ky.rs:16:10\n   |\n16 |\
    \     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to 5 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
