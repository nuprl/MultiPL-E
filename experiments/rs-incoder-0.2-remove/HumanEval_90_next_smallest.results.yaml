language: rs
name: HumanEval_90_next_smallest
results:
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n      \
    \  smallest_index = 0;\n    }\n    Some(smallest[smallest_index + 1])\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl5ggd833.rs:9:60\n  |\n9 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0608]:\
    \ cannot index into a value of type `&isize`\n  --> /tmp/tmpl5ggd833.rs:13:10\n\
    \   |\n13 |     Some(smallest[smallest_index + 1])\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_idx = lst.iter().position(|x|\
    \ *x == smallest);\n    if smallest_idx == lst.len() {\n        return None;\n\
    \    }\n    smallest = lst.iter().nth(smallest_idx + 1).unwrap();\n    Some(smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwia0vi1t.rs:6:58\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().position(|x| *x == smallest);\n  |   \
    \                                                       ^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n  |\n  = note: expected type `isize`\n             found\
    \ enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwia0vi1t.rs:7:24\n\
    \  |\n7 |     if smallest_idx == lst.len() {\n  |                        ^^^^^^^^^\n\
    \  |                        |\n  |                        expected enum `Option`,\
    \ found `usize`\n  |                        help: try using a variant of the expected\
    \ enum: `Some(lst.len())`\n  |\n  = note: expected enum `Option<usize>`\n    \
    \         found type `usize`\n\nerror[E0369]: cannot add `{integer}` to `Option<usize>`\n\
    \  --> /tmp/tmpwia0vi1t.rs:10:44\n   |\n10 |     smallest = lst.iter().nth(smallest_idx\
    \ + 1).unwrap();\n   |                               ------------ ^ - {integer}\n\
    \   |                               |\n   |                               Option<usize>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwia0vi1t.rs:10:16\n   |\n10 |\
    \     smallest = lst.iter().nth(smallest_idx + 1).unwrap();\n   |            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                |\n   |  \
    \              expected enum `Option`, found `&isize`\n   |                help:\
    \ try using a variant of the expected enum: `Some(lst.iter().nth(smallest_idx\
    \ + 1).unwrap())`\n   |\n   = note:   expected enum `Option<&isize>`\n       \
    \    found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwia0vi1t.rs:11:10\n\
    \   |\n11 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<&isize>`\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest_value == smallest {\n        smallest_index += 1;\n    }\n  \
    \  smallest_index\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmvmv2g8j.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmvmv2g8j.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0277]: can't compare `&isize` with\
    \ `Option<&isize>`\n  --> /tmp/tmpmvmv2g8j.rs:14:23\n   |\n14 |     if smallest_value\
    \ == smallest {\n   |                       ^^ no implementation for `&isize ==\
    \ Option<&isize>`\n   |\n   = help: the trait `PartialEq<Option<&isize>>` is not\
    \ implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmvmv2g8j.rs:17:5\n\
    \   |\n4  | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n   |       \
    \                               ------------- expected `Option<isize>` because\
    \ of return type\n...\n17 |     smallest_index\n   |     ^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<isize>`\n\
    \              found type `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().cloned().enumerate().filter(|(i, _)| {\n        i == 0 || lst[i]\
    \ < lst[i-1]\n    }).next()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&usize` with `{integer}`\n --> /tmp/tmpl8f7nrch.rs:6:11\n\
    \  |\n6 |         i == 0 || lst[i] < lst[i-1]\n  |           ^^ no implementation\
    \ for `&usize == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `&usize`\n --> /tmp/tmpl8f7nrch.rs:6:19\n  |\n6 |         i == 0 || lst[i]\
    \ < lst[i-1]\n  |                   ^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&usize`\n  = note: required because of the requirements on the impl of\
    \ `Index<&usize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpl8f7nrch.rs:5:5\n\
    \  |\n4 |   fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |        \
    \                                ------------- expected `Option<isize>` because\
    \ of return type\n5 | /     lst.iter().cloned().enumerate().filter(|(i, _)| {\n\
    6 | |         i == 0 || lst[i] < lst[i-1]\n7 | |     }).next()\n  | |_____________^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, isize)>`\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n      \
    \  return Some(smallest);\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_index2 = lst.iter().position(|x| *x == smallest_value).unwrap();\n\
    \    if smallest_index2 == lst.len() - 1 {\n        return Some(smallest);\n \
    \   }\n    let mut smallest_value2 = lst.iter().nth(smallest_index2).unwrap();\n\
    \    if smallest_value2 < smallest {\n        smallest = smallest_value2;\n  \
    \      smallest_index = smallest_index2;\n    }\n    if smallest_index == lst.len()\
    \ - 1 {\n        return Some(smallest);\n    }\n    let mut smallest_value3 =\
    \ lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index3 = lst.iter().position(|x|\
    \ *x == smallest_value3).unwrap();\n    if smallest_index3 == lst.len() - 1 {\n\
    \        return Some(smallest);\n    }\n    let mut smallest_value4 = lst.iter().nth(smallest_index3).unwrap();\n\
    \    if smallest_value4 < smallest {\n        smallest = smallest_value4;\n  \
    \      smallest_index = smallest_index3;\n    }\n    if smallest_index == lst.len()\
    \ - 1 {\n        return Some(smallest);\n    }\n    let mut smallest_value5 =\
    \ lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index5 = lst.iter().position(|x|\
    \ *x == smallest_value5).unwrap();\n    if smallest_index5 == lst.len() - 1 {\n\
    \        return Some(smallest);\n    }\n    let mut smallest_value6 = lst.iter().nth(smallest_index5).unwrap();\n\
    \    if smallest_value6 < smallest {\n        smallest = smallest_value6;\n  \
    \      smallest_index = smallest_index5;\n    }\n    if smallest_index == lst.len()\
    \ - 1 {\n        return Some(smallest);\n    }\n    let mut smallest_value7 =\
    \ lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index7 = lst.iter().position(|x|\
    \ *x == smallest_value7).unwrap();\n    if smalle\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmpyz3lpw7_.rs:55:1\n   |\n\
    54 |     if smalle\n   |     -- this `if` expression has a condition, but no block\n\
    55 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpyz3lpw7_.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyz3lpw7_.rs:11:21\n   |\n11 |         return\
    \ Some(smallest);\n   |                     ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |         return Some(*smallest);\n\
    \   |                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyz3lpw7_.rs:14:61\n\
    \   |\n14 |     let mut smallest_index2 = lst.iter().position(|x| *x == smallest_value).unwrap();\n\
    \   |                                                             ^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n14 |     let mut smallest_index2 = lst.iter().position(|x| *x == *smallest_value).unwrap();\n\
    \   |                                                             +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyz3lpw7_.rs:16:21\n   |\n16 |         return\
    \ Some(smallest);\n   |                     ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n16 |         return Some(*smallest);\n\
    \   |                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyz3lpw7_.rs:24:21\n\
    \   |\n24 |         return Some(smallest);\n   |                     ^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n24 |         return Some(*smallest);\n   |                     +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyz3lpw7_.rs:27:61\n   |\n27 |     let"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, i)| i < lst.len() - 2).next()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuwcl5eyv.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, i)| i < lst.len() - 2).next()\n  |  \
    \                                              ^^^^^^^^^^^^^ expected `&&isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpuwcl5eyv.rs:5:5\n\
    \  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |          \
    \                            ------------- expected `Option<isize>` because of\
    \ return type\n5 |     lst.iter().enumerate().filter(|(_, i)| i < lst.len() -\
    \ 2).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest_value == smallest {\n        return None;\n    }\n    let mut\
    \ smallest_index = lst.iter().position(|&x| x == smallest_value).unwrap();\n \
    \   if smallest_index == 0 {\n        return None;\n    }\n    let mut smallest_value\
    \ = lst.iter().nth(smallest_index).unwrap();\n    if smallest_value == smallest\
    \ {\n        return None;\n    }\n    smallest_index\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnk5rytzp.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnk5rytzp.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0277]: can't compare `&isize` with\
    \ `Option<&isize>`\n  --> /tmp/tmpnk5rytzp.rs:14:23\n   |\n14 |     if smallest_value\
    \ == smallest {\n   |                       ^^ no implementation for `&isize ==\
    \ Option<&isize>`\n   |\n   = help: the trait `PartialEq<Option<&isize>>` is not\
    \ implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnk5rytzp.rs:17:60\n\
    \   |\n17 |     let mut smallest_index = lst.iter().position(|&x| x == smallest_value).unwrap();\n\
    \   |                                                            ^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n17 |     let mut smallest_index = lst.iter().position(|&x| x == *smallest_value).unwrap();\n\
    \   |                                                            +\n\nerror[E0277]:\
    \ can't compare `&isize` with `Option<&isize>`\n  --> /tmp/tmpnk5rytzp.rs:22:23\n\
    \   |\n22 |     if smallest_value == smallest {\n   |                       ^^\
    \ no implementation for `&isize == Option<&isize>`\n   |\n   = help: the trait\
    \ `PartialEq<Option<&isize>>` is not implemented for `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnk5rytzp.rs:25:5\n   |\n4  | fn next_smallest(lst:\
    \ Vec<isize>) -> Option<isize> {\n   |                                      -------------\
    \ expected `Option<isize>` because of return type\n...\n25 |     smallest_index\n\
    \   |     ^^^^^^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note:\
    \ expected enum `Option<isize>`\n              "
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_value = lst.iter()[smallest_index];\n   \
    \ if smallest_index == 0 {\n        smallest_value = lst.iter().min();\n    }\n\
    \    smallest_index -= 1;\n    smallest_value\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdqsbkex4.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdqsbkex4.rs:9:59\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \  |                                                           ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0608]: cannot index into a value\
    \ of type `std::slice::Iter<'_, isize>`\n  --> /tmp/tmpdqsbkex4.rs:13:30\n   |\n\
    13 |     let mut smallest_value = lst.iter()[smallest_index];\n   |          \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdqsbkex4.rs:18:5\n   |\n4  | fn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n   |                                      -------------\
    \ expected `Option<isize>` because of return type\n...\n18 |     smallest_value\n\
    \   |     ^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ enum `Option<isize>`\n              found enum `Option<&isize>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0608.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut second_smallest = lst.iter().skip(smallest_index).min();\n\
    \    if second_smallest == lst.len() {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5vbzi1wn.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5vbzi1wn.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5vbzi1wn.rs:14:27\n\
    \   |\n14 |     if second_smallest == lst.len() {\n   |                      \
    \     ^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note: expected\
    \ enum `Option<&isize>`\n              found type `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5vbzi1wn.rs:17:10\n   |\n17 |     Some(second_smallest)\n\
    \   |          ^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n \
    \  = note: expected type `isize`\n              found enum `Option<&isize>`\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \n    for &x in lst {\n        if *x < smallest_value {\n            smallest_value\
    \ = x;\n            smallest_index = lst.iter().position(|x| *x == smallest_value).unwrap();\n\
    \        }\n    }\n\n    Some(smallest_value)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8vz8y3bt.rs:10:60\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \   |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \   |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8vz8y3bt.rs:13:9\n   |\n13 |     for &x in lst\
    \ {\n   |         ^^    --- this expression has type `isize`\n   |         |\n\
    \   |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8vz8y3bt.rs:16:60\n   |\n16 |             smallest_index = lst.iter().position(|x|\
    \ *x == smallest_value).unwrap();\n   |                                      \
    \                      ^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n16 |             smallest_index\
    \ = lst.iter().position(|x| *x == *smallest_value).unwrap();\n   |           \
    \                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8vz8y3bt.rs:20:10\n   |\n20 |     Some(smallest_value)\n\
    \   |          ^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n20 |     Some(*smallest_value)\n   |       \
    \   +\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).min()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6xpl0sd.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    for i in lst.iter().skip(smallest_index + 1) {\n        if *i < smallest_value\
    \ {\n            smallest_value = i;\n            smallest_index = i;\n      \
    \  }\n    }\n    Some(smallest_value)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa4vyzh66.rs:12:17\n   |\n\
    12 |         if *i < smallest_value {\n   |                 ^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |         if *i < *smallest_value {\n   |                 +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa4vyzh66.rs:14:30\n   |\n14 |             smallest_index\
    \ = i;\n   |                              ^ expected `usize`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa4vyzh66.rs:17:10\n   |\n17 |\
    \     Some(smallest_value)\n   |          ^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |     Some(*smallest_value)\n\
    \   |          +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n      \
    \  return Some(smallest);\n    }\n    let mut smallest_index = smallest_index\
    \ + 1;\n    while smallest_index < lst.len() {\n        if *lst[smallest_index]\
    \ < *smallest {\n            smallest = *lst[smallest_index];\n            smallest_index\
    \ = smallest_index;\n        } else {\n            smallest_index += 1;\n    \
    \    }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl8gyb9mu.rs:9:60\n  |\n9 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl8gyb9mu.rs:11:21\n   |\n11 |         return\
    \ Some(smallest);\n   |                     ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |         return Some(*smallest);\n\
    \   |                     +\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpl8gyb9mu.rs:15:12\n   |\n15 |         if *lst[smallest_index] <\
    \ *smallest {\n   |            ^^^^^^^^^^^^^^^^^^^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpl8gyb9mu.rs:16:24\n   |\n16 |        \
    \     smallest = *lst[smallest_index];\n   |                        ^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl8gyb9mu.rs:22:10\n   |\n22 |\
    \     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n22 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_idx = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_idx == lst.len() - 1 {\n        smallest_idx\
    \ = 0;\n    }\n    Some(smallest[smallest_idx + 1])\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxl4f0b5q.rs:9:58\n  |\n9 |\
    \     let mut smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_idx = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \  |                                                          +\n\nerror[E0608]:\
    \ cannot index into a value of type `&isize`\n  --> /tmp/tmpxl4f0b5q.rs:13:10\n\
    \   |\n13 |     Some(smallest[smallest_idx + 1])\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_idx = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_idx == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_idx = smallest_idx + 1;\n    let mut smallest_val\
    \ = lst.iter().nth(smallest_idx).unwrap();\n    while smallest_idx < lst.len()\
    \ {\n        if lst.iter().nth(smallest_idx).unwrap() < smallest_val {\n     \
    \       smallest_val = lst.iter().nth(smallest_idx).unwrap();\n            smallest_idx\
    \ = smallest_idx + 1;\n        }\n        smallest_idx = smallest_idx + 1;\n \
    \   }\n    Some(smallest_val)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgaqnrgaz.rs:6:58\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgaqnrgaz.rs:19:10\n\
    \   |\n19 |     Some(smallest_val)\n   |          ^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |  \
    \   Some(*smallest_val)\n   |          +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = -1;\n    for &i\
    \ in lst {\n        if i < smallest {\n            smallest = i;\n           \
    \ smallest_index = i;\n        }\n    }\n    Some(smallest_index)\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptnfy2miw.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, x)| x < lst.len() - 2).next()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8jrmtw7w.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, x)| x < lst.len() - 2).next()\n  |  \
    \                                              ^^^^^^^^^^^^^ expected `&&isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8jrmtw7w.rs:5:5\n\
    \  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |          \
    \                            ------------- expected `Option<isize>` because of\
    \ return type\n5 |     lst.iter().enumerate().filter(|(_, x)| x < lst.len() -\
    \ 2).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    if smallest_index == 0 {\n        smallest = lst.iter().max();\n\
    \        smallest_index = lst.iter().position(|&x| x > smallest).unwrap();\n \
    \   }\n    Some(lst[smallest_index + 1])\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwzgylno1.rs:6:59\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \  |                                                           ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwzgylno1.rs:12:55\n\
    \   |\n12 |         smallest_index = lst.iter().position(|&x| x > smallest).unwrap();\n\
    \   |                                                       ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n\n    let mut second_smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    let mut second_smallest_index = lst.iter().position(|x| *x == second_smallest).unwrap();\n\
    \    if second_smallest_index == 0 {\n        return None;\n    }\n\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj_2xhmw1.rs:10:60\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \   |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \   |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj_2xhmw1.rs:16:67\n   |\n16 |     let mut second_smallest_index\
    \ = lst.iter().position(|x| *x == second_smallest).unwrap();\n   |           \
    \                                                        ^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |     let mut second_smallest_index = lst.iter().position(|x| *x == *second_smallest).unwrap();\n\
    \   |                                                                   +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpj_2xhmw1.rs:21:10\n   |\n21 |  \
    \   Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |     Some(*second_smallest)\n\
    \   |          +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_idx = 1;\n    for idx in lst.iter().skip(smallest_idx).rev()\
    \ {\n        if *idx < smallest {\n            smallest = *idx;\n            smallest_idx\
    \ = idx;\n        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7gg9c2ky.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7gg9c2ky.rs:11:19\n\
    \   |\n11 |         if *idx < smallest {\n   |                   ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7gg9c2ky.rs:12:24\n   |\n12 |             smallest = *idx;\n   |   \
    \                     ^^^^ expected enum `Option`, found `isize`\n   |\n   = note:\
    \ expected enum `Option<&isize>`\n              found type `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7gg9c2ky.rs:13:28\n   |\n13 |             smallest_idx\
    \ = idx;\n   |                            ^^^ expected `usize`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7gg9c2ky.rs:16:10\n   |\n16 |\
    \     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to 5 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = 0;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_index\
    \ = 1;\n        } else if i == smallest {\n            smallest_index += 1;\n\
    \        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprcmtl0pw.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).min()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6xpl0sd.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n       \
    \ smallest_index = 0;\n    }\n    smallest.swap(lst.iter()[smallest_index + 1].unwrap());\n\
    \    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuk777s85.rs:9:60\n  |\n9 |\
    \     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0599]:\
    \ no method named `swap` found for reference `&isize` in the current scope\n \
    \ --> /tmp/tmpuk777s85.rs:13:14\n   |\n13 |     smallest.swap(lst.iter()[smallest_index\
    \ + 1].unwrap());\n   |              ^^^^ method not found in `&isize`\n\nerror[E0608]:\
    \ cannot index into a value of type `std::slice::Iter<'_, isize>`\n  --> /tmp/tmpuk777s85.rs:13:19\n\
    \   |\n13 |     smallest.swap(lst.iter()[smallest_index + 1].unwrap());\n   |\
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuk777s85.rs:14:10\n   |\n14 |     Some(smallest)\n   |\
    \          ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n14 |     Some(*smallest)\n   |          +\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0608.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest > smallest_value {\n        smallest = smallest_value;\n    \
    \    smallest_index = 0;\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6od5quap.rs:6:58\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6od5quap.rs:11:19\n   |\n11 |     if smallest > smallest_value\
    \ {\n   |                   ^^^^^^^^^^^^^^ expected enum `Option`, found `&isize`\n\
    \   |\n   = note:   expected enum `Option<&isize>`\n           found reference\
    \ `&isize`\nhelp: try wrapping the expression in `Some`\n   |\n11 |     if smallest\
    \ > Some(smallest_value) {\n   |                   +++++              +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6od5quap.rs:12:20\n   |\n5  |     let mut smallest\
    \ = lst.iter().min();\n   |                        ---------------- expected due\
    \ to this value\n...\n12 |         smallest = smallest_value;\n   |          \
    \          ^^^^^^^^^^^^^^ expected enum `Option`, found `&isize`\n   |\n   = note:\
    \   expected enum `Option<&isize>`\n           found reference `&isize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |         smallest = Some(smallest_value);\n\
    \   |                    +++++              +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6od5quap.rs:15:10\n   |\n15 |     Some(smallest)\n   |        \
    \  ^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected type\
    \ `isize`\n              found enum `Option<&isize>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index += 1;\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu2iaxra9.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu2iaxra9.rs:12:10\n   |\n12 |     Some(smallest)\n\
    \   |          ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n12 |     Some(*smallest)\n   |          +\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().find(|(_, elem)| elem < lst.iter().skip(1).next().unwrap()).map(|(_,\
    \ elem)| elem)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuo9l6tnm.rs:5:52\n  |\n5 |\
    \     lst.iter().enumerate().find(|(_, elem)| elem < lst.iter().skip(1).next().unwrap()).map(|(_,\
    \ elem)| elem)\n  |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&isize`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpuo9l6tnm.rs:5:5\n  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize>\
    \ {\n  |                                      ------------- expected `Option<isize>`\
    \ because of return type\n5 |     lst.iter().enumerate().find(|(_, elem)| elem\
    \ < lst.iter().skip(1).next().unwrap()).map(|(_, elem)| elem)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpeftnaid5.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeftnaid5.rs:11:52\n   |\n11 |     smallest_index\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n   |                  \
    \                                  ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |     smallest_index\
    \ = lst.iter().position(|x| *x == *smallest).unwrap();\n   |                 \
    \                                   +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpeftnaid5.rs:15:5\n   |\n4  | fn next_smallest(lst: Vec<isize>) -> Option<isize>\
    \ {\n   |                                      ------------- expected `Option<isize>`\
    \ because of return type\n...\n15 |     smallest\n   |     ^^^^^^^^ expected enum\
    \ `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<isize>`\n\
    \           found reference `&isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = 0;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_index\
    \ = 1;\n        } else {\n            smallest_index += 1;\n        }\n    }\n\
    \    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1l4vin7o.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_idx =\
    \ lst.iter().position(|&x| x == smallest).unwrap();\n    if smallest_idx == lst.len()\
    \ {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_idx).min().unwrap();\n\
    \    smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_idx == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_idx).min().unwrap();\n\
    \    smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_idx == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_idx).min().unwrap();\n\
    \    smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_idx == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_idx).min().unwrap();\n\
    \    smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_idx == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_idx).min().unwrap();\n\
    \    smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_idx == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_idx).min().unwrap();\n\
    \    smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_idx == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_idx).min().unwrap();\n\
    \    smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_idx == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_idx).min().unwrap();\n\
    \    smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_idx == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_idx).min().unwrap();\n\
    \    smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxzlet89v.rs:6:58\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_idx = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \  |                                                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxzlet89v.rs:11:50\n   |\n11 |     smallest_idx\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n   |                  \
    \                                ^^^^^^^^ expected `isize`, found `&isize`\n \
    \  |\nhelp: consider dereferencing the borrow\n   |\n11 |     smallest_idx = lst.iter().position(|&x|\
    \ x == *smallest).unwrap();\n   |                                            \
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxzlet89v.rs:16:50\n\
    \   |\n16 |     smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \   |                                                  ^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |  \
    \   smallest_idx = lst.iter().position(|&x| x == *smallest).unwrap();\n   |  \
    \                                                +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxzlet89v.rs:21:50\n   |\n21 |     smallest_idx = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n   |                                             \
    \     ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n21 |     smallest_idx = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \   |                                                  +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxzlet89v.rs:26:50\n   |\n26 |     smallest_idx = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n   |                                             \
    \     ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n26 |     smallest_idx = lst.iter().position(|&x| x == *sm"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().nth(smallest_index).unwrap();\n    smallest_index\
    \ += 1;\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpljhvagw6.rs:6:59\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \  |                                                           ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpljhvagw6.rs:10:16\n\
    \   |\n5  |     let mut smallest = lst.iter().min();\n   |                   \
    \     ---------------- expected due to this value\n...\n10 |     smallest = lst.iter().nth(smallest_index).unwrap();\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n        \
    \   found reference `&isize`\nhelp: try wrapping the expression in `Some`\n  \
    \ |\n10 |     smallest = Some(lst.iter().nth(smallest_index).unwrap());\n   |\
    \                +++++                                       +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpljhvagw6.rs:12:10\n   |\n12 |     Some(smallest)\n\
    \   |          ^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<&isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().take_while(|(i, _)| i < lst.len() - 2).next()\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpni1ubxa2.rs:5:52\n  |\n5 |\
    \     lst.iter().enumerate().take_while(|(i, _)| i < lst.len() - 2).next()\n \
    \ |                                                    ^^^^^^^^^^^^^\n  |    \
    \                                                |\n  |                      \
    \                              expected `&usize`, found `usize`\n  |         \
    \                                           help: consider borrowing here: `&(lst.len()\
    \ - 2)`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpni1ubxa2.rs:5:5\n  |\n\
    4 | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                \
    \                      ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().enumerate().take_while(|(i, _)| i < lst.len() - 2).next()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_index = smallest_index + 1;\n    while smallest_index <\
    \ lst.len() {\n        if lst.iter().nth(smallest_index).unwrap() < smallest_value\
    \ {\n            smallest_value = lst.iter().nth(smallest_index).unwrap();\n \
    \           smallest_index = smallest_index + 1;\n        }\n        smallest_index\
    \ = smallest_index + 1;\n    }\n    Some(smallest_value)\n}\n\nfn main() {\n \
    \   let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn2_iswcx.rs:9:60\n  |\n9 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn2_iswcx.rs:22:10\n   |\n22 |     Some(smallest_value)\n\
    \   |          ^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n22 |     Some(*smallest_value)\n   |       \
    \   +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst[0];\n    let mut smallest_index = 0;\n    for &i in lst {\n        if i\
    \ < smallest {\n            smallest = i;\n            smallest_index = 1;\n \
    \       }\n        if i == smallest {\n            smallest_index += 1;\n    \
    \    }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9l2_8a9o.rs:10:9\n   |\n\
    10 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    smallest.next().unwrap()\n}\n\nfn main() {\n \
    \   let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjmcv25e5.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0599]: no method named `next` found for\
    \ enum `Option` in the current scope\n --> /tmp/tmpjmcv25e5.rs:9:14\n  |\n9 |\
    \     smallest.next().unwrap()\n  |              ^^^^ method not found in `Option<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest_value == smallest {\n        smallest_index += 1;\n    }\n  \
    \  smallest_index\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmvmv2g8j.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmvmv2g8j.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0277]: can't compare `&isize` with\
    \ `Option<&isize>`\n  --> /tmp/tmpmvmv2g8j.rs:14:23\n   |\n14 |     if smallest_value\
    \ == smallest {\n   |                       ^^ no implementation for `&isize ==\
    \ Option<&isize>`\n   |\n   = help: the trait `PartialEq<Option<&isize>>` is not\
    \ implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmvmv2g8j.rs:17:5\n\
    \   |\n4  | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n   |       \
    \                               ------------- expected `Option<isize>` because\
    \ of return type\n...\n17 |     smallest_index\n   |     ^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<isize>`\n\
    \              found type `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, v)| v < lst.iter().next().unwrap()).next()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_7204k0k.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, v)| v < lst.iter().next().unwrap()).next()\n\
    \  |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&isize`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp_7204k0k.rs:5:5\n  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize>\
    \ {\n  |                                      ------------- expected `Option<isize>`\
    \ because of return type\n5 |     lst.iter().enumerate().filter(|(_, v)| v < lst.iter().next().unwrap()).next()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index += 1;\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `Option<&isize>`\n --> /tmp/tmpkiqdo0kj.rs:6:56\n\
    \  |\n6 |     let mut smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n\
    \  |                                                        ^^ no implementation\
    \ for `&isize == Option<&isize>`\n  |\n  = help: the trait `PartialEq<Option<&isize>>`\
    \ is not implemented for `&isize`\n  = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n            f32\n            f64\n            i128\n\
    \            i16\n            i32\n            i64\n            i8\n         \
    \   isize\n          and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkiqdo0kj.rs:10:16\n\
    \   |\n5  |     let mut smallest = lst.iter().min();\n   |                   \
    \     ---------------- expected due to this value\n...\n10 |     smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n10 |     smallest = Some(lst.iter().skip(smallest_index).min().unwrap());\n\
    \   |                +++++                                              +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkiqdo0kj.rs:15:16\n   |\n5  |  \
    \   let mut smallest = lst.iter().min();\n   |                        ----------------\
    \ expected due to this value\n...\n15 |     smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n15 |     smallest = Some(lst.iter().skip(smallest_index).min().unwrap());\n\
    \   |                +++++                                              +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkiqdo0kj.rs:16:10\n   |\n16 |  \
    \   Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   ="
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5agscfwi.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_index = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5agscfwi.rs:11:52\n   |\n11 |     smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n   |                  \
    \                                  ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |     smallest_index\
    \ = lst.iter().position(|&x| x == *smallest).unwrap();\n   |                 \
    \                                   +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5agscfwi.rs:15:5\n   |\n4  | fn next_smallest(lst: Vec<isize>) -> Option<isize>\
    \ {\n   |                                      ------------- expected `Option<isize>`\
    \ because of return type\n...\n15 |     smallest\n   |     ^^^^^^^^ expected enum\
    \ `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<isize>`\n\
    \           found reference `&isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_idx = lst.iter().enumerate().find(|&(i,\
    \ _)| i < smallest).unwrap();\n    if smallest_idx == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().nth(smallest_idx + 1).unwrap();\n  \
    \  smallest_idx\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfudkg2w7.rs:6:70\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().enumerate().find(|&(i, _)| i < smallest).unwrap();\n\
    \  |                                                                      ^^^^^^^^\
    \ expected `usize`, found enum `Option`\n  |\n  = note: expected type `usize`\n\
    \             found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpfudkg2w7.rs:7:24\n  |\n7 |     if smallest_idx == lst.len() {\n\
    \  |                        ^^^^^^^^^ expected tuple, found `usize`\n  |\n  =\
    \ note: expected tuple `(usize, &isize)`\n              found type `usize`\n\n\
    error[E0369]: cannot add `{integer}` to `(usize, &isize)`\n  --> /tmp/tmpfudkg2w7.rs:10:44\n\
    \   |\n10 |     smallest = lst.iter().nth(smallest_idx + 1).unwrap();\n   |  \
    \                             ------------ ^ - {integer}\n   |               \
    \                |\n   |                               (usize, &isize)\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfudkg2w7.rs:10:16\n   |\n5  |     let mut smallest\
    \ = lst.iter().min();\n   |                        ---------------- expected due\
    \ to this value\n...\n10 |     smallest = lst.iter().nth(smallest_idx + 1).unwrap();\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n        \
    \   found reference `&isize`\nhelp: try wrapping the expression in `Some`\n  \
    \ |\n10 |     smallest = Some(lst.iter().nth(smallest_idx + 1).unwrap());\n  \
    \ |                +++++                                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfudkg2w7.rs:11:5\n   |\n4  | fn next_smallest(lst:\
    \ Vec<isize>) -> Option<isize> {\n   |                                      -------------\
    \ expected `Option<isize>` because of return type\n...\n11 |     smallest_idx\n\
    \   |     ^^^^^^^^^^^^ expected enum `Option`, found tuple\n   |\n   = note: expected\
    \ enum `Option<isize>`\n             found tuple `(usize, &isize)`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For mo"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    for index in 1..lst.len() {\n        if lst.iter().nth(index).unwrap() <\
    \ smallest_value {\n            smallest_value = lst.iter().nth(index).unwrap();\n\
    \            smallest_index = index;\n        }\n    }\n    Some(smallest_value)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfy3ekwkv.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfy3ekwkv.rs:17:10\n   |\n17 |     Some(smallest_value)\n\
    \   |          ^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     Some(*smallest_value)\n   |       \
    \   +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        smallest_index\
    \ = 1;\n    }\n    let mut second_smallest = lst.iter().skip(smallest_index).min();\n\
    \    if second_smallest == lst.len() {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2m0tuavi.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0277]: can't compare `&isize` with `Option<&isize>`\n\
    \ --> /tmp/tmp2m0tuavi.rs:9:56\n  |\n9 |     let mut smallest_index = lst.iter().position(|x|\
    \ x == smallest).unwrap();\n  |                                              \
    \          ^^ no implementation for `&isize == Option<&isize>`\n  |\n  = help:\
    \ the trait `PartialEq<Option<&isize>>` is not implemented for `&isize`\n  = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n            f32\n\
    \            f64\n            i128\n            i16\n            i32\n       \
    \     i64\n            i8\n            isize\n          and 6 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2m0tuavi.rs:14:27\n   |\n14 |     if second_smallest\
    \ == lst.len() {\n   |                           ^^^^^^^^^ expected enum `Option`,\
    \ found `usize`\n   |\n   = note: expected enum `Option<&isize>`\n           \
    \   found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2m0tuavi.rs:17:10\n\
    \   |\n17 |     Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = 0;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_index\
    \ = 1;\n        } else {\n            smallest_index += 1;\n        }\n    }\n\
    \    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1l4vin7o.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_idx =\
    \ lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_idx == lst.len()\
    \ {\n        return None;\n    }\n    let mut smallest_idx = smallest_idx + 1;\n\
    \    while smallest_idx < lst.len() {\n        if *lst[smallest_idx] < *smallest\
    \ {\n            smallest = *lst[smallest_idx];\n            smallest_idx = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n        }\n        smallest_idx += 1;\n    }\n  \
    \  Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpct3y91ms.rs:6:58\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_idx = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                          +\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpct3y91ms.rs:12:12\n   |\n\
    12 |         if *lst[smallest_idx] < *smallest {\n   |            ^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpct3y91ms.rs:13:24\n\
    \   |\n13 |             smallest = *lst[smallest_idx];\n   |                 \
    \       ^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpct3y91ms.rs:14:58\n\
    \   |\n14 |             smallest_idx = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \   |                                                          ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    14 |             smallest_idx = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \   |                                                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpct3y91ms.rs:18:10\n   |\n18 |     Some(smallest)\n\
    \   |          ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n18 |     Some(*smallest)\n   |          +\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut smallest =\
    \ lst[0];\n    let mut smallest_index = 0;\n    for &i in lst {\n        if i\
    \ < smallest {\n            smallest = i;\n            smallest_index = 1;\n \
    \       }\n        if i == smallest {\n            smallest_index += 1;\n    \
    \    }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpueu5ul30.rs:10:9\n   |\n\
    10 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    for &x in lst {\n        if x < smallest\
    \ {\n            smallest = x;\n        }\n    }\n    Some(smallest)\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqqi0neb3.rs:6:9\n  |\n6 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = 0;\n    for index in lst.iter().rev() {\n        if index == smallest {\n\
    \            smallest_index = index;\n        }\n    }\n    Some(smallest_index)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp88cmhhh.rs:9:30\n  |\n6 |\
    \     let mut smallest_index = 0;\n  |                              - expected\
    \ due to this value\n...\n9 |             smallest_index = index;\n  |       \
    \                       ^^^^^ expected integer, found `&isize`\n  |\nhelp: consider\
    \ dereferencing the borrow\n  |\n9 |             smallest_index = *index;\n  |\
    \                              +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_idx = 1;\n    for idx in 1..lst.len()\
    \ {\n        if smallest * smallest_idx > lst[idx] {\n            break;\n   \
    \     }\n        smallest_idx += 1;\n    }\n    Some(smallest * smallest_idx)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbfpwclur.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0369]: cannot multiply `Option<&isize>`\
    \ by `{integer}`\n  --> /tmp/tmpbfpwclur.rs:11:21\n   |\n11 |         if smallest\
    \ * smallest_idx > lst[idx] {\n   |            -------- ^ ------------ {integer}\n\
    \   |            |\n   |            Option<&isize>\n\nerror[E0369]: cannot multiply\
    \ `Option<&isize>` by `{integer}`\n  --> /tmp/tmpbfpwclur.rs:16:19\n   |\n16 |\
    \     Some(smallest * smallest_idx)\n   |          -------- ^ ------------ {integer}\n\
    \   |          |\n   |          Option<&isize>\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_idx = 1;\n    for idx in 0..lst.len()\
    \ {\n        if smallest == lst[idx] {\n            smallest_idx = idx;\n    \
    \    }\n    }\n    Some(smallest_idx)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpff5eurlh.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpff5eurlh.rs:11:24\n\
    \   |\n11 |         if smallest == lst[idx] {\n   |                        ^^^^^^^^\
    \ expected enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n\
    \              found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpff5eurlh.rs:15:10\n\
    \   |\n15 |     Some(smallest_idx)\n   |          ^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n15 |     Some(smallest_idx.try_into().unwrap())\n\
    \   |                      ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut second_smallest = lst.iter().skip(smallest_index).min();\n\
    \    if second_smallest == lst.len() {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5vbzi1wn.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5vbzi1wn.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5vbzi1wn.rs:14:27\n\
    \   |\n14 |     if second_smallest == lst.len() {\n   |                      \
    \     ^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note: expected\
    \ enum `Option<&isize>`\n              found type `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5vbzi1wn.rs:17:10\n   |\n17 |     Some(second_smallest)\n\
    \   |          ^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n \
    \  = note: expected type `isize`\n              found enum `Option<&isize>`\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().nth(smallest_index).unwrap();\n    smallest_index\
    \ += 1;\n    if smallest_index == lst.len() {\n        return None;\n    }\n \
    \   smallest = lst.iter().nth(smallest_index).unwrap();\n    Some(smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph75f7el3.rs:6:58\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmph75f7el3.rs:10:16\n   |\n5  |     let mut smallest = lst.iter().min();\n\
    \   |                        ---------------- expected due to this value\n...\n\
    10 |     smallest = lst.iter().nth(smallest_index).unwrap();\n   |           \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `&isize`\n\
    \   |\n   = note:   expected enum `Option<&isize>`\n           found reference\
    \ `&isize`\nhelp: try wrapping the expression in `Some`\n   |\n10 |     smallest\
    \ = Some(lst.iter().nth(smallest_index).unwrap());\n   |                +++++\
    \                                       +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmph75f7el3.rs:15:16\n   |\n5  |     let mut smallest = lst.iter().min();\n\
    \   |                        ---------------- expected due to this value\n...\n\
    15 |     smallest = lst.iter().nth(smallest_index).unwrap();\n   |           \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `&isize`\n\
    \   |\n   = note:   expected enum `Option<&isize>`\n           found reference\
    \ `&isize`\nhelp: try wrapping the expression in `Some`\n   |\n15 |     smallest\
    \ = Some(lst.iter().nth(smallest_index).unwrap());\n   |                +++++\
    \                                       +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmph75f7el3.rs:16:10\n   |\n16 |     Some(smallest)\n   |        \
    \  ^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected type\
    \ `isize`\n              found enum `Option<&isize>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    smallest.next().unwrap()\n}\n\nfn main() {\n \
    \   let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjmcv25e5.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0599]: no method named `next` found for\
    \ enum `Option` in the current scope\n --> /tmp/tmpjmcv25e5.rs:9:14\n  |\n9 |\
    \     smallest.next().unwrap()\n  |              ^^^^ method not found in `Option<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_idx = 1;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_idx\
    \ = i;\n        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnep97igv.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_idx = 1;\n    let mut smallest_val\
    \ = smallest;\n    for &x in lst {\n        if x < smallest {\n            smallest\
    \ = x;\n            smallest_idx = 1;\n            smallest_val = smallest;\n\
    \        } else {\n            smallest_idx += 1;\n        }\n    }\n    Some(smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjzk66_q.rs:8:9\n  |\n8 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n       \
    \ smallest_index = 0;\n    }\n    Some(lst[smallest_index + 1])\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4ck6jwn4.rs:9:60\n  |\n9 |\
    \     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst[0];\n    let mut smallest_index = 0;\n\n    for &i in lst {\n        if\
    \ i < smallest {\n            smallest = i;\n            smallest_index = 1;\n\
    \        }\n        if i == smallest {\n            smallest_index += 1;\n   \
    \     }\n    }\n\n    Some(smallest * smallest_index)\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfekfwcjm.rs:12:9\n   |\n\
    12 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    if smallest == lst.len()\
    \ {\n        return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_index = smallest_index + 1;\n    while smallest_index !=\
    \ lst.len() {\n        if lst.iter().nth(smallest_index).unwrap() < smallest_value\
    \ {\n            smallest_value = lst.iter().nth(smallest_index).unwrap();\n \
    \           smallest_index = smallest_index + 1;\n        }\n        smallest_index\
    \ = smallest_index + 1;\n    }\n    Some(smallest_value)\n}\n\nfn main() {\n \
    \   let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpthxfxsm6.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: can't compare `&isize` with `usize`\n --> /tmp/tmpthxfxsm6.rs:6:17\n\
    \  |\n6 |     if smallest == lst.len() {\n  |                 ^^ no implementation\
    \ for `&isize == usize`\n  |\n  = help: the trait `PartialEq<usize>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpthxfxsm6.rs:9:60\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpthxfxsm6.rs:22:10\n   |\n22 |     Some(smallest_value)\n\
    \   |          ^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n22 |     Some(*smallest_value)\n   |       \
    \   +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = 1;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_index\
    \ = 1;\n        } else {\n            smallest_index += 1;\n        }\n    }\n\
    \    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2kt9nu54.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest_value == smallest {\n        smallest_index += 1;\n    }\n  \
    \  Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp78y2x6f4.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp78y2x6f4.rs:14:10\n   |\n14 |     Some(smallest)\n\
    \   |          ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |     Some(*smallest)\n   |          +\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, x)| x < lst.len() - 2).next()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8jrmtw7w.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, x)| x < lst.len() - 2).next()\n  |  \
    \                                              ^^^^^^^^^^^^^ expected `&&isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8jrmtw7w.rs:5:5\n\
    \  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |          \
    \                            ------------- expected `Option<isize>` because of\
    \ return type\n5 |     lst.iter().enumerate().filter(|(_, x)| x < lst.len() -\
    \ 2).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_idx = lst.iter().position(|&x|\
    \ x < smallest).unwrap();\n    if smallest_idx == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().nth(smallest_idx + 1).unwrap();\n  \
    \  smallest_idx\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa2oluft2.rs:6:57\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \  |                                                         ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa2oluft2.rs:10:16\n\
    \   |\n5  |     let mut smallest = lst.iter().min();\n   |                   \
    \     ---------------- expected due to this value\n...\n10 |     smallest = lst.iter().nth(smallest_idx\
    \ + 1).unwrap();\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n10 |     smallest = Some(lst.iter().nth(smallest_idx + 1).unwrap());\n\
    \   |                +++++                                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa2oluft2.rs:11:5\n   |\n4  | fn next_smallest(lst:\
    \ Vec<isize>) -> Option<isize> {\n   |                                      -------------\
    \ expected `Option<isize>` because of return type\n...\n11 |     smallest_idx\n\
    \   |     ^^^^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note:\
    \ expected enum `Option<isize>`\n              found type `usize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index += 1;\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu2iaxra9.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu2iaxra9.rs:12:10\n   |\n12 |     Some(smallest)\n\
    \   |          ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n12 |     Some(*smallest)\n   |          +\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = lst.iter().enumerate().find(|&(i,\
    \ _)| i < smallest).unwrap();\n    for i in lst.iter().skip(smallest_index).take(2)\
    \ {\n        if *i < smallest {\n            smallest = *i;\n            smallest_index\
    \ = i;\n        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpljnq7nj6.rs:6:72\n  |\n6 |\
    \     let mut smallest_index = lst.iter().enumerate().find(|&(i, _)| i < smallest).unwrap();\n\
    \  |                                                                        ^^^^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n6 |     let mut smallest_index\
    \ = lst.iter().enumerate().find(|&(i, _)| i < smallest.try_into().unwrap()).unwrap();\n\
    \  |                                                                         \
    \       ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmpljnq7nj6.rs:7:30\n\
    \  |\n7 |     for i in lst.iter().skip(smallest_index).take(2) {\n  |        \
    \                      ^^^^^^^^^^^^^^ expected `usize`, found tuple\n  |\n  =\
    \ note: expected type `usize`\n            found tuple `(usize, &isize)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpljnq7nj6.rs:10:30\n   |\n6  |     let mut smallest_index\
    \ = lst.iter().enumerate().find(|&(i, _)| i < smallest).unwrap();\n   |      \
    \                        ------------------------------------------------------------\
    \ expected due to this value\n...\n10 |             smallest_index = i;\n   |\
    \                              ^ expected tuple, found `&isize`\n   |\n   = note:\
    \  expected tuple `(usize, &isize)`\n           found reference `&isize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().skip(smallest_index).min();\n    smallest_index\
    \ = lst.iter().position(|x| x < smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min();\n\
    \    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvvs5l6a0.rs:6:58\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpvvs5l6a0.rs:11:50\n   |\n11 |     smallest_index = lst.iter().position(|x|\
    \ x < smallest).unwrap();\n   |                                              \
    \    ^^^^^^^^ expected `&isize`, found enum `Option`\n   |\n   = note: expected\
    \ reference `&isize`\n                   found enum `Option<&isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvvs5l6a0.rs:16:10\n   |\n16 |     Some(smallest)\n\
    \   |          ^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<&isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    if smallest == lst.len()\
    \ {\n        return None;\n    }\n    let mut smallest_index = smallest;\n   \
    \ let mut smallest_value = lst.iter().skip(smallest).min().unwrap();\n    while\
    \ smallest_index != 0 {\n        if lst.iter().skip(smallest_index).min().unwrap()\
    \ < smallest_value {\n            smallest_value = lst.iter().skip(smallest_index).min().unwrap();\n\
    \            smallest_index = smallest_index;\n        } else {\n            smallest_index\
    \ -= 1;\n        }\n    }\n    Some(smallest_value)\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn_xepgeq.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: can't compare `&isize` with `usize`\n --> /tmp/tmpn_xepgeq.rs:6:17\n\
    \  |\n6 |     if smallest == lst.len() {\n  |                 ^^ no implementation\
    \ for `&isize == usize`\n  |\n  = help: the trait `PartialEq<usize>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn_xepgeq.rs:10:46\n\
    \   |\n10 |     let mut smallest_value = lst.iter().skip(smallest).min().unwrap();\n\
    \   |                                              ^^^^^^^^ expected `usize`,\
    \ found `&isize`\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  -->\
    \ /tmp/tmpn_xepgeq.rs:11:26\n   |\n11 |     while smallest_index != 0 {\n   |\
    \                          ^^ no implementation for `&isize == {integer}`\n  \
    \ |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn_xepgeq.rs:12:28\n\
    \   |\n12 |         if lst.iter().skip(smallest_index).min().unwrap() < smallest_value\
    \ {\n   |                            ^^^^^^^^^^^^^^ expected `usize`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpn_xepgeq.rs:13:46\n   |\n13 |\
    \             smallest_value = lst.iter().skip(smallest_index).min().unwrap();\n\
    \   |                                              ^^^^^^^^^^^^^^ expected `usize`,\
    \ found `&isize`\n\nerror[E0368]: binary assignment operation `-=` cannot be applied\
    \ to type `&isize`\n  --> /tmp/tmpn_xepgeq.rs:16:13\n   |\n16 |             smallest_index\
    \ -= 1;\n   |   "
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = lst.iter().skip(1).count();\n\
    \    for i in lst.iter().skip(1).rev() {\n        if *i < smallest {\n       \
    \     smallest = *i;\n            smallest_index = i;\n        }\n    }\n    Some(smallest_index)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbuy35xw7.rs:10:30\n   |\n\
    6  |     let mut smallest_index = lst.iter().skip(1).count();\n   |          \
    \                    -------------------------- expected due to this value\n...\n\
    10 |             smallest_index = i;\n   |                              ^ expected\
    \ `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbuy35xw7.rs:13:10\n\
    \   |\n13 |     Some(smallest_index)\n   |          ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     Some(smallest_index.try_into().unwrap())\n\
    \   |                        ++++++++++++++++++++\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).min()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6xpl0sd.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).min()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6xpl0sd.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).min()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6xpl0sd.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).min()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6xpl0sd.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    for el in lst {\n        if el < smallest\
    \ {\n            smallest = el;\n        }\n    }\n    Some(smallest)\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpac0zkw0t.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n\n    let mut min_value\
    \ = lst[0];\n    let mut min_idx = 1;\n\n    for i in 1..lst.len() {\n       \
    \ if lst[i] < min_value {\n            min_value = lst[i];\n            min_idx\
    \ = i;\n        }\n    }\n\n    Some(min_idx)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphckp24kc.rs:19:10\n   |\n\
    19 |     Some(min_idx)\n   |          ^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n19 |     Some(min_idx.try_into().unwrap())\n   |  \
    \               ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut smallest =\
    \ lst[0];\n    let mut second_smallest = smallest;\n    for &i in lst {\n    \
    \    if i < smallest {\n            second_smallest = smallest;\n            smallest\
    \ = i;\n        }\n        if i == smallest {\n            second_smallest = i;\n\
    \        }\n    }\n    Some(second_smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1k3s5re1.rs:10:9\n   |\n\
    10 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = smallest;\n    let mut\
    \ smallest_value = lst.iter().nth(smallest).unwrap();\n    for index in lst.iter().skip(smallest)\
    \ {\n        if lst.iter().nth(index).unwrap() < smallest_value {\n          \
    \  smallest_value = lst.iter().nth(index).unwrap();\n            smallest_index\
    \ = index;\n        }\n    }\n    Some(smallest_value)\n}\n\nfn main() {\n   \
    \ let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]),\
    \ Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyqa64lyi.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyqa64lyi.rs:10:45\n\
    \   |\n10 |     let mut smallest_value = lst.iter().nth(smallest).unwrap();\n\
    \   |                                             ^^^^^^^^ expected `usize`, found\
    \ enum `Option`\n   |\n   = note: expected type `usize`\n              found enum\
    \ `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyqa64lyi.rs:11:34\n\
    \   |\n11 |     for index in lst.iter().skip(smallest) {\n   |               \
    \                   ^^^^^^^^ expected `usize`, found enum `Option`\n   |\n   =\
    \ note: expected type `usize`\n              found enum `Option<&isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyqa64lyi.rs:12:27\n   |\n12 |         if lst.iter().nth(index).unwrap()\
    \ < smallest_value {\n   |                           ^^^^^ expected `usize`, found\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyqa64lyi.rs:13:45\n\
    \   |\n13 |             smallest_value = lst.iter().nth(index).unwrap();\n   |\
    \                                             ^^^^^ expected `usize`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyqa64lyi.rs:14:30\n   |\n9  |\
    \     let mut smallest_index = smallest;\n   |                              --------\
    \ expected due to this value\n...\n14 |             smallest_index = index;\n\
    \   |                              ^^^^^ expected enum `Option`, found `&isize`\n\
    \   |\n   = note:   expected enum `Option<&isize>`\n           found reference\
    \ `&isize`\nhelp: try wrapping the expression in `Some`\n   |\n14 |          \
    \   smallest_index = Some(index);\n   |                              +++++   \
    \  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyqa64lyi.rs:17:10\n   |\n\
    17 |     Some(smallest_value)\n   |          ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |  \
    \   Some(*smallest_value"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(i, e)| e < lst.iter().skip(i + 1).next().unwrap()).next()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3rskxh5k.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(i, e)| e < lst.iter().skip(i + 1).next().unwrap()).next()\n\
    \  |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&isize`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp3rskxh5k.rs:5:5\n  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize>\
    \ {\n  |                                      ------------- expected `Option<isize>`\
    \ because of return type\n5 |     lst.iter().enumerate().filter(|(i, e)| e < lst.iter().skip(i\
    \ + 1).next().unwrap()).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut second_smallest = lst.iter().skip(smallest_index +\
    \ 1).min();\n    if second_smallest == smallest {\n        return None;\n    }\n\
    \    Some(second_smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0buqotvi.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0buqotvi.rs:14:10\n\
    \   |\n14 |     Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n       \
    \ return Some(smallest);\n    }\n    let mut second_smallest = lst.iter().skip(smallest_index\
    \ + 1).min().unwrap();\n    if second_smallest == smallest {\n        return Some(smallest);\n\
    \    }\n    Some(second_smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqsmaslxv.rs:11:21\n   |\n\
    11 |         return Some(smallest);\n   |                     ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    11 |         return Some(*smallest);\n   |                     +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqsmaslxv.rs:15:21\n   |\n15 |         return\
    \ Some(smallest);\n   |                     ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |         return Some(*smallest);\n\
    \   |                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqsmaslxv.rs:17:10\n\
    \   |\n17 |     Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    17 |     Some(*second_smallest)\n   |          +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().cloned().enumerate().find(|(i, elem)| elem < lst.iter().skip(i).min().unwrap()).map(|(_,\
    \ elem)| elem)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaxpjmvb9.rs:5:77\n  |\n5 |\
    \     lst.iter().cloned().enumerate().find(|(i, elem)| elem < lst.iter().skip(i).min().unwrap()).map(|(_,\
    \ elem)| elem)\n  |                                                          \
    \                   ^ expected `usize`, found `&usize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n5 |     lst.iter().cloned().enumerate().find(|(i, elem)| elem\
    \ < lst.iter().skip(*i).min().unwrap()).map(|(_, elem)| elem)\n  |           \
    \                                                                  +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, v)| v < lst.iter().next().unwrap()).next()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_7204k0k.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, v)| v < lst.iter().next().unwrap()).next()\n\
    \  |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&isize`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp_7204k0k.rs:5:5\n  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize>\
    \ {\n  |                                      ------------- expected `Option<isize>`\
    \ because of return type\n5 |     lst.iter().enumerate().filter(|(_, v)| v < lst.iter().next().unwrap()).next()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n\n    for i in lst.iter().skip(smallest_index).take(2)\
    \ {\n        if *i < smallest {\n            smallest = *i;\n            smallest_index\
    \ = i;\n        }\n    }\n\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpegjz5y6h.rs:10:60\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \   |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \   |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpegjz5y6h.rs:13:17\n   |\n13 |         if *i\
    \ < smallest {\n   |                 ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |         if *i < *smallest\
    \ {\n   |                 +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpegjz5y6h.rs:14:24\n\
    \   |\n9  |     let mut smallest = lst.iter().min().unwrap();\n   |          \
    \              ------------------------- expected due to this value\n...\n14 |\
    \             smallest = *i;\n   |                        ^^\n   |           \
    \             |\n   |                        expected `&isize`, found `isize`\n\
    \   |                        help: consider borrowing here: `&*i`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpegjz5y6h.rs:15:30\n   |\n10 |     let mut smallest_index\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n   |                  \
    \            ------------------------------------------------ expected due to\
    \ this value\n...\n15 |             smallest_index = i;\n   |                \
    \              ^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpegjz5y6h.rs:19:10\n   |\n19 |     Some(smallest)\n   |\
    \          ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n19 |     Some(*smallest)\n   |          +\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, i)| i < lst.len() - 2).next()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuwcl5eyv.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, i)| i < lst.len() - 2).next()\n  |  \
    \                                              ^^^^^^^^^^^^^ expected `&&isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpuwcl5eyv.rs:5:5\n\
    \  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |          \
    \                            ------------- expected `Option<isize>` because of\
    \ return type\n5 |     lst.iter().enumerate().filter(|(_, i)| i < lst.len() -\
    \ 2).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).next()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwkmu9j4w.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = smallest;\n    let mut\
    \ smallest_value = lst.iter().nth(smallest).unwrap();\n    for i in lst.iter().skip(smallest\
    \ + 1) {\n        if smallest_value < i {\n            smallest_value = i;\n \
    \           smallest_index = i;\n        }\n    }\n    Some(smallest_index)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzzu1y529.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzzu1y529.rs:10:45\n\
    \   |\n10 |     let mut smallest_value = lst.iter().nth(smallest).unwrap();\n\
    \   |                                             ^^^^^^^^ expected `usize`, found\
    \ enum `Option`\n   |\n   = note: expected type `usize`\n              found enum\
    \ `Option<&isize>`\n\nerror[E0369]: cannot add `{integer}` to `Option<&isize>`\n\
    \  --> /tmp/tmpzzu1y529.rs:11:39\n   |\n11 |     for i in lst.iter().skip(smallest\
    \ + 1) {\n   |                              -------- ^ - {integer}\n   |     \
    \                         |\n   |                              Option<&isize>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzzu1y529.rs:14:30\n   |\n9  |\
    \     let mut smallest_index = smallest;\n   |                              --------\
    \ expected due to this value\n...\n14 |             smallest_index = i;\n   |\
    \                              ^ expected enum `Option`, found `&isize`\n   |\n\
    \   = note:   expected enum `Option<&isize>`\n           found reference `&isize`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |             smallest_index\
    \ = Some(i);\n   |                              +++++ +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzzu1y529.rs:17:10\n   |\n17 |     Some(smallest_index)\n\
    \   |          ^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n  \
    \ = note: expected type `isize`\n              found enum `Option<&isize>`\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    smallest.next().unwrap()\n}\n\nfn main() {\n \
    \   let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjmcv25e5.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0599]: no method named `next` found for\
    \ enum `Option` in the current scope\n --> /tmp/tmpjmcv25e5.rs:9:14\n  |\n9 |\
    \     smallest.next().unwrap()\n  |              ^^^^ method not found in `Option<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_idx = 1;\n    for idx in 1..lst.len()\
    \ {\n        if smallest * idx > lst.len() {\n            break;\n        }\n\
    \        if smallest * idx < lst.len() {\n            if lst.len() - smallest\
    \ * idx > smallest_idx {\n                smallest_idx = idx;\n            }\n\
    \        }\n    }\n    Some(smallest * smallest_idx)\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjz_s8m3o.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0369]: cannot multiply `Option<&isize>`\
    \ by `usize`\n  --> /tmp/tmpjz_s8m3o.rs:11:21\n   |\n11 |         if smallest\
    \ * idx > lst.len() {\n   |            -------- ^ --- usize\n   |            |\n\
    \   |            Option<&isize>\n\nerror[E0369]: cannot multiply `Option<&isize>`\
    \ by `usize`\n  --> /tmp/tmpjz_s8m3o.rs:14:21\n   |\n14 |         if smallest\
    \ * idx < lst.len() {\n   |            -------- ^ --- usize\n   |            |\n\
    \   |            Option<&isize>\n\nerror[E0369]: cannot multiply `Option<&isize>`\
    \ by `usize`\n  --> /tmp/tmpjz_s8m3o.rs:15:37\n   |\n15 |             if lst.len()\
    \ - smallest * idx > smallest_idx {\n   |                            --------\
    \ ^ --- usize\n   |                            |\n   |                       \
    \     Option<&isize>\n\nerror[E0369]: cannot multiply `Option<&isize>` by `usize`\n\
    \  --> /tmp/tmpjz_s8m3o.rs:20:19\n   |\n20 |     Some(smallest * smallest_idx)\n\
    \   |          -------- ^ ------------ usize\n   |          |\n   |          Option<&isize>\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index += 1;\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk43y1xo6.rs:6:58\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpk43y1xo6.rs:10:16\n   |\n5  |     let mut smallest = lst.iter().min();\n\
    \   |                        ---------------- expected due to this value\n...\n\
    10 |     smallest = lst.iter().skip(smallest_index).min().unwrap();\n   |    \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n        \
    \   found reference `&isize`\nhelp: try wrapping the expression in `Some`\n  \
    \ |\n10 |     smallest = Some(lst.iter().skip(smallest_index).min().unwrap());\n\
    \   |                +++++                                              +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpk43y1xo6.rs:12:10\n   |\n12 |  \
    \   Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().find(|(_, x)| x < lst.iter().skip(1).next().unwrap()).map(|(_,\
    \ x)| x)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpllx7acg2.rs:5:46\n  |\n5 |\
    \     lst.iter().enumerate().find(|(_, x)| x < lst.iter().skip(1).next().unwrap()).map(|(_,\
    \ x)| x)\n  |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&isize`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpllx7acg2.rs:5:5\n  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize>\
    \ {\n  |                                      ------------- expected `Option<isize>`\
    \ because of return type\n5 |     lst.iter().enumerate().find(|(_, x)| x < lst.iter().skip(1).next().unwrap()).map(|(_,\
    \ x)| x)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).min()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6xpl0sd.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    smallest.next().unwrap()\n}\n\nfn main() {\n \
    \   let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjmcv25e5.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0599]: no method named `next` found for\
    \ enum `Option` in the current scope\n --> /tmp/tmpjmcv25e5.rs:9:14\n  |\n9 |\
    \     smallest.next().unwrap()\n  |              ^^^^ method not found in `Option<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|&x| x\
    \ < smallest).unwrap();\n\n    if smallest_index == lst.len() - 1 {\n        smallest_index\
    \ = 0;\n    }\n\n    let mut second_smallest = lst.iter().skip(smallest_index).min();\n\
    \n    if second_smallest == smallest {\n        return None;\n    }\n\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv6qr6lur.rs:10:59\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \   |                                                           ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpv6qr6lur.rs:22:10\n   |\n22 |     Some(second_smallest)\n   |      \
    \    ^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst[0];\n    let mut smallest_index = 0;\n    for &i in lst {\n        if i\
    \ < smallest {\n            smallest = i;\n            smallest_index = 1;\n \
    \       }\n        if i == smallest {\n            smallest_index += 1;\n    \
    \    }\n    }\n    Some(smallest * smallest_index)\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcu1ks0bk.rs:10:9\n   |\n\
    10 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut second_smallest = lst.iter().skip(1).min().unwrap();\n\
    \n    if smallest < second_smallest {\n        smallest = second_smallest;\n \
    \   }\n\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy2qrrnay.rs:16:10\n   |\n\
    16 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n16 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = 1;\n    let mut\
    \ smallest_value = smallest;\n    for &i in lst {\n        if i < smallest {\n\
    \            smallest_value = i;\n            smallest_index = i;\n        }\n\
    \    }\n    Some(smallest_value)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpne891zzj.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_idx = 1;\n    let mut smallest_val\
    \ = lst.iter().nth(smallest_idx).unwrap();\n    for idx in 1..smallest_idx {\n\
    \        if smallest_val < lst.iter().nth(idx).unwrap() {\n            smallest_val\
    \ = lst.iter().nth(idx).unwrap();\n            smallest_idx = idx;\n        }\n\
    \    }\n    Some(smallest_val)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5h0k30am.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5h0k30am.rs:17:10\n\
    \   |\n17 |     Some(smallest_val)\n   |          ^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |  \
    \   Some(*smallest_val)\n   |          +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut second_smallest = lst.iter().skip(1).min();\n\
    \    if smallest == second_smallest {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppqhj7eby.rs:10:10\n   |\n\
    10 |     Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_idx = lst.iter().enumerate().find(|(_,\
    \ elem)| elem < smallest).unwrap();\n    if smallest_idx == lst.len() {\n    \
    \    return None;\n    }\n    smallest = lst.iter().nth(smallest_idx + 1).unwrap();\n\
    \    smallest_idx\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3ern4job.rs:6:75\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().enumerate().find(|(_, elem)| elem < smallest).unwrap();\n\
    \  |                                                                         \
    \  ^^^^^^^^ expected `&&isize`, found enum `Option`\n  |\n  = note: expected reference\
    \ `&&isize`\n                  found enum `Option<&isize>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp3ern4job.rs:7:24\n  |\n7 |     if smallest_idx == lst.len()\
    \ {\n  |                        ^^^^^^^^^ expected tuple, found `usize`\n  |\n\
    \  = note: expected tuple `(usize, &isize)`\n              found type `usize`\n\
    \nerror[E0369]: cannot add `{integer}` to `(usize, &isize)`\n  --> /tmp/tmp3ern4job.rs:10:44\n\
    \   |\n10 |     smallest = lst.iter().nth(smallest_idx + 1).unwrap();\n   |  \
    \                             ------------ ^ - {integer}\n   |               \
    \                |\n   |                               (usize, &isize)\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3ern4job.rs:10:16\n   |\n5  |     let mut smallest\
    \ = lst.iter().min();\n   |                        ---------------- expected due\
    \ to this value\n...\n10 |     smallest = lst.iter().nth(smallest_idx + 1).unwrap();\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n        \
    \   found reference `&isize`\nhelp: try wrapping the expression in `Some`\n  \
    \ |\n10 |     smallest = Some(lst.iter().nth(smallest_idx + 1).unwrap());\n  \
    \ |                +++++                                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3ern4job.rs:11:5\n   |\n4  | fn next_smallest(lst:\
    \ Vec<isize>) -> Option<isize> {\n   |                                      -------------\
    \ expected `Option<isize>` because of return type\n...\n11 |     smallest_idx\n\
    \   |     ^^^^^^^^^^^^ expected enum `Option`, found tuple\n   |\n   = note: expected\
    \ enum `Option<isize>`\n             found tuple `(usize, &isize)`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanatio"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_idx =\
    \ lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_idx == lst.len()\
    \ {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_idx).min().unwrap();\n\
    \    smallest_idx = lst.iter().position(|x| *x == smallest).unwrap();\n    if\
    \ smallest_idx == lst.len() {\n        return None;\n    }\n    smallest\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppgk04lyw.rs:6:58\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_idx = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppgk04lyw.rs:11:50\n   |\n11 |     smallest_idx\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n   |                  \
    \                                ^^^^^^^^ expected `isize`, found `&isize`\n \
    \  |\nhelp: consider dereferencing the borrow\n   |\n11 |     smallest_idx = lst.iter().position(|x|\
    \ *x == *smallest).unwrap();\n   |                                           \
    \       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppgk04lyw.rs:15:5\n\
    \   |\n4  | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n   |       \
    \                               ------------- expected `Option<isize>` because\
    \ of return type\n...\n15 |     smallest\n   |     ^^^^^^^^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<isize>`\n         \
    \  found reference `&isize`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_value = lst.iter()[smallest_index];\n   \
    \ let mut second_smallest = lst.iter().skip(smallest_index).min();\n    if second_smallest\
    \ == lst.len() {\n        return None;\n    }\n    if second_smallest < smallest_value\
    \ {\n        smallest_value = second_smallest;\n        smallest_index = lst.iter().position(|x|\
    \ *x == smallest_value).unwrap();\n    }\n    Some(smallest_value)\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpru66y9d6.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpru66y9d6.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0608]: cannot index into a value\
    \ of type `std::slice::Iter<'_, isize>`\n  --> /tmp/tmpru66y9d6.rs:13:30\n   |\n\
    13 |     let mut smallest_value = lst.iter()[smallest_index];\n   |          \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpru66y9d6.rs:15:27\n   |\n15 |     if second_smallest == lst.len()\
    \ {\n   |                           ^^^^^^^^^ expected enum `Option`, found `usize`\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpru66y9d6.rs:20:56\n   |\n20 |\
    \         smallest_index = lst.iter().position(|x| *x == smallest_value).unwrap();\n\
    \   |                                                        ^^^^^^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpru66y9d6.rs:22:10\n   |\n22 |     Some(smallest_value)\n   |       \
    \   ^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<&isize>`\n\nerror: aborting due\
    \ to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0608.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().nth(smallest_index).unwrap();\n    smallest_index\
    \ += 1;\n    if smallest_index == lst.len() {\n        return None;\n    }\n \
    \   smallest = lst.iter().nth(smallest_index).unwrap();\n    Some(smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw44cex11.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw44cex11.rs:10:16\n\
    \   |\n5  |     let mut smallest = lst.iter().min();\n   |                   \
    \     ---------------- expected due to this value\n...\n10 |     smallest = lst.iter().nth(smallest_index).unwrap();\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n        \
    \   found reference `&isize`\nhelp: try wrapping the expression in `Some`\n  \
    \ |\n10 |     smallest = Some(lst.iter().nth(smallest_index).unwrap());\n   |\
    \                +++++                                       +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw44cex11.rs:15:16\n   |\n5  |     let mut smallest\
    \ = lst.iter().min();\n   |                        ---------------- expected due\
    \ to this value\n...\n15 |     smallest = lst.iter().nth(smallest_index).unwrap();\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n        \
    \   found reference `&isize`\nhelp: try wrapping the expression in `Some`\n  \
    \ |\n15 |     smallest = Some(lst.iter().nth(smallest_index).unwrap());\n   |\
    \                +++++                                       +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw44cex11.rs:16:10\n   |\n16 |     Some(smallest)\n\
    \   |          ^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<&isize>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n\n    if smallest_index == lst.len() - 1 {\n    \
    \    smallest_index = 0;\n    }\n\n    Some(lst[smallest_index + 1])\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp21ee1mpq.rs:10:60\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \   |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \   |                                                            +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst.iter().min();\n\
    \    let mut second_smallest = lst.iter().skip(1).min();\n    if smallest == second_smallest\
    \ {\n        return None;\n    }\n    Some(second_smallest)\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfao35a5i.rs:13:10\n   |\n\
    13 |     Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \    if smallest_index == 0 {\n        return None;\n    }\n    let mut second_smallest\
    \ = lst.iter().skip(smallest_index).min().unwrap();\n    if second_smallest ==\
    \ smallest {\n        return None;\n    }\n    Some(second_smallest)\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7mi9ayu7.rs:9:60\n  |\n9 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7mi9ayu7.rs:17:10\n   |\n17 |     Some(second_smallest)\n\
    \   |          ^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     Some(*second_smallest)\n   |      \
    \    +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n       \
    \ return Some(smallest);\n    }\n    let mut second_smallest = lst.iter().skip(smallest_index\
    \ + 1).min().unwrap();\n    if second_smallest == smallest {\n        return Some(smallest);\n\
    \    }\n    if second_smallest < smallest {\n        smallest = second_smallest;\n\
    \        smallest_index += 1;\n    }\n    Some(smallest)\n}\n\nfn main() {\n \
    \   let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpixdtlvhl.rs:11:21\n   |\n\
    11 |         return Some(smallest);\n   |                     ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    11 |         return Some(*smallest);\n   |                     +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpixdtlvhl.rs:15:21\n   |\n15 |         return\
    \ Some(smallest);\n   |                     ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |         return Some(*smallest);\n\
    \   |                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpixdtlvhl.rs:21:10\n\
    \   |\n21 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).min()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6xpl0sd.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut second_smallest = lst.iter().skip(1).min();\n\
    \    if smallest == second_smallest {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppqhj7eby.rs:10:10\n   |\n\
    10 |     Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut second_smallest = lst.iter().skip(1).min().unwrap();\n\
    \n    if smallest == second_smallest {\n        return Some(smallest);\n    }\n\
    \n    if smallest < second_smallest {\n        smallest = second_smallest;\n \
    \   }\n\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqgvsc0lz.rs:13:21\n   |\n\
    13 |         return Some(smallest);\n   |                     ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    13 |         return Some(*smallest);\n   |                     +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqgvsc0lz.rs:20:10\n   |\n20 |     Some(smallest)\n\
    \   |          ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n20 |     Some(*smallest)\n   |          +\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphi_cuzbn.rs:5:46\n  |\n5 |\
    \     lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x)\n  |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&isize`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmphi_cuzbn.rs:5:5\n  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize>\
    \ {\n  |                                      ------------- expected `Option<isize>`\
    \ because of return type\n5 |     lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x).ok()\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz3pazpjv.rs:5:46\n  |\n5 |\
    \     lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x).ok()\n  |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&isize`\n\nerror[E0599]: no method named `ok` found\
    \ for enum `Option` in the current scope\n --> /tmp/tmpz3pazpjv.rs:5:90\n  |\n\
    5 |     lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x).ok()\n  |                                                           \
    \                               ^^ help: there is an associated function with\
    \ a similar name: `or`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().cloned().enumerate().find(|(_, elem)| elem < lst.iter().next().unwrap()).map(|(_,\
    \ elem)| elem)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpph684bto.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().cloned().enumerate().find(|(_, x)| x < lst.len() - 2).map(|(_,\
    \ x)| x).ok()\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdhyhyztz.rs:5:55\n  |\n5 |\
    \     lst.iter().cloned().enumerate().find(|(_, x)| x < lst.len() - 2).map(|(_,\
    \ x)| x).ok()\n  |                                                       ^^^^^^^^^^^^^\
    \ expected `&isize`, found `usize`\n\nerror[E0599]: no method named `ok` found\
    \ for enum `Option` in the current scope\n --> /tmp/tmpdhyhyztz.rs:5:86\n  |\n\
    5 |     lst.iter().cloned().enumerate().find(|(_, x)| x < lst.len() - 2).map(|(_,\
    \ x)| x).ok()\n  |                                                           \
    \                           ^^ help: there is an associated function with a similar\
    \ name: `or`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_index = smallest_index + 1;\n    while smallest_index <\
    \ lst.len() {\n        if lst.iter().nth(smallest_index).unwrap() < smallest_value\
    \ {\n            smallest_value = lst.iter().nth(smallest_index).unwrap();\n \
    \           smallest_index = smallest_index + 1;\n        }\n        smallest_index\
    \ = smallest_index + 1;\n    }\n    Some(smallest_value)\n}\n\nfn main() {\n \
    \   let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3ffy5mov.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3ffy5mov.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ffy5mov.rs:22:10\n\
    \   |\n22 |     Some(smallest_value)\n   |          ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |  \
    \   Some(*smallest_value)\n   |          +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut second_smallest = lst.iter().nth(smallest_index - 1).unwrap();\n\
    \    if second_smallest < smallest_value {\n        smallest_value = second_smallest;\n\
    \        smallest_index = smallest_index - 1;\n    }\n    Some(smallest_value)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp33by228r.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp33by228r.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp33by228r.rs:19:10\n\
    \   |\n19 |     Some(smallest_value)\n   |          ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |  \
    \   Some(*smallest_value)\n   |          +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut second_smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    let mut second_smallest_index = lst.iter().position(|&x| x == second_smallest).unwrap();\n\
    \    if second_smallest_index == 0 {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpswc171ry.rs:9:60\n  |\n9 |\
    \     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpswc171ry.rs:14:67\n   |\n14 |     let mut second_smallest_index\
    \ = lst.iter().position(|&x| x == second_smallest).unwrap();\n   |           \
    \                                                        ^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    14 |     let mut second_smallest_index = lst.iter().position(|&x| x == *second_smallest).unwrap();\n\
    \   |                                                                   +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpswc171ry.rs:18:10\n   |\n18 |  \
    \   Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |     Some(*second_smallest)\n\
    \   |          +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).next()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwkmu9j4w.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, elem)| elem < lst.len() - 2).next()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdwkgpc4c.rs:5:54\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, elem)| elem < lst.len() - 2).next()\n\
    \  |                                                      ^^^^^^^^^^^^^ expected\
    \ `&&isize`, found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdwkgpc4c.rs:5:5\n\
    \  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |          \
    \                            ------------- expected `Option<isize>` because of\
    \ return type\n5 |     lst.iter().enumerate().filter(|(_, elem)| elem < lst.len()\
    \ - 2).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(i, e)| e < lst.len() - 1).next()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvudzdvfo.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(i, e)| e < lst.len() - 1).next()\n  |  \
    \                                              ^^^^^^^^^^^^^ expected `&&isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvudzdvfo.rs:5:5\n\
    \  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |          \
    \                            ------------- expected `Option<isize>` because of\
    \ return type\n5 |     lst.iter().enumerate().filter(|(i, e)| e < lst.len() -\
    \ 1).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut second_smallest = lst.iter().skip(smallest_index).min();\n\
    \    let mut second_smallest_index = lst.iter().position(|x| x < second_smallest).unwrap();\n\
    \    if second_smallest_index == lst.len() {\n        return None;\n    }\n  \
    \  if second_smallest == smallest {\n        return Some(second_smallest);\n \
    \   }\n    if second_smallest < smallest {\n        smallest = second_smallest;\n\
    \        smallest_index = second_smallest_index;\n    }\n    smallest_index\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwq05jeor.rs:6:58\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwq05jeor.rs:11:65\n   |\n11 |     let mut second_smallest_index\
    \ = lst.iter().position(|x| x < second_smallest).unwrap();\n   |             \
    \                                                    ^^^^^^^^^^^^^^^ expected\
    \ `&isize`, found enum `Option`\n   |\n   = note: expected reference `&isize`\n\
    \                   found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwq05jeor.rs:16:21\n   |\n16 |         return Some(second_smallest);\n\
    \   |                     ^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwq05jeor.rs:22:5\n   |\n4  | fn\
    \ next_smallest(lst: Vec<isize>) -> Option<isize> {\n   |                    \
    \                  ------------- expected `Option<isize>` because of return type\n\
    ...\n22 |     smallest_index\n   |     ^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `usize`\n   |\n   = note: expected enum `Option<isize>`\n            \
    \  found type `usize`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut second_smallest\
    \ = lst.iter().skip(1).min().unwrap();\n    if smallest < second_smallest {\n\
    \        smallest = second_smallest;\n    }\n    Some(smallest)\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8m1s7pql.rs:10:10\n   |\n\
    10 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest == smallest_value {\n        smallest_index += 1;\n    }\n  \
    \  Some(smallest_value)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplpmv7293.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmplpmv7293.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplpmv7293.rs:14:20\n\
    \   |\n14 |     if smallest == smallest_value {\n   |                    ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n14 |     if smallest == Some(smallest_value) {\n   |                  \
    \  +++++              +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplpmv7293.rs:17:10\n\
    \   |\n17 |     Some(smallest_value)\n   |          ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |  \
    \   Some(*smallest_value)\n   |          +\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_index = smallest_index - 1;\n    while smallest_index >=\
    \ 0 {\n        if lst.iter().nth(smallest_index).unwrap() < smallest_value {\n\
    \            smallest_value = lst.iter().nth(smallest_index).unwrap();\n     \
    \       smallest_index = smallest_index - 1;\n        }\n        smallest_index\
    \ -= 1;\n    }\n    Some(smallest_value)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpju_z620t.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpju_z620t.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpju_z620t.rs:22:10\n\
    \   |\n22 |     Some(smallest_value)\n   |          ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |  \
    \   Some(*smallest_value)\n   |          +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(i, _)| i < lst.len() - 2).next()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpggop7vr9.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(i, _)| i < lst.len() - 2).next()\n  |  \
    \                                              ^^^^^^^^^^^^^\n  |            \
    \                                    |\n  |                                  \
    \              expected `&usize`, found `usize`\n  |                         \
    \                       help: consider borrowing here: `&(lst.len() - 2)`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpggop7vr9.rs:5:5\n  |\n4 | fn next_smallest(lst:\
    \ Vec<isize>) -> Option<isize> {\n  |                                      -------------\
    \ expected `Option<isize>` because of return type\n5 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i < lst.len() - 2).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == 0 {\n        smallest_index\
    \ = 1;\n    }\n\n    if smallest_index == lst.len() - 1 {\n        smallest_index\
    \ = 0;\n    }\n\n    Some(lst[smallest_index + 1])\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_71ojdtc.rs:10:60\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \   |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \   |                                                            +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut second_smallest = lst.iter().skip(1).min().unwrap();\n    if smallest\
    \ < second_smallest {\n        smallest = second_smallest;\n    }\n    Some(smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmputniqivc.rs:13:10\n   |\n\
    13 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst[0];\n    let mut smallest_index = lst.iter().enumerate().find(|&(i, _)|\
    \ i < smallest).unwrap();\n    let mut smallest_value = smallest;\n    for &i\
    \ in lst {\n        if i < smallest {\n            smallest_value = i;\n     \
    \       smallest_index = i;\n        }\n    }\n    Some(smallest_value)\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0ddihvy5.rs:9:72\n  |\n9 |\
    \     let mut smallest_index = lst.iter().enumerate().find(|&(i, _)| i < smallest).unwrap();\n\
    \  |                                                                        ^^^^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut smallest_index\
    \ = lst.iter().enumerate().find(|&(i, _)| i < smallest.try_into().unwrap()).unwrap();\n\
    \  |                                                                         \
    \       ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0ddihvy5.rs:11:9\n\
    \   |\n11 |     for &i in lst {\n   |         ^^    --- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `i`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0ddihvy5.rs:14:30\n   |\n9  |     let mut smallest_index\
    \ = lst.iter().enumerate().find(|&(i, _)| i < smallest).unwrap();\n   |      \
    \                        ------------------------------------------------------------\
    \ expected due to this value\n...\n14 |             smallest_index = i;\n   |\
    \                              ^ expected tuple, found `isize`\n   |\n   = note:\
    \ expected tuple `(usize, &isize)`\n               found type `isize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut second_smallest = lst.iter().skip(1).min();\n\
    \    if smallest == second_smallest {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppqhj7eby.rs:10:10\n   |\n\
    10 |     Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    if smallest_index == 0 {\n        smallest = lst.iter().max();\n\
    \        smallest_index = lst.iter().position(|x| x > smallest).unwrap();\n  \
    \  }\n    smallest.swap(lst.iter()[smallest_index]);\n    Some(smallest)\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxvzvm3o9.rs:6:58\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxvzvm3o9.rs:12:54\n   |\n12 |         smallest_index = lst.iter().position(|x|\
    \ x > smallest).unwrap();\n   |                                              \
    \        ^^^^^^^^ expected `&isize`, found enum `Option`\n   |\n   = note: expected\
    \ reference `&isize`\n                   found enum `Option<&isize>`\n\nerror[E0599]:\
    \ no method named `swap` found for enum `Option` in the current scope\n  --> /tmp/tmpxvzvm3o9.rs:14:14\n\
    \   |\n14 |     smallest.swap(lst.iter()[smallest_index]);\n   |             \
    \ ^^^^ method not found in `Option<&isize>`\n\nerror[E0608]: cannot index into\
    \ a value of type `std::slice::Iter<'_, isize>`\n  --> /tmp/tmpxvzvm3o9.rs:14:19\n\
    \   |\n14 |     smallest.swap(lst.iter()[smallest_index]);\n   |             \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxvzvm3o9.rs:15:10\n\
    \   |\n15 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<&isize>`\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599, E0608.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, x)| x < lst.len() - 2).next()\n      \
    \  .map(|(_, x)| x)\n        .unwrap_or(None)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt78shb80.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, x)| x < lst.len() - 2).next()\n  |  \
    \                                              ^^^^^^^^^^^^^ expected `&&isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpt78shb80.rs:7:20\n\
    \  |\n7 |         .unwrap_or(None)\n  |                    ^^^^ expected `&isize`,\
    \ found enum `Option`\n  |\n  = note: expected reference `&isize`\n          \
    \        found enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpt78shb80.rs:5:5\n\
    \  |\n4 |   fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |        \
    \                                ------------- expected `Option<isize>` because\
    \ of return type\n5 | /     lst.iter().enumerate().filter(|(_, x)| x < lst.len()\
    \ - 2).next()\n6 | |         .map(|(_, x)| x)\n7 | |         .unwrap_or(None)\n\
    \  | |________________________^ expected enum `Option`, found `&isize`\n  |\n\
    \  = note:   expected enum `Option<isize>`\n          found reference `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().find(|(_, item)| item < lst.iter().next().unwrap()).map(|(_,\
    \ item)| item)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6hsqsaw3.rs:5:52\n  |\n5 |\
    \     lst.iter().enumerate().find(|(_, item)| item < lst.iter().next().unwrap()).map(|(_,\
    \ item)| item)\n  |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&isize`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp6hsqsaw3.rs:5:5\n  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize>\
    \ {\n  |                                      ------------- expected `Option<isize>`\
    \ because of return type\n5 |     lst.iter().enumerate().find(|(_, item)| item\
    \ < lst.iter().next().unwrap()).map(|(_, item)| item)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut second_smallest = lst.iter().skip(1).min().unwrap();\n\
    \n    if smallest == second_smallest {\n        return None;\n    }\n\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjpwqoxa_.rs:16:10\n   |\n\
    16 |     Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |  \
    \   Some(*second_smallest)\n   |          +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x).ok()\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz3pazpjv.rs:5:46\n  |\n5 |\
    \     lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x).ok()\n  |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&isize`\n\nerror[E0599]: no method named `ok` found\
    \ for enum `Option` in the current scope\n --> /tmp/tmpz3pazpjv.rs:5:90\n  |\n\
    5 |     lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x).ok()\n  |                                                           \
    \                               ^^ help: there is an associated function with\
    \ a similar name: `or`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut second_smallest = lst.iter().skip(1).min().unwrap();\n\
    \    if smallest > second_smallest {\n        smallest = second_smallest;\n  \
    \  }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_8ij7cr0.rs:13:10\n   |\n\
    13 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_idx = 1;\n    for idx in 1..lst.len()\
    \ {\n        if smallest == lst[idx] {\n            smallest_idx = idx;\n    \
    \    }\n    }\n    Some(smallest_idx)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzlfk28d2.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzlfk28d2.rs:11:24\n\
    \   |\n11 |         if smallest == lst[idx] {\n   |                        ^^^^^^^^\
    \ expected enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n\
    \              found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzlfk28d2.rs:15:10\n\
    \   |\n15 |     Some(smallest_idx)\n   |          ^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n15 |     Some(smallest_idx.try_into().unwrap())\n\
    \   |                      ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphi_cuzbn.rs:5:46\n  |\n5 |\
    \     lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x)\n  |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&isize`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmphi_cuzbn.rs:5:5\n  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize>\
    \ {\n  |                                      ------------- expected `Option<isize>`\
    \ because of return type\n5 |     lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = 0;\n    for &x in lst {\n        if x < smallest {\n            smallest =\
    \ x;\n            smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpykkzrm5f.rs:7:9\n  |\n7 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpykkzrm5f.rs:10:60\n   |\n10 |             smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n   |                                             \
    \               ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n10 |             smallest_index = lst.iter().position(|&x|\
    \ x == *smallest).unwrap();\n   |                                            \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpykkzrm5f.rs:13:10\n\
    \   |\n13 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    Some(smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp003_vhv6.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp003_vhv6.rs:11:52\n   |\n11 |     smallest_index\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n   |                  \
    \                                  ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |     smallest_index\
    \ = lst.iter().position(|x| *x == *smallest).unwrap();\n   |                 \
    \                                   +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp003_vhv6.rs:15:10\n   |\n15 |     Some(smallest)\n   |          ^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n15 |     Some(*smallest)\n   |          +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().cloned().enumerate().find(|(_, x)| x < lst.iter().skip(1).next().unwrap()).map(|(_,\
    \ x)| x).ok()\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ok` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmpo4tn8onh.rs:5:107\n  |\n5 |     lst.iter().cloned().enumerate().find(|(_,\
    \ x)| x < lst.iter().skip(1).next().unwrap()).map(|(_, x)| x).ok()\n  |      \
    \                                                                            \
    \                         ^^ help: there is an associated function with a similar\
    \ name: `or`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_idx = 1;\n    for idx in 0..lst.len()\
    \ {\n        if smallest == lst[idx] {\n            smallest_idx = idx;\n    \
    \        break;\n        }\n        if smallest < lst[idx] {\n            smallest\
    \ = lst[idx];\n            smallest_idx = idx;\n        }\n    }\n    Some(smallest_idx)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptfv_b2ow.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfv_b2ow.rs:11:24\n\
    \   |\n11 |         if smallest == lst[idx] {\n   |                        ^^^^^^^^\
    \ expected enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n\
    \              found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfv_b2ow.rs:15:23\n\
    \   |\n15 |         if smallest < lst[idx] {\n   |                       ^^^^^^^^\
    \ expected enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n\
    \              found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfv_b2ow.rs:16:24\n\
    \   |\n5  |     let mut smallest = lst.iter().min();\n   |                   \
    \     ---------------- expected due to this value\n...\n16 |             smallest\
    \ = lst[idx];\n   |                        ^^^^^^^^ expected enum `Option`, found\
    \ `isize`\n   |\n   = note: expected enum `Option<&isize>`\n              found\
    \ type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfv_b2ow.rs:20:10\n\
    \   |\n20 |     Some(smallest_idx)\n   |          ^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     Some(smallest_idx.try_into().unwrap())\n\
    \   |                      ++++++++++++++++++++\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut second_smallest = lst.iter().skip(smallest_index).min();\n\
    \    if second_smallest == smallest {\n        return None;\n    }\n    if second_smallest\
    \ < smallest {\n        smallest = second_smallest;\n        smallest_index =\
    \ 0;\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3nta0wu1.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3nta0wu1.rs:18:10\n\
    \   |\n18 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<&isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, e)| e < lst.len() - 1).next()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpry2ny1di.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, e)| e < lst.len() - 1).next()\n  |  \
    \                                              ^^^^^^^^^^^^^ expected `&&isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpry2ny1di.rs:5:5\n\
    \  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |          \
    \                            ------------- expected `Option<isize>` because of\
    \ return type\n5 |     lst.iter().enumerate().filter(|(_, e)| e < lst.len() -\
    \ 1).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_idx = 1;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_idx\
    \ = i;\n        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnep97igv.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n      \
    \  return None;\n    }\n    smallest = lst.iter().skip(smallest_index + 1).min();\n\
    \    smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() - 1 {\n        return None;\n    }\n    smallest_index\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcc44bfia.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcc44bfia.rs:11:52\n\
    \   |\n11 |     smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \   |                                                    ^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcc44bfia.rs:15:5\n\
    \   |\n4  | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n   |       \
    \                               ------------- expected `Option<isize>` because\
    \ of return type\n...\n15 |     smallest_index\n   |     ^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<isize>`\n\
    \              found type `usize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_index = smallest_index + 1;\n    while smallest_index <\
    \ lst.len() {\n        if lst.iter().nth(smallest_index).unwrap() < smallest_value\
    \ {\n            smallest_value = lst.iter().nth(smallest_index).unwrap();\n \
    \           smallest_index = smallest_index + 1;\n        }\n        smallest_index\
    \ = smallest_index + 1;\n    }\n    Some(smallest_value)\n}\n\nfn main() {\n \
    \   let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3ffy5mov.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3ffy5mov.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ffy5mov.rs:22:10\n\
    \   |\n22 |     Some(smallest_value)\n   |          ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |  \
    \   Some(*smallest_value)\n   |          +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_idx =\
    \ lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_idx == lst.len()\
    \ {\n        return None;\n    }\n    smallest = lst.iter().nth(smallest_idx +\
    \ 1).unwrap();\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc3msf7mm.rs:6:58\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_idx = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc3msf7mm.rs:11:10\n   |\n11 |     Some(smallest)\n\
    \   |          ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |     Some(*smallest)\n   |          +\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = 1;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_index\
    \ = 0;\n        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4fskq_jy.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = 0;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_index\
    \ = 1;\n        } else if i == smallest {\n            smallest_index += 1;\n\
    \        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprcmtl0pw.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(i, _)| i < lst.len() - 1).next()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66m239jz.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(i, _)| i < lst.len() - 1).next()\n  |  \
    \                                              ^^^^^^^^^^^^^\n  |            \
    \                                    |\n  |                                  \
    \              expected `&usize`, found `usize`\n  |                         \
    \                       help: consider borrowing here: `&(lst.len() - 1)`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmp66m239jz.rs:5:5\n  |\n4 | fn next_smallest(lst:\
    \ Vec<isize>) -> Option<isize> {\n  |                                      -------------\
    \ expected `Option<isize>` because of return type\n5 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i < lst.len() - 1).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = 0;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_index\
    \ = 1;\n        } else {\n            smallest_index += 1;\n        }\n    }\n\
    \    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1l4vin7o.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr1kc4uk8.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_index = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr1kc4uk8.rs:11:52\n   |\n11 |     smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n   |                  \
    \                                  ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |     smallest_index\
    \ = lst.iter().position(|&x| x == *smallest).unwrap();\n   |                 \
    \                                   +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpr1kc4uk8.rs:16:52\n   |\n16 |     smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n   |                                             \
    \       ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     smallest_index = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \   |                                                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr1kc4uk8.rs:21:52\n   |\n21 |     smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n   |                                             \
    \       ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n21 |     smallest_index = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \   |                                                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr1kc4uk8.rs:26:52\n   |\n26 |     smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n   |                                             \
    \       ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n26 |     smallest_ind"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut second_smallest = lst.iter().skip(smallest_index).min();\n\
    \    if second_smallest == lst.len() {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5vbzi1wn.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5vbzi1wn.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5vbzi1wn.rs:14:27\n\
    \   |\n14 |     if second_smallest == lst.len() {\n   |                      \
    \     ^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note: expected\
    \ enum `Option<&isize>`\n              found type `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5vbzi1wn.rs:17:10\n   |\n17 |     Some(second_smallest)\n\
    \   |          ^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n \
    \  = note: expected type `isize`\n              found enum `Option<&isize>`\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    for i in 1..smallest_index {\n        if lst[i] < smallest\
    \ {\n            smallest = lst[i];\n            smallest_index = i;\n       \
    \ }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpzj14axzh.rs:6:69

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_index = smallest_index - 1;\n    while smallest_index >=\
    \ 0 {\n        if lst.iter().nth(smallest_index).unwrap() < smallest_value {\n\
    \            smallest_value = lst.iter().nth(smallest_index).unwrap();\n     \
    \       smallest_index = smallest_index - 1;\n        }\n        smallest_index\
    \ -= 1;\n    }\n    Some(smallest_value)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpju_z620t.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpju_z620t.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpju_z620t.rs:22:10\n\
    \   |\n22 |     Some(smallest_value)\n   |          ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |  \
    \   Some(*smallest_value)\n   |          +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut second_smallest = lst.iter().skip(1).min();\n\
    \    if smallest == second_smallest {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppqhj7eby.rs:10:10\n   |\n\
    10 |     Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        smallest_index\
    \ = 1;\n    }\n    smallest.swap(lst.iter()[smallest_index]);\n    Some(smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoumtgeex.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpoumtgeex.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0599]: no method named `swap` found\
    \ for enum `Option` in the current scope\n  --> /tmp/tmpoumtgeex.rs:13:14\n  \
    \ |\n13 |     smallest.swap(lst.iter()[smallest_index]);\n   |              ^^^^\
    \ method not found in `Option<&isize>`\n\nerror[E0608]: cannot index into a value\
    \ of type `std::slice::Iter<'_, isize>`\n  --> /tmp/tmpoumtgeex.rs:13:19\n   |\n\
    13 |     smallest.swap(lst.iter()[smallest_index]);\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpoumtgeex.rs:14:10\n   |\n14 |\
    \     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, i)| i < lst.len() - 2).next()\n      \
    \  .map(|(_, i)| lst[i + 1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa4bxiw88.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, i)| i < lst.len() - 2).next()\n  |  \
    \                                              ^^^^^^^^^^^^^ expected `&&isize`,\
    \ found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \ --> /tmp/tmpa4bxiw88.rs:6:23\n  |\n6 |         .map(|(_, i)| lst[i + 1])\n \
    \ |                       ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = 0;\n    for index in\
    \ lst.iter().rev() {\n        if index == smallest {\n            smallest_index\
    \ += 1;\n            if smallest_index == 2 {\n                return Some(index);\n\
    \            }\n        } else {\n            smallest_index = 0;\n        }\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpurh0d78i.rs:14:29\n   |\n\
    14 |                 return Some(index);\n   |                             ^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n14 |                 return Some(*index);\n   |                       \
    \      +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut second_smallest = lst.iter().skip(1).min().unwrap();\n\
    \    if smallest < second_smallest {\n        smallest = second_smallest;\n  \
    \  }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqfoutl8f.rs:13:10\n   |\n\
    13 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_idx = 1;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_idx\
    \ = i;\n        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnep97igv.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut second_smallest = lst.iter().skip(1).min().unwrap();\n\
    \n    if smallest == second_smallest {\n        return None;\n    }\n\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4g3_8bjr.rs:16:10\n   |\n\
    16 |     Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |  \
    \   Some(*second_smallest)\n   |          +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x).ok()\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz3pazpjv.rs:5:46\n  |\n5 |\
    \     lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x).ok()\n  |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&isize`\n\nerror[E0599]: no method named `ok` found\
    \ for enum `Option` in the current scope\n --> /tmp/tmpz3pazpjv.rs:5:90\n  |\n\
    5 |     lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x).ok()\n  |                                                           \
    \                               ^^ help: there is an associated function with\
    \ a similar name: `or`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x < smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut second_smallest = lst.iter().skip(smallest_index).min();\n\
    \    if second_smallest == lst.len() {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4mh9_f9m.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4mh9_f9m.rs:9:59\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \  |                                                           ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4mh9_f9m.rs:14:27\n\
    \   |\n14 |     if second_smallest == lst.len() {\n   |                      \
    \     ^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note: expected\
    \ enum `Option<&isize>`\n              found type `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4mh9_f9m.rs:17:10\n   |\n17 |     Some(second_smallest)\n\
    \   |          ^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n \
    \  = note: expected type `isize`\n              found enum `Option<&isize>`\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_idx = lst.iter().position(|x|\
    \ x < smallest);\n    if smallest_idx == lst.len() {\n        return None;\n \
    \   }\n    let mut smallest_val = lst.iter()[smallest_idx];\n    while smallest_idx\
    \ != lst.len() {\n        if lst.iter()[smallest_idx] < smallest_val {\n     \
    \       smallest_val = lst.iter()[smallest_idx];\n            smallest_idx = lst.iter().position(|x|\
    \ x < smallest_val);\n        } else {\n            break;\n        }\n    }\n\
    \    Some(smallest_val)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv7c8iok5.rs:6:56\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().position(|x| x < smallest);\n  |     \
    \                                                   ^^^^^^^^ expected `&isize`,\
    \ found enum `Option`\n  |\n  = note: expected reference `&isize`\n          \
    \        found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpv7c8iok5.rs:7:24\n\
    \  |\n7 |     if smallest_idx == lst.len() {\n  |                        ^^^^^^^^^\
    \ expected enum `Option`, found `usize`\n  |\n  = note: expected enum `Option<usize>`\n\
    \             found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |     if smallest_idx == Some(lst.len()) {\n  |                      \
    \  +++++         +\n\nerror[E0608]: cannot index into a value of type `std::slice::Iter<'_,\
    \ isize>`\n  --> /tmp/tmpv7c8iok5.rs:10:28\n   |\n10 |     let mut smallest_val\
    \ = lst.iter()[smallest_idx];\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv7c8iok5.rs:11:27\n   |\n11 |\
    \     while smallest_idx != lst.len() {\n   |                           ^^^^^^^^^\
    \ expected enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<usize>`\n\
    \              found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n11 |     while smallest_idx != Some(lst.len()) {\n   |                \
    \           +++++         +\n\nerror[E0608]: cannot index into a value of type\
    \ `std::slice::Iter<'_, isize>`\n  --> /tmp/tmpv7c8iok5.rs:12:12\n   |\n12 | \
    \        if lst.iter()[smallest_idx] < smallest_val {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `std::slice::Iter<'_, isize>`\n\
    \  --> /tmp/tmpv7c8iok5.rs:13:28\n   |\n13 |             smallest_val = lst.iter()[smallest_idx];\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv7c8iok5.rs:19:10\n   |\n19 |     Some(smallest_val)\n\
    \   |          ^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n19 |     Some(*smallest_val"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest_value < smallest {\n        smallest = smallest_value;\n    \
    \    smallest_index = 0;\n    }\n    smallest_index += 1;\n    if smallest_index\
    \ == lst.len() {\n        return None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest_value < smallest {\n        smallest = smallest_value;\n    \
    \    smallest_index = 0;\n    }\n    smallest_index += 1;\n    if smallest_index\
    \ == lst.len() {\n        return None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest_value < smallest {\n        smallest = smallest_value;\n    \
    \    smallest_index = 0;\n    }\n    smallest_index += 1;\n    if smallest_index\
    \ == lst.len() {\n        return None;\n    }\n    Some(smallest)\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9jdhgk6i.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9jdhgk6i.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9jdhgk6i.rs:14:25\n\
    \   |\n14 |     if smallest_value < smallest {\n   |                         ^^^^^^^^\
    \ expected `&isize`, found enum `Option`\n   |\n   = note: expected reference\
    \ `&isize`\n                   found enum `Option<&isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9jdhgk6i.rs:15:20\n   |\n5  |     let mut smallest = lst.iter().min();\n\
    \   |                        ---------------- expected due to this value\n...\n\
    15 |         smallest = smallest_value;\n   |                    ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n15 |         smallest = Some(smallest_value);\n   |                   \
    \ +++++              +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9jdhgk6i.rs:23:25\n\
    \   |\n23 |     if smallest_value < smallest {\n   |                         ^^^^^^^^\
    \ expected `&isize`, found enum `Option`\n   |\n   = note: expected reference\
    \ `&isize`\n                   found enum `Option<&isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9jdhgk6i.rs:24:20\n   |\n5  |     let mut smallest = lst.iter().min();\n\
    \   |                        ---------------- expected due to this value\n...\n\
    24 |         smallest = smallest_value;\n   |                    ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found r"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphi_cuzbn.rs:5:46\n  |\n5 |\
    \     lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x)\n  |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&isize`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmphi_cuzbn.rs:5:5\n  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize>\
    \ {\n  |                                      ------------- expected `Option<isize>`\
    \ because of return type\n5 |     lst.iter().enumerate().find(|(_, x)| x < lst.iter().next().unwrap()).map(|(_,\
    \ x)| x)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(_, elem)| elem < lst.len() - 2).next()\n\
    \        .map(|(_, elem)| elem)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdod1qnzl.rs:5:54\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(_, elem)| elem < lst.len() - 2).next()\n\
    \  |                                                      ^^^^^^^^^^^^^ expected\
    \ `&&isize`, found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdod1qnzl.rs:5:5\n\
    \  |\n4 |   fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |        \
    \                                ------------- expected `Option<isize>` because\
    \ of return type\n5 | /     lst.iter().enumerate().filter(|(_, elem)| elem < lst.len()\
    \ - 2).next()\n6 | |         .map(|(_, elem)| elem)\n  | |______________________________^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    if\
    \ smallest_index == 0 {\n        smallest_index = 1;\n    }\n    if smallest_index\
    \ == lst.len() {\n        smallest_index = 0;\n    }\n    if smallest_index ==\
    \ lst.len() {\n        smallest_index = 0;\n    }\n    if smallest_index == lst.len()\
    \ {\n        smallest_index = 0;\n    }\n    if smallest_index == lst.len() {\n\
    \        smallest_index = 0;\n    }\n    if smallest_index == lst.len() {\n  \
    \      smallest_index = 0;\n    }\n    if smallest_index == lst.len() {\n    \
    \    smallest_index = 0;\n    }\n    if smallest_index == lst.len() {\n      \
    \  smallest_index = 0;\n    }\n    if smallest_index == lst.len() {\n        smallest_index\
    \ = 0;\n    }\n    if smallest_index == lst.len() {\n        smallest_index =\
    \ 0;\n    }\n    if smallest_index == lst.len() {\n        smallest_index = 0;\n\
    \    }\n    if smallest_index == lst.len() {\n        smallest_index = 0;\n  \
    \  }\n    if smallest_index == lst.len() {\n        smallest_index = 0;\n    }\n\
    \    if smallest_index == lst.len() {\n        smallest_index = 0;\n    }\n  \
    \  if smallest_index == lst.len() {\n        smallest_index = 0;\n    }\n    if\
    \ smallest_index == lst.len() {\n        smallest_index = 0;\n    }\n    if smallest_index\
    \ == lst.len() {\n        smallest_index = 0;\n    }\n    if smallest_index ==\
    \ lst.len() {\n        smallest_index = 0;\n    }\n    if smallest_index == lst.len()\
    \ {\n        smallest_index = 0;\n    }\n    if smallest_index == lst.len() {\n\
    \        smallest_index = 0;\n    }\n    if smallest_index == lst.len() {\n  \
    \      smallest_index = 0;\n    }\n    if smallest_index == lst.len() {\n    \
    \    smallest_index = 0;\n    }\n    if smallest_index == lst.len() {\n      \
    \  smallest_index = 0;\n    }\n    if smallest_index == lst.len() {\n        smallest_index\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpcaxdd9v3.rs:94:3\n\
    \   |\n4  | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n81 |\
    \     if smallest_index == lst.len() {\n   |                                 \
    \   - this delimiter might not be properly closed...\n82 |         smallest_index\n\
    83 | }\n   | - ...as it matches this but it has different indentation\n...\n94\
    \ | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpcaxdd9v3.rs:6:59\n\
    \  |\n6 |     let mut smallest_index = lst.iter().position(|x| *x < smallest).unwrap();\n\
    \  |                                                           ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaxdd9v3.rs:82:9\n\
    \   |\n81 | /     if smallest_index == lst.len() {\n82 | |         smallest_index\n\
    \   | |         ^^^^^^^^^^^^^^ expected `()`, found `usize`\n83 | | }\n   | |_-\
    \ expected this to be `()`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpcaxdd9v3.rs:4:38\n\
    \  |\n4 | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |    -------------\
    \                     ^^^^^^^^^^^^^ expected enum `Option`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note:   expected enum `Option<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(i, _)| i < lst.len() - 1).next()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66m239jz.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(i, _)| i < lst.len() - 1).next()\n  |  \
    \                                              ^^^^^^^^^^^^^\n  |            \
    \                                    |\n  |                                  \
    \              expected `&usize`, found `usize`\n  |                         \
    \                       help: consider borrowing here: `&(lst.len() - 1)`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmp66m239jz.rs:5:5\n  |\n4 | fn next_smallest(lst:\
    \ Vec<isize>) -> Option<isize> {\n  |                                      -------------\
    \ expected `Option<isize>` because of return type\n5 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i < lst.len() - 1).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr1kc4uk8.rs:6:60\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     let mut smallest_index = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr1kc4uk8.rs:11:52\n   |\n11 |     smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n   |                  \
    \                                  ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |     smallest_index\
    \ = lst.iter().position(|&x| x == *smallest).unwrap();\n   |                 \
    \                                   +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpr1kc4uk8.rs:16:52\n   |\n16 |     smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n   |                                             \
    \       ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     smallest_index = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \   |                                                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr1kc4uk8.rs:21:52\n   |\n21 |     smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n   |                                             \
    \       ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n21 |     smallest_index = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \   |                                                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr1kc4uk8.rs:26:52\n   |\n26 |     smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n   |                                             \
    \       ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n26 |     smallest_ind"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst[0];\n    let mut smallest_index = 0;\n    for &i in lst {\n        if i\
    \ < smallest {\n            smallest = i;\n            smallest_index = 1;\n \
    \       } else {\n            smallest_index += 1;\n        }\n    }\n    Some(smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpamox_6r8.rs:10:9\n   |\n\
    10 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let\
    \ mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_value\
    \ = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let\
    \ mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_value\
    \ = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let\
    \ mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_value\
    \ = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let\
    \ mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_value\
    \ = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let\
    \ mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_value\
    \ = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let\
    \ mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_value\
    \ = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_value = \n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmphcfja_f4.rs:35:1\n\
    \   |\n35 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).min()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6xpl0sd.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst.iter().min();\n\
    \    let mut second_smallest = lst.iter().skip(1).min();\n    if smallest > second_smallest\
    \ {\n        smallest = second_smallest;\n    }\n    Some(smallest)\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp29zld3by.rs:13:10\n   |\n\
    13 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = 0;\n    for &i in lst {\n        if i < smallest {\n            smallest =\
    \ i;\n            smallest_index = 1;\n        }\n    }\n    Some(smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv5y_vj0i.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpv5y_vj0i.rs:13:10\n   |\n13 |     Some(smallest)\n   |        \
    \  ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     Some(*smallest)\n   |          +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().skip(1).min()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6xpl0sd.rs:5:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     lst.iter().skip(1).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748432
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = 0;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_index\
    \ = 1;\n        } else {\n            smallest_index += 1;\n        }\n    }\n\
    \    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1l4vin7o.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst[0];\n    let mut smallest_index = 0;\n    for &i in lst {\n        if i\
    \ < smallest {\n            smallest = i;\n            smallest_index = 1;\n \
    \       }\n        if i == smallest {\n            smallest_index += 1;\n    \
    \    }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9l2_8a9o.rs:10:9\n   |\n\
    10 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x < smallest).unwrap();\n    if smallest_index == 0 {\n        smallest_index\
    \ = 1;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest_value == smallest {\n        smallest_index += 1;\n    }\n  \
    \  smallest_index\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj8mu9j6a.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpj8mu9j6a.rs:9:59\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \  |                                                           ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0277]: can't compare `&isize` with\
    \ `Option<&isize>`\n  --> /tmp/tmpj8mu9j6a.rs:14:23\n   |\n14 |     if smallest_value\
    \ == smallest {\n   |                       ^^ no implementation for `&isize ==\
    \ Option<&isize>`\n   |\n   = help: the trait `PartialEq<Option<&isize>>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpj8mu9j6a.rs:17:5\n   |\n4  | fn next_smallest(lst: Vec<isize>) -> Option<isize>\
    \ {\n   |                                      ------------- expected `Option<isize>`\
    \ because of return type\n...\n17 |     smallest_index\n   |     ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<isize>`\n\
    \              found type `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut second_smallest = lst.iter().skip(1).min().unwrap();\n    if smallest\
    \ > second_smallest {\n        smallest = second_smallest;\n    }\n    Some(smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmnp6183t.rs:13:10\n   |\n\
    13 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut second_smallest = smallest;\n   \
    \ for elt in lst.iter().skip(1) {\n        if elt < second_smallest {\n      \
    \      second_smallest = elt;\n        }\n    }\n    Some(second_smallest)\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6uz0qs0b.rs:8:18\n  |\n8 |\
    \         if elt < second_smallest {\n  |                  ^^^^^^^^^^^^^^^\n \
    \ |                  |\n  |                  expected `&isize`, found `isize`\n\
    \  |                  help: consider borrowing here: `&second_smallest`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp6uz0qs0b.rs:9:31\n  |\n6 |     let mut second_smallest\
    \ = smallest;\n  |                               -------- expected due to this\
    \ value\n...\n9 |             second_smallest = elt;\n  |                    \
    \           ^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             second_smallest = *elt;\n  |              \
    \                 +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().skip(smallest_index).min();\n    smallest_index\
    \ = lst.iter().position(|x| x < smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min();\n\
    \    smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min();\n\
    \    smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min();\n\
    \    smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min();\n\
    \    smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min();\n\
    \    smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min();\n\
    \    smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min();\n\
    \    smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min();\n\
    \    smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7jzlpv2i.rs:6:58\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7jzlpv2i.rs:11:50\n   |\n11 |     smallest_index = lst.iter().position(|x|\
    \ x < smallest).unwrap();\n   |                                              \
    \    ^^^^^^^^ expected `&isize`, found enum `Option`\n   |\n   = note: expected\
    \ reference `&isize`\n                   found enum `Option<&isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7jzlpv2i.rs:16:50\n   |\n16 |     smallest_index\
    \ = lst.iter().position(|x| x < smallest).unwrap();\n   |                    \
    \                              ^^^^^^^^ expected `&isize`, found enum `Option`\n\
    \   |\n   = note: expected reference `&isize`\n                   found enum `Option<&isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7jzlpv2i.rs:21:50\n   |\n21 |\
    \     smallest_index = lst.iter().position(|x| x < smallest).unwrap();\n   | \
    \                                                 ^^^^^^^^ expected `&isize`,\
    \ found enum `Option`\n   |\n   = note: expected reference `&isize`\n        \
    \           found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7jzlpv2i.rs:26:50\n   |\n26 |     smallest_index = lst.iter().position(|x|\
    \ x < smallest).unwrap();\n   |                                              \
    \    ^^^^^^^^ expected `&isize`, found enum `Option`\n   |\n   = note: expected\
    \ reference `&isize`\n                   found enum `Option<&isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7jzlpv2i.rs:31:50\n   |\n31 |     smallest_index\
    \ = lst.iter().position(|x| x < smallest).unwrap();\n   |                    \
    \                              ^^^^^^^^ expected `&isize`, found enum `Option`\n\
    \   |\n   = note: expected reference `&isize`\n                   found enum `Option<&isize>`\n\
    \nerror[E0308]: mismatched"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n      \
    \  smallest_index = 0;\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt0l4dosd.rs:9:60\n  |\n9 |\
    \     let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \  |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt0l4dosd.rs:13:10\n   |\n13 |     Some(smallest)\n\
    \   |          ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n13 |     Some(*smallest)\n   |          +\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    let mut second_smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \n    if second_smallest == smallest {\n        return None;\n    }\n\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp73if1f7p.rs:10:60\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \   |                                                            ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |     let mut smallest_index = lst.iter().position(|&x| x == *smallest).unwrap();\n\
    \   |                                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp73if1f7p.rs:17:10\n   |\n17 |     Some(second_smallest)\n\
    \   |          ^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     Some(*second_smallest)\n   |      \
    \    +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x < smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index += 1;\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprusrf0ke.rs:6:59\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \  |                                                           ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprusrf0ke.rs:10:16\n\
    \   |\n5  |     let mut smallest = lst.iter().min();\n   |                   \
    \     ---------------- expected due to this value\n...\n10 |     smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n10 |     smallest = Some(lst.iter().skip(smallest_index).min().unwrap());\n\
    \   |                +++++                                              +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprusrf0ke.rs:15:16\n   |\n5  |  \
    \   let mut smallest = lst.iter().min();\n   |                        ----------------\
    \ expected due to this value\n...\n15 |     smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n15 |     smallest = Some(lst.iter().skip(smallest_index).min().unwrap());\n\
    \   |                +++++                                              +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprusrf0ke.rs:16:10\n   |\n16 |  \
    \   Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = 0;\n    for &i in lst {\n        if i < smallest {\n            smallest =\
    \ i;\n            smallest_index += 1;\n        }\n    }\n    Some(smallest *\
    \ smallest_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp35z_7e4m.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = smallest;\n    let mut\
    \ smallest_value = lst.iter().nth(smallest).unwrap();\n    for index in lst.iter().skip(smallest\
    \ + 1) {\n        let value = lst.iter().nth(index).unwrap();\n        if value\
    \ < smallest_value {\n            smallest_value = value;\n            smallest_index\
    \ = index;\n        }\n    }\n    Some(smallest_value)\n}\n\nfn main() {\n   \
    \ let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]),\
    \ Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd5tc3f5u.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5tc3f5u.rs:10:45\n\
    \   |\n10 |     let mut smallest_value = lst.iter().nth(smallest).unwrap();\n\
    \   |                                             ^^^^^^^^ expected `usize`, found\
    \ enum `Option`\n   |\n   = note: expected type `usize`\n              found enum\
    \ `Option<&isize>`\n\nerror[E0369]: cannot add `{integer}` to `Option<&isize>`\n\
    \  --> /tmp/tmpd5tc3f5u.rs:11:43\n   |\n11 |     for index in lst.iter().skip(smallest\
    \ + 1) {\n   |                                  -------- ^ - {integer}\n   | \
    \                                 |\n   |                                  Option<&isize>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpd5tc3f5u.rs:12:36\n   |\n12 |\
    \         let value = lst.iter().nth(index).unwrap();\n   |                  \
    \                  ^^^^^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd5tc3f5u.rs:15:30\n   |\n9  |     let mut smallest_index\
    \ = smallest;\n   |                              -------- expected due to this\
    \ value\n...\n15 |             smallest_index = index;\n   |                 \
    \             ^^^^^ expected enum `Option`, found `&isize`\n   |\n   = note: \
    \  expected enum `Option<&isize>`\n           found reference `&isize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n15 |             smallest_index\
    \ = Some(index);\n   |                              +++++     +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd5tc3f5u.rs:18:10\n   |\n18 |     Some(smallest_value)\n\
    \   |          ^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n18 |     Some(*smallest_value)\n   |       \
    \   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ x < smallest);\n    if smallest_index == lst.len() {\n        return None;\n\
    \    }\n    smallest = lst.iter().skip(smallest_index).min();\n    smallest_index\
    \ = lst.iter().position(|x| x < smallest);\n    if smallest_index == lst.len()\
    \ {\n        return None;\n    }\n    Some(lst.iter().skip(smallest_index).min())\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprq6dl_bx.rs:6:58\n  |\n6 |\
    \     let mut smallest_index = lst.iter().position(|x| x < smallest);\n  |   \
    \                                                       ^^^^^^^^ expected `&isize`,\
    \ found enum `Option`\n  |\n  = note: expected reference `&isize`\n          \
    \        found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmprq6dl_bx.rs:7:26\n\
    \  |\n7 |     if smallest_index == lst.len() {\n  |                          ^^^^^^^^^\
    \ expected enum `Option`, found `usize`\n  |\n  = note: expected enum `Option<usize>`\n\
    \             found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |     if smallest_index == Some(lst.len()) {\n  |                    \
    \      +++++         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprq6dl_bx.rs:10:32\n\
    \   |\n10 |     smallest = lst.iter().skip(smallest_index).min();\n   |      \
    \                          ^^^^^^^^^^^^^^ expected `usize`, found enum `Option`\n\
    \   |\n   = note: expected type `usize`\n              found enum `Option<usize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprq6dl_bx.rs:11:50\n   |\n11 |\
    \     smallest_index = lst.iter().position(|x| x < smallest);\n   |          \
    \                                        ^^^^^^^^ expected `&isize`, found enum\
    \ `Option`\n   |\n   = note: expected reference `&isize`\n                   found\
    \ enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprq6dl_bx.rs:12:26\n\
    \   |\n12 |     if smallest_index == lst.len() {\n   |                       \
    \   ^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note: expected\
    \ enum `Option<usize>`\n              found type `usize`\nhelp: try wrapping the\
    \ expression in `Some`\n   |\n12 |     if smallest_index == Some(lst.len()) {\n\
    \   |                          +++++         +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprq6dl_bx.rs:15:26\n   |\n15 |     Some(lst.iter().skip(smallest_index).min())\n\
    \   |                          ^^^^^^^^^^^^^^ expected `usize`, found enum `Option`\n\
    \   |\n   = note: expected type `usize`\n              found enum `Option<usiz"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n\n    let mut second_smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    let mut second_smallest_index = lst.iter().position(|x| x == second_smallest).unwrap();\n\
    \    if second_smallest_index == 0 {\n        return None;\n    }\n\n    if smallest_index\
    \ == second_smallest_index {\n        Some(second_smallest)\n    } else {\n  \
    \      None\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpet3i9ote.rs:22:14\n   |\n\
    22 |         Some(second_smallest)\n   |              ^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    22 |         Some(*second_smallest)\n   |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x < smallest).unwrap();\n    if smallest_index == 0 {\n        smallest_index\
    \ = 1;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5xa4kkgh.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5xa4kkgh.rs:9:59\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \  |                                                           ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5xa4kkgh.rs:13:16\n\
    \   |\n5  |     let mut smallest = lst.iter().min();\n   |                   \
    \     ---------------- expected due to this value\n...\n13 |     smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n13 |     smallest = Some(lst.iter().skip(smallest_index).min().unwrap());\n\
    \   |                +++++                                              +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp5xa4kkgh.rs:14:10\n   |\n14 |  \
    \   Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(i, _)| i < lst.len() - 2).next()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpggop7vr9.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(i, _)| i < lst.len() - 2).next()\n  |  \
    \                                              ^^^^^^^^^^^^^\n  |            \
    \                                    |\n  |                                  \
    \              expected `&usize`, found `usize`\n  |                         \
    \                       help: consider borrowing here: `&(lst.len() - 2)`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpggop7vr9.rs:5:5\n  |\n4 | fn next_smallest(lst:\
    \ Vec<isize>) -> Option<isize> {\n  |                                      -------------\
    \ expected `Option<isize>` because of return type\n5 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i < lst.len() - 2).next()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<(usize, &isize)>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = 0;\n    for &x in\
    \ lst {\n        if x < smallest {\n            smallest = x;\n            smallest_index\
    \ = 1;\n        } else if x == smallest {\n            smallest_index += 1;\n\
    \        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnzm8y3n3.rs:7:9\n  |\n7 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut smallest =\
    \ lst.iter().min();\n    let mut second_smallest = lst.iter().skip(1).min();\n\
    \    if smallest == second_smallest {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpamam96a4.rs:13:10\n   |\n\
    13 |     Some(second_smallest)\n   |          ^^^^^^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().filter(|(i, _)| i < lst.len() - 2).next()\n      \
    \  .map(|(_, v)| v)\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9b913g9h.rs:5:48\n  |\n5 |\
    \     lst.iter().enumerate().filter(|(i, _)| i < lst.len() - 2).next()\n  |  \
    \                                              ^^^^^^^^^^^^^\n  |            \
    \                                    |\n  |                                  \
    \              expected `&usize`, found `usize`\n  |                         \
    \                       help: consider borrowing here: `&(lst.len() - 2)`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmp9b913g9h.rs:5:5\n  |\n4 |   fn next_smallest(lst:\
    \ Vec<isize>) -> Option<isize> {\n  |                                        -------------\
    \ expected `Option<isize>` because of return type\n5 | /     lst.iter().enumerate().filter(|(i,\
    \ _)| i < lst.len() - 2).next()\n6 | |         .map(|(_, v)| v)\n  | |________________________^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n\
    \             found enum `Option<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = 0;\n    for index in lst.iter().rev() {\n        if index == smallest {\n\
    \            break;\n        }\n        smallest_index += 1;\n        smallest\
    \ = index;\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq0e_0fjf.rs:14:10\n   |\n\
    14 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n14 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    Some(smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw7jxfr7m.rs:15:10\n   |\n\
    15 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = lst.iter().skip(1).find(|&x|\
    \ x < smallest);\n    if smallest_index == lst.len() {\n        return None;\n\
    \    }\n    for i in smallest_index..lst.len() {\n        if lst[i] < smallest\
    \ {\n            smallest = lst[i];\n            smallest_index = i;\n       \
    \ }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8idz52ij.rs:6:63\n  |\n6 |\
    \     let mut smallest_index = lst.iter().skip(1).find(|&x| x < smallest);\n \
    \ |                                                               ^^^^^^^^\n \
    \ |                                                               |\n  |     \
    \                                                          expected `&isize`,\
    \ found `isize`\n  |                                                         \
    \      help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp8idz52ij.rs:7:26\n  |\n7 |     if smallest_index == lst.len()\
    \ {\n  |                          ^^^^^^^^^ expected enum `Option`, found `usize`\n\
    \  |\n  = note: expected enum `Option<&isize>`\n             found type `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8idz52ij.rs:10:30\n   |\n10 |\
    \     for i in smallest_index..lst.len() {\n   |                             \
    \ ^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note: expected enum\
    \ `Option<&isize>`\n              found type `usize`\n\nerror[E0277]: the trait\
    \ bound `Option<&isize>: Step` is not satisfied\n  --> /tmp/tmp8idz52ij.rs:10:14\n\
    \   |\n10 |     for i in smallest_index..lst.len() {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ the trait `Step` is not implemented for `Option<&isize>`\n   |\n   = help: the\
    \ following other types implement trait `Step`:\n             char\n         \
    \    i128\n             i16\n             i32\n             i64\n            \
    \ i8\n             isize\n             u128\n           and 5 others\n   = note:\
    \ required because of the requirements on the impl of `Iterator` for `std::ops::Range<Option<&isize>>`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `std::ops::Range<Option<&isize>>`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `Option<&isize>`\n  --> /tmp/tmp8idz52ij.rs:11:12\n   |\n11 |\
    \         if lst[i] < smallest {\n   |            ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `Option<&i"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    let mut smallest_idx = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_idx == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter()[smallest_idx + 1];\n    smallest_idx\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuqyw9hsg.rs:6:58\n  |\n6 |\
    \     let mut smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                          ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0608]: cannot index into a value\
    \ of type `std::slice::Iter<'_, isize>`\n  --> /tmp/tmpuqyw9hsg.rs:10:16\n   |\n\
    10 |     smallest = lst.iter()[smallest_idx + 1];\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuqyw9hsg.rs:11:5\n   |\n4  | fn\
    \ next_smallest(lst: Vec<isize>) -> Option<isize> {\n   |                    \
    \                  ------------- expected `Option<isize>` because of return type\n\
    ...\n11 |     smallest_idx\n   |     ^^^^^^^^^^^^ expected enum `Option`, found\
    \ `usize`\n   |\n   = note: expected enum `Option<isize>`\n              found\
    \ type `usize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0608.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        smallest_index\
    \ = 1;\n    }\n    let mut second_smallest = lst.iter().skip(smallest_index).min();\n\
    \    if second_smallest == lst.len() {\n        return None;\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz_7dnpgu.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpz_7dnpgu.rs:9:60\n\
    \  |\n9 |     let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \  |                                                            ^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz_7dnpgu.rs:14:27\n\
    \   |\n14 |     if second_smallest == lst.len() {\n   |                      \
    \     ^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note: expected\
    \ enum `Option<&isize>`\n              found type `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz_7dnpgu.rs:17:10\n   |\n17 |     Some(second_smallest)\n\
    \   |          ^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n \
    \  = note: expected type `isize`\n              found enum `Option<&isize>`\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = 0;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_index\
    \ = i;\n        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpifxtt3vi.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest =\
    \ lst[0];\n    let mut smallest_index = 0;\n    for &i in lst {\n        if i\
    \ < smallest {\n            smallest = i;\n            smallest_index = i;\n \
    \       }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4z6hachz.rs:10:9\n   |\n\
    10 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut second_smallest = lst.iter().skip(smallest_index + 1).min().unwrap();\n\
    \    let mut second_smallest_index = lst.iter().position(|x| x == second_smallest).unwrap();\n\
    \    if second_smallest_index == lst.len() {\n        return None;\n    }\n  \
    \  let mut second_smallest_value = lst.iter().nth(second_smallest_index).unwrap();\n\
    \    if second_smallest_value < smallest_value {\n        smallest = second_smallest;\n\
    \        smallest_index = second_smallest_index;\n        smallest_value = second_smallest_value;\n\
    \    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcpqkeawz.rs:22:10\n   |\n\
    22 |     Some(smallest)\n   |          ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n22 |     Some(*smallest)\n\
    \   |          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut smallest_index = 1;\n    for &i in\
    \ lst {\n        if i < smallest {\n            smallest = i;\n            smallest_index\
    \ = 0;\n        }\n        if i == smallest {\n            smallest_index += 1;\n\
    \        }\n    }\n    Some(smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9evp19u8.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n  \
    \      return None;\n    }\n    let mut smallest_index = smallest;\n    let mut\
    \ smallest_value = lst.iter().nth(smallest).unwrap();\n    for i in lst.iter().skip(smallest\
    \ + 1) {\n        if smallest_value < i {\n            smallest_value = i;\n \
    \           smallest_index = i;\n        }\n    }\n    Some(smallest_index)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzzu1y529.rs:6:20\n  |\n6 |\
    \     if smallest == lst.len() {\n  |                    ^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<&isize>`\n   \
    \          found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzzu1y529.rs:10:45\n\
    \   |\n10 |     let mut smallest_value = lst.iter().nth(smallest).unwrap();\n\
    \   |                                             ^^^^^^^^ expected `usize`, found\
    \ enum `Option`\n   |\n   = note: expected type `usize`\n              found enum\
    \ `Option<&isize>`\n\nerror[E0369]: cannot add `{integer}` to `Option<&isize>`\n\
    \  --> /tmp/tmpzzu1y529.rs:11:39\n   |\n11 |     for i in lst.iter().skip(smallest\
    \ + 1) {\n   |                              -------- ^ - {integer}\n   |     \
    \                         |\n   |                              Option<&isize>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzzu1y529.rs:14:30\n   |\n9  |\
    \     let mut smallest_index = smallest;\n   |                              --------\
    \ expected due to this value\n...\n14 |             smallest_index = i;\n   |\
    \                              ^ expected enum `Option`, found `&isize`\n   |\n\
    \   = note:   expected enum `Option<&isize>`\n           found reference `&isize`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |             smallest_index\
    \ = Some(i);\n   |                              +++++ +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzzu1y529.rs:17:10\n   |\n17 |     Some(smallest_index)\n\
    \   |          ^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n  \
    \ = note: expected type `isize`\n              found enum `Option<&isize>`\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976083
