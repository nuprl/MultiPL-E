name: HumanEval_48_is_palindrome
language: rs
prompt: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
  \ -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
  \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
  aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n \
  \   assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
  xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
  }\n"
completions: ["    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    text.chars().for_each(|c| {\n        reversed.push(c).unwrap();\n    });\n\
    \    reversed == text", "    let mut s = String::from(text);\n    s.reverse();\n\
    \    s == text", "    let mut s = String::from(text);\n    s.reverse();\n    s\
    \ == text", "    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text", "    let mut reversed_text = text.to_lowercase().rev();\n\
    \    reversed_text == text", "    let mut text = text.to_lowercase();\n    let\
    \ mut reversed = String::new();\n    let mut i = 0;\n    while i < text.len()\
    \ {\n        reversed.push(*text.rsplit(|&x| x == ' ').nth(i).unwrap());\n   \
    \     i += 1;\n    }\n    reversed == text", "    let mut reversed_text = text.chars().collect::<String>().rev();\n\
    \    reversed_text == text", "    let mut text = text.to_string();\n    let mut\
    \ text_len = text.len();\n    let mut i = 0;\n    let mut j = text_len as usize;\n\
    \    while i < text_len && j > 0 {\n        if text[i] != text[j] {\n        \
    \    return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    true",
  "    let mut s = String::new();\n    for c in text.chars() {\n        if c != '\\\
    n' {\n            s.push_str(&c.to_string());\n        }\n    }\n    s == text",
  "    let mut text = text.to_string();\n    let mut reversed_text = text.clone();\n\
    \    reversed_text.reverse();\n    text == reversed_text", "    let mut reversed\
    \ = String::new();\n    reversed.push_str(&text.to_lowercase());\n    reversed.reverse();\n\
    \    reversed == text", "    let mut text = text.chars().collect::<Vec<char>>();\n\
    \    text.reverse();\n    text.eq(&text)", "    let mut s = String::from(text);\n\
    \    s.reverse();\n    s == text", "    let mut s = String::from(text);\n    s.reverse();\n\
    \    s == text", "    let mut text = text.to_string();\n    let mut reversed =\
    \ String::new();\n    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text", "    let mut s = String::new();\n\
    \    s.reserve(text.len());\n    for c in text.chars() {\n        s.push(c);\n\
    \    }\n    s == text", "    let mut text = text.to_lowercase();\n    let mut\
    \ text_len = text.len();\n    let mut i = 0;\n    let mut j = 0;\n    while i\
    \ < text_len && j < text_len {\n        if text[i] != text[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    true", "   \
    \ let mut s = text;\n    s.reverse();\n    s == text", "    let mut s = String::new();\n\
    \    s.reserve(text.len());\n    for c in text.chars() {\n        if c != ' '\
    \ {\n            s.push_str(&c.to_string());\n        }\n    }\n    s == text",
  "    let mut s = String::new();\n    s.reserve(text.len());\n    for c in text.chars()\
    \ {\n        if c != ' ' {\n            s.push_str(&c.to_string());\n        }\n\
    \    }\n    s == text"]
stop_tokens:
- "\n}"
