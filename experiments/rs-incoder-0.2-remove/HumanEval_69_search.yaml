name: HumanEval_69_search
language: rs
prompt: "/// You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the list.\n/// If no such a value exist, return -1.\n///\
  \ Examples:\nfn search(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut freq = HashMap::new();\n    for x in lst {\n        if\
    \ freq.contains_key(&x) {\n            freq.insert(x, freq.get(&x) + 1);\n   \
    \     } else {\n            freq.insert(x, 1);\n        }\n    }\n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq.get(x) > max_freq {\n            max_freq = freq.get(x);\n      \
    \      max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return\
    \ -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    \n    if freq[max_val] > max_freq {\n        max_freq\
    \ = freq[max_val];\n        max_val = max_val;\n    }\n    \n    max_val", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if freq[max_val]\
    \ > 0 {\n        max_freq\n    } else {\n        -1\n    }", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x\
    \ in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n\
    \            max_val = x;\n        }\n    }\n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = freq[x];\n        }\n    }\n    max - 1", "    let mut freq =\
    \ HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n\
    \    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return\
    \ -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ &i in lst {\n        freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max\
    \ = 0;\n    let mut max_freq = 0;\n    for (i, freq) in freq.iter().cloned().sorted_by_key(|&(_,\
    \ freq)| {\n        freq\n    }) {\n        if freq > max_freq {\n           \
    \ max_freq = freq;\n            max = i;\n        }\n    }\n    -1", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for x in freq.keys() {\n        if\
    \ freq[x] > max {\n            max = freq[x];\n        }\n    }\n    max", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    for x in freq.keys() {\n        if freq[x] >= *x {\n\
    \            return x;\n        }\n    }\n    \n    -1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    \n    freq.entry(max_val).or_insert(0)", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        if freq.contains_key(&x) {\n            freq.insert(x,\
    \ freq.get(&x) + 1);\n        } else {\n            freq.insert(x, 1);\n     \
    \   }\n    }\n    \n    if freq.contains_key(&0) {\n        return -1;\n    }\n\
    \    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq.get(&x) > max_freq {\n            max_freq = freq.get(&x);\n\
    \            max_val = x;\n        }\n    }\n    \n    return max_val;", "   \
    \ let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    for x in freq.keys() {\n        if freq[x] >= x {\n\
    \            return x;\n        }\n    }\n    -1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter()\
    \ {\n        if val > max_freq {\n            max_freq = val;\n            max_val\
    \ = key;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if freq[max_val] > 0 {\n        max_freq\n    } else {\n\
    \        -1\n    }", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq =\
    \ -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n  \
    \  \n    freq.entry(max_val).or_insert(0) -= 1;\n    \n    max_freq", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    for x in freq.keys() {\n        if freq[x] >= x {\n\
    \            return x;\n        }\n    }\n    \n    -1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for (key, val) in freq.iter() {\n        if val\
    \ > max_freq {\n            max_freq = val;\n            max_val = key;\n    \
    \    }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for ele in lst {\n     \
    \   freq.entry(ele).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n  \
    \  let mut max_ele : isize = 0;\n    for ele in freq.iter() {\n        if freq[ele]\
    \ > max_freq {\n            max_freq = freq[ele];\n            max_ele = ele;\n\
    \        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_ele;", "    let mut freq = HashMap::new();\n    for el in lst {\n      \
    \  freq.entry(el).or_insert(0) += 1;\n    }\n    \n    let mut max_el = -1;\n\
    \    let mut max_freq = -1;\n    for el in freq.keys() {\n        if freq[el]\
    \ > max_freq {\n            max_freq = freq[el];\n            max_el = el;\n \
    \       }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n \
    \   \n    return max_el;", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n  \
    \  \n    max_freq", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max: isize = 0;\n\
    \    let mut max_freq = 0;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max = x;\n        }\n    }\n\
    \    if freq[max] > max_freq {\n        -1\n    } else {\n        max\n    }",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = 0;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max {\n            max = freq[x];\n        }\n    }\n    if max == 0 {\n \
    \       return -1;\n    }\n    max", "    let mut freq = HashMap::new();\n   \
    \ for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0) +=\
    \ 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n   \
    \ \n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if freq.contains_key(&max_val)\
    \ && freq[max_val] > max_freq {\n        max_freq = freq[max_val];\n        max_val\
    \ = max_val;\n    }\n    \n    max_val", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    \n    if freq[max_val] >= max_freq {\n        max_val\n    } else {\n\
    \        -1\n    }", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    freq.entry(max_value).or_insert(0);\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    freq.entry(max_value).or_insert(0);\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    freq.entry(max_value).or_insert(0);\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    freq.entry(max_value).or_insert(0);\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    freq.entry(max_value).or_insert(0);\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    freq.entry(max_value).or_insert(0);\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if freq[max_val] == 0 {\n   \
    \     return -1;\n    }\n    \n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max = -1;\n    for x in freq.keys() {\n        if freq[x] > max {\n\
    \            max = freq[x];\n        }\n    }\n    \n    if max == -1 {\n    \
    \    return -1;\n    }\n    \n    let mut max = 0;\n    for x in freq.keys() {\n\
    \        if freq[x] >= max {\n            max = freq[x];\n        }\n    }\n \
    \   \n    max", "    let mut freq = HashMap::new();\n    for x in lst {\n    \
    \    freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    let mut\
    \ max_freq = 0;\n    for (key, val) in freq.iter() {\n        if val > max_freq\
    \ {\n            max = key;\n            max_freq = val;\n        }\n    }\n \
    \   \n    if max > 0 {\n        return max;\n    }\n    return -1;", "    let\
    \ mut freq = HashMap::new();\n    for el in lst {\n        freq.entry(el).or_insert(0)\
    \ += 1;\n    }\n    let mut max_el = -1;\n    let mut max_freq = -1;\n    for\
    \ (el, f) in freq.iter() {\n        if f > max_freq {\n            max_el = el;\n\
    \            max_freq = f;\n        }\n    }\n    if max_freq == 0 {\n       \
    \ return -1;\n    }\n    return max_el;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    \n    if freq.contains_key(&0) {\n        return -1;\n    }\n    \n    let\
    \ mut max_freq = -1;\n    let mut max_key = -1;\n    for (key, val) in freq.iter()\
    \ {\n        if val > max_freq {\n            max_freq = val;\n            max_key\
    \ = key;\n        }\n    }\n    \n    max_key", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    \n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_value = -1;\n    for (value, freq) in freq.iter() {\n\
    \        if freq > max_freq {\n            max_freq = freq;\n            max_value\
    \ = value;\n        }\n    }\n    \n    if max_freq == -1 {\n        -1\n    }\
    \ else {\n        max_value\n    }", "    let mut freq = HashMap::new();\n   \
    \ for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut\
    \ max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n       \
    \     max = x;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max = -1;\n    let mut max_freq = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] >= max_freq {\n            max = x;\n            max_freq\
    \ = freq[x];\n        }\n    }\n    \n    match freq.entry(max).or_insert(0) {\n\
    \        0 => -1,\n        _ => max,\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max: isize = 0;\n    for x in freq.keys() {\n        if freq[x] > max {\n\
    \            max = x;\n        }\n    }\n    if freq[max] == 0 {\n        return\
    \ -1;\n    }\n    max", "    let mut freq = HashMap::new();\n    for ele in lst\
    \ {\n        freq.entry(ele).or_insert(0) += 1;\n    }\n    let mut max_freq =\
    \ -1;\n    let mut max_elem = -1;\n    for (key, val) in freq.iter() {\n     \
    \   if val > max_freq {\n            max_freq = val;\n            max_elem = key;\n\
    \        }\n    }\n    if max_elem == -1 {\n        return -1;\n    }\n    return\
    \ max_elem;", "    let mut freq = HashMap::new();\n    for x in lst {\n      \
    \  freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for el in lst {\n        freq.entry(el).or_insert(0)\
    \ += 1;\n    }\n    \n    for el in freq.keys() {\n        if freq[el] >= el {\n\
    \            return el;\n        }\n    }\n    \n    -1", "    let mut freq =\
    \ HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n\
    \    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return\
    \ -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n       \
    \     max = x;\n        }\n    }\n    \n    freq.get(max).unwrap()", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for (val, freq) in freq.iter() {\n        if freq > max_freq {\n        \
    \    max_freq = freq;\n            max_val = val;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {\n        -1\n    } else {\n        max_val\n    }", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    freq.insert(x, 1);\n        }\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_value = -1;\n    for x in freq.iter() {\n        if *x.1 > max_freq\
    \ {\n            max_freq = *x.1;\n            max_value = *x.0;\n        }\n\
    \    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_value;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max = -1;\n    let mut max_freq = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max = x;\n\
    \            max_freq = freq[x];\n        }\n    }\n    \n    if freq[max] > max_freq\
    \ {\n        -1\n    } else {\n        max\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for ele\
    \ in lst {\n        freq.entry(ele).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_val = -1;\n    let mut max_key = 0;\n    for ele in lst {\n        if freq.get(ele).unwrap()\
    \ >= freq.get(max_key).unwrap() {\n            max_val = ele;\n            max_key\
    \ = ele;\n        }\n    }\n    \n    max_val", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.iter()\
    \ {\n        if *x.value >= *x.key {\n            if *x.value > max_freq {\n \
    \               max_freq = *x.value;\n                max_val = *x.key;\n    \
    \        }\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n  \
    \  }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        if let Some(count) = freq.get_mut(&x) {\n            *count +=\
    \ 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n   \
    \ freq.max_by_key(|x| x.1)", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n  \
    \  \n    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max =\
    \ -1;\n    let mut max_freq = 0;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max = x;\n            max_freq = freq[x];\n      \
    \  }\n    }\n    \n    if freq[max] > max_freq {\n        -1\n    } else {\n \
    \       max\n    }", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        if let Some(count) = freq.get_mut(&x) {\n            *count += 1;\n \
    \       } else {\n            freq.insert(x, 1);\n        }\n    }\n    freq.max_by_key(|x|\
    \ x.1)", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    let mut max_freq = -1;\n    for x in\
    \ freq.keys() {\n        if freq[x] > max_freq {\n            max = x;\n     \
    \       max_freq = freq[x];\n        }\n    }\n    \n    if freq[max] > max_freq\
    \ {\n        -1\n    } else {\n        max\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ if freq.contains_key(&x) {\n            freq.insert(x, freq.get(&x) + 1);\n\
    \        } else {\n            freq.insert(x, 1);\n        }\n    }\n    \n  \
    \  let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq.get(x) > max_freq {\n            max_freq = freq.get(x);\n\
    \            max_val = x;\n        }\n    }\n    \n    if freq.contains_key(&max_val)\
    \ && freq.get(&max_val) > 0 {\n        max_freq\n    } else {\n        -1\n  \
    \  }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_value = -1;\n\
    \    for (value, freq) in freq.iter() {\n        if freq > max_freq {\n      \
    \      max_freq = freq;\n            max_value = value;\n        }\n    }\n  \
    \  \n    if max_freq == -1 {\n        -1\n    } else {\n        max_value\n  \
    \  }", "    let mut freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    freq.insert(x, 1);\n        }\n    }\n    if freq.is_empty() {\n        -1\n\
    \    } else {\n        let mut max_freq = -1;\n        let mut max_val = -1;\n\
    \        for (_, val) in freq.iter() {\n            if val > max_freq {\n    \
    \            max_freq = val;\n                max_val = x;\n            }\n  \
    \      }\n        max_freq\n    }", "    let mut freq = HashMap::new();\n    for\
    \ ele in lst {\n        freq.entry(ele).or_insert(0) += 1;\n    }\n    let mut\
    \ max_freq = -1;\n    let mut max_ele : isize = 0;\n    for ele in freq.iter()\
    \ {\n        if freq[ele] > max_freq {\n            max_freq = freq[ele];\n  \
    \          max_ele = ele;\n        }\n    }\n    return max_ele;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for (val, freq) in freq.iter() {\n        if freq > max_freq {\n        \
    \    max_freq = freq;\n            max_val = val;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {\n        return -1;\n    }\n    \n    return max_val;",
  "    let mut freq = HashMap::new();\n    for &i in lst {\n        freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (i, freq) in freq.iter().enumerate() {\n        if freq > max_freq {\n     \
    \       max_freq = freq;\n            max_val = i;\n        }\n    }\n    if max_freq\
    \ == -1 {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n   \
    \ for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if freq[max_val]\
    \ == 0 {\n        return -1;\n    }\n    \n    max_freq", "    let mut freq =\
    \ HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n\
    \    }\n    let mut max = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max {\n            max = x;\n        }\n    }\n    freq.entry(max).or_insert(0)\
    \ // return -1 if no such value", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    \n    if freq[max_val] == 0 {\n        return -1;\n\
    \    }\n    \n    max_freq", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0) += 1;\n \
    \       } else {\n            freq.insert(x, 1);\n        }\n    }\n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if freq[max_val] > 0 {\n        max_freq\n    } else\
    \ {\n        -1\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max =\
    \ -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n            max\
    \ = x;\n        }\n    }\n    \n    freq.get(max).unwrap()", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    \n    for x in freq.iter() {\n        if freq[x] >= x {\n   \
    \         return x;\n        }\n    }\n    \n    -1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if freq[max_val] == 0 {\n        return -1;\n    }\n\
    \    \n    max_freq", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    for x in freq.keys()\
    \ {\n        if freq[x] >= x {\n            return x;\n        }\n    }\n    \n\
    \    -1", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (val, freq) in freq.iter() {\n        if freq > max_freq {\n            max_freq\
    \ = freq;\n            max_val = val;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for ele in lst {\n        freq.entry(ele).or_insert(0) += 1;\n    }\n   \
    \ \n    let mut max_freq = -1;\n    let mut max_ele = -1;\n    for ele in lst\
    \ {\n        if freq.get(ele).unwrap() >= max_freq {\n            max_freq = freq.get(ele).unwrap();\n\
    \            max_ele = ele;\n        }\n    }\n    \n    if max_freq == -1 {\n\
    \        return -1;\n    }\n    \n    max_ele", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if freq.contains_key(&max_val)\
    \ {\n        max_freq\n    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    \n    if freq.contains_key(&0) {\n        return -1;\n    }\n    \n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    \n    freq.insert(max_val, 1);\n    \n\
    \    max_freq", "    let mut freq = HashMap::new();\n    for x in lst {\n    \
    \    freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max = 0;\n   \
    \ let mut max_freq = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max = x;\n        }\n    }\n\
    \    \n    if freq[max] > 0 {\n        return max;\n    }\n    \n    return -1;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_value = -1;\n    for\
    \ (value, freq) in freq.iter() {\n        if freq > max_freq {\n            max_freq\
    \ = freq;\n            max_value = value;\n        }\n    }\n    if max_freq ==\
    \ -1 {\n        -1\n    } else {\n        max_value\n    }", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x\
    \ in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n\
    \            max_val = x;\n        }\n    }\n    if max_freq == 0 {\n        return\
    \ -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max: isize = 0;\n    let mut max_freq = 0;\n    for x in freq.keys() {\n   \
    \     if freq[x] > max_freq {\n            max_freq = freq[x];\n            max\
    \ = x;\n        }\n    }\n    \n    if freq[max] >= max_freq {\n        return\
    \ max;\n    }\n    \n    return -1;", "    let mut freq = HashMap::new();\n  \
    \  for x in lst {\n        if let Some(count) = freq.get_mut(&x) {\n         \
    \   *count += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n\
    \    }\n    let mut max_freq = -1;\n    for x in freq.iter() {\n        if *x.1\
    \ > max_freq {\n            max_freq = *x.1;\n        }\n    }\n    if max_freq\
    \ == -1 {\n        -1\n    } else {\n        max_freq\n    }", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n   \
    \ for (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    max_val", "    let mut freq =\
    \ HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n\
    \    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x\
    \ in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n\
    \            max_val = x;\n        }\n    }\n    \n    if freq[max_val] == 0 {\n\
    \        return -1;\n    }\n    \n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = x;\n        }\n    }\n    freq.get(max).unwrap()", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    freq.insert(x, 1);\n        }\n    }\n    if freq.contains_key(&0) {\n  \
    \      return -1;\n    }\n    let mut max_freq = freq.iter().max().unwrap();\n\
    \    for x in freq.iter() {\n        if *x > max_freq {\n            max_freq\
    \ = *x;\n        }\n    }\n    return max_freq;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq {\n       \
    \     max_freq = freq[x];\n        }\n    }\n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    let mut max_val = -1;\n    for x in freq.keys() {\n \
    \       if freq[x] == max_freq {\n            if x > max_val {\n             \
    \   max_val = x;\n            }\n        }\n    }\n    max_val", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    \n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    for x in freq.keys()\
    \ {\n        if freq[x] >= x {\n            return x;\n        }\n    }\n    \n\
    \    -1", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_value = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_value = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    freq.entry(max_value).or_insert(0);\n\
    \    \n    let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    freq.entry(max_value).or_insert(0);\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    freq.entry(max_value).or_insert(0);\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    freq.entry(max_value).or_insert(0);\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    freq.entry(max_value).or_insert(0);\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    freq.entry(max_value).or_insert(0);\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if freq[max_val]\
    \ > 0 {\n        max_freq\n    } else {\n        -1\n    }", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    let mut max_freq = 0;\n    for x in freq.keys()\
    \ {\n        if freq[x] >= max_freq {\n            max = x;\n            max_freq\
    \ = freq[x];\n        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.iter() {\n        if x.value >=\
    \ max_freq {\n            max_freq = x.value;\n            max_val = x.key;\n\
    \        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for &i in lst {\n      \
    \  freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for &(k, v) in freq.iter() {\n        if v > max_freq\
    \ {\n            max_freq = v;\n            max_val = k;\n        }\n    }\n \
    \   if max_freq == -1 {\n        -1\n    } else {\n        max_val\n    }", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    freq.insert(x, 1);\n        }\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if freq.contains_key(&max_val) {\n        max_freq\n    } else {\n \
    \       -1\n    }", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq =\
    \ -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n     \
    \   if freq > max_freq {\n            max_freq = freq;\n            max_val =\
    \ val;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    max_val", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if freq.contains_key(&max_val)\
    \ {\n        max_freq\n    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    if freq.contains_key(&0) {\n        -1\n    } else {\n        let mut max\
    \ = -1;\n        let mut max_freq = -1;\n        for (x, freq) in freq.iter()\
    \ {\n            if freq > max_freq {\n                max = x;\n            \
    \    max_freq = freq;\n            }\n        }\n        max\n    }", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    for x in freq.iter() {\n     \
    \   if x.value >= max_freq {\n            max_freq = x.value;\n        }\n   \
    \ }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_freq\n   \
    \ }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for x in freq.iter() {\n        if\
    \ x.value >= max {\n            max = x.value;\n        }\n    }\n    max - 1",
  "    let mut freq = HashMap::new();\n    for &i in lst {\n        if let Some(count)\
    \ = freq.get_mut(&i) {\n            *count += 1;\n        } else {\n         \
    \   freq.insert(i, 1);\n        }\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_value = -1;\n    for (_, count) in freq.iter_mut() {\n        if *count\
    \ > max_freq {\n            max_freq = *count;\n            max_value = i;\n \
    \       }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_value\n\
    \    }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for (key, val) in freq.iter() {\n        if val > max_freq {\n          \
    \  max_freq = val;\n            max_val = key;\n        }\n    }\n    \n    if\
    \ max_freq == -1 {\n        return -1;\n    }\n    \n    max_freq", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for (key, val) in freq.iter() {\n        if val > max_freq {\n          \
    \  max_freq = val;\n            max_val = key;\n        }\n    }\n    \n    if\
    \ max_freq == -1 {\n        -1\n    } else {\n        max_val\n    }", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if freq[max_val] ==\
    \ 0 {\n        return -1;\n    }\n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max\
    \ = -1;\n    let mut max_freq = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max = x;\n            max_freq = freq[x];\n      \
    \  }\n    }\n    \n    if freq[max] >= max_freq {\n        -1\n    } else {\n\
    \        max\n    }", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max {\n            max = freq[x];\n\
    \        }\n    }\n    if max == -1 {\n        return -1;\n    }\n    for x in\
    \ freq.keys() {\n        if freq[x] >= max {\n            return x;\n        }\n\
    \    }\n    return -1;", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    if freq.contains_key(&0) {\n        -1\n    } else {\n        let mut max_freq\
    \ = -1;\n        let mut max_key = -1;\n        for (key, val) in freq.iter()\
    \ {\n            if val > max_freq {\n                max_freq = val;\n      \
    \          max_key = key;\n            }\n        }\n        max_key\n    }",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    let mut max_freq = -1;\n    for (key,\
    \ val) in freq.iter() {\n        if val > max_freq {\n            max = key;\n\
    \            max_freq = val;\n        }\n    }\n    max - 1", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x\
    \ in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n\
    \            max_val = x;\n        }\n    }\n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in\
    \ freq.iter() {\n        if freq > max_freq {\n            max_freq = freq;\n\
    \            max_val = val;\n        }\n    }\n    \n    if max_freq == -1 {\n\
    \        return -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   for x in freq.keys() {\n        if freq[x] >= *x {\n            return x;\n\
    \        }\n    }\n    \n    -1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    max_freq", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        if let Some(count) = freq.get_mut(&x) {\n            *count +=\
    \ 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n   \
    \ \n    if freq.contains_key(&0) {\n        return -1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_key = -1;\n    for (key, val) in freq.iter()\
    \ {\n        if val > max_freq {\n            max_freq = val;\n            max_key\
    \ = key;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    freq.get(&max_key).unwrap()", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n   \
    \     if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq =\
    \ -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n  \
    \  \n    freq.entry(max_val).or_insert(0);\n    \n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n    \n    freq.entry(max_val).or_insert(0);\n\
    \    \n    for x in freq.keys() {\n        if freq[x] > max_freq {\n         \
    \   max_freq = freq[x];\n            max_val = x;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {\n        return -1;\n    }\n    \n    freq.entry(max_val).or_insert(0);\n\
    \    \n    for x in freq.keys() {\n        if freq[x] > max_freq {\n         \
    \   max_freq = freq[x];\n            max_val = x;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {\n        return -1;\n    }\n    \n    freq.entry(max_val).or_insert(0);\n\
    \    \n    for x in freq.keys() {\n        if freq[x] > max_freq {\n         \
    \   max_freq = freq[x];\n            max_val = x;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {\n        return -1;\n    }\n    \n    freq.entry(max_val).or_insert(0);\n\
    \    \n    for x in freq.keys() {\n        if freq[x] > max_freq {\n         \
    \   max_freq = freq[x];\n            max_val = x;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {\n        return -1;\n    }\n    \n    freq.entry(max_val).or_insert(0);\n\
    \    \n    for x in freq.keys() {\n        if freq[x] > max_freq {\n         \
    \   max_freq = freq[x];\n            max_val = x;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {\n        return -1;\n    }\n    \n    freq.entry(max_val).or_insert(0);\n\
    \    \n    for x in freq.keys() {\n        if freq[x] > max_freq {\n         \
    \   max_freq = freq[x];\n            max_val = x;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {", "    let mut freq = HashMap::new();\n    for &i in lst\
    \ {\n        freq.entry(i).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for &(i, _) in freq.iter() {\n       \
    \ if freq[i] > max_freq {\n            max_freq = freq[i];\n            max_val\
    \ = i;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    \n    if freq[max_val] > max_freq {\n        max_freq = freq[max_val];\n\
    \        max_val = max_val;\n    }\n    \n    max_val", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_value = -1;\n    for (value, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_value\
    \ = value;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else\
    \ {\n        max_value\n    }", "    let mut freq = HashMap::new();\n    for x\
    \ in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    freq.entry(max_val).or_insert(0) -= 1;\n    \n    max_freq",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (val, freq) in freq.iter() {\n        if freq > max_freq {\n            max_freq\
    \ = freq;\n            max_val = val;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = 0;\n    let mut max_freq = 0;\n    for x in freq.keys() {\n      \
    \  if freq[x] > max_freq {\n            max_freq = freq[x];\n            max =\
    \ x;\n        }\n    }\n    if freq[max] > max_freq {\n        return -1;\n  \
    \  }\n    max", "    let mut freq = HashMap::new();\n    for x in lst {\n    \
    \    freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n    \n    freq.entry(max_val).or_insert(0)\
    \ -= 1;\n    \n    max_freq", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == 0 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for (val, freq) in freq.iter() {\n        if freq > max_freq\
    \ {\n            max_freq = freq;\n            max_val = val;\n        }\n   \
    \ }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n    }",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    return -1;\n        }\n    }\n    let mut max_freq = -1;\n    let mut max_val\
    \ = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq {\n       \
    \     max_freq = freq[x];\n            max_val = x;\n        }\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_value = -1;\n    for (value, freq) in freq.iter() {\n        if freq\
    \ > max_freq {\n            max_freq = freq;\n            max_value = value;\n\
    \        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_value;", "    let mut freq = HashMap::new();\n    for x in lst {\n     \
    \   freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    let mut max_freq = 0;\n    for (key, val) in freq.iter() {\n        if val\
    \ > max_freq {\n            max = key;\n            max_freq = val;\n        }\n\
    \    }\n    if max == -1 {\n        return -1;\n    }\n    return max;", "   \
    \ let mut freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    freq.insert(x, 1);\n        }\n    }\n    if freq.contains_key(&0) {\n  \
    \      -1\n    } else {\n        freq.entry(0).or_insert(0) -+ 1\n    }", "  \
    \  let mut freq = HashMap::new();\n    for ele in lst {\n        if let Some(count)\
    \ = freq.get(&ele) {\n            if count >= ele {\n                return ele;\n\
    \            }\n            freq.insert(ele, count + 1);\n        } else {\n \
    \           freq.insert(ele, 1);\n        }\n    }\n    -1", "    let mut freq\
    \ = HashMap::new();\n    for el in lst {\n        freq.entry(el).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_el = -1;\n \
    \   for (el, _) in freq.iter() {\n        if freq[el] > max_freq {\n         \
    \   max_freq = freq[el];\n            max_el = el;\n        }\n    }\n    \n \
    \   if freq[max_el] > 0 {\n        max_freq\n    } else {\n        -1\n    }",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = 0;\n    for x in freq.keys() {\n        if freq[x]\
    \ >= max {\n            max = freq[x];\n        }\n    }\n    if max == 0 {\n\
    \        return -1;\n    }\n    max", "    let mut freq = HashMap::new();\n  \
    \  for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq =\
    \ -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if freq[max_val] > 0 {\n        max_freq\n    } else\
    \ {\n        -1\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max =\
    \ -1;\n    let mut max_freq = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max = x;\n            max_freq = freq[x];\n      \
    \  }\n    }\n    \n    if freq[max] > max_freq {\n        -1\n    } else {\n \
    \       max\n    }", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n        if freq\
    \ > max_freq {\n            max_freq = freq;\n            max_val = val;\n   \
    \     }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for &i in lst {\n      \
    \  freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for (i, freq) in freq.iter().enumerate() {\n        if\
    \ freq > max_freq {\n            max_freq = freq;\n            max_val = i;\n\
    \        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for (val, freq) in freq.iter() {\n        if freq > max_freq\
    \ {\n            max_freq = freq;\n            max_val = val;\n        }\n   \
    \ }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    freq.insert(x, 1);\n        }\n    }\n    freq.max_by_key(|x| x.1)", "  \
    \  let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for (val, freq) in freq.iter() {\n        if freq > max_freq {\n        \
    \    max_freq = freq;\n            max_val = val;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {\n        -1\n    } else {\n        max_val\n    }", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    let mut max_freq = -1;\n    for (k,\
    \ v) in freq.iter() {\n        if v > max_freq {\n            max = k;\n     \
    \       max_freq = v;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in\
    \ freq.iter() {\n        if freq > max_freq {\n            max_freq = freq;\n\
    \            max_val = val;\n        }\n    }\n    \n    if max_freq == -1 {\n\
    \        return -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in\
    \ freq.iter() {\n        if freq > max_freq {\n            max_freq = freq;\n\
    \            max_val = val;\n        }\n    }\n    \n    if max_freq == -1 {\n\
    \        return -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n\
    \        max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    return max_val;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    return max_val;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (val, freq) in freq.iter() {\n        if freq > max_freq {\n            max_freq\
    \ = freq;\n            max_val = val;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if freq[max_val] == 0 {\n   \
    \     return -1;\n    }\n    \n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for &i in lst {\n        freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (i, freq) in freq.iter().enumerate()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = i;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n\
    \        max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max =\
    \ -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n            max\
    \ = x;\n        }\n    }\n    \n    freq.get(max).unwrap()", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x\
    \ in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n\
    \            max_val = x;\n        }\n    }\n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   for x in freq.keys() {\n        if freq[x] >= lst.len() {\n            return\
    \ -1;\n        }\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val\
    \ = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq {\n       \
    \     max_freq = freq[x];\n            max_val = x;\n        }\n    }\n    \n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max: isize\
    \ = 0;\n    for x in freq.keys() {\n        if freq[x] > max {\n            max\
    \ = freq[x];\n        }\n    }\n    \n    if max == 0 {\n        return -1;\n\
    \    }\n    \n    max", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter() {\n    \
    \    if val > max_freq {\n            max_freq = val;\n            max_val = key;\n\
    \        }\n    }\n    \n    if max_freq == -1 {\n        -1\n    } else {\n \
    \       max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if freq[max_val] == 0 {\n        return -1;\n    }\n\
    \    \n    max_freq", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] >= max {\n            max = freq[x];\n\
    \        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0) += 1;\n \
    \       } else {\n            freq.insert(x, 1);\n        }\n    }\n    if freq.values().iter().any(|x|\
    \ x > 0) && freq.values().iter().any(|x| x >= freq.values().iter().max()) {\n\
    \        -1\n    } else {\n        freq.values().iter().max().unwrap()\n    }",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    return max_val;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == 0 {\n\
    \        return -1;\n    }\n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = freq[x];\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (k, v) in freq.iter()\
    \ {\n        if v > max_freq {\n            max_freq = v;\n            max_val\
    \ = k;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n\
    \        max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max: isize = 0;\n    for x in freq.iter() {\n    \
    \    if x.value > max {\n            max = x.value;\n        }\n    }\n    if\
    \ max > 0 {\n        max\n    } else {\n        -1\n    }", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x\
    \ in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n\
    \            max_val = x;\n        }\n    }\n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if freq[max_val] > 0 {\n    \
    \    max_freq\n    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max: isize = 0;\n    for (i, x) in freq.iter().enumerate() {\n        if\
    \ x > max {\n            max = x;\n        }\n        if freq[x] >= i {\n    \
    \        return x;\n        }\n    }\n    -1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = x;\n        }\n    }\n    freq.get(max).unwrap()", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    let mut max_freq = -1;\n    for x in\
    \ freq.keys() {\n        if freq[x] > max_freq {\n            max = x;\n     \
    \       max_freq = freq[x];\n        }\n    }\n    match freq.get(&max) {\n  \
    \      Some(val) => val,\n        None => -1,\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    let mut max_freq = -1;\n    for x in freq.keys() {\n        if freq[x] >\
    \ max_freq {\n            max = x;\n            max_freq = freq[x];\n        }\n\
    \    }\n    if max > -1 {\n        return max;\n    }\n    return -1;", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    return max_val;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = x;\n        }\n    }\n    freq.entry(max).or_insert(0)", "   \
    \ let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if freq[max_val]\
    \ > 0 {\n        max_val\n    } else {\n        -1\n    }"]
stop_tokens:
- "\n}"
