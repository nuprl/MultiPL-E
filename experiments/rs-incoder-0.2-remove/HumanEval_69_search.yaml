name: HumanEval_69_search
language: rs
prompt: "/// You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the list.\n/// If no such a value exist, return -1.\n///\
  \ Examples:\nfn search(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![5,\
  \ 5, 5, 5, 1]), 1);\n    assert_eq!(candidate(vec![4, 1, 4, 1, 4, 4]), 4);\n   \
  \ assert_eq!(candidate(vec![3, 3]), -1);\n    assert_eq!(candidate(vec![8, 8, 8,\
  \ 8, 8, 8, 8, 8]), 8);\n    assert_eq!(candidate(vec![2, 3, 3, 2, 2]), 2);\n   \
  \ assert_eq!(candidate(vec![2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1,\
  \ 7, 4, 10, 8, 1]), 1);\n    assert_eq!(candidate(vec![3, 2, 8, 2]), 2);\n    assert_eq!(candidate(vec![6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]), 1);\n    assert_eq!(candidate(vec![8, 8, 3,\
  \ 6, 5, 6, 4]), -1);\n    assert_eq!(candidate(vec![6, 9, 6, 7, 1, 4, 7, 1, 8, 8,\
  \ 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]), 1);\n    assert_eq!(candidate(vec![1,\
  \ 9, 10, 1, 3]), 1);\n    assert_eq!(candidate(vec![6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]), 5);\n    assert_eq!(candidate(vec![1]),\
  \ 1);\n    assert_eq!(candidate(vec![8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5]), 4);\n    assert_eq!(candidate(vec![2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]), 2);\n    assert_eq!(candidate(vec![1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]), 1);\n    assert_eq!(candidate(vec![9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4]), 4);\n    assert_eq!(candidate(vec![2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]), 4);\n    assert_eq!(candidate(vec![9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]), 2);\n    assert_eq!(candidate(vec![5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]), -1);\n    assert_eq!(candidate(vec![10]),\
  \ -1);\n    assert_eq!(candidate(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),\
  \ 2);\n    assert_eq!(candidate(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]), 1);\n\
  \    assert_eq!(candidate(vec![7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6]), 1);\n    assert_eq!(candidate(vec![3, 10, 10, 9, 2]), -1);\n\
  }\n"
completions: ["    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (val, freq) in freq.iter() {\n        if freq > max_freq {\n            max_freq\
    \ = freq;\n            max_val = val;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    return max_val;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    let mut max_freq = -1;\n    for (k,\
    \ v) in freq.iter() {\n        if v > max_freq {\n            max = k;\n     \
    \       max_freq = v;\n        }\n    }\n    max as isize", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x\
    \ in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n\
    \            max_val = x;\n        }\n    }\n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq =\
    \ -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if freq[max_val] > 0 {\n        max_freq\n    } else\
    \ {\n        -1\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n        if freq\
    \ > max_freq {\n            max_freq = freq;\n            max_val = val;\n   \
    \     }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq = -1;\n\
    \    let mut max_key = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_key = x;\n        }\n  \
    \  }\n    \n    if freq[max_key] == 0 {\n        return -1;\n    }\n    \n   \
    \ max_freq", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for (key, val) in freq.iter() {\n        if val > max_freq\
    \ {\n            max_freq = val;\n            max_val = key;\n        }\n    }\n\
    \    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    return max_val;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    freq.insert(x, 1);\n        }\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.iter() {\n        if x.value >= max_freq\
    \ {\n            max_freq = x.value;\n            max_val = x.key;\n        }\n\
    \    }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n \
    \   }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for (val, freq) in freq.iter() {\n        if freq > max_freq {\n        \
    \    max_freq = freq;\n            max_val = val;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {\n        return -1;\n    }\n    \n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max = -1;\n    let mut max_freq = 0;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max = x;\n            max_freq =\
    \ freq[x];\n        }\n    }\n    \n    if freq[max] > max_freq {\n        -1\n\
    \    } else {\n        max\n    }", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.iter() {\n        if x.value\
    \ >= max_freq {\n            max_freq = x.value;\n            max_val = x.key;\n\
    \        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    \n    for x in freq.keys() {\n\
    \        if freq[x] >= x {\n            return x;\n        }\n    }\n    \n  \
    \  return -1;", "    let mut freq = HashMap::new();\n    for x in lst {\n    \
    \    freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n   \
    \ let mut max_value = -1;\n    for (value, freq) in freq.iter() {\n        if\
    \ freq > max_freq {\n            max_freq = freq;\n            max_value = value;\n\
    \        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_value;", "    let mut freq = HashMap::new();\n    for x in lst {\n     \
    \   freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max = -1;\n   \
    \ for x in freq.keys() {\n        if freq[x] >= max {\n            max = x;\n\
    \        }\n    }\n    \n    match freq.get(max) {\n        Some(x) => x,\n  \
    \      None => -1,\n    }", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_value = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ >= max_freq {\n            max_freq = freq[x];\n            max_value = x;\n\
    \        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    \n    max_freq", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for (key, val) in freq.iter() {\n        if val\
    \ > max_freq {\n            max_freq = val;\n            max_val = key;\n    \
    \    }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n\
    \    }", "    let mut freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    return -1;\n        }\n    }\n    let mut max_freq = -1;\n    let mut max_val\
    \ = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq {\n       \
    \     max_freq = freq[x];\n            max_val = x;\n        }\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    for x in freq.keys() {\n        if freq[x] >= x {\n\
    \            return x;\n        }\n    }\n    \n    -1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if freq[max_val] > 0 {\n        max_freq\n\
    \    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n        if freq\
    \ > max_freq {\n            max_freq = freq;\n            max_val = val;\n   \
    \     }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n   \
    \ \n    max_val", "    let mut freq = HashMap::new();\n    for x in lst {\n  \
    \      freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n \
    \   let mut max_val = -1;\n    for (key, val) in freq.iter() {\n        if val\
    \ > max_freq {\n            max_freq = val;\n            max_val = key;\n    \
    \    }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for x in\
    \ freq.keys() {\n        if freq[x] >= max {\n            max = x;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for x in lst {\n  \
    \      freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n        if freq\
    \ > max_freq {\n            max_freq = freq;\n            max_val = val;\n   \
    \     }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n   \
    \ \n    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n   \
    \ }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    \n    for x in freq.keys() {\n\
    \        if freq[x] >= x {\n            return x;\n        }\n    }\n    -1",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max = -1;\n    let mut max_freq = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max = x;\n\
    \            max_freq = freq[x];\n        }\n    }\n    \n    match freq.entry(max).or_insert(0)\
    \ {\n        0 => -1,\n        _ => max,\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    let mut max_freq = 0;\n    for x in freq.keys() {\n     \
    \   if freq[x] > max_freq {\n            max = x;\n            max_freq = freq[x];\n\
    \        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for ele in lst {\n     \
    \   if let Some(count) = freq.get(&ele) {\n            if count >= ele {\n   \
    \             return ele;\n            }\n            freq.insert(ele, count +\
    \ 1);\n        } else {\n            freq.insert(ele, 1);\n        }\n    }\n\
    \    return -1;", "    let mut freq = HashMap::new();\n    for x in lst {\n  \
    \      freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n \
    \   let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_value = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_value = x;\n\
    \        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    \n    return max_value;", "    let mut freq = HashMap::new();\n    for x\
    \ in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for &i in lst {\n      \
    \  freq.entry(i).or_insert(0) += 1;\n    }\n    \n    let mut max_freq = -1;\n\
    \    let mut max_key = -1;\n    for (key, val) in freq.iter() {\n        if val\
    \ > max_freq {\n            max_freq = val;\n            max_key = key;\n    \
    \    }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n    \n\
    \    freq.get(&max_key).unwrap()", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    for x\
    \ in freq.iter() {\n        if x.value >= freq.value() {\n            return x.key;\n\
    \        }\n    }\n    \n    -1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for x in\
    \ freq.keys() {\n        if freq[x] > max {\n            max = x;\n        }\n\
    \    }\n    freq.get(max).unwrap()", "    let mut freq = HashMap::new();\n   \
    \ for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut\
    \ max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n       \
    \     max = freq[x];\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if freq[max_val] > 0 {\n    \
    \    max_freq\n    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n   \
    \     if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n   \
    \     if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n\
    \        max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        if let Some(count) = freq.get(x) {\n            if count > freq.get(x)\
    \ {\n                freq.insert(x, count + 1);\n            }\n        } else\
    \ {\n            freq.insert(x, 1);\n        }\n    }\n    freq.iter().max().unwrap()",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max = -1;\n    let mut max_freq = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max = x;\n\
    \            max_freq = freq[x];\n        }\n    }\n    \n    if freq[max] > max_freq\
    \ {\n        -1\n    } else {\n        max\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max = -1;\n    let mut max_freq = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max = x;\n            max_freq =\
    \ freq[x];\n        }\n    }\n    \n    if freq[max] > max_freq {\n        -1\n\
    \    } else {\n        max\n    }", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n        if freq\
    \ > max_freq {\n            max_freq = freq;\n            max_val = val;\n   \
    \     }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n   \
    \ \n    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    let mut max_freq = 0;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max = x;\n            max_freq = freq[x];\n        }\n    }\n\
    \    max - 1", "    let mut freq = HashMap::new();\n    for x in lst {\n     \
    \   freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    \n    if max_freq == 0 {\n        return -1;\n    }\n    \n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0) += 1;\n \
    \       } else {\n            freq.insert(x, 1);\n        }\n    }\n    let mut\
    \ max_freq = -1;\n    let mut max_key = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_key\
    \ = x;\n        }\n    }\n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   for x in freq.iter() {\n        if freq[x] >= x {\n            return x;\n\
    \        }\n    }\n    \n    -1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    \n    if freq[max_val] == 0 {\n        return -1;\n\
    \    }\n    \n    max_freq", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter() {\n    \
    \    if val > max_freq {\n            max_freq = val;\n            max_val = key;\n\
    \        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for (val, freq) in freq.iter() {\n        if freq > max_freq\
    \ {\n            max_freq = freq;\n            max_val = val;\n        }\n   \
    \ }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for (value, freq)\
    \ in freq.iter() {\n        if freq > max_freq {\n            max_freq = freq;\n\
    \            max_value = value;\n        }\n    }\n    \n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    \n    return max_value;", "    let mut freq\
    \ = HashMap::new();\n    for el in lst {\n        freq.entry(el).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_el = -1;\n    for\
    \ (el, _) in freq.iter() {\n        if freq[el] > max_freq {\n            max_freq\
    \ = freq[el];\n            max_el = el;\n        }\n    }\n    if max_freq ==\
    \ -1 {\n        return -1;\n    }\n    return max_el;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in\
    \ freq.iter() {\n        if freq > max_freq {\n            max_freq = freq;\n\
    \            max_val = val;\n        }\n    }\n    \n    if max_freq == -1 {\n\
    \        return -1;\n    }\n    \n    max_val", "    let mut freq = HashMap::new();\n\
    \    for el in lst {\n        if freq.contains_key(&el) {\n            freq.entry(*el).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(el, 1);\n        }\n    }\n\
    \    let mut max_el = -1;\n    let mut max_freq = -1;\n    for (el, _) in freq.iter()\
    \ {\n        if *el > max_freq {\n            max_freq = *el;\n            max_el\
    \ = el;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_el;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    for x in freq.keys()\
    \ {\n        if freq[x] >= x {\n            return x;\n        }\n    }\n    -1",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == 0 {\n        return\
    \ -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter()\
    \ {\n        if val > max_freq {\n            max_freq = val;\n            max_val\
    \ = key;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == 0 {\n        return -1;\n    }\n    \n    return max_val;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for x in freq.keys() {\n        if\
    \ freq[x] >= max {\n            max = freq[x];\n        }\n    }\n    match max\
    \ {\n        0 => -1,\n        _ => max,\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_value = -1;\n    for (value, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_value\
    \ = value;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n  \
    \  }\n    return max_value;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if max_freq == 0 {\n        return -1;\n    }\n   \
    \ \n    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            return -1;\n        }\n    }\n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = x;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        if let Some(count) = freq.get_mut(&x) {\n       \
    \     *count += 1;\n        } else {\n            freq.insert(x, 1);\n       \
    \ }\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in\
    \ freq.keys() {\n        if freq[x] >= max_freq {\n            max_freq = freq[x];\n\
    \            max_val = x;\n        }\n    }\n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = freq[x];\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n   \
    \     if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n\
    \        max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max {\n            max = x;\n\
    \        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    if freq.contains_key(&0) {\n        -1\n    } else {\n        let mut max_freq\
    \ = 0;\n        let mut max_x = -1;\n        for (x, freq) in freq.iter() {\n\
    \            if freq > max_freq {\n                max_freq = freq;\n        \
    \        max_x = x;\n            }\n        }\n        max_x\n    }", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if freq[max_val] > 0 {\n    \
    \    max_freq\n    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n   \
    \     if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n\
    \        max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == 0 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_key = -1;\n\
    \    for (key, val) in freq.iter() {\n        if val > max_freq {\n          \
    \  max_freq = val;\n            max_key = key;\n        }\n    }\n    \n    if\
    \ max_freq == -1 {\n        return -1;\n    }\n    \n    let mut max_val = -1;\n\
    \    for (key, val) in freq.iter() {\n        if val == max_freq && key > max_key\
    \ {\n            max_val = key;\n        }\n    }\n    \n    max_val", "    let\
    \ mut freq = HashMap::new();\n    for &i in lst {\n        freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (i, freq) in freq.iter().enumerate() {\n        if freq > max_freq {\n     \
    \       max_freq = freq;\n            max_val = i;\n        }\n    }\n    if max_freq\
    \ == -1 {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n   \
    \ for (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    return max_val;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    freq.insert(x, 1);\n        }\n    }\n    let mut max = -1;\n    for x in\
    \ freq.keys() {\n        if freq[x] > max {\n            max = x;\n        }\n\
    \    }\n    freq.get(&max).unwrap()", "    let mut freq = HashMap::new();\n  \
    \  for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n   \
    \ let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if freq[max_val] == 0 {\n   \
    \     return -1;\n    }\n    \n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    return max_value;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    let mut max_freq = -1;\n    for x in freq.keys() {\n        if freq[x] >\
    \ max_freq {\n            max = x;\n            max_freq = freq[x];\n        }\n\
    \    }\n    if freq[max] > max_freq {\n        -1\n    } else {\n        max\n\
    \    }", "    let mut freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    freq.insert(x, 1);\n        }\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    max_freq", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq =\
    \ -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if freq[max_val] > 0 {\n        max_val\n    } else\
    \ {\n        -1\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if freq[max_val]\
    \ > 0 {\n        max_val\n    } else {\n        -1\n    }", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for (key,\
    \ val) in freq.iter() {\n        if val > max_freq {\n            max_freq = val;\n\
    \            max_val = key;\n        }\n    }\n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   for x in freq.keys() {\n        if freq[x] > 0 {\n            return x;\n\
    \        }\n    }\n    \n    -1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for x in freq.keys() {\n        if freq[x] > max {\n            max\
    \ = freq[x];\n        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if freq[max_val] > 0 {\n        max_freq\n    } else\
    \ {\n        -1\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for x in freq.keys() {\n        if\
    \ freq[x] >= max {\n            max = freq[x];\n        }\n    }\n    max - 1",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            return -1;\n        }\n    }\n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] > max {\n    \
    \        max = x;\n        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    freq.max_by_key(|x| x.1)", "    let mut freq = HashMap::new();\n    for x\
    \ in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max =\
    \ -1;\n    for x in freq.keys() {\n        if freq[x] > max {\n            max\
    \ = freq[x];\n        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] >= max_freq {\n            max_freq = freq[x];\n     \
    \       max_val = x;\n        }\n    }\n    \n    if max_freq == -1 {\n      \
    \  return -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max = -1;\n    let mut max_freq = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max = x;\n            max_freq =\
    \ freq[x];\n        }\n    }\n    \n    if freq[max] > max_freq {\n        -1\n\
    \    } else {\n        max\n    }", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if freq[max_val] == 0 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0) += 1;\n \
    \       } else {\n            freq.insert(x, 1);\n        }\n    }\n    freq.max_by_key(|x|\
    \ x.1).unwrap_or(-1)", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0) +=\
    \ 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n   \
    \ let mut max = -1;\n    for x in freq.iter() {\n        if *x.1 > max {\n   \
    \         max = *x.1;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    let mut max_freq = 0;\n    for x in freq.keys() {\n     \
    \   if freq[x] > max_freq {\n            max = x;\n            max_freq = freq[x];\n\
    \        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for x in\
    \ freq.keys() {\n        if freq[x] > max {\n            max = x;\n        }\n\
    \    }\n    match freq[max] {\n        0 => -1,\n        x => x,\n    }", "  \
    \  let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if freq[max_val] ==\
    \ 0 {\n        return -1;\n    }\n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] >= max {\n            max = freq[x];\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max: isize\
    \ = 0;\n    for x in freq.keys() {\n        if freq[x] >= max {\n            max\
    \ = x;\n        }\n    }\n    if max > 0 {\n        max\n    } else {\n      \
    \  -1\n    }", "    let mut freq = HashMap::new();\n    for ele in lst {\n   \
    \     freq.entry(ele).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_ele : isize = 0;\n    for ele in lst {\n        if freq.get(ele).unwrap()\
    \ > max_freq {\n            max_freq = freq.get(ele).unwrap();\n            max_ele\
    \ = ele;\n        }\n    }\n    max_ele", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for x in freq.iter() {\n        if x.value >= max {\n            max = x.value;\n\
    \        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n           \
    \ max = freq[x];\n        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   for x in freq.keys() {\n        if freq[x] >= x {\n            return x;\n\
    \        }\n    }\n    \n    -1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys() {\n  \
    \      if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_value\
    \ = x;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    return max_value;", "    let mut freq = HashMap::new();\n  \
    \  for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for &i in lst\
    \ {\n        freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_key = -1;\n    for (key, val) in freq.iter() {\n        if val\
    \ > max_freq {\n            max_freq = val;\n            max_key = key;\n    \
    \    }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_key;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for ele in lst {\n        freq.entry(ele).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_ele : isize = 0;\n\
    \    for ele in freq.keys() {\n        if freq[ele] > max_freq {\n           \
    \ max_freq = freq[ele];\n            max_ele = ele;\n        }\n    }\n    max_ele",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for (value, freq)\
    \ in freq.iter() {\n        if freq > max_freq {\n            max_freq = freq;\n\
    \            max_value = value;\n        }\n    }\n    \n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    \n    return max_value;", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x\
    \ in freq.iter() {\n        if *x > max_freq {\n            max_freq = *x;\n \
    \           max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return\
    \ -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ el in lst {\n        freq.entry(el).or_insert(0) += 1;\n    }\n    let mut max_el\
    \ = -1;\n    let mut max_freq = -1;\n    for (el, freq) in freq.iter() {\n   \
    \     if freq > max_freq {\n            max_freq = freq;\n            max_el =\
    \ el;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n \
    \       max_el\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    let mut max_freq = -1;\n    for x in freq.keys() {\n        if freq[x] >\
    \ max_freq {\n            max = x;\n            max_freq = freq[x];\n        }\n\
    \    }\n    max - 1", "    let mut freq = HashMap::new();\n    for &i in lst {\n\
    \        freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for &(val, freq) in freq.iter() {\n        if\
    \ freq > max_freq {\n            max_freq = freq;\n            max_val = val;\n\
    \        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n       \
    \ max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst {\n \
    \       freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max = -1;\n    let mut max_freq = 0;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max = x;\n\
    \            max_freq = freq[x];\n        }\n    }\n    \n    if freq[max] > max_freq\
    \ {\n        -1\n    } else {\n        max\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] >= max_freq {\n            max_freq = freq[x];\n     \
    \       max_value = x;\n        }\n    }\n    \n    if max_freq == -1 {\n    \
    \    return -1;\n    }\n    \n    return max_value;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n\
    \        max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n   \
    \     if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for x in freq.keys() {\n        if freq[x] > max {\n            max\
    \ = freq[x];\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max: isize\
    \ = 0;\n    for x in freq.keys() {\n        if freq[x] >= max {\n            max\
    \ = x;\n        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter()\
    \ {\n        if val > max_freq {\n            max_freq = val;\n            max_val\
    \ = key;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter() {\n    \
    \    if val > max_freq {\n            max_freq = val;\n            max_val = key;\n\
    \        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if freq[max_val] == 0 {\n        return -1;\n    }\n    max_freq", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if freq[max_val] > 0 {\n    \
    \    max_freq\n    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == 0 {\n        return\
    \ -1;\n    }\n    \n    max_freq", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for x in freq.keys() {\n        if freq[x] > max {\n            max\
    \ = x;\n        }\n    }\n    freq.get(max).unwrap()", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    let mut max_freq = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max = x;\n            max_freq = freq[x];\n\
    \        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for x in freq.keys() {\n        if freq[x] > max {\n            max\
    \ = x;\n        }\n    }\n    match freq[max] {\n        0 => -1,\n        _ =>\
    \ max,\n    }", "    let mut freq = HashMap::new();\n    for ele in lst {\n  \
    \      if !freq.contains_key(ele) {\n            freq.insert(ele, 0);\n      \
    \  }\n        freq.entry(ele).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_ele = -1;\n    for ele in freq.keys() {\n        if freq[ele]\
    \ > max_freq {\n            max_freq = freq[ele];\n            max_ele = ele;\n\
    \        }\n    }\n    return max_ele;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for ele\
    \ in lst {\n        freq.entry(ele).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_ele : isize = 0;\n    for (ele, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_ele\
    \ = ele;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    return max_ele;", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    freq.entry(max_val).or_insert(0);\n    \n    for x in freq.keys()\
    \ {\n        if freq[x] >= max_freq {\n            return x;\n        }\n    }\n\
    \    \n    return -1;", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    for x in freq.keys()\
    \ {\n        if freq[x] >= x {\n            return x;\n        }\n    }\n    \n\
    \    -1", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for x in freq.iter() {\n        if\
    \ x.value > max {\n            max = x.value;\n        }\n    }\n    max", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    for x in freq.keys() {\n        if freq[x] >= x {\n\
    \            return x;\n        }\n    }\n    \n    -1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    for x in freq.keys() {\n        if freq[x]\
    \ >= max_freq {\n            return x;\n        }\n    }\n    return -1;", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max {\n            max = freq[x];\n\
    \        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_value = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_value = x;\n\
    \        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_value;", "    let mut freq = HashMap::new();\n    for x in lst {\n     \
    \   freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for (key, val) in freq.iter() {\n        if val > max_freq\
    \ {\n            max_freq = val;\n            max_val = key;\n        }\n    }\n\
    \    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n    }", " \
    \   let mut freq = HashMap::new();\n    for ele in lst {\n        freq.entry(ele).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_ele : isize = 0;\n\
    \    for ele in freq.iter() {\n        if *ele > max_freq {\n            max_freq\
    \ = *ele;\n            max_ele = ele;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_ele;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    \n    let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if freq.contains_key(&max_value)\
    \ {\n        max_freq\n    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for (key, val) in freq.iter() {\n        if val\
    \ > max_freq {\n            max_freq = val;\n            max_val = key;\n    \
    \    }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n    \n\
    \    max_val", "    let mut freq = HashMap::new();\n    for x in lst {\n     \
    \   freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for ele in lst {\n        freq.entry(ele).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_ele : isize = 0;\n\
    \    for ele in freq.keys() {\n        if freq[ele] > max_freq {\n           \
    \ max_freq = freq[ele];\n            max_ele = ele;\n        }\n    }\n    return\
    \ max_ele;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    \n    for x in freq.keys() {\n\
    \        if freq[x] >= x {\n            return x;\n        }\n    }\n    \n  \
    \  -1", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   for x in freq.keys() {\n        if freq[x] >= x {\n            return x;\n\
    \        }\n    }\n    \n    -1", "    let mut freq = HashMap::new();\n    for\
    \ &i in lst {\n        freq.entry(i).or_insert(0) += 1;\n    }\n    \n    let\
    \ mut max_freq = -1;\n    let mut max_key = -1;\n    for &(i, _) in freq.iter()\
    \ {\n        if freq[i] > max_freq {\n            max_freq = freq[i];\n      \
    \      max_key = i;\n        }\n    }\n    \n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    \n    freq.entry(max_key).or_insert(0) -= 1;\n    \n\
    \    max_freq", "    let mut freq = HashMap::new();\n    for x in lst {\n    \
    \    freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max = -1;\n  \
    \  let mut max_freq = -1;\n    for (k, v) in freq.iter() {\n        if v > max_freq\
    \ {\n            max = k;\n            max_freq = v;\n        }\n    }\n    \n\
    \    match freq.get(&max) {\n        Some(v) => v,\n        None => -1,\n    }",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.iter() {\n        if *x.value >= *max_freq {\n            max_freq\
    \ = *x.value;\n            max_val = x.key;\n        }\n    }\n    if max_freq\
    \ == -1 {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n   \
    \ for (val, freq) in freq.iter() {\n        if freq > max_freq {\n           \
    \ max_freq = freq;\n            max_val = val;\n        }\n    }\n    \n    if\
    \ max_freq == -1 {\n        return -1;\n    }\n    \n    max_val", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    freq.insert(x, 1);\n        }\n    }\n    if freq.contains_key(&0) {\n  \
    \      -1\n    } else {\n        let mut max = 0;\n        let mut max_freq =\
    \ 0;\n        for (x, freq) in freq.iter() {\n            if freq > max_freq {\n\
    \                max = x;\n                max_freq = freq;\n            }\n \
    \       }\n        max\n    }", "    let mut freq = HashMap::new();\n    for x\
    \ in lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    \n    let mut max_freq = -1;\n    let mut max_value = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_value = x;\n        }\n    }\n    \n    if freq.contains_key(&max_value)\
    \ && freq[max_value] > max_freq {\n        max_freq = freq[max_value];\n     \
    \   max_value = max_value;\n    }\n    \n    if max_freq == -1 {\n        return\
    \ -1;\n    }\n    \n    max_value", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for (val, freq) in freq.iter() {\n        if freq > max_freq\
    \ {\n            max_freq = freq;\n            max_val = val;\n        }\n   \
    \ }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for el in lst {\n        if freq.contains_key(&el)\
    \ {\n            freq.entry(*el).or_insert(0) += 1;\n        } else {\n      \
    \      freq.insert(*el, 1);\n        }\n    }\n    if freq.contains_key(&0) {\n\
    \        return -1;\n    }\n    let mut max = 0;\n    let mut max_el = 0;\n  \
    \  for (el, _) in freq.iter() {\n        if el > max {\n            max = el;\n\
    \            max_el = el;\n        }\n    }\n    return max_el;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;"]
stop_tokens:
- "\n}"
