language: rs
name: HumanEval_48_is_palindrome
results:
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    text.chars().for_each(|c| {\n        reversed.push(c).unwrap();\n    });\n\
    \    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for unit type `()` in the\
    \ current scope\n --> /tmp/tmpa_178gq0.rs:6:26\n  |\n6 |         reversed.push(c).unwrap();\n\
    \  |                          ^^^^^^ method not found in `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp0bxrfk7k.rs:8:23\n\
    \  |\n8 |         reversed.push(*text.chars().nth(i).unwrap());\n  |         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = text.to_lowercase().rev();\n    reversed_text\
    \ == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `rev` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpfa7scm00.rs:3:49\n    |\n3   |   \
    \    let mut reversed_text = text.to_lowercase().rev();\n    |               \
    \                                    ^^^ method cannot be called on `String` due\
    \ to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `&mut String: Iterator`\n            `str: Iterator`\n            which is\
    \ required by `&mut str: Iterator`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rsplit(|&x|\
    \ x == ' ').nth(i).unwrap());\n        i += 1;\n    }\n    reversed == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0631]: type mismatch in closure arguments\n --> /tmp/tmps2uv733r.rs:7:29\n\
    \  |\n7 |         reversed.push(*text.rsplit(|&x| x == ' ').nth(i).unwrap());\n\
    \  |                             ^^^^^^ ------------- found signature of `fn(&_)\
    \ -> _`\n  |                             |\n  |                             expected\
    \ signature of `fn(char) -> _`\n  |\n  = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `[closure@/tmp/tmps2uv733r.rs:7:36: 7:49]`\n\
    \nerror[E0599]: the method `nth` exists for struct `std::str::RSplit<'_, [closure@/tmp/tmps2uv733r.rs:7:36:\
    \ 7:49]>`, but its trait bounds were not satisfied\n   --> /tmp/tmps2uv733r.rs:7:51\n\
    \    |\n7   |           reversed.push(*text.rsplit(|&x| x == ' ').nth(i).unwrap());\n\
    \    |                                      -------------  ^^^ method cannot be\
    \ called on `std::str::RSplit<'_, [closure@/tmp/tmps2uv733r.rs:7:36: 7:49]>` due\
    \ to unsatisfied trait bounds\n    |                                      |\n\
    \    |                                      doesn't satisfy `<_ as FnOnce<(char,)>>::Output\
    \ = bool`\n    |                                      doesn't satisfy `_: FnMut<(char,)>`\n\
    \    |                                      doesn't satisfy `_: Pattern<'_>`\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `[closure@/tmp/tmps2uv733r.rs:7:36: 7:49]: Pattern<'_>`\n            which\
    \ is required by `std::str::RSplit<'_, [closure@/tmp/tmps2uv733r.rs:7:36: 7:49]>:\
    \ Iterator`\n            `<[closure@/tmp/tmps2uv733r.rs:7:36: 7:49] as FnOnce<(char,)>>::Output\
    \ = bool`\n            which is required by `std::str::RSplit<'_, [closure@/tmp/tmps2uv733r.rs:7:36:\
    \ 7:49]>: Iterator`\n            `[closure@/tmp/tmps2uv733r.rs:7:36: 7:49]: FnMut<(char,)>`\n\
    \            which is required by `std::str::RSplit<'_, [closure@/tmp/tmps2uv733r.rs:7:36:\
    \ 7:49]>: Iterator`\n            `CharPredicateSearcher<'_, [closure@/tmp/tmps2uv733r.rs:7:36:\
    \ 7:49]>: ReverseSearcher<'_>`\n            which is required by `std::str::RSplit<'_,\
    \ [closure@/tmp/tmps2uv733r.rs:7:36: 7:49]>: I"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = text.chars().collect::<String>().rev();\n\
    \    reversed_text == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `rev` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpl09w5ie2.rs:3:62\n    |\n3   |   \
    \    let mut reversed_text = text.chars().collect::<String>().rev();\n    |  \
    \                                                              ^^^ method cannot\
    \ be called on `String` due to unsatisfied trait bounds\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut text_len = text.len();\n\
    \    let mut i = 0;\n    let mut j = text_len as usize;\n    while i < text_len\
    \ && j > 0 {\n        if text[i] != text[j] {\n            return false;\n   \
    \     }\n        i += 1;\n        j -= 1;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\"\
    )), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp9oc3uieb.rs:8:12\n\
    \  |\n8 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \ --> /tmp/tmp9oc3uieb.rs:8:23\n  |\n8 |         if text[i] != text[j] {\n  |\
    \                       ^^^^^^^ `String` cannot be indexed by `usize`\n  |\n \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    for c in text.chars() {\n   \
    \     if c != '\\n' {\n            s.push_str(&c.to_string());\n        }\n  \
    \  }\n    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n  \
    \  assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf0c3sr5j.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed_text =\
    \ text.clone();\n    reversed_text.reverse();\n    text == reversed_text\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpt7b0v1ly.rs:5:19\n  |\n5 |     reversed_text.reverse();\n\
    \  |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.push_str(&text.to_lowercase());\n\
    \    reversed.reverse();\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmppc5j8sz3.rs:5:14\n  |\n5 |     reversed.reverse();\n\
    \  |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<Vec<char>>();\n    text.reverse();\n\
    \    text.eq(&text)\n}\n\nfn main() {\n    let candidate = is_palindrome;\n  \
    \  assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd1rg7rwz.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpekf_cm00.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.reserve(text.len());\n    for\
    \ c in text.chars() {\n        s.push(c);\n    }\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy6b5efm1.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut text_len = text.len();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < text_len && j < text_len\
    \ {\n        if text[i] != text[j] {\n            return false;\n        }\n \
    \       i += 1;\n        j += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpogy18nuv.rs:8:12\n\
    \  |\n8 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \ --> /tmp/tmpogy18nuv.rs:8:23\n  |\n8 |         if text[i] != text[j] {\n  |\
    \                       ^^^^^^^ `String` cannot be indexed by `usize`\n  |\n \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp78v_syy0.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.reserve(text.len());\n    for\
    \ c in text.chars() {\n        if c != ' ' {\n            s.push_str(&c.to_string());\n\
    \        }\n    }\n    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0p9vzqeh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.reserve(text.len());\n    for\
    \ c in text.chars() {\n        if c != ' ' {\n            s.push_str(&c.to_string());\n\
    \        }\n    }\n    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0p9vzqeh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<Vec<char>>();\n    text.reverse();\n\
    \    text == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7m_26662.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp5w_qv9cc.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpslz6lx18.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<String>();\n    text.rev().eq(&text)\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp7gwb4_hu.rs:4:10\n\
    \    |\n4   |       text.rev().eq(&text)\n    |            ^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed_text\
    \ = text.chars().collect::<String>();\n    reversed_text.reverse();\n    text\
    \ == reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n   \
    \ assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp69oieyc0.rs:5:19\n  |\n5 |     reversed_text.reverse();\n\
    \  |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.push_str(text);\n\
    \    reversed.rev();\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6_7mbnb5.rs:4:23\n  |\n4 |\
    \     reversed.push_str(text);\n  |                       ^^^^\n  |          \
    \             |\n  |                       expected `&str`, found struct `String`\n\
    \  |                       help: consider borrowing here: `&text`\n\nerror[E0599]:\
    \ `String` is not an iterator\n   --> /tmp/tmp6_7mbnb5.rs:5:14\n    |\n5   | \
    \      reversed.rev();\n    |                ^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len());\n\
    \    for &c in text.chars() {\n        reversed.push(c).unwrap();\n    }\n   \
    \ reversed.cmp(text) == Ordering::Reverse\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmpmrq6nman.rs:8:27\n  |\n8 |     reversed.cmp(text) == Ordering::Reverse\n\
    \  |                           ^^^^^^^^ use of undeclared type `Ordering`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpmrq6nman.rs:5:9\n  |\n5 |     for\
    \ &c in text.chars() {\n  |         ^^    ------------ this expression has type\
    \ `Option<char>`\n  |         |\n  |         expected `char`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `c`\n  |\n  =\
    \ note:   expected type `char`\n          found reference `&_`\n\nerror[E0599]:\
    \ no method named `unwrap` found for unit type `()` in the current scope\n -->\
    \ /tmp/tmpmrq6nman.rs:6:26\n  |\n6 |         reversed.push(c).unwrap();\n  | \
    \                         ^^^^^^ method not found in `()`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpmrq6nman.rs:8:18\n  |\n8 |     reversed.cmp(text) == Ordering::Reverse\n\
    \  |                  ^^^^\n  |                  |\n  |                  expected\
    \ `&String`, found struct `String`\n  |                  help: consider borrowing\
    \ here: `&text`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0433, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed_text\
    \ = text.chars().fold(String::new(), |mut acc, c| {\n        acc.push_str(&c.to_string());\n\
    \        acc\n    });\n    reversed_text == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph3_g73n2.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp0sivwkz8.rs:7:28\n\
    \  |\n7 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \  |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0sivwkz8.rs:10:28\n   |\n10 |\
    \     reversed.cmp(&text) == 0\n   |                            ^ expected enum\
    \ `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    text.rev();\n    text ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp0me1z3_l.rs:4:10\n\
    \    |\n4   |       text.rev();\n    |            ^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    for c in text.chars() {\n        reversed.push(c::to_lowercase());\n    }\n\
    \    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `c`\n\
    \ --> /tmp/tmp7u0a6j_4.rs:6:23\n  |\n6 |         reversed.push(c::to_lowercase());\n\
    \  |                       ^ use of undeclared crate or module `c`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp5w_qv9cc.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j] {\n\
    \            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp8c_ly8zg.rs:7:12\n\
    \  |\n7 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp8c_ly8zg.rs:7:23\n\
    \  |\n7 |         if text[i] != text[j] {\n  |                       ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp0bxrfk7k.rs:8:23\n\
    \  |\n8 |         reversed.push(*text.chars().nth(i).unwrap());\n  |         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp5w_qv9cc.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpq4j7msus.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    for ch in text.chars() {\n        reversed.push_str(&ch.to_string());\n \
    \   }\n    reversed.reverse();\n    text == reversed\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp9yx4vw7k.rs:8:14\n  |\n8 |     reversed.reverse();\n\
    \  |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut text_reversed\
    \ = String::new();\n    let mut i = 0;\n    while i < text.len() {\n        text_reversed\
    \ += text[i..].chars().collect::<String>();\n        i += 1;\n    }\n    text_reversed\
    \ == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_z26nzq0.rs:7:26\n  |\n7 |\
    \         text_reversed += text[i..].chars().collect::<String>();\n  |       \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |               \
    \           |\n  |                          expected `&str`, found struct `String`\n\
    \  |                          help: consider borrowing here: `&text[i..].chars().collect::<String>()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed_text\
    \ = text.chars().collect::<String>();\n    reversed_text.reverse();\n    text\
    \ == reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n   \
    \ assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp69oieyc0.rs:5:19\n  |\n5 |     reversed_text.reverse();\n\
    \  |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:12\n\
    \  |\n7 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:23\n\
    \  |\n7 |         if text[i] != text[j] {\n  |                       ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<String>();\n    text.rev().eq(text)\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpydjfom6c.rs:4:10\n\
    \    |\n4   |       text.rev().eq(text)\n    |            ^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut text_reversed\
    \ = text.chars().collect::<String>();\n    text_reversed.reverse();\n    text_reversed\
    \ == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpat46k59i.rs:5:19\n  |\n5 |     text_reversed.reverse();\n\
    \  |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.resize(text.len(),\
    \ 0);\n    for c in text.chars() {\n        reversed.swap(0, text.len() - 1 -\
    \ c, c);\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `resize` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpzs6qcfp4.rs:4:14\n  |\n4 |     reversed.resize(text.len(),\
    \ 0);\n  |              ^^^^^^ method not found in `String`\n\nerror[E0599]: no\
    \ method named `swap` found for struct `String` in the current scope\n --> /tmp/tmpzs6qcfp4.rs:6:18\n\
    \  |\n6 |         reversed.swap(0, text.len() - 1 - c, c);\n  |              \
    \    ^^^^ method not found in `String`\n\nerror[E0277]: cannot subtract `char`\
    \ from `usize`\n --> /tmp/tmpzs6qcfp4.rs:6:41\n  |\n6 |         reversed.swap(0,\
    \ text.len() - 1 - c, c);\n  |                                         ^ no implementation\
    \ for `usize - char`\n  |\n  = help: the trait `Sub<char>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n\
    \            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n      \
    \      <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n          \
    \  <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a\
    \ i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpekf_cm00.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:12\n\
    \  |\n7 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:23\n\
    \  |\n7 |         if text[i] != text[j] {\n  |                       ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[i..].to_lowercase());\n\
    \        i += 1;\n    }\n    reversed.cmp(&text) == 0\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj3969sq4.rs:10:28\n   |\n\
    10 |     reversed.cmp(&text) == 0\n   |                            ^ expected\
    \ enum `std::cmp::Ordering`, found integer\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    for &c in text.chars() {\n        reversed.push(c);\n    }\n    reversed.reverse();\n\
    \    text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5tzmbso_.rs:5:9\n  |\n5 |\
    \     for &c in text.chars() {\n  |         ^^    ------------ this expression\
    \ has type `Option<char>`\n  |         |\n  |         expected `char`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `c`\n  |\n  =\
    \ note:   expected type `char`\n          found reference `&_`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n -->\
    \ /tmp/tmp5tzmbso_.rs:8:14\n  |\n8 |     reversed.reverse();\n  |            \
    \  ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp0sivwkz8.rs:7:28\n\
    \  |\n7 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \  |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0sivwkz8.rs:10:28\n   |\n10 |\
    \     reversed.cmp(&text) == 0\n   |                            ^ expected enum\
    \ `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    text.rev();\n    text ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp0me1z3_l.rs:4:10\n\
    \    |\n4   |       text.rev();\n    |            ^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[i..].chars().collect::<String>());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp87amet6m.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp0sivwkz8.rs:7:28\n\
    \  |\n7 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \  |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0sivwkz8.rs:10:28\n   |\n10 |\
    \     reversed.cmp(&text) == 0\n   |                            ^ expected enum\
    \ `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp5w_qv9cc.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push((text[i..].chars().collect::<String>().rev().collect()));\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n --> /tmp/tmpws0qayr8.rs:7:23\n\
    \  |\n7 |         reversed.push((text[i..].chars().collect::<String>().rev().collect()));\n\
    \  |                       ^                                                 \
    \    ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these\
    \ parentheses\n  |\n7 -         reversed.push((text[i..].chars().collect::<String>().rev().collect()));\n\
    7 +         reversed.push(text[i..].chars().collect::<String>().rev().collect());\n\
    \  | \n\nerror[E0599]: `String` is not an iterator\n   --> /tmp/tmpws0qayr8.rs:7:62\n\
    \    |\n7   |           reversed.push((text[i..].chars().collect::<String>().rev().collect()));\n\
    \    |                                                                ^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed == text\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp97_fuptm.rs:7:28\n\
    \  |\n7 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \  |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:12\n\
    \  |\n7 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:23\n\
    \  |\n7 |         if text[i] != text[j] {\n  |                       ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed_text\
    \ = text.chars().collect::<String>();\n    reversed_text.reverse();\n    text\
    \ == reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n   \
    \ assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp69oieyc0.rs:5:19\n  |\n5 |     reversed_text.reverse();\n\
    \  |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.reserve(text.len());\n    for\
    \ c in text.chars() {\n        s.push_str(&c.to_string());\n    }\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw9_hjzp8.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push((text[i..].chars().collect::<String>().reverse()));\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n --> /tmp/tmp18ibceav.rs:7:23\n\
    \  |\n7 |         reversed.push((text[i..].chars().collect::<String>().reverse()));\n\
    \  |                       ^                                               ^\n\
    \  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \  |\n7 -         reversed.push((text[i..].chars().collect::<String>().reverse()));\n\
    7 +         reversed.push(text[i..].chars().collect::<String>().reverse());\n\
    \  | \n\nerror[E0599]: no method named `reverse` found for struct `String` in\
    \ the current scope\n --> /tmp/tmp18ibceav.rs:7:62\n  |\n7 |         reversed.push((text[i..].chars().collect::<String>().reverse()));\n\
    \  |                                                              ^^^^^^^ help:\
    \ there is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:12\n\
    \  |\n7 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:23\n\
    \  |\n7 |         if text[i] != text[j] {\n  |                       ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpekf_cm00.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp78v_syy0.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<Vec<char>>();\n    text.reverse();\n\
    \    text == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7m_26662.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:12\n\
    \  |\n7 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:23\n\
    \  |\n7 |         if text[i] != text[j] {\n  |                       ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    for &c in text.chars() {\n        reversed.push(c);\n    }\n    reversed.reverse();\n\
    \    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe4dhse09.rs:5:9\n  |\n5 |\
    \     for &c in text.chars() {\n  |         ^^    ------------ this expression\
    \ has type `Option<char>`\n  |         |\n  |         expected `char`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `c`\n  |\n  =\
    \ note:   expected type `char`\n          found reference `&_`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n -->\
    \ /tmp/tmpe4dhse09.rs:8:14\n  |\n8 |     reversed.reverse();\n  |            \
    \  ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp0bxrfk7k.rs:8:23\n\
    \  |\n8 |         reversed.push(*text.chars().nth(i).unwrap());\n  |         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp0bxrfk7k.rs:8:23\n\
    \  |\n8 |         reversed.push(*text.chars().nth(i).unwrap());\n  |         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.reserve(text.len());\n    for\
    \ c in text.chars() {\n        if c != ' ' {\n            s.push_str(&c.to_string());\n\
    \        }\n    }\n    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0p9vzqeh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<String>();\n    text.rev().eq(text)\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpydjfom6c.rs:4:10\n\
    \    |\n4   |       text.rev().eq(text)\n    |            ^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp78v_syy0.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpslz6lx18.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().fold(String::new(), |mut reversed,\
    \ c| {\n        reversed.push(*c);\n        reversed\n    });\n    reversed.chars().fold(true,\
    \ |mut is_palindrome, char| {\n        if char != reversed.chars().next() {\n\
    \            is_palindrome = false;\n        }\n        is_palindrome\n    });\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpcytla05y.rs:4:23\n\
    \  |\n4 |         reversed.push(*c);\n  |                       ^^\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpcytla05y.rs:8:20\n  |\n8 |         if char !=\
    \ reversed.chars().next() {\n  |                    ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found enum `Option`\n  |\n  = note: expected type `char`\n         \
    \    found enum `Option<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcytla05y.rs:2:35\n\
    \   |\n2  | fn is_palindrome(text: String) -> bool {\n   |    -------------  \
    \                ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n12 |     });\n\
    \   |       - help: remove this semicolon\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpq4j7msus.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<Vec<char>>();\n    text.reverse();\n\
    \    text == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7m_26662.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<String>();\n    text.reverse();\n\
    \    text == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmppl5adpit.rs:4:10\n  |\n4 |     text.reverse();\n\
    \  |          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp5w_qv9cc.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp78v_syy0.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp0sivwkz8.rs:7:28\n\
    \  |\n7 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \  |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0sivwkz8.rs:10:28\n   |\n10 |\
    \     reversed.cmp(&text) == 0\n   |                            ^ expected enum\
    \ `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<String>();\n    text.reverse();\n\
    \    text == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmppl5adpit.rs:4:10\n  |\n4 |     text.reverse();\n\
    \  |          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rsplit(|&c|\
    \ c == ' ').nth(i).unwrap());\n        i += 1;\n    }\n    reversed == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0631]: type mismatch in closure arguments\n --> /tmp/tmpoh7rnng8.rs:7:29\n\
    \  |\n7 |         reversed.push(*text.rsplit(|&c| c == ' ').nth(i).unwrap());\n\
    \  |                             ^^^^^^ ------------- found signature of `fn(&_)\
    \ -> _`\n  |                             |\n  |                             expected\
    \ signature of `fn(char) -> _`\n  |\n  = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `[closure@/tmp/tmpoh7rnng8.rs:7:36: 7:49]`\n\
    \nerror[E0599]: the method `nth` exists for struct `std::str::RSplit<'_, [closure@/tmp/tmpoh7rnng8.rs:7:36:\
    \ 7:49]>`, but its trait bounds were not satisfied\n   --> /tmp/tmpoh7rnng8.rs:7:51\n\
    \    |\n7   |           reversed.push(*text.rsplit(|&c| c == ' ').nth(i).unwrap());\n\
    \    |                                      -------------  ^^^ method cannot be\
    \ called on `std::str::RSplit<'_, [closure@/tmp/tmpoh7rnng8.rs:7:36: 7:49]>` due\
    \ to unsatisfied trait bounds\n    |                                      |\n\
    \    |                                      doesn't satisfy `<_ as FnOnce<(char,)>>::Output\
    \ = bool`\n    |                                      doesn't satisfy `_: FnMut<(char,)>`\n\
    \    |                                      doesn't satisfy `_: Pattern<'_>`\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `[closure@/tmp/tmpoh7rnng8.rs:7:36: 7:49]: Pattern<'_>`\n            which\
    \ is required by `std::str::RSplit<'_, [closure@/tmp/tmpoh7rnng8.rs:7:36: 7:49]>:\
    \ Iterator`\n            `<[closure@/tmp/tmpoh7rnng8.rs:7:36: 7:49] as FnOnce<(char,)>>::Output\
    \ = bool`\n            which is required by `std::str::RSplit<'_, [closure@/tmp/tmpoh7rnng8.rs:7:36:\
    \ 7:49]>: Iterator`\n            `[closure@/tmp/tmpoh7rnng8.rs:7:36: 7:49]: FnMut<(char,)>`\n\
    \            which is required by `std::str::RSplit<'_, [closure@/tmp/tmpoh7rnng8.rs:7:36:\
    \ 7:49]>: Iterator`\n            `CharPredicateSearcher<'_, [closure@/tmp/tmpoh7rnng8.rs:7:36:\
    \ 7:49]>: ReverseSearcher<'_>`\n            which is required by `std::str::RSplit<'_,\
    \ [closure@/tmp/tmpoh7rnng8.rs:7:36: 7:49]>: I"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp0bxrfk7k.rs:8:23\n\
    \  |\n8 |         reversed.push(*text.chars().nth(i).unwrap());\n  |         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.reserve(text.len());\n    for\
    \ c in text.chars() {\n        if c != ' ' {\n            s.push_str(&c.to_string());\n\
    \        }\n    }\n    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0p9vzqeh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed_text =\
    \ text.chars().fold(String::new(), |mut acc, c| {\n        acc.push(*c);\n   \
    \     acc\n    });\n    reversed_text == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpmb7w5mnd.rs:5:18\n\
    \  |\n5 |         acc.push(*c);\n  |                  ^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push((text[i..].chars().collect::<String>().rev().collect()));\n\
    \        i += 1;\n    }\n    text == reversed\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n --> /tmp/tmp3fx_af4e.rs:7:23\n\
    \  |\n7 |         reversed.push((text[i..].chars().collect::<String>().rev().collect()));\n\
    \  |                       ^                                                 \
    \    ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these\
    \ parentheses\n  |\n7 -         reversed.push((text[i..].chars().collect::<String>().rev().collect()));\n\
    7 +         reversed.push(text[i..].chars().collect::<String>().rev().collect());\n\
    \  | \n\nerror[E0599]: `String` is not an iterator\n   --> /tmp/tmp3fx_af4e.rs:7:62\n\
    \    |\n7   |           reversed.push((text[i..].chars().collect::<String>().rev().collect()));\n\
    \    |                                                                ^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    for i in text.chars().rev() {\n        reversed.push(i);\n    }\n    reversed\
    \ == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:12\n\
    \  |\n7 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:23\n\
    \  |\n7 |         if text[i] != text[j] {\n  |                       ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<Vec<char>>();\n    text.reverse();\n\
    \    text.iter().all(|c| c == text.last())\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `Option<&char>`\n --> /tmp/tmph012hst7.rs:5:27\n\
    \  |\n5 |     text.iter().all(|c| c == text.last())\n  |                     \
    \      ^^ no implementation for `&char == Option<&char>`\n  |\n  = help: the trait\
    \ `PartialEq<Option<&char>>` is not implemented for `&char`\n  = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp78v_syy0.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = String::new();\n    reversed_text.extend_from_slice(&text[..]);\n\
    \    reversed_text.extend_from_slice(&text[0..text.len()/2]);\n    reversed_text\
    \ == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `extend_from_slice` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpjmcf7m9y.rs:4:19\n  |\n4 |     reversed_text.extend_from_slice(&text[..]);\n\
    \  |                   ^^^^^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `extend_from_slice` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpjmcf7m9y.rs:5:19\n  |\n5 |     reversed_text.extend_from_slice(&text[0..text.len()/2]);\n\
    \  |                   ^^^^^^^^^^^^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[i..].chars().collect::<Vec<_>>().reverse().collect::<String>());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmptgnzojs6.rs:7:76\n\
    \  |\n7 |         reversed.push_str(&text[i..].chars().collect::<Vec<_>>().reverse().collect::<String>());\n\
    \  |                                                                         \
    \   ^^^^^^^ `()` is not an iterator\n  |\n  = note: the following trait bounds\
    \ were not satisfied:\n          `(): Iterator`\n          which is required by\
    \ `&mut (): Iterator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmphgfbt5to.rs:7:23\n\
    \  |\n7 |         reversed.push(*text.chars().nth(i).unwrap());\n  |         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpq4j7msus.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpq4j7msus.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rposition(|c|\
    \ c == &text[i..]));\n        i += 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rposition` found for struct `String` in\
    \ the current scope\n --> /tmp/tmp0lrx_cm1.rs:7:29\n  |\n7 |         reversed.push(*text.rposition(|c|\
    \ c == &text[i..]));\n  |                             ^^^^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp5w_qv9cc.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[i..].to_lowercase());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3g4i99mm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    reversed.resize(text.len(), 0);\n    for &c in text.chars() {\n        reversed.swap(0,\
    \ text.len() - 1 - c, &mut reversed);\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `resize` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpiod3vwnv.rs:5:14\n  |\n5 |     reversed.resize(text.len(),\
    \ 0);\n  |              ^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpiod3vwnv.rs:6:9\n  |\n6 |     for &c in text.chars() {\n\
    \  |         ^^    ------------ this expression has type `Option<char>`\n  | \
    \        |\n  |         expected `char`, found reference\n  |         help: you\
    \ can probably remove the explicit borrow: `c`\n  |\n  = note:   expected type\
    \ `char`\n          found reference `&_`\n\nerror[E0599]: no method named `swap`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpiod3vwnv.rs:7:18\n\
    \  |\n7 |         reversed.swap(0, text.len() - 1 - c, &mut reversed);\n  |  \
    \                ^^^^ method not found in `String`\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.iter().rev().next().unwrap());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpmvhy3l5w.rs:7:29\n  |\n7 |         reversed.push(*text.iter().rev().next().unwrap());\n\
    \  |                             ^^^^ method not found in `String`\n  |\nhelp:\
    \ because of the in-memory representation of `&str`, to obtain an `Iterator` over\
    \ each of its codepoint use method `chars`\n  |\n7 |         reversed.push(*text.chars().rev().next().unwrap());\n\
    \  |                             ~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpslz6lx18.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.iter().rev().next().unwrap());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpmvhy3l5w.rs:7:29\n  |\n7 |         reversed.push(*text.iter().rev().next().unwrap());\n\
    \  |                             ^^^^ method not found in `String`\n  |\nhelp:\
    \ because of the in-memory representation of `&str`, to obtain an `Iterator` over\
    \ each of its codepoint use method `chars`\n  |\n7 |         reversed.push(*text.chars().rev().next().unwrap());\n\
    \  |                             ~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp0bxrfk7k.rs:8:23\n\
    \  |\n8 |         reversed.push(*text.chars().nth(i).unwrap());\n  |         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut text_reversed\
    \ = text.chars().collect::<String>();\n    text_reversed.reverse();\n    text_reversed\
    \ == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpat46k59i.rs:5:19\n  |\n5 |     text_reversed.reverse();\n\
    \  |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp5w_qv9cc.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = String::new();\n    reversed_text.resize(text.len(),\
    \ 0);\n    for i in 0..text.len() {\n        reversed_text[i] = text[(text.len()\
    \ - 1) - i];\n    }\n    reversed_text == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `resize` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpmh13h6rk.rs:4:19\n  |\n4 |     reversed_text.resize(text.len(),\
    \ 0);\n  |                   ^^^^^^ method not found in `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n --> /tmp/tmpmh13h6rk.rs:6:9\n\
    \  |\n6 |         reversed_text[i] = text[(text.len() - 1) - i];\n  |        \
    \ ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n  |\n  = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n  = help: the following other\
    \ types implement trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n\
    \            <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpmh13h6rk.rs:6:28\n\
    \  |\n6 |         reversed_text[i] = text[(text.len() - 1) - i];\n  |        \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.push_str(&text[..]);\n\
    \    reversed.rev();\n    reversed.push_str(&text[0..]);\n    reversed.is_eq(&text)\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp7_cocysu.rs:5:14\n\
    \    |\n5   |       reversed.rev();\n    |                ^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror[E0599]: no method\
    \ named `is_eq` found for struct `String` in the current scope\n --> /tmp/tmp7_cocysu.rs:7:14\n\
    \  |\n7 |     reversed.is_eq(&text)\n  |              ^^^^^ method not found in\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut text_reversed\
    \ = text.chars().collect::<String>().rev();\n    text_reversed == text\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpzvdd7xqq.rs:4:62\n\
    \    |\n4   |       let mut text_reversed = text.chars().collect::<String>().rev();\n\
    \    |                                                                ^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpekf_cm00.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[i..].chars().collect::<Vec<_>>().reverse().collect::<String>());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmptgnzojs6.rs:7:76\n\
    \  |\n7 |         reversed.push_str(&text[i..].chars().collect::<Vec<_>>().reverse().collect::<String>());\n\
    \  |                                                                         \
    \   ^^^^^^^ `()` is not an iterator\n  |\n  = note: the following trait bounds\
    \ were not satisfied:\n          `(): Iterator`\n          which is required by\
    \ `&mut (): Iterator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rposition(text.as_bytes()[i]));\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rposition` found for struct `String` in\
    \ the current scope\n --> /tmp/tmprd3btzud.rs:7:29\n  |\n7 |         reversed.push(*text.rposition(text.as_bytes()[i]));\n\
    \  |                             ^^^^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed_text =\
    \ text.chars().collect::<String>();\n    reversed_text.reverse();\n    text ==\
    \ reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmps8xxzitz.rs:5:19\n  |\n5 |     reversed_text.reverse();\n\
    \  |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp5w_qv9cc.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed == text\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpc3zi0k8d.rs:7:28\n\
    \  |\n7 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \  |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rsplit(|&x|\
    \ x == ' ').next().unwrap());\n        i += 1;\n    }\n    reversed.is_equal(text)\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0631]: type mismatch in closure arguments\n --> /tmp/tmpvf2tdcd8.rs:7:29\n\
    \  |\n7 |         reversed.push(*text.rsplit(|&x| x == ' ').next().unwrap());\n\
    \  |                             ^^^^^^ ------------- found signature of `fn(&_)\
    \ -> _`\n  |                             |\n  |                             expected\
    \ signature of `fn(char) -> _`\n  |\n  = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `[closure@/tmp/tmpvf2tdcd8.rs:7:36: 7:49]`\n\
    \nerror[E0599]: the method `next` exists for struct `std::str::RSplit<'_, [closure@/tmp/tmpvf2tdcd8.rs:7:36:\
    \ 7:49]>`, but its trait bounds were not satisfied\n   --> /tmp/tmpvf2tdcd8.rs:7:51\n\
    \    |\n7   |           reversed.push(*text.rsplit(|&x| x == ' ').next().unwrap());\n\
    \    |                                      -------------  ^^^^ method cannot\
    \ be called on `std::str::RSplit<'_, [closure@/tmp/tmpvf2tdcd8.rs:7:36: 7:49]>`\
    \ due to unsatisfied trait bounds\n    |                                     \
    \ |\n    |                                      doesn't satisfy `<_ as FnOnce<(char,)>>::Output\
    \ = bool`\n    |                                      doesn't satisfy `_: FnMut<(char,)>`\n\
    \    |                                      doesn't satisfy `_: Pattern<'_>`\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `[closure@/tmp/tmpvf2tdcd8.rs:7:36: 7:49]: Pattern<'_>`\n            which\
    \ is required by `std::str::RSplit<'_, [closure@/tmp/tmpvf2tdcd8.rs:7:36: 7:49]>:\
    \ Iterator`\n            `<[closure@/tmp/tmpvf2tdcd8.rs:7:36: 7:49] as FnOnce<(char,)>>::Output\
    \ = bool`\n            which is required by `std::str::RSplit<'_, [closure@/tmp/tmpvf2tdcd8.rs:7:36:\
    \ 7:49]>: Iterator`\n            `[closure@/tmp/tmpvf2tdcd8.rs:7:36: 7:49]: FnMut<(char,)>`\n\
    \            which is required by `std::str::RSplit<'_, [closure@/tmp/tmpvf2tdcd8.rs:7:36:\
    \ 7:49]>: Iterator`\n            `CharPredicateSearcher<'_, [closure@/tmp/tmpvf2tdcd8.rs:7:36:\
    \ 7:49]>: ReverseSearcher<'_>`\n            which is required by `std::str::RSplit<'_,\
    \ [closure@/tmp/tmpvf2tdcd8.rs:7:36: 7:49]>:"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rsplit(i,\
    \ 1).unwrap());\n        i += 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmp87f6m7kv.rs:7:29\n     |\n7    |         reversed.push(*text.rsplit(i,\
    \ 1).unwrap());\n     |                             ^^^^^^ -  - supplied 2 arguments\n\
    \     |                             |\n     |                             expected\
    \ 1 argument\n     |\nnote: associated function defined here\n\nerror[E0599]:\
    \ no method named `unwrap` found for struct `std::str::RSplit` in the current\
    \ scope\n --> /tmp/tmp87f6m7kv.rs:7:42\n  |\n7 |         reversed.push(*text.rsplit(i,\
    \ 1).unwrap());\n  |                                          ^^^^^^ method not\
    \ found in `std::str::RSplit<'_, _>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push((text[i..].chars().collect::<String>()).rev());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpx5v5ep8r.rs:7:63\n\
    \    |\n7   |           reversed.push((text[i..].chars().collect::<String>()).rev());\n\
    \    |                                                                 ^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut text_reversed\
    \ = text.chars().fold(String::new(), |mut acc, c| {\n        acc.push(*c);\n \
    \       acc\n    });\n    text_reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpdjjfymqe.rs:5:18\n\
    \  |\n5 |         acc.push(*c);\n  |                  ^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    reversed.resize(text.len(), 0);\n    for i in 0..text.len() {\n        reversed.swap(0,\
    \ i, text.len() - i - 1);\n    }\n    reversed == text\n}\n\nfn main() {\n   \
    \ let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `resize` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpopdbwjxf.rs:5:14\n  |\n5 |     reversed.resize(text.len(),\
    \ 0);\n  |              ^^^^^^ method not found in `String`\n\nerror[E0599]: no\
    \ method named `swap` found for struct `String` in the current scope\n --> /tmp/tmpopdbwjxf.rs:7:18\n\
    \  |\n7 |         reversed.swap(0, i, text.len() - i - 1);\n  |              \
    \    ^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed_text\
    \ = String::new();\n    let mut i = 0;\n    while i < text.len() {\n        reversed_text.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed_text == text\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpwwcomx2b.rs:7:34\n  |\n7 |         reversed_text.push(*text.rbegin());\n\
    \  |                                  ^^^^^^ method not found in `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut text_len = text.len();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < text_len {\n        if\
    \ text[i] != text[j] {\n            return false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp1bgf5c3m.rs:8:12\n\
    \  |\n8 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n --> /tmp/tmp1bgf5c3m.rs:8:23\n\
    \  |\n8 |         if text[i] != text[j] {\n  |                       ^^^^^^^ `String`\
    \ cannot be indexed by `{integer}`\n  |\n  = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpmdgyt9am.rs:7:28\n\
    \  |\n7 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \  |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmdgyt9am.rs:10:28\n   |\n10 |\
    \     reversed.cmp(&text) == 0\n   |                            ^ expected enum\
    \ `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<String>();\n    text.rev().eq(&text)\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp7gwb4_hu.rs:4:10\n\
    \    |\n4   |       text.rev().eq(&text)\n    |            ^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len());\n\
    \    for ch in text.chars() {\n        reversed.push(*ch);\n    }\n    reversed\
    \ == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpbhqdx3jv.rs:6:23\n\
    \  |\n6 |         reversed.push(*ch);\n  |                       ^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<Vec<char>>();\n    text.reverse();\n\
    \    text == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7m_26662.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.reserve(text.len());\n    for\
    \ c in text.chars() {\n        if c != ' ' {\n            s.push_str(&c.to_string());\n\
    \        }\n    }\n    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0p9vzqeh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = String::new();\n    reversed_text.reserve(text.len());\n\
    \    for c in text.chars() {\n        reversed_text.push(c);\n    }\n    reversed_text\
    \ == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuaj75zmq.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rsplit(|&x|\
    \ x == ' ').unwrap().reverse());\n        i += 1;\n    }\n    reversed == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0631]: type mismatch in closure arguments\n --> /tmp/tmp9zovdgl1.rs:7:29\n\
    \  |\n7 |         reversed.push(*text.rsplit(|&x| x == ' ').unwrap().reverse());\n\
    \  |                             ^^^^^^ ------------- found signature of `fn(&_)\
    \ -> _`\n  |                             |\n  |                             expected\
    \ signature of `fn(char) -> _`\n  |\n  = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `[closure@/tmp/tmp9zovdgl1.rs:7:36: 7:49]`\n\
    \nerror[E0599]: no method named `unwrap` found for struct `std::str::RSplit` in\
    \ the current scope\n --> /tmp/tmp9zovdgl1.rs:7:51\n  |\n7 |         reversed.push(*text.rsplit(|&x|\
    \ x == ' ').unwrap().reverse());\n  |                                        \
    \           ^^^^^^ method not found in `std::str::RSplit<'_, [closure@/tmp/tmp9zovdgl1.rs:7:36:\
    \ 7:49]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0631.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed == text\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp97_fuptm.rs:7:28\n\
    \  |\n7 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \  |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len());\n\
    \    for ch in text.chars() {\n        reversed.push(*ch as char);\n    }\n  \
    \  reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n  \
    \  assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpezr0fb_m.rs:6:23\n\
    \  |\n6 |         reversed.push(*ch as char);\n  |                       ^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp78v_syy0.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp78v_syy0.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp5w_qv9cc.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpq4j7msus.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpslz6lx18.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpslz6lx18.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:12\n\
    \  |\n7 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:23\n\
    \  |\n7 |         if text[i] != text[j] {\n  |                       ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp78v_syy0.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpq4j7msus.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[i..].to_lowercase());\n\
    \        i += 1;\n    }\n    reversed.cmp(&text) == 0\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj3969sq4.rs:10:28\n   |\n\
    10 |     reversed.cmp(&text) == 0\n   |                            ^ expected\
    \ enum `std::cmp::Ordering`, found integer\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[i..].chars().collect::<Vec<_>>().reverse());\n\
    \        i += 1;\n    }\n    reversed.cmp(&text) == 0\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo16zod20.rs:7:27\n  |\n7 |\
    \         reversed.push_str(&text[i..].chars().collect::<Vec<_>>().reverse());\n\
    \  |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `str`, found `()`\n  |\n  = note: expected reference `&str`\n     \
    \        found reference `&()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo16zod20.rs:10:28\n\
    \   |\n10 |     reversed.cmp(&text) == 0\n   |                            ^ expected\
    \ enum `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:12\n\
    \  |\n7 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:23\n\
    \  |\n7 |         if text[i] != text[j] {\n  |                       ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.push_str(&text[..]);\n\
    \    reversed.reverse();\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp1owbi88z.rs:5:14\n  |\n5 |     reversed.reverse();\n\
    \  |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpq4j7msus.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rsplit(i,\
    \ 1).unwrap());\n        i += 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmp87f6m7kv.rs:7:29\n     |\n7    |         reversed.push(*text.rsplit(i,\
    \ 1).unwrap());\n     |                             ^^^^^^ -  - supplied 2 arguments\n\
    \     |                             |\n     |                             expected\
    \ 1 argument\n     |\nnote: associated function defined here\n\nerror[E0599]:\
    \ no method named `unwrap` found for struct `std::str::RSplit` in the current\
    \ scope\n --> /tmp/tmp87f6m7kv.rs:7:42\n  |\n7 |         reversed.push(*text.rsplit(i,\
    \ 1).unwrap());\n  |                                          ^^^^^^ method not\
    \ found in `std::str::RSplit<'_, _>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[i..].to_lowercase());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3g4i99mm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp5w_qv9cc.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpq4j7msus.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut len = text.len();\n\
    \    let mut i = 0;\n    while i < len {\n        if text[i] != text[len - i -\
    \ 1] {\n            return false;\n        }\n        i += 1;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp85wwj5ed.rs:7:12\n\
    \  |\n7 |         if text[i] != text[len - i - 1] {\n  |            ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp85wwj5ed.rs:7:23\n\
    \  |\n7 |         if text[i] != text[len - i - 1] {\n  |                     \
    \  ^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n  |\n  = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n  = help: the following\
    \ other types implement trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n\
    \            <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.push_str(text);\n    s.reverse();\n\
    \    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgjppcv6.rs:4:16\n  |\n4 |\
    \     s.push_str(text);\n  |                ^^^^\n  |                |\n  |  \
    \              expected `&str`, found struct `String`\n  |                help:\
    \ consider borrowing here: `&text`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpqgjppcv6.rs:5:7\n\
    \  |\n5 |     s.reverse();\n  |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.iter().rev().next().unwrap());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpmvhy3l5w.rs:7:29\n  |\n7 |         reversed.push(*text.iter().rev().next().unwrap());\n\
    \  |                             ^^^^ method not found in `String`\n  |\nhelp:\
    \ because of the in-memory representation of `&str`, to obtain an `Iterator` over\
    \ each of its codepoint use method `chars`\n  |\n7 |         reversed.push(*text.chars().rev().next().unwrap());\n\
    \  |                             ~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.reserve(text.len());\n    for\
    \ c in text.chars() {\n        s.push_str(&c.to_string());\n    }\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw9_hjzp8.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len());\n\
    \    for &c in text.chars() {\n        reversed.push(c);\n    }\n    reversed\
    \ == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwdzdf509.rs:5:9\n  |\n5 |\
    \     for &c in text.chars() {\n  |         ^^    ------------ this expression\
    \ has type `Option<char>`\n  |         |\n  |         expected `char`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `c`\n  |\n  =\
    \ note:   expected type `char`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[i..].chars().collect::<String>());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp87amet6m.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.push_str(&text.to_lowercase());\n\
    \    reversed.reverse();\n    text == reversed\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpvccf3648.rs:5:14\n  |\n5 |     reversed.reverse();\n\
    \  |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rposition(|&c|\
    \ c == ' '));\n        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n\
    \    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\"\
    )), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rposition` found for struct `String` in\
    \ the current scope\n --> /tmp/tmphfinis2b.rs:7:29\n  |\n7 |         reversed.push(*text.rposition(|&c|\
    \ c == ' '));\n  |                             ^^^^^^^^^ method not found in `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:12\n\
    \  |\n7 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm2qhqcd2.rs:7:23\n\
    \  |\n7 |         if text[i] != text[j] {\n  |                       ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976082
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpslz6lx18.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976082
