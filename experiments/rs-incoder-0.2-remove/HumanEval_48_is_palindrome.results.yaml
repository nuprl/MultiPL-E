language: rs
name: HumanEval_48_is_palindrome
results:
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    text.chars().for_each(|c| {\n        reversed.push(c).unwrap();\n    });\n\
    \    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for unit type `()` in the\
    \ current scope\n --> /tmp/tmpa_178gq0.rs:6:26\n  |\n6 |         reversed.push(c).unwrap();\n\
    \  |                          ^^^^^^ method not found in `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp0bxrfk7k.rs:8:23\n\
    \  |\n8 |         reversed.push(*text.chars().nth(i).unwrap());\n  |         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = text.to_lowercase().rev();\n    reversed_text\
    \ == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `rev` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpfa7scm00.rs:3:49\n    |\n3   |   \
    \    let mut reversed_text = text.to_lowercase().rev();\n    |               \
    \                                    ^^^ method cannot be called on `String` due\
    \ to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `&mut String: Iterator`\n            `str: Iterator`\n            which is\
    \ required by `&mut str: Iterator`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rsplit(|&x|\
    \ x == ' ').nth(i).unwrap());\n        i += 1;\n    }\n    reversed == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0631]: type mismatch in closure arguments\n --> /tmp/tmps2uv733r.rs:7:29\n\
    \  |\n7 |         reversed.push(*text.rsplit(|&x| x == ' ').nth(i).unwrap());\n\
    \  |                             ^^^^^^ ------------- found signature of `fn(&_)\
    \ -> _`\n  |                             |\n  |                             expected\
    \ signature of `fn(char) -> _`\n  |\n  = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `[closure@/tmp/tmps2uv733r.rs:7:36: 7:49]`\n\
    \nerror[E0599]: the method `nth` exists for struct `std::str::RSplit<'_, [closure@/tmp/tmps2uv733r.rs:7:36:\
    \ 7:49]>`, but its trait bounds were not satisfied\n   --> /tmp/tmps2uv733r.rs:7:51\n\
    \    |\n7   |           reversed.push(*text.rsplit(|&x| x == ' ').nth(i).unwrap());\n\
    \    |                                      -------------  ^^^ method cannot be\
    \ called on `std::str::RSplit<'_, [closure@/tmp/tmps2uv733r.rs:7:36: 7:49]>` due\
    \ to unsatisfied trait bounds\n    |                                      |\n\
    \    |                                      doesn't satisfy `<_ as FnOnce<(char,)>>::Output\
    \ = bool`\n    |                                      doesn't satisfy `_: FnMut<(char,)>`\n\
    \    |                                      doesn't satisfy `_: Pattern<'_>`\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `[closure@/tmp/tmps2uv733r.rs:7:36: 7:49]: Pattern<'_>`\n            which\
    \ is required by `std::str::RSplit<'_, [closure@/tmp/tmps2uv733r.rs:7:36: 7:49]>:\
    \ Iterator`\n            `<[closure@/tmp/tmps2uv733r.rs:7:36: 7:49] as FnOnce<(char,)>>::Output\
    \ = bool`\n            which is required by `std::str::RSplit<'_, [closure@/tmp/tmps2uv733r.rs:7:36:\
    \ 7:49]>: Iterator`\n            `[closure@/tmp/tmps2uv733r.rs:7:36: 7:49]: FnMut<(char,)>`\n\
    \            which is required by `std::str::RSplit<'_, [closure@/tmp/tmps2uv733r.rs:7:36:\
    \ 7:49]>: Iterator`\n            `CharPredicateSearcher<'_, [closure@/tmp/tmps2uv733r.rs:7:36:\
    \ 7:49]>: ReverseSearcher<'_>`\n            which is required by `std::str::RSplit<'_,\
    \ [closure@/tmp/tmps2uv733r.rs:7:36: 7:49]>: I"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = text.chars().collect::<String>().rev();\n\
    \    reversed_text == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `rev` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpl09w5ie2.rs:3:62\n    |\n3   |   \
    \    let mut reversed_text = text.chars().collect::<String>().rev();\n    |  \
    \                                                              ^^^ method cannot\
    \ be called on `String` due to unsatisfied trait bounds\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut text_len = text.len();\n\
    \    let mut i = 0;\n    let mut j = text_len as usize;\n    while i < text_len\
    \ && j > 0 {\n        if text[i] != text[j] {\n            return false;\n   \
    \     }\n        i += 1;\n        j -= 1;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\"\
    )), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp9oc3uieb.rs:8:12\n\
    \  |\n8 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \ --> /tmp/tmp9oc3uieb.rs:8:23\n  |\n8 |         if text[i] != text[j] {\n  |\
    \                       ^^^^^^^ `String` cannot be indexed by `usize`\n  |\n \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    for c in text.chars() {\n   \
    \     if c != '\\n' {\n            s.push_str(&c.to_string());\n        }\n  \
    \  }\n    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n  \
    \  assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf0c3sr5j.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed_text =\
    \ text.clone();\n    reversed_text.reverse();\n    text == reversed_text\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpt7b0v1ly.rs:5:19\n  |\n5 |     reversed_text.reverse();\n\
    \  |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.push_str(&text.to_lowercase());\n\
    \    reversed.reverse();\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmppc5j8sz3.rs:5:14\n  |\n5 |     reversed.reverse();\n\
    \  |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.chars().collect::<Vec<char>>();\n    text.reverse();\n\
    \    text.eq(&text)\n}\n\nfn main() {\n    let candidate = is_palindrome;\n  \
    \  assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd1rg7rwz.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::from(text);\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc88b7o1c.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rbegin());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rbegin` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpekf_cm00.rs:7:29\n  |\n7 |         reversed.push(*text.rbegin());\n\
    \  |                             ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.reserve(text.len());\n    for\
    \ c in text.chars() {\n        s.push(c);\n    }\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy6b5efm1.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut text_len = text.len();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < text_len && j < text_len\
    \ {\n        if text[i] != text[j] {\n            return false;\n        }\n \
    \       i += 1;\n        j += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpogy18nuv.rs:8:12\n\
    \  |\n8 |         if text[i] != text[j] {\n  |            ^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \ --> /tmp/tmpogy18nuv.rs:8:23\n  |\n8 |         if text[i] != text[j] {\n  |\
    \                       ^^^^^^^ `String` cannot be indexed by `usize`\n  |\n \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 1
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp78v_syy0.rs:4:7\n  |\n4 |     s.reverse();\n  |\
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.reserve(text.len());\n    for\
    \ c in text.chars() {\n        if c != ' ' {\n            s.push_str(&c.to_string());\n\
    \        }\n    }\n    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0p9vzqeh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = String::new();\n    s.reserve(text.len());\n    for\
    \ c in text.chars() {\n        if c != ' ' {\n            s.push_str(&c.to_string());\n\
    \        }\n    }\n    s == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0p9vzqeh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747737
