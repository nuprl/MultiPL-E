language: rs
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpqa0863yt.rs:5:67\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n  |  \
    \                                                                 ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \  |\n  = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"\\\"\", \"\");\n    numbers.replace(\";\",\
    \ \"\");\n    numbers.replace(\"\\n\", \" \");\n    numbers.replace(\"\\t\", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpt9eiqy1h.rs:78:123\n\
    \   |\n78 |       assert_eq!(candidate(String::from(\"six five four three two\
    \ one zero\")), String::from(\"zero one two three four five six\"));\n   |  ___________________________________________________________________________________________________________________________^\n\
    79 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    let mut numbers_array = numbers.chars().collect::<Vec<&str>>();\n\
    \    numbers_array.sort();\n    numbers = numbers_array.iter().collect::<String>().to_string();\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n --> /tmp/tmpyjvf3b_u.rs:6:45\n  |\n6 |     let\
    \ mut numbers_array = numbers.chars().collect::<Vec<&str>>();\n  |           \
    \                                  ^^^^^^^ value of type `Vec<&str>` cannot be\
    \ built from `std::iter::Iterator<Item=char>`\n  |\n  = help: the trait `FromIterator<char>`\
    \ is not implemented for `Vec<&str>`\n\nerror[E0277]: a value of type `String`\
    \ cannot be built from an iterator over elements of type `&&str`\n --> /tmp/tmpyjvf3b_u.rs:8:36\n\
    \  |\n8 |     numbers = numbers_array.iter().collect::<String>().to_string();\n\
    \  |                                    ^^^^^^^ value of type `String` cannot\
    \ be built from `std::iter::Iterator<Item=&&str>`\n  |\n  = help: the trait `FromIterator<&&str>`\
    \ is not implemented for `String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.chars().for_each(|c| {\n        if c.to_digit(10)\
    \ < 10 {\n            numbers.insert(0, '0');\n        }\n        numbers.insert(c.to_digit(10),\
    \ c.to_digit(10).to_string());\n    });\n    numbers\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6pdaugyt.rs:7:29\n  |\n7 |\
    \         if c.to_digit(10) < 10 {\n  |                             ^^\n  |  \
    \                           |\n  |                             expected enum `Option`,\
    \ found integer\n  |                             help: try using a variant of\
    \ the expected enum: `Some(10)`\n  |\n  = note: expected enum `Option<u32>`\n\
    \             found type `{integer}`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6pdaugyt.rs:10:24\n   |\n10 |         numbers.insert(c.to_digit(10),\
    \ c.to_digit(10).to_string());\n   |                        ^^^^^^^^^^^^^^ expected\
    \ `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n     \
    \         found enum `Option<u32>`\n\nerror[E0599]: the method `to_string` exists\
    \ for enum `Option<u32>`, but its trait bounds were not satisfied\n   --> /tmp/tmp6pdaugyt.rs:10:55\n\
    \    |\n10  |           numbers.insert(c.to_digit(10), c.to_digit(10).to_string());\n\
    \    |                                                         ^^^^^^^^^ method\
    \ cannot be called on `Option<u32>` due to unsatisfied trait bounds\n    |\n \
    \   = note: the following trait bounds were not satisfied:\n            `Option<u32>:\
    \ std::fmt::Display`\n            which is required by `Option<u32>: ToString`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppuaesl98.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\"'\", \"\");\n   |                             - help:\
    \ consider removing this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppuaesl98.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\"'\", \"\");\n   |                             - help:\
    \ consider removing this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split_whitespace();\n    numbers_arr.sort_by(|a, b| a.cmp(b));\n \
    \   numbers_arr.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpjciit0l9.rs:6:17\n  |\n6 |     numbers_arr.sort_by(|a,\
    \ b| a.cmp(b));\n  |                 ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `join` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmpjciit0l9.rs:7:17\n  |\n7 |     numbers_arr.join(\"\
    \ \")\n  |                 ^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut\
    \ numbers_sorted_list_index = Vec::new();\n\n    for number in numbers.chars().take(numbers.len()\
    \ - 1) {\n        let mut numbers_sorted_list_index = numbers_sorted_list_index.clone();\n\
    \        let mut numbers_sorted_list = numbers_sorted_list.clone();\n        let\
    \ mut numbers_sorted = numbers_sorted.clone();\n\n        if numbers_sorted_list_index.is_empty()\
    \ {\n            numbers_sorted_list_index.push(0);\n            numbers_sorted_list.push(number);\n\
    \            numbers_sorted.push(number);\n        } else {\n            let mut\
    \ current_index = numbers_sorted_list_index[0];\n            let mut current_number\
    \ = numbers_sorted_list[0];\n            let mut current_number = numbers_sorted[0];\n\
    \n            for index in numbers_sorted_list_index.iter().rev() {\n        \
    \        if current_number < numbers_sorted_list[index] {\n                  \
    \  current_number = numbers_sorted_list[index];\n                    current_index\
    \ = index;\n                }\n            }\n\n            numbers_sorted_list_index.pop();\n\
    \            numbers_sorted_list.pop();\n            numbers_sorted.pop();\n \
    \           numbers_sorted_list_index.push(current_index);\n            numbers_sorted_list.push(current_number);\n\
    \            numbers_sorted.push(current_number);\n        }\n    }\n\n    numbers_sorted\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpfy3okgsz.rs:21:38\n   |\n21 |             let mut current_number = numbers_sorted[0];\n\
    \   |                                      ^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not\
    \ implemented for `String`\n\nerror[E0277]: the type `[char]` cannot be indexed\
    \ by `&{integer}`\n  --> /tmp/tmpfy3okgsz.rs:24:37\n   |\n24 |               \
    \  if current_number < numbers_sorted_list[index] {\n   |                    \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[char]>` is not\
    \ implemented for `&{integer}`\n   = note: required because of the requirements\
    \ on the impl of `Index<&{integer}>` for `Vec<char>`\n\nerror[E0277]: the type\
    \ `[char]` cannot be indexed by `&{integer}`\n  --> /tmp/tmpfy3okgsz.rs:25:38\n\
    \   |\n25 |                     current_number = numbers_sorted_list[index];\n\
    \   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[char]>`\
    \ is not implemented for `&{integer}`\n   = note: required because of the requirements\
    \ on the impl of `Index<&{integer}>` for `Vec<char>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfy3okgsz.rs:26:37\n   |\n26 |                     current_index\
    \ = index;\n   |                                     ^^^^^ expected integer, found\
    \ `&{integer}`\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |    \
    \                 current_index = *index;\n   |                              \
    \       +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split(\" \").collect();\n    numbers_vec.sort();\n   \
    \ numbers_vec.reverse();\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpp2p9l1iu.rs:5:59\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.split(\" \").collect();\n  |        \
    \                                                   ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n  |\n  = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.chars().collect();\n    numbers_vec.sort();\n    let mut\
    \ numbers_string: String = String::new();\n    for number in numbers_vec {\n \
    \       numbers_string.push_str(&number);\n    }\n    numbers_string\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n --> /tmp/tmp_0xxbioy.rs:5:56\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.chars().collect();\n  |             \
    \                                           ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n  |\n  = help: the trait\
    \ `FromIterator<char>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| {\n        match a {\n            '0' => 1,\n            '1' => 2,\n    \
    \        '2' => 3,\n            '3' => 4,\n            '4' => 5,\n           \
    \ '5' => 6,\n            '6' => 7,\n            '7' => 8,\n            '8' =>\
    \ 9,\n            '9' => 10,\n            _ => panic!(\"Invalid character in sort_numbers:\
    \ {}\", a),\n        }\n        match b {\n            '0' => 1,\n           \
    \ '1' => 2,\n            '2' => 3,\n            '3' => 4,\n            '4' =>\
    \ 5,\n            '5' => 6,\n            '6' => 7,\n            '7' => 8,\n  \
    \          '8' => 9,\n            '9' => 10,\n            _ => panic!(\"Invalid\
    \ character in sort_numbers: {}\", b),\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp_nhlp3qu.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| {\n  |                     ^^^^^^^ method not found in `Chars<'_>`\n\nerror[E0308]:\
    \ `match` arms have incompatible types\n  --> /tmp/tmp_nhlp3qu.rs:17:18\n   |\n\
    6  | /         match a {\n7  | |             '0' => 1,\n8  | |             '1'\
    \ => 2,\n9  | |             '2' => 3,\n...  |\n16 | |             '9' => 10,\n\
    \   | |                    -- this and all prior arms are found to be of type\
    \ `{integer}`\n17 | |             _ => panic!(\"Invalid character in sort_numbers:\
    \ {}\", a),\n   | |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found `()`\n18 | |         }\n   | |_________- `match` arms\
    \ have incompatible types\n   |\n   = note: this error originates in the macro\
    \ `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    five\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"four\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"three\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    two\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"zero\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    five\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"four\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"three\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    two\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"zero\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    five\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"four\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"three\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    two\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"zero\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    fi\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpksg5lfkc.rs:84:123\n\
    \   |\n84 |       assert_eq!(candidate(String::from(\"six five four three two\
    \ one zero\")), String::from(\"zero one two three four five six\"));\n   |  ___________________________________________________________________________________________________________________________^\n\
    85 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 'zero',\n        '1' => 'one',\n        '2' => 'two',\n\
    \        '3' => 'three',\n        '4' => 'four',\n        '5' => 'five',\n   \
    \     '6' => 'six',\n        '7' => 'seven',\n        '8' => 'eight',\n      \
    \  '9' => 'nine',\n        _ => panic!(\"Invalid number: {}\", c),\n    }).collect::<Vec<_>>().sort_by(|a,\
    \ b| a.cmp(b)).collect::<Vec<_>>().join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n --> /tmp/tmp_vhpq3rm.rs:6:16\n\
    \  |\n6 |         '0' => 'zero',\n  |                ^^^^^^\n  |\nhelp: if you\
    \ meant to write a `str` literal, use double quotes\n  |\n6 |         '0' => \"\
    zero\",\n  |                ~~~~~~\n\nerror: character literal may only contain\
    \ one codepoint\n --> /tmp/tmp_vhpq3rm.rs:7:16\n  |\n7 |         '1' => 'one',\n\
    \  |                ^^^^^\n  |\nhelp: if you meant to write a `str` literal, use\
    \ double quotes\n  |\n7 |         '1' => \"one\",\n  |                ~~~~~\n\n\
    error: character literal may only contain one codepoint\n --> /tmp/tmp_vhpq3rm.rs:8:16\n\
    \  |\n8 |         '2' => 'two',\n  |                ^^^^^\n  |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n  |\n8 |         '2' => \"two\"\
    ,\n  |                ~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \ --> /tmp/tmp_vhpq3rm.rs:9:16\n  |\n9 |         '3' => 'three',\n  |        \
    \        ^^^^^^^\n  |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n  |\n9 |         '3' => \"three\",\n  |                ~~~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n  --> /tmp/tmp_vhpq3rm.rs:10:16\n\
    \   |\n10 |         '4' => 'four',\n   |                ^^^^^^\n   |\nhelp: if\
    \ you meant to write a `str` literal, use double quotes\n   |\n10 |         '4'\
    \ => \"four\",\n   |                ~~~~~~\n\nerror: character literal may only\
    \ contain one codepoint\n  --> /tmp/tmp_vhpq3rm.rs:11:16\n   |\n11 |         '5'\
    \ => 'five',\n   |                ^^^^^^\n   |\nhelp: if you meant to write a\
    \ `str` literal, use double quotes\n   |\n11 |         '5' => \"five\",\n   |\
    \                ~~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \  --> /tmp/tmp_vhpq3rm.rs:12:16\n   |\n12 |         '6' => 'six',\n   |     \
    \           ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n12 |         '6' => \"six\",\n   |                ~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n  --> /tmp/tmp_vhpq3rm.rs:13:16\n\
    \   |\n13 |         '7' => 'seven',\n   |                ^^^^^^^\n   "
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
