language: rs
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpqa0863yt.rs:5:67\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n  |  \
    \                                                                 ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \  |\n  = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"\\\"\", \"\");\n    numbers.replace(\";\",\
    \ \"\");\n    numbers.replace(\"\\n\", \" \");\n    numbers.replace(\"\\t\", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpt9eiqy1h.rs:78:123\n\
    \   |\n78 |       assert_eq!(candidate(String::from(\"six five four three two\
    \ one zero\")), String::from(\"zero one two three four five six\"));\n   |  ___________________________________________________________________________________________________________________________^\n\
    79 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    let mut numbers_array = numbers.chars().collect::<Vec<&str>>();\n\
    \    numbers_array.sort();\n    numbers = numbers_array.iter().collect::<String>().to_string();\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n --> /tmp/tmpyjvf3b_u.rs:6:45\n  |\n6 |     let\
    \ mut numbers_array = numbers.chars().collect::<Vec<&str>>();\n  |           \
    \                                  ^^^^^^^ value of type `Vec<&str>` cannot be\
    \ built from `std::iter::Iterator<Item=char>`\n  |\n  = help: the trait `FromIterator<char>`\
    \ is not implemented for `Vec<&str>`\n\nerror[E0277]: a value of type `String`\
    \ cannot be built from an iterator over elements of type `&&str`\n --> /tmp/tmpyjvf3b_u.rs:8:36\n\
    \  |\n8 |     numbers = numbers_array.iter().collect::<String>().to_string();\n\
    \  |                                    ^^^^^^^ value of type `String` cannot\
    \ be built from `std::iter::Iterator<Item=&&str>`\n  |\n  = help: the trait `FromIterator<&&str>`\
    \ is not implemented for `String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.chars().for_each(|c| {\n        if c.to_digit(10)\
    \ < 10 {\n            numbers.insert(0, '0');\n        }\n        numbers.insert(c.to_digit(10),\
    \ c.to_digit(10).to_string());\n    });\n    numbers\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6pdaugyt.rs:7:29\n  |\n7 |\
    \         if c.to_digit(10) < 10 {\n  |                             ^^\n  |  \
    \                           |\n  |                             expected enum `Option`,\
    \ found integer\n  |                             help: try using a variant of\
    \ the expected enum: `Some(10)`\n  |\n  = note: expected enum `Option<u32>`\n\
    \             found type `{integer}`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6pdaugyt.rs:10:24\n   |\n10 |         numbers.insert(c.to_digit(10),\
    \ c.to_digit(10).to_string());\n   |                        ^^^^^^^^^^^^^^ expected\
    \ `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n     \
    \         found enum `Option<u32>`\n\nerror[E0599]: the method `to_string` exists\
    \ for enum `Option<u32>`, but its trait bounds were not satisfied\n   --> /tmp/tmp6pdaugyt.rs:10:55\n\
    \    |\n10  |           numbers.insert(c.to_digit(10), c.to_digit(10).to_string());\n\
    \    |                                                         ^^^^^^^^^ method\
    \ cannot be called on `Option<u32>` due to unsatisfied trait bounds\n    |\n \
    \   = note: the following trait bounds were not satisfied:\n            `Option<u32>:\
    \ std::fmt::Display`\n            which is required by `Option<u32>: ToString`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppuaesl98.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\"'\", \"\");\n   |                             - help:\
    \ consider removing this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppuaesl98.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\"'\", \"\");\n   |                             - help:\
    \ consider removing this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split_whitespace();\n    numbers_arr.sort_by(|a, b| a.cmp(b));\n \
    \   numbers_arr.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpjciit0l9.rs:6:17\n  |\n6 |     numbers_arr.sort_by(|a,\
    \ b| a.cmp(b));\n  |                 ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `join` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmpjciit0l9.rs:7:17\n  |\n7 |     numbers_arr.join(\"\
    \ \")\n  |                 ^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut\
    \ numbers_sorted_list_index = Vec::new();\n\n    for number in numbers.chars().take(numbers.len()\
    \ - 1) {\n        let mut numbers_sorted_list_index = numbers_sorted_list_index.clone();\n\
    \        let mut numbers_sorted_list = numbers_sorted_list.clone();\n        let\
    \ mut numbers_sorted = numbers_sorted.clone();\n\n        if numbers_sorted_list_index.is_empty()\
    \ {\n            numbers_sorted_list_index.push(0);\n            numbers_sorted_list.push(number);\n\
    \            numbers_sorted.push(number);\n        } else {\n            let mut\
    \ current_index = numbers_sorted_list_index[0];\n            let mut current_number\
    \ = numbers_sorted_list[0];\n            let mut current_number = numbers_sorted[0];\n\
    \n            for index in numbers_sorted_list_index.iter().rev() {\n        \
    \        if current_number < numbers_sorted_list[index] {\n                  \
    \  current_number = numbers_sorted_list[index];\n                    current_index\
    \ = index;\n                }\n            }\n\n            numbers_sorted_list_index.pop();\n\
    \            numbers_sorted_list.pop();\n            numbers_sorted.pop();\n \
    \           numbers_sorted_list_index.push(current_index);\n            numbers_sorted_list.push(current_number);\n\
    \            numbers_sorted.push(current_number);\n        }\n    }\n\n    numbers_sorted\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpfy3okgsz.rs:21:38\n   |\n21 |             let mut current_number = numbers_sorted[0];\n\
    \   |                                      ^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not\
    \ implemented for `String`\n\nerror[E0277]: the type `[char]` cannot be indexed\
    \ by `&{integer}`\n  --> /tmp/tmpfy3okgsz.rs:24:37\n   |\n24 |               \
    \  if current_number < numbers_sorted_list[index] {\n   |                    \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[char]>` is not\
    \ implemented for `&{integer}`\n   = note: required because of the requirements\
    \ on the impl of `Index<&{integer}>` for `Vec<char>`\n\nerror[E0277]: the type\
    \ `[char]` cannot be indexed by `&{integer}`\n  --> /tmp/tmpfy3okgsz.rs:25:38\n\
    \   |\n25 |                     current_number = numbers_sorted_list[index];\n\
    \   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[char]>`\
    \ is not implemented for `&{integer}`\n   = note: required because of the requirements\
    \ on the impl of `Index<&{integer}>` for `Vec<char>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfy3okgsz.rs:26:37\n   |\n26 |                     current_index\
    \ = index;\n   |                                     ^^^^^ expected integer, found\
    \ `&{integer}`\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |    \
    \                 current_index = *index;\n   |                              \
    \       +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split(\" \").collect();\n    numbers_vec.sort();\n   \
    \ numbers_vec.reverse();\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpp2p9l1iu.rs:5:59\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.split(\" \").collect();\n  |        \
    \                                                   ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n  |\n  = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.chars().collect();\n    numbers_vec.sort();\n    let mut\
    \ numbers_string: String = String::new();\n    for number in numbers_vec {\n \
    \       numbers_string.push_str(&number);\n    }\n    numbers_string\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n --> /tmp/tmp_0xxbioy.rs:5:56\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.chars().collect();\n  |             \
    \                                           ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n  |\n  = help: the trait\
    \ `FromIterator<char>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| {\n        match a {\n            '0' => 1,\n            '1' => 2,\n    \
    \        '2' => 3,\n            '3' => 4,\n            '4' => 5,\n           \
    \ '5' => 6,\n            '6' => 7,\n            '7' => 8,\n            '8' =>\
    \ 9,\n            '9' => 10,\n            _ => panic!(\"Invalid character in sort_numbers:\
    \ {}\", a),\n        }\n        match b {\n            '0' => 1,\n           \
    \ '1' => 2,\n            '2' => 3,\n            '3' => 4,\n            '4' =>\
    \ 5,\n            '5' => 6,\n            '6' => 7,\n            '7' => 8,\n  \
    \          '8' => 9,\n            '9' => 10,\n            _ => panic!(\"Invalid\
    \ character in sort_numbers: {}\", b),\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp_nhlp3qu.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| {\n  |                     ^^^^^^^ method not found in `Chars<'_>`\n\nerror[E0308]:\
    \ `match` arms have incompatible types\n  --> /tmp/tmp_nhlp3qu.rs:17:18\n   |\n\
    6  | /         match a {\n7  | |             '0' => 1,\n8  | |             '1'\
    \ => 2,\n9  | |             '2' => 3,\n...  |\n16 | |             '9' => 10,\n\
    \   | |                    -- this and all prior arms are found to be of type\
    \ `{integer}`\n17 | |             _ => panic!(\"Invalid character in sort_numbers:\
    \ {}\", a),\n   | |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found `()`\n18 | |         }\n   | |_________- `match` arms\
    \ have incompatible types\n   |\n   = note: this error originates in the macro\
    \ `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    five\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"four\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"three\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    two\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"zero\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    five\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"four\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"three\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    two\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"zero\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    five\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"four\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"three\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    two\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"zero\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    fi\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpksg5lfkc.rs:84:123\n\
    \   |\n84 |       assert_eq!(candidate(String::from(\"six five four three two\
    \ one zero\")), String::from(\"zero one two three four five six\"));\n   |  ___________________________________________________________________________________________________________________________^\n\
    85 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 'zero',\n        '1' => 'one',\n        '2' => 'two',\n\
    \        '3' => 'three',\n        '4' => 'four',\n        '5' => 'five',\n   \
    \     '6' => 'six',\n        '7' => 'seven',\n        '8' => 'eight',\n      \
    \  '9' => 'nine',\n        _ => panic!(\"Invalid number: {}\", c),\n    }).collect::<Vec<_>>().sort_by(|a,\
    \ b| a.cmp(b)).collect::<Vec<_>>().join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n --> /tmp/tmp_vhpq3rm.rs:6:16\n\
    \  |\n6 |         '0' => 'zero',\n  |                ^^^^^^\n  |\nhelp: if you\
    \ meant to write a `str` literal, use double quotes\n  |\n6 |         '0' => \"\
    zero\",\n  |                ~~~~~~\n\nerror: character literal may only contain\
    \ one codepoint\n --> /tmp/tmp_vhpq3rm.rs:7:16\n  |\n7 |         '1' => 'one',\n\
    \  |                ^^^^^\n  |\nhelp: if you meant to write a `str` literal, use\
    \ double quotes\n  |\n7 |         '1' => \"one\",\n  |                ~~~~~\n\n\
    error: character literal may only contain one codepoint\n --> /tmp/tmp_vhpq3rm.rs:8:16\n\
    \  |\n8 |         '2' => 'two',\n  |                ^^^^^\n  |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n  |\n8 |         '2' => \"two\"\
    ,\n  |                ~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \ --> /tmp/tmp_vhpq3rm.rs:9:16\n  |\n9 |         '3' => 'three',\n  |        \
    \        ^^^^^^^\n  |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n  |\n9 |         '3' => \"three\",\n  |                ~~~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n  --> /tmp/tmp_vhpq3rm.rs:10:16\n\
    \   |\n10 |         '4' => 'four',\n   |                ^^^^^^\n   |\nhelp: if\
    \ you meant to write a `str` literal, use double quotes\n   |\n10 |         '4'\
    \ => \"four\",\n   |                ~~~~~~\n\nerror: character literal may only\
    \ contain one codepoint\n  --> /tmp/tmp_vhpq3rm.rs:11:16\n   |\n11 |         '5'\
    \ => 'five',\n   |                ^^^^^^\n   |\nhelp: if you meant to write a\
    \ `str` literal, use double quotes\n   |\n11 |         '5' => \"five\",\n   |\
    \                ~~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \  --> /tmp/tmp_vhpq3rm.rs:12:16\n   |\n12 |         '6' => 'six',\n   |     \
    \           ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n12 |         '6' => \"six\",\n   |                ~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n  --> /tmp/tmp_vhpq3rm.rs:13:16\n\
    \   |\n13 |         '7' => 'seven',\n   |                ^^^^^^^\n   "
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split_whitespace();\n    numbers_arr.sort_by(|a, b| a.cmp(b));\n \
    \   numbers_arr.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpjciit0l9.rs:6:17\n  |\n6 |     numbers_arr.sort_by(|a,\
    \ b| a.cmp(b));\n  |                 ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `join` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmpjciit0l9.rs:7:17\n  |\n7 |     numbers_arr.join(\"\
    \ \")\n  |                 ^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by_key(|x|\
    \ x.parse().unwrap());\n    numbers_vec.join(\", \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpipl2yhpu.rs:5:67\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    let mut numbers_vec: Vec<String> = numbers.chars().collect();\n\
    \    numbers_vec.sort();\n    numbers = numbers_vec.join(\"\");\n    return numbers;\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp872r5i9o.rs:6:56\n     |\n6  \
    \  |     let mut numbers_vec: Vec<String> = numbers.chars().collect();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    let mut numbers_array\
    \ = numbers.chars().collect::<Vec<_>>();\n    numbers_array.sort();\n    let mut\
    \ numbers_string = String::new();\n    for number in numbers_array {\n       \
    \ numbers_string.push_str(&number.to_string());\n    }\n    numbers_string\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"eehrt\"`,\n right: `\"three\"`', /tmp/tmpb4q9gum_.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    let mut numbers_vec: Vec<String> = vec![];\n   \
    \ let mut numbers_vec: Vec<String> = numbers.chars().collect();\n    numbers_vec.sort();\n\
    \    numbers_vec.reverse();\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0,\
    \ \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \"\
    );\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n   \
    \ numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0,\
    \ \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \"\
    );\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n   \
    \ numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0,\
    \ \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \"\
    );\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n   \
    \ numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0,\
    \ \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \"\
    );\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n   \
    \ numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0,\
    \ \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \"\
    );\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n   \
    \ numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0,\
    \ \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \"\
    );\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n   \
    \ numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0,\
    \ \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \"\
    );\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n   \
    \ numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0,\
    \ \" \");\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \"\
    );\n    numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n   \
    \ numbers_vec.insert(0, \" \");\n    numbers_vec.insert(0, \" \");\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp_jyy_kni.rs:7:56\n     |\n7  \
    \  |     let mut numbers_vec: Vec<String> = numbers.chars().collect();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_jyy_kni.rs:10:27\n\
    \   |\n10 |     numbers_vec.insert(0, \" \");\n   |                          \
    \ ^^^- help: try using a conversion method: `.to_string()`\n   |             \
    \              |\n   |                           expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_jyy_kni.rs:11:27\n\
    \   |\n11 |     numbers_vec.insert(0, \" \");\n   |                          \
    \ ^^^- help: try using a conversion method: `.to_string()`\n   |             \
    \              |\n   |                           expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_jyy_kni.rs:12:27\n\
    \   |\n12 |     numbers_vec.insert(0, \" \");\n   |                          \
    \ ^^^- help: try using a conversion method: `.to_string()`\n   |             \
    \              |\n   |                           expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_jyy_kni.rs:13:27\n\
    \   |\n13 |     numbers_vec.insert(0, \" \");\n   |                          \
    \ ^^^- help: try using a conversion method: `.to_string()`\n   |             \
    \              |\n   |                           expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_jyy_kni.rs:14:27\n\
    \   |\n14 |     numbers_vec.insert(0, \" \");\n   |                          \
    \ ^^^- help: try using a conversion method: `.to_string()`\n   |             \
    \              |\n   |                           expected struct `String`, found\
    \ `&s"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.chars().collect();\n    numbers_vec.sort();\n    numbers_vec.reverse();\n\
    \    let mut numbers_string: String = String::new();\n    for number in numbers_vec\
    \ {\n        numbers_string.push_str(&number);\n    }\n    numbers_string\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp9uqdnjne.rs:5:56\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.chars().collect();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sorted().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpoktngg58.rs:5:21\n  |\n5 |     numbers.chars().sorted().collect()\n\
    \  |                     ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split_whitespace().collect::<Vec<_>>();\n    numbers_arr.sort_by_key(|x|\
    \ x.parse().unwrap());\n    numbers_arr.iter().collect::<String>().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `&&str`\n    --> /tmp/tmp8gv58ntq.rs:7:24\n     |\n7 \
    \   |     numbers_arr.iter().collect::<String>().to_string()\n     |         \
    \               ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=&&str>`\n\
    \     |\n     = help: the trait `FromIterator<&&str>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_array = numbers.chars().collect::<Vec<_>>();\n\
    \    numbers_array.sort_by_key(|x| x.to_digit(10).unwrap());\n    for number in\
    \ numbers_array {\n        numbers_sorted += number.to_string();\n    }\n    numbers_sorted\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5cb_nmot.rs:9:27\n  |\n9 |\
    \         numbers_sorted += number.to_string();\n  |                         \
    \  ^^^^^^^^^^^^^^^^^^\n  |                           |\n  |                  \
    \         expected `&str`, found struct `String`\n  |                        \
    \   help: consider borrowing here: `&number.to_string()`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().collect::<Vec<_>>().sort_by(|a,\
    \ b| {\n        match a {\n            '0' => Ordering::Less,\n            '1'\
    \ => Ordering::Greater,\n            '2' => Ordering::Less,\n            '3' =>\
    \ Ordering::Greater,\n            '4' => Ordering::Less,\n            '5' => Ordering::Greater,\n\
    \            '6' => Ordering::Less,\n            '7' => Ordering::Greater,\n \
    \           '8' => Ordering::Less,\n            '9' => Ordering::Greater,\n  \
    \          _ => Ordering::Equal,\n        }\n        match b {\n            '0'\
    \ => Ordering::Less,\n            '1' => Ordering::Greater,\n            '2' =>\
    \ Ordering::Less,\n            '3' => Ordering::Greater,\n            '4' => Ordering::Less,\n\
    \            '5' => Ordering::Greater,\n            '6' => Ordering::Less,\n \
    \           '7' => Ordering::Greater,\n            '8' => Ordering::Less,\n  \
    \          '9' => Ordering::Greater,\n            _ => Ordering::Equal,\n    \
    \    }\n    })\n    .collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmp88zd83j6.rs:7:20\n  |\n7 |             '0' => Ordering::Less,\n  | \
    \                   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n --> /tmp/tmp88zd83j6.rs:8:20\n\
    \  |\n8 |             '1' => Ordering::Greater,\n  |                    ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n --> /tmp/tmp88zd83j6.rs:9:20\n  |\n9 |        \
    \     '2' => Ordering::Less,\n  |                    ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmp88zd83j6.rs:10:20\n   |\n10 |             '3' => Ordering::Greater,\n\
    \   |                    ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp88zd83j6.rs:11:20\n\
    \   |\n11 |             '4' => Ordering::Less,\n   |                    ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp88zd83j6.rs:12:20\n   |\n12 |    \
    \         '5' => Ordering::Greater,\n   |                    ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmp88zd83j6.rs:13:20\n   |\n13 |             '6' => Ordering::Less,\n\
    \   |                    ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp88zd83j6.rs:14:20\n\
    \   |\n14 |             '7' => Ordering::Greater,\n   |                    ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp88zd83j6.rs:15:20\n   |\n15 |    \
    \         '8' => Ordering::Less,\n   |                    ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmp88zd83j6.rs:16:20\n   |\n16 |             '9' => Ordering::Great"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_array = numbers.chars().collect::<Vec<_>>();\n\
    \    numbers_array.sort_unstable();\n    for i in numbers_array.iter() {\n   \
    \     numbers_sorted += i.to_string();\n    }\n    return numbers_sorted;\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8a34cdpk.rs:9:27\n  |\n9 |\
    \         numbers_sorted += i.to_string();\n  |                           ^^^^^^^^^^^^^\n\
    \  |                           |\n  |                           expected `&str`,\
    \ found struct `String`\n  |                           help: consider borrowing\
    \ here: `&i.to_string()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.chars().collect();\n    numbers_vec.sort();\n    let mut\
    \ numbers_string = String::new();\n    for number in numbers_vec {\n        numbers_string.push_str(&number);\n\
    \    }\n    numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp5346ttn2.rs:5:56\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.chars().collect();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split_whitespace();\n    numbers_arr.sort_by(|a, b| a.cmp(b));\n \
    \   numbers_arr.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpjciit0l9.rs:6:17\n  |\n6 |     numbers_arr.sort_by(|a,\
    \ b| a.cmp(b));\n  |                 ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `join` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmpjciit0l9.rs:7:17\n  |\n7 |     numbers_arr.join(\"\
    \ \")\n  |                 ^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| {\n        match a {\n            '0' => Ordering::Less,\n            '1'\
    \ => Ordering::Greater,\n            '2' => Ordering::Less,\n            '3' =>\
    \ Ordering::Greater,\n            '4' => Ordering::Less,\n            '5' => Ordering::Greater,\n\
    \            '6' => Ordering::Less,\n            '7' => Ordering::Greater,\n \
    \           '8' => Ordering::Less,\n            '9' => Ordering::Greater,\n  \
    \          _ => Ordering::Less,\n        }\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmpa22rduj0.rs:7:20\n  |\n7 |             '0' => Ordering::Less,\n  | \
    \                   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n --> /tmp/tmpa22rduj0.rs:8:20\n\
    \  |\n8 |             '1' => Ordering::Greater,\n  |                    ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n --> /tmp/tmpa22rduj0.rs:9:20\n  |\n9 |        \
    \     '2' => Ordering::Less,\n  |                    ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpa22rduj0.rs:10:20\n   |\n10 |             '3' => Ordering::Greater,\n\
    \   |                    ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpa22rduj0.rs:11:20\n\
    \   |\n11 |             '4' => Ordering::Less,\n   |                    ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpa22rduj0.rs:12:20\n   |\n12 |    \
    \         '5' => Ordering::Greater,\n   |                    ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpa22rduj0.rs:13:20\n   |\n13 |             '6' => Ordering::Less,\n\
    \   |                    ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpa22rduj0.rs:14:20\n\
    \   |\n14 |             '7' => Ordering::Greater,\n   |                    ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpa22rduj0.rs:15:20\n   |\n15 |    \
    \         '8' => Ordering::Less,\n   |                    ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpa22rduj0.rs:16:20\n   |\n16 |             '9' => Ordering::Great"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_array = numbers.chars().collect::<Vec<&str>>();\n\
    \    numbers_array.sort();\n    for i in numbers_array.iter() {\n        numbers_sorted\
    \ += i.to_string();\n    }\n    numbers_sorted\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp0xjkk9g8.rs:6:45\n     |\n6  \
    \  |     let mut numbers_array = numbers.chars().collect::<Vec<&str>>();\n   \
    \  |                                             ^^^^^^^ value of type `Vec<&str>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<&str>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0xjkk9g8.rs:9:27\n\
    \  |\n9 |         numbers_sorted += i.to_string();\n  |                      \
    \     ^^^^^^^^^^^^^\n  |                           |\n  |                    \
    \       expected `&str`, found struct `String`\n  |                          \
    \ help: consider borrowing here: `&i.to_string()`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.chars().for_each(|c| {\n        if c.to_digit(10)\
    \ < 10 {\n            numbers = &numbers[..numbers.len() - 1];\n        }\n  \
    \      numbers = &numbers[..numbers.len() - 1];\n    });\n    numbers\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphforud25.rs:7:29\n  |\n7 |\
    \         if c.to_digit(10) < 10 {\n  |                             ^^ expected\
    \ enum `Option`, found integer\n  |\n  = note: expected enum `Option<u32>`\n \
    \            found type `{integer}`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |         if c.to_digit(10) < Some(10) {\n  |                        \
    \     +++++  +\n\nerror[E0308]: mismatched types\n --> /tmp/tmphforud25.rs:8:23\n\
    \  |\n5 |     let mut numbers = numbers.to_string();\n  |                    \
    \   ------------------- expected due to this value\n...\n8 |             numbers\
    \ = &numbers[..numbers.len() - 1];\n  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n\
    \  |\n8 |             numbers = (&numbers[..numbers.len() - 1]).to_string();\n\
    \  |                       +                             +++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphforud25.rs:10:19\n   |\n5  |     let mut numbers\
    \ = numbers.to_string();\n   |                       ------------------- expected\
    \ due to this value\n...\n10 |         numbers = &numbers[..numbers.len() - 1];\n\
    \   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\nhelp: try using a conversion method\n   |\n10 |        \
    \ numbers = (&numbers[..numbers.len() - 1]).to_string();\n   |               \
    \    +                             +++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppuaesl98.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\"'\", \"\");\n   |                             - help:\
    \ consider removing this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_array\
    \ = numbers.chars().collect::<Vec<_>>();\n    numbers_array.sort();\n    let mut\
    \ numbers_string = String::new();\n    for number in numbers_array {\n       \
    \ numbers_string.push_str(&number);\n    }\n    numbers_string\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_enchee0.rs:9:33\n  |\n9 |\
    \         numbers_string.push_str(&number);\n  |                             \
    \    ^^^^^^^ expected `str`, found `char`\n  |\n  = note: expected reference `&str`\n\
    \             found reference `&char`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"\\\"\", \"\");\n    numbers.replace(\";\",\
    \ \"\");\n    numbers.replace(\":\", \"\");\n    numbers.replace(\"!\", \"\");\n\
    \    numbers.replace(\"?\", \"\");\n    numbers.replace(\"<\", \"\");\n    numbers.replace(\"\
    >\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"+\", \"\"\
    );\n    numbers.replace(\"*\", \"\");\n    numbers.replace(\"%\", \"\");\n   \
    \ numbers.replace(\"^\", \"\");\n    numbers.replace(\"&\", \"\");\n    numbers.replace(\"\
    |\", \"\");\n    numbers.replace(\"~\", \"\");\n    numbers.replace(\"(\", \"\"\
    );\n    numbers.replace(\")\", \"\");\n    numbers.replace(\"{\", \"\");\n   \
    \ numbers.replace(\"}\", \"\");\n    numbers.replace(\"[\", \"\");\n    numbers.replace(\"\
    ]\", \"\");\n    numbers.replace(\"{\", \"\");\n    numbers.replace(\"}\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"+\", \"\");\n   \
    \ numbers.replace(\"*\", \"\");\n    numbers.replace(\"%\", \"\");\n    numbers.replace(\"\
    ^\", \"\");\n    numbers.replace(\"&\", \"\");\n    numbers.replace(\"|\", \"\"\
    );\n    numbers.replace(\"~\", \"\");\n    numbers.replace(\"(\", \"\");\n   \
    \ numbers.replace(\")\", \"\");\n    numbers.replace(\"{\", \"\");\n    numbers.replace(\"\
    }\", \"\");\n    numbers.replace(\"[\", \"\");\n    numbers.replace(\"]\", \"\"\
    );\n    numbers.replace(\"{\", \"\");\n    numbers.replace(\"}\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\"+\", \"\");\n    numbers.replace(\"\
    *\", \"\");\n    numbers.replace(\"%\", \"\");\n    numbers.replace(\"^\", \"\"\
    );\n    numbers.replace(\"&\", \"\");\n    numbers.replace(\"|\", \"\");\n   \
    \ numbers.replace(\"~\", \"\");\n    numbers.replace(\"(\", \"\");\n    numbers.replace(\"\
    )\", \"\");\n    numbers.replace(\"{\", \"\");\n    numbers.replace(\"}\", \"\"\
    );\n    numbers.replace(\"[\", \"\");\n    numbers.replace(\"]\", \"\");\n   \
    \ numbers.replace(\"{\", \"\");\n    numbers.replace(\"}\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\"+\", \"\");\n    numbers.replace(\"*\", \"\"\
    );\n    numbers.replace(\"%\", \"\");\n    numbers.replace(\"^\", \"\");\n   \
    \ numbers.replace(\"&\", \"\");\n    numbers.replace(\"|\", \"\");\n    numbers.replace(\"\
    ~\", \"\");\n    numbers.replace(\"(\", \"\");\n    numbers.replace(\")\", \"\"\
    );\n    numbers.replace(\"{\", \"\");\n    numbers.replace(\"}\", \"\");\n   \
    \ numbers.replace(\"[\", \"\");\n    numbers.replace(\"]\", \"\");\n    numbers.replace(\"\
    {\", \"\");\n\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0aoj10s3.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\"{\", \"\");\n   |                             - help:\
    \ remove this semicolon\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0123456789\"`,\n right: `\"\"`', /tmp/tmpfw6wnxnv.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 'zero',\n        '1' => 'one',\n        '2' => 'two',\n\
    \        '3' => 'three',\n        '4' => 'four',\n        '5' => 'five',\n   \
    \     '6' => 'six',\n        '7' => 'seven',\n        '8' => 'eight',\n      \
    \  '9' => 'nine',\n        _ => panic!(\"Invalid number '{}'\", c),\n    }).collect::<Vec<_>>().sort_by(|a,\
    \ b| a.cmp(b)).collect::<String>().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n --> /tmp/tmpt5i_tf09.rs:6:16\n\
    \  |\n6 |         '0' => 'zero',\n  |                ^^^^^^\n  |\nhelp: if you\
    \ meant to write a `str` literal, use double quotes\n  |\n6 |         '0' => \"\
    zero\",\n  |                ~~~~~~\n\nerror: character literal may only contain\
    \ one codepoint\n --> /tmp/tmpt5i_tf09.rs:7:16\n  |\n7 |         '1' => 'one',\n\
    \  |                ^^^^^\n  |\nhelp: if you meant to write a `str` literal, use\
    \ double quotes\n  |\n7 |         '1' => \"one\",\n  |                ~~~~~\n\n\
    error: character literal may only contain one codepoint\n --> /tmp/tmpt5i_tf09.rs:8:16\n\
    \  |\n8 |         '2' => 'two',\n  |                ^^^^^\n  |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n  |\n8 |         '2' => \"two\"\
    ,\n  |                ~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \ --> /tmp/tmpt5i_tf09.rs:9:16\n  |\n9 |         '3' => 'three',\n  |        \
    \        ^^^^^^^\n  |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n  |\n9 |         '3' => \"three\",\n  |                ~~~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n  --> /tmp/tmpt5i_tf09.rs:10:16\n\
    \   |\n10 |         '4' => 'four',\n   |                ^^^^^^\n   |\nhelp: if\
    \ you meant to write a `str` literal, use double quotes\n   |\n10 |         '4'\
    \ => \"four\",\n   |                ~~~~~~\n\nerror: character literal may only\
    \ contain one codepoint\n  --> /tmp/tmpt5i_tf09.rs:11:16\n   |\n11 |         '5'\
    \ => 'five',\n   |                ^^^^^^\n   |\nhelp: if you meant to write a\
    \ `str` literal, use double quotes\n   |\n11 |         '5' => \"five\",\n   |\
    \                ~~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \  --> /tmp/tmpt5i_tf09.rs:12:16\n   |\n12 |         '6' => 'six',\n   |     \
    \           ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n12 |         '6' => \"six\",\n   |                ~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n  --> /tmp/tmpt5i_tf09.rs:13:16\n\
    \   |\n13 |         '7' => 'seven',\n   |                ^^^^^^^\n   "
  stdout: ''
  timestamp: 1659976088
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0123456789\"`,\n right: `\"\"`', /tmp/tmpfw6wnxnv.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9m58ojbd.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\",\", \"\");\n   |                             - help:\
    \ remove this semicolon\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpqa0863yt.rs:5:67\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n  |  \
    \                                                                 ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \  |\n  = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    let mut numbers\
    \ = numbers.chars().collect::<Vec<_>>();\n    numbers.sort();\n    let mut numbers\
    \ = numbers.collect::<String>();\n    numbers.replace(\",\", \"\");\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<char>` is not an iterator\n   --> /tmp/tmpjfl7x87_.rs:9:31\n\
    \    |\n9   |       let mut numbers = numbers.collect::<String>();\n    |    \
    \                             ^^^^^^^ `Vec<char>` is not an iterator\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `Vec<char>:\
    \ Iterator`\n            which is required by `&mut Vec<char>: Iterator`\n   \
    \         `[char]: Iterator`\n            which is required by `&mut [char]: Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sorted().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpoktngg58.rs:5:21\n  |\n5 |     numbers.chars().sorted().collect()\n\
    \  |                     ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split_whitespace();\n    numbers_arr.sort();\n    numbers_arr.join(\"\
    , \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpjbpu99hi.rs:6:17\n  |\n6 |     numbers_arr.sort();\n\
    \  |                 ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]:\
    \ no method named `join` found for struct `SplitWhitespace` in the current scope\n\
    \ --> /tmp/tmpjbpu99hi.rs:7:17\n  |\n7 |     numbers_arr.join(\", \")\n  |   \
    \              ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sorted().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpoktngg58.rs:5:21\n  |\n5 |     numbers.chars().sorted().collect()\n\
    \  |                     ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = number\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxdp7ax8_.rs:37:41\n   |\n\
    37 |     let mut numbers_sorted_list = number\n   |                          \
    \               ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `number` in this scope\n  --> /tmp/tmpxdp7ax8_.rs:37:35\n\
    \   |\n37 |     let mut numbers_sorted_list = number\n   |                   \
    \                ^^^^^^ help: a local variable with a similar name exists: `numbers`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpxdp7ax8_.rs:4:37\n  |\n4 | fn sort_numbers(numbers:\
    \ String) -> String {\n  |    ------------                     ^^^^^^ expected\
    \ struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split_whitespace();\n    numbers_arr.sort_by(|a, b| a.cmp(b));\n \
    \   numbers_arr.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpjciit0l9.rs:6:17\n  |\n6 |     numbers_arr.sort_by(|a,\
    \ b| a.cmp(b));\n  |                 ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `join` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmpjciit0l9.rs:7:17\n  |\n7 |     numbers_arr.join(\"\
    \ \")\n  |                 ^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    let mut numbers_vec: Vec<String> = numbers.chars().collect();\n\
    \    numbers_vec.sort();\n    numbers_vec.reverse();\n    numbers_vec.join().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpk7q4nznj.rs:6:56\n     |\n6  \
    \  |     let mut numbers_vec: Vec<String> = numbers.chars().collect();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0061]: this function takes 1 argument but\
    \ 0 arguments were supplied\n   --> /tmp/tmpk7q4nznj.rs:9:17\n    |\n9   |   \
    \  numbers_vec.join().to_string()\n    |                 ^^^^- supplied 0 arguments\n\
    \    |                 |\n    |                 expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0277.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9m58ojbd.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\",\", \"\");\n   |                             - help:\
    \ remove this semicolon\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppuaesl98.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\"'\", \"\");\n   |                             - help:\
    \ consider removing this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    let mut numbers_array\
    \ = numbers.chars().collect::<Vec<_>>();\n    numbers_array.sort();\n    let mut\
    \ numbers_string = String::new();\n    for number in numbers_array {\n       \
    \ numbers_string.push_str(&number.to_string());\n    }\n    numbers_string\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"eehrt\"`,\n right: `\"three\"`', /tmp/tmpb4q9gum_.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    let mut numbers_vec:\
    \ Vec<String> = numbers.chars().collect();\n    numbers_vec.sort();\n    let mut\
    \ numbers_string = \"\";\n    for n in numbers_vec {\n        numbers_string +=\
    \ n.to_string();\n    }\n    return numbers_string;\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpt4ov0roi.rs:7:56\n     |\n7  \
    \  |     let mut numbers_vec: Vec<String> = numbers.chars().collect();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `&str`\n  --> /tmp/tmpt4ov0roi.rs:11:9\n   |\n11 |      \
    \   numbers_string += n.to_string();\n   |         --------------^--^^^^^^^^^^^^^^\n\
    \   |         |              |\n   |         |              `+` cannot be used\
    \ to concatenate a `&str` with a `String`\n   |         cannot use `+=` on type\
    \ `&str`\n   |\n   = note: string concatenation requires an owned `String` on\
    \ the left\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt4ov0roi.rs:13:12\n\
    \   |\n4  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                      ------ expected `String` because of return type\n...\n\
    13 |     return numbers_string;\n   |            ^^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |            |\n   |            expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split(\" \").collect();\n    numbers_vec.sort();\n   \
    \ numbers_vec.reverse();\n    let mut numbers_string: String = numbers_vec.join(\"\
    \ \");\n    numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpnqd83nex.rs:5:59\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split(\" \").collect();\n\
    \     |                                                           ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.join(\", \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpnecc02wz.rs:5:67\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_vec();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzxdbnzoo.rs:37:43\n   |\n\
    37 |     let mut numbers_sorted_list = numbers_\n   |                        \
    \                   ^ help: add `;` here\n38 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `numbers_` in this scope\n  --> /tmp/tmpzxdbnzoo.rs:37:35\n\
    \   |\n37 |     let mut numbers_sorted_list = numbers_\n   |                 \
    \                  ^^^^^^^^ help: a local variable with a similar name exists:\
    \ `numbers`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpzxdbnzoo.rs:4:37\n\
    \  |\n4 | fn sort_numbers(numbers: String) -> String {\n  |    ------------  \
    \                   ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpygjraa9k.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    68 |     numbers.replace(\"  \", \" \");\n   |                               -\
    \ help: remove this semicolon\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort();\n\
    \    numbers_vec.reverse();\n    numbers_vec.join(\", \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpieq9q68v.rs:5:67\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ input\"),\n    }).collect::<Vec<_>>().sort_by(|a, b| b.cmp(&a)).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmp6pgtbw3g.rs:17:54\n\
    \   |\n17 |     }).collect::<Vec<_>>().sort_by(|a, b| b.cmp(&a)).collect()\n \
    \  |                                                      ^^^^^^^ `()` is not\
    \ an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(): Iterator`\n           which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sorted().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpoktngg58.rs:5:21\n  |\n5 |     numbers.chars().sorted().collect()\n\
    \  |                     ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut\
    \ numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n\
    \    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut numbers_sorted_list\
    \ = Vec::new();\n    let mut numbers_sorted_list = Vec\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdr4dptcp.rs:47:38\n   |\n\
    47 |     let mut numbers_sorted_list = Vec\n   |                             \
    \         ^ help: add `;` here\n48 | }\n   | - unexpected token\n\nerror[E0423]:\
    \ expected value, found struct `Vec`\n   --> /tmp/tmpdr4dptcp.rs:47:35\n    |\n\
    47  |       let mut numbers_sorted_list = Vec\n    |                         \
    \            ^^^ help: use struct literal syntax instead: `Vec { buf: val, len:\
    \ val }`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdr4dptcp.rs:4:37\n  |\n\
    4 | fn sort_numbers(numbers: String) -> String {\n  |    ------------        \
    \             ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.chars().collect();\n    numbers_vec.sort();\n    let mut\
    \ numbers_string = String::new();\n    for n in numbers_vec {\n        numbers_string.push_str(&n.to_string());\n\
    \    }\n    numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp8iz7msa4.rs:5:56\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.chars().collect();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.join(\", \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpnecc02wz.rs:5:67\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_string = String::new();\n    let mut numbers_array\
    \ = numbers.chars().collect::<Vec<_>>();\n    numbers_array.sort();\n    for i\
    \ in numbers_array {\n        numbers_sorted.push_str(&i.to_string());\n    }\n\
    \    for i in numbers_array {\n        numbers_string.push_str(&i.to_string());\n\
    \    }\n    numbers_sorted\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers_array`\n   --> /tmp/tmpdbf0vz17.rs:12:14\n\
    \    |\n7   |     let mut numbers_array = numbers.chars().collect::<Vec<_>>();\n\
    \    |         ----------------- move occurs because `numbers_array` has type\
    \ `Vec<char>`, which does not implement the `Copy` trait\n8   |     numbers_array.sort();\n\
    9   |     for i in numbers_array {\n    |              ------------- `numbers_array`\
    \ moved due to this implicit call to `.into_iter()`\n...\n12  |     for i in numbers_array\
    \ {\n    |              ^^^^^^^^^^^^^ value used here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `numbers_array`\n\
    help: consider iterating over a slice of the `Vec<char>`'s content to avoid moving\
    \ into the `for` loop\n    |\n9   |     for i in &numbers_array {\n    |     \
    \         +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpqa0863yt.rs:5:67\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n  |  \
    \                                                                 ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \  |\n  = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec\
    \ = Vec::new();\n    for n in numbers.chars() {\n        match n {\n         \
    \   '0' => numbers_vec.push(0),\n            '1' => numbers_vec.push(1),\n   \
    \         '2' => numbers_vec.push(2),\n            '3' => numbers_vec.push(3),\n\
    \            '4' => numbers_vec.push(4),\n            '5' => numbers_vec.push(5),\n\
    \            '6' => numbers_vec.push(6),\n            '7' => numbers_vec.push(7),\n\
    \            '8' => numbers_vec.push(8),\n            '9' => numbers_vec.push(9),\n\
    \            _ => (),\n        }\n    }\n    numbers_vec.sort_by_key(|&x| x.clone());\n\
    \    numbers_vec.iter().map(|x| x.to_string()).collect()\n}\n\nfn main() {\n \
    \   let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"three\"`', /tmp/tmp__je6sfn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.chars().sort_by(|a, b| a.cmp(b)).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpsbe6rl7u.rs:6:21\n  |\n6 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect::<String>()\n  |                     ^^^^^^^ method not\
    \ found in `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppuaesl98.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\"'\", \"\");\n   |                             - help:\
    \ consider removing this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split(\" \").collect();\n    numbers_vec.sort_by(|a, b|\
    \ a.cmp(b));\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpejhohk4y.rs:5:59\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split(\" \").collect();\n\
    \     |                                                           ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    let mut numbers_array\
    \ = numbers.chars().collect::<Vec<String>>();\n    numbers_array.sort();\n   \
    \ numbers_array.insert(0, \" \");\n    numbers_array.join(\"\").to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpkkk6qzcx.rs:7:45\n     |\n7  \
    \  |     let mut numbers_array = numbers.chars().collect::<Vec<String>>();\n \
    \    |                                             ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkkk6qzcx.rs:9:29\n\
    \  |\n9 |     numbers_array.insert(0, \" \");\n  |                           \
    \  ^^^- help: try using a conversion method: `.to_string()`\n  |             \
    \                |\n  |                             expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\"\
    );\n    numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n   \
    \ numbers.replace(\",\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    ,\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9m58ojbd.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\",\", \"\");\n   |                             - help:\
    \ remove this semicolon\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpqa0863yt.rs:5:67\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n  |  \
    \                                                                 ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \  |\n  = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0123456789\"`,\n right: `\"\"`', /tmp/tmpfw6wnxnv.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.join(\", \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpnecc02wz.rs:5:67\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.chars().collect();\n    numbers_vec.sort();\n    let mut\
    \ numbers_string = \"\";\n    for number in numbers_vec {\n        numbers_string\
    \ += number;\n    }\n    return numbers_string;\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpzbpyqvyi.rs:5:56\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.chars().collect();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `&str`\n --> /tmp/tmpzbpyqvyi.rs:9:9\n  |\n9 |         numbers_string\
    \ += number;\n  |         --------------^--^^^^^^^\n  |         |            \
    \  |\n  |         |              `+` cannot be used to concatenate a `&str` with\
    \ a `String`\n  |         cannot use `+=` on type `&str`\n  |\n  = note: string\
    \ concatenation requires an owned `String` on the left\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzbpyqvyi.rs:11:12\n   |\n4  | fn sort_numbers(numbers:\
    \ String) -> String {\n   |                                     ------ expected\
    \ `String` because of return type\n...\n11 |     return numbers_string;\n   |\
    \            ^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |            |\n   |            expected struct `String`, found `&str`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_string = String::new();\n    let mut numbers_array\
    \ = numbers.chars().collect::<Vec<_>>();\n    numbers_array.sort();\n    for number\
    \ in numbers_array {\n        numbers_sorted.push_str(&number);\n    }\n    numbers_sorted.push_str(\"\
    \\n\");\n    numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm6sbakii.rs:10:33\n   |\n\
    10 |         numbers_sorted.push_str(&number);\n   |                         \
    \        ^^^^^^^ expected `str`, found `char`\n   |\n   = note: expected reference\
    \ `&str`\n              found reference `&char`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_array = numbers.chars().collect::<Vec<_>>();\n\
    \    numbers_array.sort();\n    for i in numbers_array {\n        numbers_sorted\
    \ += i.to_string();\n    }\n    numbers_sorted\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_due5ir.rs:9:27\n  |\n9 |\
    \         numbers_sorted += i.to_string();\n  |                           ^^^^^^^^^^^^^\n\
    \  |                           |\n  |                           expected `&str`,\
    \ found struct `String`\n  |                           help: consider borrowing\
    \ here: `&i.to_string()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0123456789\"`,\n right: `\"\"`', /tmp/tmpfw6wnxnv.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    five\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"four\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"three\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    two\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"zero\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    five\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"four\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"three\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    two\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"zero\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    five\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"four\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"three\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    two\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"zero\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    fi\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpksg5lfkc.rs:84:123\n\
    \   |\n84 |       assert_eq!(candidate(String::from(\"six five four three two\
    \ one zero\")), String::from(\"zero one two three four five six\"));\n   |  ___________________________________________________________________________________________________________________________^\n\
    85 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_array = numbers.split_whitespace();\n\
    \    let mut i = 0;\n    while i < numbers_array.len() {\n        if numbers_array[i]\
    \ != \"zero\" && numbers_array[i] != \"one\" && numbers_array[i] != \"two\" &&\
    \ numbers_array[i] != \"three\" && numbers_array[i] != \"four\" && numbers_array[i]\
    \ != \"five\" && numbers_array[i] != \"six\" && numbers_array[i] != \"seven\"\
    \ && numbers_array[i] != \"eight\" && numbers_array[i] != \"nine\" {\n       \
    \     numbers_sorted.push_str(numbers_array[i]);\n            i += 1;\n      \
    \  } else {\n            numbers_sorted.push_str(\"nine\");\n            i +=\
    \ 1;\n        }\n    }\n    numbers_sorted\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp2szee5ou.rs:8:29\n  |\n8 |     while i <\
    \ numbers_array.len() {\n  |                             ^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror[E0608]: cannot index into a value of type\
    \ `SplitWhitespace<'_>`\n --> /tmp/tmp2szee5ou.rs:9:12\n  |\n9 | ...   if numbers_array[i]\
    \ != \"zero\" && numbers_array[i] != \"one\" && numbers_array[i] != \"two\" &&\
    \ numbers_array[i] != \"three\" && numbers_a...\n  |          ^^^^^^^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n -->\
    \ /tmp/tmp2szee5ou.rs:9:42\n  |\n9 | ...   if numbers_array[i] != \"zero\" &&\
    \ numbers_array[i] != \"one\" && numbers_array[i] != \"two\" && numbers_array[i]\
    \ != \"three\" && numbers_a...\n  |                                        ^^^^^^^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n -->\
    \ /tmp/tmp2szee5ou.rs:9:71\n  |\n9 | ...   if numbers_array[i] != \"zero\" &&\
    \ numbers_array[i] != \"one\" && numbers_array[i] != \"two\" && numbers_array[i]\
    \ != \"three\" && numbers_a...\n  |                                          \
    \                           ^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into\
    \ a value of type `SplitWhitespace<'_>`\n --> /tmp/tmp2szee5ou.rs:9:100\n  |\n\
    9 | ...   if numbers_array[i] != \"zero\" && numbers_array[i] != \"one\" && numbers_array[i]\
    \ != \"two\" && numbers_array[i] != \"three\" && numbers_a...\n  |           \
    \                                                                            \
    \           ^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type\
    \ `SplitWhitespace<'_>`\n --> /tmp/tmp2szee5ou.rs:9:131\n  |\n9 | ...umbers_array[i]\
    \ != \"two\" && numbers_array[i] != \"three\" && numbers_array[i] != \"four\"\
    \ && numbers_array[i] != \"five\" && numbers_array[i...\n  |                 \
    \                                              ^^^^^^^^^^^^^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `SplitWhitespace<'_>`\n --> /tmp/tmp2szee5ou.rs:9:161\n\
    \  |\n9 | ...mbers_array[i] != \"three\" && numbers_array[i] != \"four\" && "
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split_whitespace();\n    numbers_arr.sort_by(|a, b| a.cmp(b));\n \
    \   numbers_arr.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpjciit0l9.rs:6:17\n  |\n6 |     numbers_arr.sort_by(|a,\
    \ b| a.cmp(b));\n  |                 ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `join` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmpjciit0l9.rs:7:17\n  |\n7 |     numbers_arr.join(\"\
    \ \")\n  |                 ^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.iter().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpjoywlbgb.rs:5:67\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: a value of type `String` cannot be\
    \ built from an iterator over elements of type `&String`\n    --> /tmp/tmpjoywlbgb.rs:7:24\n\
    \     |\n7    |     numbers_vec.iter().collect::<String>()\n     |           \
    \             ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `String`\n     = help: the following other types implement trait `FromIterator<A>`:\n\
    \               <String as FromIterator<&'a char>>\n               <String as\
    \ FromIterator<&'a str>>\n               <String as FromIterator<Box<str>>>\n\
    \               <String as FromIterator<Cow<'a, str>>>\n               <String\
    \ as FromIterator<String>>\n               <String as FromIterator<char>>\nnote:\
    \ required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpqa0863yt.rs:5:67\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n  |  \
    \                                                                 ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \  |\n  = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort();\n\
    \    numbers_vec.reverse();\n    numbers_vec.join(\", \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpieq9q68v.rs:5:67\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split(\" \").collect();\n    numbers_vec.sort();\n   \
    \ numbers_vec.reverse();\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpp2p9l1iu.rs:5:59\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.split(\" \").collect();\n  |        \
    \                                                   ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n  |\n  = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.chars().sort_by(|a, b| a.cmp(b)).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpsbe6rl7u.rs:6:21\n  |\n6 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect::<String>()\n  |                     ^^^^^^^ method not\
    \ found in `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    let mut numbers_arr = numbers.chars().collect::<Vec<_>>();\n    numbers_arr.sort();\n\
    \    numbers.push_str(&numbers_arr);\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8b2iomib.rs:10:22\n   |\n\
    10 |     numbers.push_str(&numbers_arr);\n   |                      ^^^^^^^^^^^^\
    \ expected `str`, found struct `Vec`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&Vec<char>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    five\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"four\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"three\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    two\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"zero\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    five\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"four\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"three\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    two\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"zero\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    five\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"four\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"three\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    two\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"zero\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    nine\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"eight\");\n   \
    \ numbers.push_str(\",\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\"six\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    fi\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpksg5lfkc.rs:84:123\n\
    \   |\n84 |       assert_eq!(candidate(String::from(\"six five four three two\
    \ one zero\")), String::from(\"zero one two three four five six\"));\n   |  ___________________________________________________________________________________________________________________________^\n\
    85 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppuaesl98.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\"'\", \"\");\n   |                             - help:\
    \ consider removing this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    for number in numbers.chars().filter(|c| c.is_numeric())\
    \ {\n        let number = match number.to_ascii_lowercase() {\n            \"\
    zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n         \
    \   \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n\
    \            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\"\
    \ => 8,\n            \"nine\" => 9,\n            _ => panic!(\"Invalid number\
    \ in sort_numbers: {}\", number),\n        };\n        numbers_sorted.push_str(&number.to_string());\n\
    \    }\n    numbers_sorted\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3r0pp4fz.rs:8:13\n  |\n7 |\
    \         let number = match number.to_ascii_lowercase() {\n  |              \
    \              --------------------------- this expression has type `char`\n8\
    \ |             \"zero\" => 0,\n  |             ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3r0pp4fz.rs:9:13\n  |\n\
    7 |         let number = match number.to_ascii_lowercase() {\n  |            \
    \                --------------------------- this expression has type `char`\n\
    8 |             \"zero\" => 0,\n9 |             \"one\" => 1,\n  |           \
    \  ^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp3r0pp4fz.rs:10:13\n   |\n7  |         let number = match number.to_ascii_lowercase()\
    \ {\n   |                            --------------------------- this expression\
    \ has type `char`\n...\n10 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3r0pp4fz.rs:11:13\n\
    \   |\n7  |         let number = match number.to_ascii_lowercase() {\n   |   \
    \                         --------------------------- this expression has type\
    \ `char`\n...\n11 |             \"three\" => 3,\n   |             ^^^^^^^ expected\
    \ `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3r0pp4fz.rs:12:13\n\
    \   |\n7  |         let number = match number.to_ascii_lowercase() {\n   |   \
    \                         --------------------------- this expression has type\
    \ `char`\n...\n12 |             \"four\" => 4,\n   |             ^^^^^^ expected\
    \ `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3r0pp4fz.rs:13:13\n\
    \   |\n7  |         let number = match number.to_ascii_lowercase() {\n   |   \
    \                         --------------------------- this expression has type\
    \ `char`\n...\n13 |             \"five\" => 5,\n   |             ^^^^^^ expected\
    \ `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3r0pp4fz.rs:14:13\n\
    \   |\n7  |         let number = match number.to_ascii_lowercase() {\n   |   \
    \                         ---------------"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"\\\"\", \"\");\n    numbers.replace(\";\",\
    \ \"\");\n    numbers.replace(\"\\n\", \"\");\n    numbers.replace(\"\\t\", \"\
    \");\n    numbers.replace(\"  \", \"\");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"\
    \  \", \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \"\
    , \" \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \"\
    \ \");\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \"\
    );\n    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n\
    \    numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \");\n  \
    \  numbers.replace(\"  \", \" \");\n    numbers.replace(\"  \", \" \n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmp5ywgt1dk.rs:78:123\n\
    \   |\n78 |       assert_eq!(candidate(String::from(\"six five four three two\
    \ one zero\")), String::from(\"zero one two three four five six\"));\n   |  ___________________________________________________________________________________________________________________________^\n\
    79 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.chars().collect();\n    numbers_vec.sort();\n    numbers_vec.reverse();\n\
    \    let mut numbers_string: String = String::new();\n    for number in numbers_vec\
    \ {\n        numbers_string.push_str(&number);\n    }\n    numbers_string\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp9uqdnjne.rs:5:56\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.chars().collect();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort();\n\
    \    numbers_vec.reverse();\n    numbers_vec.join(\", \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpieq9q68v.rs:5:67\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.chars().collect();\n    numbers_vec.sort();\n    let mut\
    \ numbers_string: String = String::new();\n    for number in numbers_vec {\n \
    \       numbers_string.push_str(&number);\n    }\n    numbers_string\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n --> /tmp/tmp_0xxbioy.rs:5:56\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.chars().collect();\n  |             \
    \                                           ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n  |\n  = help: the trait\
    \ `FromIterator<char>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"9\");\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\",0,9\"`,\n right: `\"\"`', /tmp/tmp7wc7mj8c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpqa0863yt.rs:5:67\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n  |  \
    \                                                                 ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \  |\n  = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 'zero',\n        '1' => 'one',\n        '2' => 'two',\n\
    \        '3' => 'three',\n        '4' => 'four',\n        '5' => 'five',\n   \
    \     '6' => 'six',\n        '7' => 'seven',\n        '8' => 'eight',\n      \
    \  '9' => 'nine',\n        _ => panic!(\"Invalid number: {}\", c),\n    }).collect::<Vec<_>>().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n --> /tmp/tmp1o3l2vrd.rs:6:16\n\
    \  |\n6 |         '0' => 'zero',\n  |                ^^^^^^\n  |\nhelp: if you\
    \ meant to write a `str` literal, use double quotes\n  |\n6 |         '0' => \"\
    zero\",\n  |                ~~~~~~\n\nerror: character literal may only contain\
    \ one codepoint\n --> /tmp/tmp1o3l2vrd.rs:7:16\n  |\n7 |         '1' => 'one',\n\
    \  |                ^^^^^\n  |\nhelp: if you meant to write a `str` literal, use\
    \ double quotes\n  |\n7 |         '1' => \"one\",\n  |                ~~~~~\n\n\
    error: character literal may only contain one codepoint\n --> /tmp/tmp1o3l2vrd.rs:8:16\n\
    \  |\n8 |         '2' => 'two',\n  |                ^^^^^\n  |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n  |\n8 |         '2' => \"two\"\
    ,\n  |                ~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \ --> /tmp/tmp1o3l2vrd.rs:9:16\n  |\n9 |         '3' => 'three',\n  |        \
    \        ^^^^^^^\n  |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n  |\n9 |         '3' => \"three\",\n  |                ~~~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n  --> /tmp/tmp1o3l2vrd.rs:10:16\n\
    \   |\n10 |         '4' => 'four',\n   |                ^^^^^^\n   |\nhelp: if\
    \ you meant to write a `str` literal, use double quotes\n   |\n10 |         '4'\
    \ => \"four\",\n   |                ~~~~~~\n\nerror: character literal may only\
    \ contain one codepoint\n  --> /tmp/tmp1o3l2vrd.rs:11:16\n   |\n11 |         '5'\
    \ => 'five',\n   |                ^^^^^^\n   |\nhelp: if you meant to write a\
    \ `str` literal, use double quotes\n   |\n11 |         '5' => \"five\",\n   |\
    \                ~~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \  --> /tmp/tmp1o3l2vrd.rs:12:16\n   |\n12 |         '6' => 'six',\n   |     \
    \           ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n12 |         '6' => \"six\",\n   |                ~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n  --> /tmp/tmp1o3l2vrd.rs:13:16\n\
    \   |\n13 |         '7' => 'seven',\n   |                ^^^^^^^\n   "
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).sort_unstable().collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `Map` in\
    \ the current scope\n  --> /tmp/tmpnumsizw5.rs:17:8\n   |\n17 |     }).sort_unstable().collect()\n\
    \   |        ^^^^^^^^^^^^^ method not found in `Map<Chars<'_>, [closure@/tmp/tmpnumsizw5.rs:5:25:\
    \ 17:6]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.chars().sort_by(|a, b| a.cmp(b)).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpsbe6rl7u.rs:6:21\n  |\n6 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect::<String>()\n  |                     ^^^^^^^ method not\
    \ found in `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"\\\"\", \"\");\n    numbers.replace(\";\",\
    \ \"\");\n    numbers.replace(\":\", \"\");\n    numbers.replace(\"!\", \"\");\n\
    \    numbers.replace(\"?\", \"\");\n    numbers.replace(\"<\", \"\");\n    numbers.replace(\"\
    >\", \"\");\n    numbers.replace(\"+\", \"\");\n    numbers.replace(\"*\", \"\"\
    );\n    numbers.replace(\"%\", \"\");\n    numbers.replace(\"&\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"(\", \"\");\n    numbers.replace(\"\
    )\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"[\", \"\"\
    );\n    numbers.replace(\"]\", \"\");\n    numbers.replace(\"{\", \"\");\n   \
    \ numbers.replace(\"}\", \"\");\n    numbers.replace(\"{\", \"\");\n    numbers.replace(\"\
    }\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\";\", \"\"\
    );\n    numbers.replace(\":\", \"\");\n    numbers.replace(\"!\", \"\");\n   \
    \ numbers.replace(\"?\", \"\");\n    numbers.replace(\"<\", \"\");\n    numbers.replace(\"\
    >\", \"\");\n    numbers.replace(\"+\", \"\");\n    numbers.replace(\"*\", \"\"\
    );\n    numbers.replace(\"%\", \"\");\n    numbers.replace(\"&\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"(\", \"\");\n    numbers.replace(\"\
    )\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"[\", \"\"\
    );\n    numbers.replace(\"]\", \"\");\n    numbers.replace(\"{\", \"\");\n   \
    \ numbers.replace(\"}\", \"\");\n    numbers.replace(\"{\", \"\");\n    numbers.replace(\"\
    }\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\";\", \"\"\
    );\n    numbers.replace(\":\", \"\");\n    numbers.replace(\"!\", \"\");\n   \
    \ numbers.replace(\"?\", \"\");\n    numbers.replace(\"<\", \"\");\n    numbers.replace(\"\
    >\", \"\");\n    numbers.replace(\"+\", \"\");\n    numbers.replace(\"*\", \"\"\
    );\n    numbers.replace(\"%\", \"\");\n    numbers.replace(\"&\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"(\", \"\");\n    numbers.replace(\"\
    )\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"[\", \"\"\
    );\n    numbers.replace(\"]\", \"\");\n    numbers.replace(\"{\", \"\");\n   \
    \ numbers.replace(\"}\", \"\");\n    numbers.replace(\"{\", \"\");\n    numbers.replace(\"\
    }\", \"\");\n    numbers.replace(\",\", \"\");\n    numbers.replace(\";\", \"\"\
    );\n    numbers.replace(\":\", \"\");\n    numbers.replace(\"!\", \"\");\n   \
    \ numbers.replace(\"?\", \"\");\n    numbers.replace(\"<\", \"\");\n    numbers.replace(\"\
    >\", \"\");\n\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaooeb1p9.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\">\", \"\");\n   |                             - help:\
    \ remove this semicolon\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0123456789\"`,\n right: `\"\"`', /tmp/tmpfw6wnxnv.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_sorted_list = vec![];\n    let mut numbers_sorted_list\
    \ = numbers.split_whitespace().collect::<Vec<_>>();\n    numbers_sorted_list.sort_by(|a,\
    \ b| a.cmp(b));\n    for i in numbers_sorted_list.iter() {\n        numbers_sorted\
    \ += i.to_string();\n    }\n    numbers_sorted\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvns8ha0b.rs:10:27\n   |\n\
    10 |         numbers_sorted += i.to_string();\n   |                          \
    \ ^^^^^^^^^^^^^\n   |                           |\n   |                      \
    \     expected `&str`, found struct `String`\n   |                           help:\
    \ consider borrowing here: `&i.to_string()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_sorted_list = Vec::new();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_vec();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n\
    \    let mut numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut\
    \ numbers_sorted_list = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list\
    \ = numbers_sorted_list.to_owned();\n    let mut numbers_sorted_list = numbers_\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzxdbnzoo.rs:37:43\n   |\n\
    37 |     let mut numbers_sorted_list = numbers_\n   |                        \
    \                   ^ help: add `;` here\n38 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `numbers_` in this scope\n  --> /tmp/tmpzxdbnzoo.rs:37:35\n\
    \   |\n37 |     let mut numbers_sorted_list = numbers_\n   |                 \
    \                  ^^^^^^^^ help: a local variable with a similar name exists:\
    \ `numbers`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpzxdbnzoo.rs:4:37\n\
    \  |\n4 | fn sort_numbers(numbers: String) -> String {\n  |    ------------  \
    \                   ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort();\n\
    \    numbers_vec.reverse();\n    numbers_vec.join(\", \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpieq9q68v.rs:5:67\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"9\");\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\",0,9\"`,\n right: `\"\"`', /tmp/tmp7wc7mj8c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"9\");\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\",0,9\"`,\n right: `\"\"`', /tmp/tmp7wc7mj8c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_array = numbers.chars().collect::<Vec<_>>();\n\
    \    numbers_array.sort();\n    for i in numbers_array.iter() {\n        numbers_sorted\
    \ += i.to_string();\n    }\n    return numbers_sorted;\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcpv1jisv.rs:9:27\n  |\n9 |\
    \         numbers_sorted += i.to_string();\n  |                           ^^^^^^^^^^^^^\n\
    \  |                           |\n  |                           expected `&str`,\
    \ found struct `String`\n  |                           help: consider borrowing\
    \ here: `&i.to_string()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_split = numbers.split_whitespace();\n\
    \    for number in numbers_split {\n        if number == \"zero\" {\n        \
    \    numbers_sorted.push_str(\"0\");\n        } else if number == \"one\" {\n\
    \            numbers_sorted.push_str(\"1\");\n        } else if number == \"two\"\
    \ {\n            numbers_sorted.push_str(\"2\");\n        } else if number ==\
    \ \"three\" {\n            numbers_sorted.push_str(\"3\");\n        } else if\
    \ number == \"four\" {\n            numbers_sorted.push_str(\"4\");\n        }\
    \ else if number == \"five\" {\n            numbers_sorted.push_str(\"5\");\n\
    \        } else if number == \"six\" {\n            numbers_sorted.push_str(\"\
    6\");\n        } else if number == \"seven\" {\n            numbers_sorted.push_str(\"\
    7\");\n        } else if number == \"eight\" {\n            numbers_sorted.push_str(\"\
    8\");\n        } else if number == \"nine\" {\n            numbers_sorted.push_str(\"\
    9\");\n        } else {\n            numbers_sorted.push_str(number);\n      \
    \  }\n    }\n    numbers_sorted\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmpaaxgd96n.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by_key(|x|\
    \ x.parse().unwrap());\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmphsxzc83h.rs:5:67\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_array\
    \ = numbers.chars().collect::<Vec<_>>();\n    numbers_array.sort();\n    let mut\
    \ numbers_string = String::new();\n    for number in numbers_array {\n       \
    \ numbers_string.push_str(&number);\n    }\n    numbers_string\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_enchee0.rs:9:33\n  |\n9 |\
    \         numbers_string.push_str(&number);\n  |                             \
    \    ^^^^^^^ expected `str`, found `char`\n  |\n  = note: expected reference `&str`\n\
    \             found reference `&char`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppuaesl98.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\"'\", \"\");\n   |                             - help:\
    \ consider removing this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sorted().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpoktngg58.rs:5:21\n  |\n5 |     numbers.chars().sorted().collect()\n\
    \  |                     ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split_whitespace();\n    numbers_arr.sort_by(|a, b| a.cmp(b));\n \
    \   numbers_arr.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpjciit0l9.rs:6:17\n  |\n6 |     numbers_arr.sort_by(|a,\
    \ b| a.cmp(b));\n  |                 ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `join` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmpjciit0l9.rs:7:17\n  |\n7 |     numbers_arr.join(\"\
    \ \")\n  |                 ^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.chars().collect();\n    numbers_vec.sort();\n    numbers_vec.reverse();\n\
    \    let mut numbers_string: String = String::new();\n    for number in numbers_vec\
    \ {\n        numbers_string.push_str(&number);\n    }\n    numbers_string\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp9uqdnjne.rs:5:56\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.chars().collect();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_array\
    \ = numbers.split_whitespace().collect::<Vec<String>>();\n    numbers_array.sort();\n\
    \    numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpedn6mp9k.rs:5:56\n     |\n5  \
    \  |     let mut numbers_array = numbers.split_whitespace().collect::<Vec<String>>();\n\
    \     |                                                        ^^^^^^^ value of\
    \ type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n \
    \    |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_array\
    \ = numbers.split_whitespace().collect::<Vec<_>>();\n    numbers_array.sort();\n\
    \    numbers_array.join(\", \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five, nine, three\"`,\n right: `\"three five nine\"`', /tmp/tmphxu49ij_.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sorted().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpoktngg58.rs:5:21\n  |\n5 |     numbers.chars().sorted().collect()\n\
    \  |                     ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    10\");\n    numbers.push_str(\"11\");\n    numbers.push_str(\"12\");\n    numbers.push_str(\"\
    13\");\n    numbers.push_str(\"14\");\n    numbers.push_str(\"15\");\n    numbers.push_str(\"\
    16\");\n    numbers.push_str(\"17\");\n    numbers.push_str(\"18\");\n    numbers.push_str(\"\
    19\");\n    numbers.push_str(\"20\");\n    numbers.push_str(\"21\");\n    numbers.push_str(\"\
    22\");\n    numbers.push_str(\"23\");\n    numbers.push_str(\"24\");\n    numbers.push_str(\"\
    25\");\n    numbers.push_str(\"26\");\n    numbers.push_str(\"27\");\n    numbers.push_str(\"\
    28\");\n    numbers.push_str(\"29\");\n    numbers.push_str(\"30\");\n    numbers.push_str(\"\
    31\");\n    numbers.push_str(\"32\");\n    numbers.push_str(\"33\");\n    numbers.push_str(\"\
    34\");\n    numbers.push_str(\"35\");\n    numbers.push_str(\"36\");\n    numbers.push_str(\"\
    37\");\n    numbers.push_str(\"38\");\n    numbers.push_str(\"39\");\n    numbers.push_str(\"\
    40\");\n    numbers.push_str(\"41\");\n    numbers.push_str(\"42\");\n    numbers.push_str(\"\
    43\");\n    numbers.push_str(\"44\");\n    numbers.push_str(\"45\");\n    numbers.push_str(\"\
    46\");\n    numbers.push_str(\"47\");\n    numbers.push_str(\"48\");\n    numbers.push_str(\"\
    49\");\n    numbers.push_str(\"50\");\n    numbers.push_str(\"51\");\n    numbers.push_str(\"\
    52\");\n    numbers.push_str(\"53\");\n    numbers.push_str(\"54\");\n    numbers.push_str(\"\
    55\");\n    numbers.push_str(\"56\");\n    numbers.push_str(\"57\");\n    numbers.push_str(\"\
    58\");\n    numbers.push_str(\"59\");\n    numbers.push_str(\"60\");\n    numbers.push_str(\"\
    61\");\n    numbers.push_str(\"62\");\n    numbers.push_str(\"63\");\n    numbers.push_str(\"\
    64\");\n    numbers.push_str(\"65\");\n    numbers.push_str(\"66\");\n    numbers.push_str(\"\
    67\");\n    numbers.push_str(\"68\");\n    numbers.push_str(\"69\");\n    numbers.push_str(\"\
    70\");\n    numbers.push_str(\"71\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3vlh8k.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpqa0863yt.rs:5:67\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n  |  \
    \                                                                 ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \  |\n  = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_string = String::new();\n    let mut numbers_array\
    \ = numbers.split_whitespace();\n    let mut i = 0;\n    while i < numbers_array.len()\
    \ {\n        let mut current_number = numbers_array[i];\n        let mut j = 0;\n\
    \        while j < numbers_array.len() {\n            if numbers_array[j] < current_number\
    \ {\n                current_number = numbers_array[j];\n            }\n     \
    \       j += 1\n        }\n        numbers_sorted.push_str(&current_number);\n\
    \        numbers_sorted.push_str(\",\");\n        i += 1;\n    }\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[0]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[1]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[2]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[3]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[4]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[5]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[6]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[7]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[8]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[9]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[10]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[11]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[12]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[13]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[14]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[15]);\n    numbers_sorted.push_str(\"\
    ,\");\n    numbers_sorted.push_str(numbers_array[16\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpnv0rq6zl.rs:55:42\n\
    \   |\n4  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - closing delimiter possibly meant for this\n...\n\
    55 |     numbers_sorted.push_str(numbers_array[16\n   |                      \
    \                    ^ unclosed delimiter\n56 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0599]: no method named `len` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmpnv0rq6zl.rs:9:29\n  |\n9 |     while i < numbers_array.len()\
    \ {\n  |                             ^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n  -->\
    \ /tmp/tmpnv0rq6zl.rs:10:34\n   |\n10 |         let mut current_number = numbers_array[i];\n\
    \   |                                  ^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method\
    \ named `len` found for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmpnv0rq6zl.rs:12:33\n\
    \   |\n12 |         while j < numbers_array.len() {\n   |                    \
    \             ^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0608]: cannot\
    \ index into a value of type `SplitWhitespace<'_>`\n  --> /tmp/tmpnv0rq6zl.rs:13:16\n\
    \   |\n13 |             if numbers_array[j] < current_number {\n   |         \
    \       ^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n\
    \  --> /tmp/tmpnv0rq6zl.rs:14:34\n   |\n14 |                 current_number =\
    \ numbers_array[j];\n   |                                  ^^^^^^^^^^^^^^^^\n\n\
    error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmpnv0rq6zl.rs:14:17\n   |\n14 |                 current_number\
    \ = numbers_array[j];\n   |                 ^^^^^^^^^^^^^^ doesn't have a size\
    \ known at compile-time\n   |\n   = help: the trait `Sized` is not implemented\
    \ for `str`\n   = note: the left-hand-side of an assignment must have a statically\
    \ known size\n\nerror[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n\
    \  --> /tmp/tmpnv0rq6zl.rs:23:29\n   |\n23 |     numbe"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_array = numbers.chars().collect::<Vec<_>>();\n\
    \    numbers_array.sort_by(|a, b| a.cmp(b));\n    for number in numbers_array\
    \ {\n        numbers_sorted += number.to_string();\n    }\n    numbers_sorted\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoz9vnecm.rs:9:27\n  |\n9 |\
    \         numbers_sorted += number.to_string();\n  |                         \
    \  ^^^^^^^^^^^^^^^^^^\n  |                           |\n  |                  \
    \         expected `&str`, found struct `String`\n  |                        \
    \   help: consider borrowing here: `&number.to_string()`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_array = numbers.chars().collect::<Vec<_>>();\n\
    \    numbers_array.sort_by_key(|x| x.to_string());\n    for number in numbers_array\
    \ {\n        numbers_sorted += number.to_string();\n    }\n    numbers_sorted\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3or5merk.rs:9:27\n  |\n9 |\
    \         numbers_sorted += number.to_string();\n  |                         \
    \  ^^^^^^^^^^^^^^^^^^\n  |                           |\n  |                  \
    \         expected `&str`, found struct `String`\n  |                        \
    \   help: consider borrowing here: `&number.to_string()`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    let mut numbers_vec: Vec<String> = numbers.chars().collect();\n   \
    \ numbers_vec.sort();\n    numbers_vec.reverse();\n    let mut numbers_string\
    \ = \"\";\n    for i in numbers_vec {\n        numbers_string.push_str(&i.to_string());\n\
    \    }\n    numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp8hvqgt_6.rs:8:56\n     |\n8  \
    \  |     let mut numbers_vec: Vec<String> = numbers.chars().collect();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0599]: no method named `push_str` found for\
    \ reference `&str` in the current scope\n  --> /tmp/tmp8hvqgt_6.rs:13:24\n   |\n\
    13 |         numbers_string.push_str(&i.to_string());\n   |                  \
    \      ^^^^^^^^ method not found in `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8hvqgt_6.rs:15:5\n   |\n4  | fn sort_numbers(numbers: String) ->\
    \ String {\n   |                                     ------ expected `String`\
    \ because of return type\n...\n15 |     numbers_string\n   |     ^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |     |\n   |     expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpqa0863yt.rs:5:67\n  |\n5 |     let\
    \ mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n  |  \
    \                                                                 ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \  |\n  = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp3qgp58uz.rs:5:21\n  |\n5 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort();\n\
    \    numbers_vec.reverse();\n    numbers_vec.join(\", \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpieq9q68v.rs:5:67\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    1\");\n    numbers.push_str(\"2\");\n    numbers.push_str(\"3\");\n    numbers.push_str(\"\
    4\");\n    numbers.push_str(\"5\");\n    numbers.push_str(\"6\");\n    numbers.push_str(\"\
    7\");\n    numbers.push_str(\"8\");\n    numbers.push_str(\"9\");\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0123456789\"`,\n right: `\"\"`', /tmp/tmpfw6wnxnv.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    let mut numbers_arr = numbers.chars().collect::<Vec<&str>>();\n\
    \    numbers_arr.sort();\n    numbers = numbers_arr.join(\"\");\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpwd8i5_aw.rs:6:43\n     |\n6  \
    \  |     let mut numbers_arr = numbers.chars().collect::<Vec<&str>>();\n     |\
    \                                           ^^^^^^^ value of type `Vec<&str>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<&str>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.chars().collect::<Vec<_>>();\n    numbers_arr.sort();\n    let mut\
    \ numbers_str = String::new();\n    for number in numbers_arr {\n        numbers_str.push_str(&number);\n\
    \    }\n    numbers_str\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyfu44q99.rs:9:30\n  |\n9 |\
    \         numbers_str.push_str(&number);\n  |                              ^^^^^^^\
    \ expected `str`, found `char`\n  |\n  = note: expected reference `&str`\n   \
    \          found reference `&char`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ number: {}\", c),\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `{integer}`\n  --> /tmp/tmp0bp_g73e.rs:17:8\n   |\n17\
    \ |     }).collect()\n   |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n   |\n   = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    ,\");\n    numbers.push_str(\",\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbexckqr.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = vec![];\n    for n in numbers.split_whitespace() {\n        if\
    \ n == \"zero\" {\n            numbers_vec.push(\"0\");\n        } else if n ==\
    \ \"one\" {\n            numbers_vec.push(\"1\");\n        } else if n == \"two\"\
    \ {\n            numbers_vec.push(\"2\");\n        } else if n == \"three\" {\n\
    \            numbers_vec.push(\"3\");\n        } else if n == \"four\" {\n   \
    \         numbers_vec.push(\"4\");\n        } else if n == \"five\" {\n      \
    \      numbers_vec.push(\"5\");\n        } else if n == \"six\" {\n          \
    \  numbers_vec.push(\"6\");\n        } else if n == \"seven\" {\n            numbers_vec.push(\"\
    7\");\n        } else if n == \"eight\" {\n            numbers_vec.push(\"8\"\
    );\n        } else if n == \"nine\" {\n            numbers_vec.push(\"9\");\n\
    \        } else {\n            println!(\"Invalid number: {}\", n);\n        }\n\
    \    }\n    numbers_vec.sort_by(|a, b| a.cmp(b));\n    numbers_vec.join(\", \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6t_3w5ka.rs:8:30\n  |\n8 |\
    \             numbers_vec.push(\"0\");\n  |                              ^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |                   \
    \           |\n  |                              expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6t_3w5ka.rs:10:30\n\
    \   |\n10 |             numbers_vec.push(\"1\");\n   |                       \
    \       ^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                       |\n   |                              expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6t_3w5ka.rs:12:30\n\
    \   |\n12 |             numbers_vec.push(\"2\");\n   |                       \
    \       ^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                       |\n   |                              expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6t_3w5ka.rs:14:30\n\
    \   |\n14 |             numbers_vec.push(\"3\");\n   |                       \
    \       ^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                       |\n   |                              expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6t_3w5ka.rs:16:30\n\
    \   |\n16 |             numbers_vec.push(\"4\");\n   |                       \
    \       ^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                       |\n   |                              expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6t_3w5ka.rs:18:30\n\
    \   |\n18 |             numbers_vec.push(\"5\");\n   |                       \
    \       ^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                       |\n   |                              expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6t_3w5ka.rs:20:30\n\
    \   |\n20 |             numbers_vec.push(\"6\");\n   |                       \
    \       ^^^- help: try using a conversion method: `.to_string()`\n  "
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.chars().collect();\n    numbers_vec.sort();\n    let mut\
    \ numbers_string = \"\";\n    for n in numbers_vec {\n        numbers_string +=\
    \ n.to_string();\n    }\n    return numbers_string;\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp_8lf489l.rs:5:56\n     |\n5  \
    \  |     let mut numbers_vec: Vec<String> = numbers.chars().collect();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `&str`\n --> /tmp/tmp_8lf489l.rs:9:9\n  |\n9 |         numbers_string\
    \ += n.to_string();\n  |         --------------^--^^^^^^^^^^^^^^\n  |        \
    \ |              |\n  |         |              `+` cannot be used to concatenate\
    \ a `&str` with a `String`\n  |         cannot use `+=` on type `&str`\n  |\n\
    \  = note: string concatenation requires an owned `String` on the left\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_8lf489l.rs:11:12\n   |\n4  | fn sort_numbers(numbers:\
    \ String) -> String {\n   |                                     ------ expected\
    \ `String` because of return type\n...\n11 |     return numbers_string;\n   |\
    \            ^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |            |\n   |            expected struct `String`, found `&str`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split_whitespace();\n    numbers_arr.sort_by(|a, b| a.cmp(b));\n \
    \   numbers_arr.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpjciit0l9.rs:6:17\n  |\n6 |     numbers_arr.sort_by(|a,\
    \ b| a.cmp(b));\n  |                 ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `join` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmpjciit0l9.rs:7:17\n  |\n7 |     numbers_arr.join(\"\
    \ \")\n  |                 ^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748505
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = String::new();\n    let mut numbers_array = numbers.chars().collect::<Vec<_>>();\n\
    \    numbers_array.sort_by_key(|x| x.to_digit(10).unwrap());\n    numbers_array.for_each(|x|\
    \ {\n        numbers_sorted += x;\n    });\n    numbers_sorted\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<char>` is not an iterator\n   --> /tmp/tmp6rk3263t.rs:8:19\n\
    \    |\n8   |       numbers_array.for_each(|x| {\n    |                     ^^^^^^^^\
    \ `Vec<char>` is not an iterator\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Vec<char>: Iterator`\n            which is\
    \ required by `&mut Vec<char>: Iterator`\n            `[char]: Iterator`\n   \
    \         which is required by `&mut [char]: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split_whitespace();\n    numbers_arr.sort();\n    numbers_arr.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmppqsmoy97.rs:6:17\n  |\n6 |     numbers_arr.sort();\n\
    \  |                 ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]:\
    \ no method named `join` found for struct `SplitWhitespace` in the current scope\n\
    \ --> /tmp/tmppqsmoy97.rs:7:17\n  |\n7 |     numbers_arr.join(\" \")\n  |    \
    \             ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"\
    9\");\n    numbers.push_str(\"0\");\n    numbers.push_str(\"9\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\"9\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmply5pues1.rs:4:37\n  |\n4 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748504
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\",\");\n    numbers.push_str(\"\
    0\");\n    numbers.push_str(\",\");\n    numbers.push_str(\"9\");\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\",0,9\"`,\n right: `\"\"`', /tmp/tmp7wc7mj8c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    let mut numbers_sorted = String::new();\n    let\
    \ mut numbers_sorted_reversed = String::new();\n    let mut numbers_sorted_reversed_2\
    \ = String::new();\n    let mut numbers_sorted_reversed_3 = String::new();\n \
    \   let mut numbers_sorted_reversed_4 = String::new();\n    let mut numbers_sorted_reversed_5\
    \ = String::new();\n    let mut numbers_sorted_reversed_6 = String::new();\n \
    \   let mut numbers_sorted_reversed_7 = String::new();\n    let mut numbers_sorted_reversed_8\
    \ = String::new();\n    let mut numbers_sorted_reversed_9 = String::new();\n \
    \   let mut numbers_sorted_reversed_10 = String::new();\n    let mut numbers_sorted_reversed_11\
    \ = String::new();\n    let mut numbers_sorted_reversed_12 = String::new();\n\
    \    let mut numbers_sorted_reversed_13 = String::new();\n    let mut numbers_sorted_reversed_14\
    \ = String::new();\n    let mut numbers_sorted_reversed_15 = String::new();\n\
    \    let mut numbers_sorted_reversed_16 = String::new();\n    let mut numbers_sorted_reversed_17\
    \ = String::new();\n    let mut numbers_sorted_reversed_18 = String::new();\n\
    \    let mut numbers_sorted_reversed_19 = String::new();\n    let mut numbers_sorted_reversed_20\
    \ = String::new();\n    let mut numbers_sorted_reversed_21 = String::new();\n\
    \    let mut numbers_sorted_reversed_22 = String::new();\n    let mut numbers_sorted_reversed_23\
    \ = String::new();\n    let mut numbers_sorted_reversed_24 = String::new();\n\
    \    let mut numbers_sorted_reversed_25 = String::new();\n    let mut numbers_sorted_reversed_26\
    \ = String::new();\n    let mut numbers_sorted_reversed_27 = String::new();\n\
    \    let mut numbers_sorted_reversed_28 = String::new();\n    let mut numbers_sorted_reversed_29\
    \ = String::new();\n    let mut numbers_sorted_reversed_30 = String::new();\n\
    \    let mut numbers_sorted_reversed_31 = String::new();\n    let mut numbers_sorted_reversed_32\
    \ = String::new();\n    let mut numbers_sorted_reversed_33 = String::new();\n\
    \    let mut numbers_sorted_reversed_34\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo7fmsu_r.rs:40:39\n   |\n\
    40 |     let mut numbers_sorted_reversed_34\n   |                            \
    \           ^ help: add `;` here\n41 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpo7fmsu_r.rs:4:37\n  |\n4 | fn sort_numbers(numbers:\
    \ String) -> String {\n  |    ------------                     ^^^^^^ expected\
    \ struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\"\
    );\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n   \
    \ numbers.replace(\"'\", \"\");\n    numbers.replace(\"'\", \"\");\n    numbers.replace(\"\
    '\", \"\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppuaesl98.rs:4:37\n   |\n\
    4  | fn sort_numbers(numbers: String) -> String {\n   |    ------------      \
    \               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    77 |     numbers.replace(\"'\", \"\");\n   |                             - help:\
    \ consider removing this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748504
