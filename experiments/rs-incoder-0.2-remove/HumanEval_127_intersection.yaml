name: HumanEval_127_intersection
language: rs
prompt: "/// You are given two intervals,\n/// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed\
  \ which means that the interval (start, end)\n/// includes both start and end.\n\
  /// For each given interval, it is assumed that its start is less or equal its end.\n\
  /// Your task is to determine whether the length of intersection of these two \n\
  /// intervals is a prime number.\n/// Example, the intersection of the intervals\
  \ (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n\
  /// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise,\
  \ return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n///\
  \ [input/output] samples:\nfn intersection(interval1: (isize, isize), interval2:\
  \ (isize, isize)) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!(candidate((1,\
  \ 2), (2, 3)), String::from(\"NO\"));\n    assert_eq!(candidate((-1, 1), (0, 4)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-3, -1), (-5, 5)), String::from(\"\
  YES\"));\n    assert_eq!(candidate((-2, 2), (-4, 0)), String::from(\"YES\"));\n\
  \    assert_eq!(candidate((-11, 2), (-1, -1)), String::from(\"NO\"));\n    assert_eq!(candidate((1,\
  \ 2), (3, 5)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (1, 2)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-2, -2), (-3, -2)), String::from(\"\
  NO\"));\n}\n"
completions: ["    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval3 = interval1;\n    let mut interval4 = interval2;\n    let\
    \ mut interval5 = interval1;\n    let mut interval6 = interval2;\n    let mut\
    \ interval7 = interval1;\n    let mut interval8 = interval2;\n    let mut interval9\
    \ = interval1;\n    let mut interval10 = interval2;\n    let mut interval11 =\
    \ interval1;\n    let mut interval12 = interval2;\n    let mut interval13 = interval1;\n\
    \    let mut interval14 = interval2;\n    let mut interval15 = interval1;\n  \
    \  let mut interval16 = interval2;\n    let mut interval17 = interval1;\n    let\
    \ mut interval18 = interval2;\n    let mut interval19 = interval1;\n    let mut\
    \ interval20 = interval2;\n    let mut interval21 = interval1;\n    let mut interval22\
    \ = interval2;\n    let mut interval23 = interval1;\n    let mut interval24 =\
    \ interval2;\n    let mut interval25 = interval1;\n    let mut interval26 = interval2;\n\
    \    let mut interval27 = interval1;\n    let mut interval28 = interval2;\n  \
    \  let mut interval29 = interval1;\n    let mut interval30 = interval2;\n    let\
    \ mut interval31 = interval1;\n    let mut interval32 = interval2;\n    let mut\
    \ interval33 = interval1;\n    let mut interval34 = interval2;\n    let mut interval35\
    \ = interval1;\n    let mut interval36 = interval2;\n    let mut interval37 =\
    \ interval1;\n    let mut interval38 = interval2;\n    let mut interval39 = interval1;\n\
    \    let mut interval40 = interval2;\n    let mut interval41 = interval1;\n  \
    \  let mut interval42 = interval2;\n    let mut interval43 = interval1;\n    let\
    \ mut interval44 = interval2;\n    let mut interval45 = interval1;\n    let mut\
    \ interval46 = interval2;\n    let mut interval47 = interval1;\n    let mut interval48\
    \ = interval2;\n    let mut interval49 = interval1;\n    let mut interval50 =\
    \ interval2;\n    let mut interval51 = interval1;\n    let mut interval52 = interval2;\n\
    \    let mut interval53 = interval1;\n    let mut interval54 = interval2;\n  \
    \  let mut interval55 = interval1;\n    let mut interval56 = interval2;\n    let\
    \ mut interval57 = interval1;\n    let mut interval58 = interval2;\n    let mu",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  let mut prime_found = false;\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            if interval2_start < interval2_end {\n                if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \ intersection_start = interval1_start;\n                    intersection_end\
    \ = interval1_end;\n                    intersection_length = interval1_end -\
    \ interval1_start;\n                    interval1_prime = true;\n            \
    \        interval2_prime = true;\n                    prime_found = true;\n  \
    \                  break;\n                }\n                if interval2_start\
    \ <= interval1_start && interval2_end >= interval1_end {\n                   \
    \ intersection_start = interval2_start;\n                    intersection_end\
    \ = interval2_end;\n                    intersection_length = interval2_end -\
    \ interval2_start;\n                    interval1_prime = true;\n            \
    \        interval2_prime = true;\n                    prime_found = true;\n  \
    \                  break;\n                }\n            }\n            else\
    \ {\n                if interval1_start <= interval2_start && interval1_end >=\
    \ interval2_end {\n                    intersection_start = interval1_start;\n\
    \                    intersection_end = interval1_end;\n                    intersection_length\
    \ = interval1_end - interval1_start;\n                    interval1_prime = true;\n\
    \                    interval2_prime = true;\n                    prime_found\
    \ = true;\n                    break;\n                }\n                if interval2_start\
    \ <= interval1_start && interval2_end >= interval1_end {\n                   \
    \ intersection_start = interval2_start;\n                    intersection_end\
    \ = interval2_end;\n                    intersection_length = interval2_end -\
    \ interval2_start;\n                    interval1_prime = true;\n            \
    \        interval2_prime = true;\n                    prime_found = true;\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   else {\n            if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n                intersection_start = interval1_start;\n\
    \                intersection_end = interval1_end;\n                intersection_length\
    \ = interval1_end - interval1_start;\n                interval1_prime = true;\n\
    \                interval2_prime = true;\n                prime_found = true;\n\
    \                break;\n            }\n            if interval2_start <= interval1_start\
    \ && interval2_end >= interval1_end {\n                intersection_start = interval2_start;\n\
    \                intersection_end = ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut prime_number: isize = 1;\n    let mut prime_number_counter: isize\
    \ = 1;\n    let mut prime_number_counter2: isize = 1;\n    let mut prime_number_counter3:\
    \ isize = 1;\n    let mut prime_number_counter4: isize = 1;\n    let mut prime_number_counter5:\
    \ isize = 1;\n    let mut prime_number_counter6: isize = 1;\n    let mut prime_number_counter7:\
    \ isize = 1;\n    let mut prime_number_counter8: isize = 1;\n    let mut prime_number_counter9:\
    \ isize = 1;\n    let mut prime_number_counter10: isize = 1;\n    let mut prime_number_counter11:\
    \ isize = 1;\n    let mut prime_number_counter12: isize = 1;\n    let mut prime_number_counter13:\
    \ isize = 1;\n    let mut prime_number_counter14: isize = 1;\n    let mut prime_number_counter15:\
    \ isize = 1;\n    let mut prime_number_counter16: isize = 1;\n    let mut prime_number_counter17:\
    \ isize = 1;\n    let mut prime_number_counter18: isize = 1;\n    let mut prime_number_counter19:\
    \ isize = 1;\n    let mut prime_number_counter20: isize = 1;\n    let mut prime_number_counter21:\
    \ isize = 1;\n    let mut prime_number_counter22: isize = 1;\n    let mut prime_number_counter23:\
    \ isize = 1;\n    let mut prime_number_counter24: isize = 1;\n    let mut prime_number_counter25:\
    \ isize = 1;\n    let mut prime_number_counter26: isize = 1;\n    let mut prime_number_counter27:\
    \ isize = 1;\n    let mut prime_number_counter28: isize = 1;\n    let mut prime_number_counter29:\
    \ isize = 1;\n    let mut prime_number_counter30: isize = 1;\n    let mut prime_number_counter31:\
    \ isize = 1;\n    let mut prime", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut is_prime = true;\n    \n   \
    \ while intersection_start <= interval2_end {\n        if interval1_start < intersection_end\
    \ {\n            if interval1_end < intersection_end {\n                intersection_length\
    \ = intersection_end - intersection_start;\n                is_prime = is_prime\
    \ && interval1_length == intersection_length;\n            }\n            else\
    \ {\n                intersection_length = intersection_end - intersection_start;\n\
    \                is_prime = is_prime && interval1_length == intersection_length;\n\
    \            }\n        }\n        else {\n            intersection_length = intersection_end\
    \ - intersection_start;\n            is_prime = is_prime && interval1_length ==\
    \ intersection_length;\n        }\n        \n        intersection_start = intersection_end\
    \ + 1;\n        intersection_end = intersection_start + 1;\n    }\n    \n    if\
    \ is_prime {\n        return \"YES\";\n    }\n    else {\n        return \"NO\"\
    ;\n    }", "    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut intersection = interval1;\n    let mut intersection2 = interval2;\n\
    \    let mut prime = true;\n    let mut prime2 = true;\n    let mut prime3 = true;\n\
    \    let mut prime4 = true;\n    let mut prime5 = true;\n    let mut prime6 =\
    \ true;\n    let mut prime7 = true;\n    let mut prime8 = true;\n    let mut prime9\
    \ = true;\n    let mut prime10 = true;\n    let mut prime11 = true;\n    let mut\
    \ prime12 = true;\n    let mut prime13 = true;\n    let mut prime14 = true;\n\
    \    let mut prime15 = true;\n    let mut prime16 = true;\n    let mut prime17\
    \ = true;\n    let mut prime18 = true;\n    let mut prime19 = true;\n    let mut\
    \ prime20 = true;\n    let mut prime21 = true;\n    let mut prime22 = true;\n\
    \    let mut prime23 = true;\n    let mut prime24 = true;\n    let mut prime25\
    \ = true;\n    let mut prime26 = true;\n    let mut prime27 = true;\n    let mut\
    \ prime28 = true;\n    let mut prime29 = true;\n    let mut prime30 = true;\n\
    \    let mut prime31 = true;\n    let mut prime32 = true;\n    let mut prime33\
    \ = true;\n    let mut prime34 = true;\n    let mut prime35 = true;\n    let mut\
    \ prime36 = true;\n    let mut prime37 = true;\n    let mut prime38 = true;\n\
    \    let mut prime39 = true;\n    let mut prime40 = true;\n    let mut prime41\
    \ = true;\n    let mut prime42 = true;\n    let mut prime43 = true;\n    let mut\
    \ prime44 = true;\n    let mut prime45 = true;\n    let mut prime46 = true;\n\
    \    let mut prime47 = true;\n    let mut prime48 = true;\n    let mut prime49\
    \ = true;\n    let mut prime50 = true;\n    let mut prime51 = true;\n    let mut\
    \ prime52 = true;\n    let mut prime53 = true;\n    let mut prime54 = true;\n\
    \    let mut prime55 = true;\n    let mut prime56 = true;\n    let mut prime57\
    \ = true;\n    let mut prime58 = true;\n    let mut prime59 = true;\n    let mut\
    \ prime60 = true;\n    let mut prime61 = true;\n    let mut prime62 = true;\n\
    \    let mut prime63 = true;\n    let mut prime64 = true;\n    let mut prime65\
    \ = true;\n    let mut prime66 = true;\n    let mut prime67 = true;", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval1_is_prime = true;\n    let mut interval2_is_prime = true;\n\
    \    \n    while interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n        if interval1_start == interval1_end {\n            interval1_is_prime\
    \ = false;\n            interval1_start = interval1_end + 1;\n        }\n    \
    \    if interval2_start == interval2_end {\n            interval2_is_prime = false;\n\
    \            interval2_start = interval2_end + 1;\n        }\n        if interval1_start\
    \ < interval1_end {\n            if interval2_start < interval2_end {\n      \
    \          intersection_start = interval1_start;\n                intersection_end\
    \ = interval1_end;\n                intersection_length = interval1_end - interval1_start;\n\
    \            }\n            else {\n                intersection_start = interval1_end;\n\
    \                intersection_end = interval1_end + 1;\n                intersection_length\
    \ = interval1_end - interval1_start;\n            }\n        }\n        else {\n\
    \            if interval2_start < interval2_end {\n                intersection_start\
    \ = interval1_end + 1;\n                intersection_end = interval1_end + 1;\n\
    \                intersection_length = interval1_end - interval1_start;\n    \
    \        }\n            else {\n                intersection_start = interval1_end\
    \ + 1;\n                intersection_end = interval1_end + 1;\n              \
    \  intersection_length = interval1_end - interval1_start;\n            }\n   \
    \     }\n        \n        if intersection_length == 2 {\n            if interval1_is_prime\
    \ && interval2_is_prime {\n                return \"YES\";\n            }\n  \
    \          else if interval1_is_prime {\n                return \"NO\";\n    \
    \        }\n            else if interval2_is_prime {\n                return \"\
    NO\";\n            }\n        }\n        \n        interval1_start += 1;\n   \
    \     interval1_end += 1;\n        interval2_start += 1;\n        interval2_end\
    \ += 1;\n    }\n    \n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  let mut prime_number = false;\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            intersection_start = interval1_start;\n            intersection_end\
    \ = interval1_end;\n            intersection_length = interval1_end - intersection_start;\n\
    \            interval1_length = interval1_end - interval1_start;\n           \
    \ interval1_prime = true;\n        } else {\n            intersection_start =\
    \ interval1_end;\n            intersection_end = interval1_end;\n            intersection_length\
    \ = interval1_end - intersection_start;\n            interval1_length = interval1_end\
    \ - interval1_start;\n            interval1_prime = false;\n        }\n      \
    \  \n        if interval2_start < interval2_end {\n            interval2_start\
    \ = interval2_end;\n            interval2_end = interval2_end;\n            interval2_length\
    \ = interval2_end - interval2_start;\n            interval2_prime = true;\n  \
    \      } else {\n            interval2_start = interval2_end;\n            interval2_end\
    \ = interval2_end;\n            interval2_length = interval2_end - interval2_start;\n\
    \            interval2_prime = false;\n        }\n        \n        if intersection_length\
    \ == interval1_length && intersection_length == interval2_length {\n         \
    \   if intersection_start == intersection_end {\n                if interval1_prime\
    \ && interval2_prime {\n                    prime_number = true;\n           \
    \     }\n            } else {\n                if interval1_prime {\n        \
    \            prime_number = true;\n                }\n            }\n        }\n\
    \    }\n    \n    if interval1_start > interval1_end {\n        prime_number =\
    \ false;\n    }\n    \n    if interval2_start > interval2_end {\n        prime_number\
    \ = false;\n    }\n    \n    if prime_number {\n        return \"YES\";\n    }\
    \ else {\n        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \        interval2_start, interval2_end = interval1_start, interval1_end;\n  \
    \  }\n\n    if interval1_end < interval2_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n        interval2_start, interval2_end =\
    \ interval2_end, interval2_start;\n    }\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \        interval2_start, interval2_end = interval2_end, interval2_start;\n  \
    \  }\n\n    if interval1_end < interval2_start {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n        interval2_start, interval2_end =\
    \ interval2_end, interval2_start;\n    }\n\n    if interval1_start == interval1_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start == interval1_end {\n\
    \        return \"YES\";\n    }\n\n    if interval2_start == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_start < interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end > interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start == interval1_end {\n \
    \       return \"YES\";\n    }\n\n    if interval2_start == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_start < interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end > interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start == interval1_end {\n \
    \       return \"YES\";\n    }\n\n    if interval2_start == interval2_end ", " \
    \   let mut intervals = vec![interval1, interval2];\n    intervals.sort();\n \
    \   let mut start = intervals[0].0;\n    let mut end = intervals[1].0;\n    let\
    \ mut length = 0;\n    let mut prime = false;\n    while start < end {\n     \
    \   if start % end == 0 {\n            prime = true;\n            break;\n   \
    \     }\n        start += 1;\n    }\n    if prime == true {\n        return \"\
    YES\";\n    } else {\n        return \"NO\";\n    }", "    let mut interval =\
    \ interval1;\n    let mut interval2 = interval2;\n    let mut interval_len = interval1.0;\n\
    \    let mut interval2_len = interval2.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval2_end = interval2.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval2_start = interval2.0;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_", "    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut interval =\
    \ interval1;\n        interval[0] = interval1[1];\n        interval[1] = interval2[0];\n\
    \        interval\n    } else {\n        let mut interval = interval2;\n     \
    \   interval[0] = interval2[0];\n        interval[1] = interval1[0];\n       \
    \ interval\n    }\n    let mut prime = true;\n    for i in 0..interval[0] {\n\
    \        if interval[0] % i == 0 {\n            prime = false;\n            break;\n\
    \        }\n    }\n    for i in 0..interval[1] {\n        if interval[1] % i ==\
    \ 0 {\n            prime = false;\n            break;\n        }\n    }\n    if\
    \ prime {\n        return \"YES\";\n    }\n    return \"NO\";", "    let (start,\
    \ end) = interval1;\n    let (start2, end2) = interval2;\n    if start > end {\n\
    \        (start, end) = (end, start);\n    }\n    if start2 > end2 {\n       \
    \ (start2, end2) = (end2, start2);\n    }\n    if start == end2 {\n        return\
    \ \"NO\";\n    }\n    let mut prime = true;\n    let mut prime2 = true;\n    let\
    \ mut prime3 = true;\n    let mut prime4 = true;\n    let mut prime5 = true;\n\
    \    let mut prime6 = true;\n    let mut prime7 = true;\n    let mut prime8 =\
    \ true;\n    let mut prime9 = true;\n    let mut prime10 = true;\n    let mut\
    \ prime11 = true;\n    let mut prime12 = true;\n    let mut prime13 = true;\n\
    \    let mut prime14 = true;\n    let mut prime15 = true;\n    let mut prime16\
    \ = true;\n    let mut prime17 = true;\n    let mut prime18 = true;\n    let mut\
    \ prime19 = true;\n    let mut prime20 = true;\n    let mut prime21 = true;\n\
    \    let mut prime22 = true;\n    let mut prime23 = true;\n    let mut prime24\
    \ = true;\n    let mut prime25 = true;\n    let mut prime26 = true;\n    let mut\
    \ prime27 = true;\n    let mut prime28 = true;\n    let mut prime29 = true;\n\
    \    let mut prime30 = true;\n    let mut prime31 = true;\n    let mut prime32\
    \ = true;\n    let mut prime33 = true;\n    let mut prime34 = true;\n    let mut\
    \ prime35 = true;\n    let mut prime36 = true;\n    let mut prime37 = true;\n\
    \    let mut prime38 = true;\n    let mut prime39 = true;\n    let mut prime40\
    \ = true;\n    let mut prime41 = true;\n    let mut prime42 = true;\n    let mut\
    \ prime43 = true;\n    let mut prime44 = true;\n    let mut prime45 = true;\n\
    \    let mut prime46 = true;\n    let mut prime47 = true;\n    let mut prime48\
    \ = true;\n    let mut prime49 = true;\n    let mut prime50 = true;\n    let mut\
    \ prime51 = true;\n    let mut prime52 = true;\n    let mut prime53 = true;\n\
    \    let mut prime54 = true;\n    let mut prime55 = true;\n    let mut prime56\
    \ = true;\n    let mut prime57 = true;\n    let mut prime58 = true;\n    let mut\
    \ prime59 = true;\n    let mut prime60 = true;\n    let mut prime61 = true;\n\
    \    let mut prime62 = true;\n    let mu", "    let mut intervals = vec![interval1,\
    \ interval2];\n    let mut start = interval1.0;\n    let mut end = interval2.0;\n\
    \    let mut length = 0;\n    let mut prime = false;\n    loop {\n        if start\
    \ > end {\n            break;\n        }\n        let mut i = start;\n       \
    \ let mut j = end;\n        while i <= j {\n            if intervals[i].0 > intervals[j].0\
    \ {\n                i += 1;\n            } else {\n                j -= 1;\n\
    \            }\n        }\n        if i == j {\n            prime = true;\n  \
    \          length += 1;\n            i += 1;\n            j -= 1;\n        } else\
    \ {\n            intervals.push(vec![i, j]);\n            i += 1;\n          \
    \  j -= 1;\n        }\n    }\n    if prime {\n        return \"YES\".to_string();\n\
    \    } else {\n        return \"NO\".to_string();\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut interval1_length\
    \ = interval2_end - interval2_start;\n    let mut interval2_length = interval1_end\
    \ - interval1_start;\n    \n    while interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n        if interval1_start < interval1_end {\n         \
    \   intersection_start = interval1_start;\n            intersection_end = interval1_end;\n\
    \            intersection_length += 1;\n        }\n        if interval2_start\
    \ < interval2_end {\n            interval1_start = interval2_start;\n        \
    \    interval1_end = interval2_end;\n            interval1_length += 1;\n    \
    \    }\n        interval2_start = interval2_end;\n        interval2_end = interval2_start\
    \ + 1;\n        interval2_length += 1;\n    }\n    \n    if interval1_start ==\
    \ interval1_end {\n        if interval2_start == interval2_end {\n           \
    \ if intersection_length == interval1_length {\n                return \"YES\"\
    ;\n            }\n            return \"NO\";\n        }\n        return \"NO\"\
    ;\n    }\n    \n    if interval2_start == interval2_end {\n        return \"NO\"\
    ;\n    }\n    \n    if intersection_length == interval1_length {\n        return\
    \ \"YES\";\n    }\n    \n    if intersection_length == interval2_length {\n  \
    \      return \"YES\";\n    }\n    \n    if intersection_length < interval1_length\
    \ {\n        return \"NO\";\n    }\n    \n    if intersection_length < interval2_length\
    \ {\n        return \"NO\";\n    }\n    \n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_end {\n        let temp = interval1_end;\n        interval1_end\
    \ = interval2_start;\n        interval2_start = temp;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        let temp = interval1_start;\n        interval1_start\
    \ = interval2_end;\n        interval2_end = temp;\n    }\n\n    if interval1_start\
    \ > interval2_start {\n        let temp = interval1_start;\n        interval1_start\
    \ = interval2_start;\n        interval2_start = temp;\n    }\n\n    if interval1_end\
    \ < interval2_end {\n        let temp = interval1_end;\n        interval1_end\
    \ = interval2_end;\n        interval2_end = temp;\n    }\n\n    if interval1_start\
    \ == interval1_end {\n        return \"NO\";\n    }\n\n    if interval2_start\
    \ == interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start\
    \ < interval2_start {\n        return \"NO\";\n    }\n\n    if interval1_end >\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end > interval2_start {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end == interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end < interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end == interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end < interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_end == interval2_end {\n   \
    \     return \"YES\";\n    }\n\n    if interval1_start == interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end < interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end == interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = 0;\n    \n    while interval1_start <= interval1_end && interval2_start <=\
    \ interval2_end {\n        if interval1_start < interval1_end {\n            intersection_length\
    \ += 1;\n            interval1_start += 1;\n        }\n        if interval2_start\
    \ < interval2_end {\n            intersection_length += 1;\n            interval2_start\
    \ += 1;\n        }\n    }\n    \n    if interval1_start > interval1_end {\n  \
    \      intersection_length -= 1;\n        interval1_end += 1;\n    }\n    if interval2_start\
    \ > interval2_end {\n        intersection_length -= 1;\n        interval2_end\
    \ += 1;\n    }\n    \n    if intersection_length == 0 {\n        return \"NO\"\
    ;\n    }\n    \n    if intersection_length == 1 {\n        return \"YES\";\n \
    \   }\n    \n    if intersection_length == 2 {\n        if interval1_start ==\
    \ interval1_end {\n            return \"YES\";\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    \n  \
    \  if intersection_length == 3 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\";\n        }\n        if interval2_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n    }\n    \n    if intersection_length\
    \ == 4 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n        if interval1_start == interval2_start {\n\
    \            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n    }\n    \n    if intersection_length\
    \ == 5 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n        if interval1_start == interval2_start {\n\
    \            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n    }\n    \n    if intersection_length\
    \ == 6 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    let mut intersection_len = interval1_len + interval2_len;\n    let mut prime_number:\
    \ isize = 1;\n    let mut prime_number_flag = false;\n    let mut prime_number_flag2\
    \ = false;\n    let mut prime_number_flag3 = false;\n    let mut prime_number_flag4\
    \ = false;\n    let mut prime_number_flag5 = false;\n    let mut prime_number_flag6\
    \ = false;\n    let mut prime_number_flag7 = false;\n    let mut prime_number_flag8\
    \ = false;\n    let mut prime_number_flag9 = false;\n    let mut prime_number_flag10\
    \ = false;\n    let mut prime_number_flag11 = false;\n    let mut prime_number_flag12\
    \ = false;\n    let mut prime_number_flag13 = false;\n    let mut prime_number_flag14\
    \ = false;\n    let mut prime_number_flag15 = false;\n    let mut prime_number_flag16\
    \ = false;\n    let mut prime_number_flag17 = false;\n    let mut prime_number_flag18\
    \ = false;\n    let mut prime_number_flag19 = false;\n    let mut prime_number_flag20\
    \ = false;\n    let mut prime_number_flag21 = false;\n    let mut prime_number_flag22\
    \ = false;\n    let mut prime_number_flag23 = false;\n    let mut prime_number_flag24\
    \ = false;\n    let mut prime_number_flag25 = false;\n    let mut prime_number_flag26\
    \ = false;\n    let mut prime_number_flag27 = false;\n    let mut prime_number_flag28\
    \ = false;\n    let mut prime_number_flag29 = false;\n    let mut prime_number_flag30\
    \ = false;\n    let mut prime_number_flag31 = false;\n    let mut prime_number_flag32\
    \ = false;\n    let mut prime_number_flag33 = false;\n    let mut prime_number_flag34\
    \ = false;\n    let mut prime_number_flag35 = false;\n    let mut prime_number_flag36\
    \ = false;\n    let mut prime_number_flag37 = false;\n    let mut prime_number_flag38\
    \ = false;\n    let mut prime_number_flag39 = false;\n    let mut prime_number_flag40\
    \ = false;\n    let mut prime_number_flag41 = false;\n    let mut prime_number_flag42\
    \ = ", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_length = interval1_end - interval1_start;\n\
    \    let mut interval_length2 = interval2_end - interval2_start;\n    let mut\
    \ prime_number: isize = 0;\n    let mut prime_number2: isize = 0;\n    let mut\
    \ prime_number3: isize = 0;\n    let mut prime_number4: isize = 0;\n    let mut\
    \ prime_number5: isize = 0;\n    let mut prime_number6: isize = 0;\n    let mut\
    \ prime_number7: isize = 0;\n    let mut prime_number8: isize = 0;\n    let mut\
    \ prime_number9: isize = 0;\n    let mut prime_number10: isize = 0;\n    let mut\
    \ prime_number11: isize = 0;\n    let mut prime_number12: isize = 0;\n    let\
    \ mut prime_number13: isize = 0;\n    let mut prime_number14: isize = 0;\n   \
    \ let mut prime_number15: isize = 0;\n    let mut prime_number16: isize = 0;\n\
    \    let mut prime_number17: isize = 0;\n    let mut prime_number18: isize = 0;\n\
    \    let mut prime_number19: isize = 0;\n    let mut prime_number20: isize = 0;\n\
    \    let mut prime_number21: isize = 0;\n    let mut prime_number22: isize = 0;\n\
    \    let mut prime_number23: isize = 0;\n    let mut prime_number24: isize = 0;\n\
    \    let mut prime_number25: isize = 0;\n    let mut prime_number26: isize = 0;\n\
    \    let mut prime_number27: isize = 0;\n    let mut prime_number28: isize = 0;\n\
    \    let mut prime_number29: isize = 0;\n    let mut prime_number30: isize = 0;\n\
    \    let mut prime_number31: isize = 0;\n    let mut prime_number32: isize = 0;\n\
    \    let mut prime_number33: isize = 0;\n    let mut prime_number34: isize = 0;\n\
    \    let mut prime_number35: isize = 0;\n    let mut prime_number36: isize = 0;\n\
    \    let mut prime_number37: isize = 0;\n    let mut prime_number", "    let mut\
    \ interval = interval1;\n    interval.0 = interval.0 as isize;\n    interval.1\
    \ = interval.1 as isize;\n    let mut interval2 = interval2;\n    interval2.0\
    \ = interval2.0 as isize;\n    interval2.1 = interval2.1 as isize;\n    if interval.0\
    \ > interval2.0 {\n        interval = interval2;\n    }\n    if interval.1 > interval2.1\
    \ {\n        interval = interval2;\n    }\n    if interval.0 > interval2.0 ||\
    \ interval.1 > interval2.1 {\n        return \"NO\";\n    }\n    let mut flag\
    \ = false;\n    let mut i = interval.0;\n    let mut j = interval.1;\n    let\
    \ mut k = interval2.0;\n    let mut l = interval2.1;\n    while i <= j && k <=\
    \ l {\n        if interval[i] < interval[k] {\n            i += 1;\n        }\n\
    \        if interval[j] > interval[k] {\n            j += 1;\n        }\n    \
    \    if interval[i] < interval[k] {\n            k += 1;\n        }\n        if\
    \ interval[j] > interval[k] {\n            l += 1;\n        }\n        if interval[i]\
    \ == interval[j] {\n            flag = true;\n        }\n    }\n    if flag {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    let (start, end) =\
    \ interval1;\n    let (start2, end2) = interval2;\n    if start > end {\n    \
    \    (start, end) = (end, start);\n    }\n    if start2 > end2 {\n        (start2,\
    \ end2) = (end2, start2);\n    }\n    let mut intersection = start;\n    while\
    \ intersection < end {\n        if intersection == start2 {\n            intersection\
    \ += 1;\n        }\n        if intersection == end2 {\n            intersection\
    \ += 1;\n        }\n    }\n    if intersection == end {\n        return \"YES\"\
    ;\n    }\n    if intersection == start {\n        return \"NO\";\n    }\n    if\
    \ intersection % 2 == 0 {\n        return \"NO\";\n    }\n    return \"YES\";",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n\n    let mut intersection_length = interval1_end\
    \ - interval2_start + 1;\n    let mut prime_number: isize = 1;\n\n    while prime_number\
    \ < intersection_length {\n        if interval1_start <= interval2_end {\n   \
    \         if interval1_end >= interval2_start {\n                if interval1_end\
    \ >= interval2_start {\n                    if interval1_end >= interval2_start\
    \ {\n                        if interval1_end >= interval2_start {\n         \
    \                   if interval1_end >= interval2_start {\n                  \
    \              prime_number = prime_number + 1;\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n\n    if prime_number == intersection_length {\n  \
    \      return \"YES\";\n    } else {\n        return \"NO\";\n    }", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval_length = interval1_end - interval1_start + interval2_end\
    \ - interval2_start;\n    let mut prime_number: isize = 1;\n    let mut prime_number_found\
    \ = false;\n    let mut prime_number_found2 = false;\n    let mut prime_number_found3\
    \ = false;\n    let mut prime_number_found4 = false;\n    let mut prime_number_found5\
    \ = false;\n    let mut prime_number_found6 = false;\n    let mut prime_number_found7\
    \ = false;\n    let mut prime_number_found8 = false;\n    let mut prime_number_found9\
    \ = false;\n    let mut prime_number_found10 = false;\n    let mut prime_number_found11\
    \ = false;\n    let mut prime_number_found12 = false;\n    let mut prime_number_found13\
    \ = false;\n    let mut prime_number_found14 = false;\n    let mut prime_number_found15\
    \ = false;\n    let mut prime_number_found16 = false;\n    let mut prime_number_found17\
    \ = false;\n    let mut prime_number_found18 = false;\n    let mut prime_number_found19\
    \ = false;\n    let mut prime_number_found20 = false;\n    let mut prime_number_found21\
    \ = false;\n    let mut prime_number_found22 = false;\n    let mut prime_number_found23\
    \ = false;\n    let mut prime_number_found24 = false;\n    let mut prime_number_found25\
    \ = false;\n    let mut prime_number_found26 = false;\n    let mut prime_number_found27\
    \ = false;\n    let mut prime_number_found28 = false;\n    let mut prime_number_found29\
    \ = false;\n    let mut prime_number_found30 = false;\n    let mut prime_number_found31\
    \ = false;\n    let mut prime_number_found32 = false;\n    let mut prime_number_found33\
    \ = false;\n    let mut prime_number_found34 = false;\n    let mut prime_number_found35\
    \ = false;\n    let mut prime_number_found36 = false;\n    let mut prime_number_found37\
    \ = false;\n    let mut prime_number_found38 = false;\n    let mut prime_number_found39\
    \ = false;\n    let mut prime_number_found40 = false;\n    let mut prime_number_found41\
    \ = false;\n    let mut prime_number_found42 = false;\n    let mut prime_number_found43\
    \ = false;\n    let mut prime_number_found44", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n\n    if interval1_end < interval2_start {\n    \
    \    interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n        interval2_length =\
    \ interval1_length;\n    }\n\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n\n    if interval1_length == 3 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_length\
    \ == 4 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n\
    \    if interval1_length == 5 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n\n    if interval1_length == 6 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n\n    if interval1_length == 7 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_length\
    \ == 8 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n\
    \    if interval1_length == 9 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n\n    if interval1_length == 10 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n\n    if interval1_length == 11 {\n \
    \       if interval1_start == interval", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end < interval2_start {\n        interval1_start =\
    \ interval2_start;\n        interval2_end = interval1_end;\n    }\n\n    if interval1_start\
    \ > interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start == interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n\n    while intersection_start\
    \ <= interval2_end {\n        if interval1_start < intersection_end {\n      \
    \      if interval2_start < intersection_end {\n                intersection_end\
    \ = intersection_end;\n            } else {\n                intersection_start\
    \ = intersection_start;\n                intersection_end = intersection_end;\n\
    \            }\n        } else {\n            if interval2_start < intersection_start\
    \ {\n                intersection_start = intersection_start;\n              \
    \  intersection_end = intersection_end;\n            } else {\n              \
    \  intersection_start = intersection_start;\n                intersection_end\
    \ = intersection_end;\n            }\n        }\n    }\n\n    if intersection_start\
    \ == interval1_start {\n        return \"NO\";\n    }\n\n    if intersection_end\
    \ == interval1_end {\n        return \"NO\";\n    }\n\n    if intersection_start\
    \ == interval2_start {\n        return \"NO\";\n    }\n\n    if intersection_end\
    \ == interval2_end {\n        return \"NO\";\n    }\n\n    if intersection_start\
    \ == intersection_end {\n        return \"YES\";\n    }\n\n    return \"NO\";",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start == interval2_start {\n        return \"YES\";\n\
    \    }\n\n    let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \    let mut interval2_length = interval2_end - interval2_start + 1;\n\n    if\
    \ interval1_length == interval2_length {\n        return \"YES\";\n    }\n\n \
    \   if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n\n    if interval1_length == 2 {\n        return \"YES\";\n    }\n\n \
    \   let mut prime_number: isize = 2;\n    let mut prime_number_found = false;\n\
    \n    for _ in 0..interval1_length {\n        if interval1_start % prime_number\
    \ == 0 {\n            prime_number_found = true;\n        }\n        prime_number\
    \ += 2;\n    }\n\n    if prime_number_found {\n        return \"YES\";\n    }\n\
    \n    return \"NO\";", "    let (start, end) = interval1;\n    let (start2, end2)\
    \ = interval2;\n    let mut interval = interval1;\n    if start > end {\n    \
    \    interval = interval2;\n    }\n    if start2 > end2 {\n        interval =\
    \ interval1;\n    }\n    let (start, end) = interval;\n    let mut prime = true;\n\
    \    let mut prime2 = true;\n    let mut prime3 = true;\n    let mut prime4 =\
    \ true;\n    let mut prime5 = true;\n    let mut prime6 = true;\n    let mut prime7\
    \ = true;\n    let mut prime8 = true;\n    let mut prime9 = true;\n    let mut\
    \ prime10 = true;\n    let mut prime11 = true;\n    let mut prime12 = true;\n\
    \    let mut prime13 = true;\n    let mut prime14 = true;\n    let mut prime15\
    \ = true;\n    let mut prime16 = true;\n    let mut prime17 = true;\n    let mut\
    \ prime18 = true;\n    let mut prime19 = true;\n    let mut prime20 = true;\n\
    \    let mut prime21 = true;\n    let mut prime22 = true;\n    let mut prime23\
    \ = true;\n    let mut prime24 = true;\n    let mut prime25 = true;\n    let mut\
    \ prime26 = true;\n    let mut prime27 = true;\n    let mut prime28 = true;\n\
    \    let mut prime29 = true;\n    let mut prime30 = true;\n    let mut prime31\
    \ = true;\n    let mut prime32 = true;\n    let mut prime33 = true;\n    let mut\
    \ prime34 = true;\n    let mut prime35 = true;\n    let mut prime36 = true;\n\
    \    let mut prime37 = true;\n    let mut prime38 = true;\n    let mut prime39\
    \ = true;\n    let mut prime40 = true;\n    let mut prime41 = true;\n    let mut\
    \ prime42 = true;\n    let mut prime43 = true;\n    let mut prime44 = true;\n\
    \    let mut prime45 = true;\n    let mut prime46 = true;\n    let mut prime47\
    \ = true;\n    let mut prime48 = true;\n    let mut prime49 = true;\n    let mut\
    \ prime50 = true;\n    let mut prime51 = true;\n    let mut prime52 = true;\n\
    \    let mut prime53 = true;\n    let mut prime54 = true;\n    let mut prime55\
    \ = true;\n    let mut prime56 = true;\n    let mut prime57 = true;\n    let mut\
    \ prime58 = true;\n    let mut prime59 = true;\n    let mut prime60 = true;\n\
    \    let mut prime61 = true;\n    let mut prime62 = true;\n    let mut prime63\
    \ = ", "    let mut intervals = vec![interval1, interval2];\n    let mut start\
    \ = intervals[0].0;\n    let mut end = intervals[1].0;\n    let mut length = 0;\n\
    \    loop {\n        if start > end {\n            break;\n        }\n       \
    \ let mut i = start;\n        let mut j = end;\n        while i <= j {\n     \
    \       if intervals.iter().any(|&(_, y)| y > i) {\n                i += 1;\n\
    \            } else {\n                j -= 1;\n            }\n        }\n   \
    \     length += 1;\n        start = i;\n        end = j;\n    }\n    if length\
    \ == 2 {\n        return \"NO\";\n    }\n    if length == 1 {\n        return\
    \ \"YES\";\n    }\n    if length == 0 {\n        return \"NO\";\n    }\n    if\
    \ length == 2 {\n        return \"YES\";\n    }\n    if length == 1 {\n      \
    \  return \"YES\";\n    }\n    return \"NO\";", "    let mut interval = interval1;\n\
    \    if interval1.0 > interval2.0 {\n        interval = interval2;\n    }\n  \
    \  let mut start = interval.0;\n    let mut end = interval.1;\n    let mut length\
    \ = 0;\n    while start < end {\n        start = start + 1;\n        end = end\
    \ + 1;\n    }\n    if start == end {\n        return \"NO\";\n    }\n    if start\
    \ == end {\n        return \"YES\";\n    }\n    if start % end == 0 {\n      \
    \  return \"NO\";\n    }\n    if start % end != 0 {\n        return \"YES\";\n\
    \    }\n    let mut prime = true;\n    let mut i = 1;\n    while i < end {\n \
    \       if start % i == 0 {\n            prime = false;\n            break;\n\
    \        }\n        i = i + 1;\n    }\n    if prime {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";", "    let mut intervals = vec![];\n    intervals.push(interval1);\n\
    \    intervals.push(interval2);\n    let mut inter = intervals.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime = true;\n    for interval in &mut inter {\n        if interval[0]\
    \ > interval[1] {\n            return String::from(\"NO\");\n        }\n    }\n\
    \    for interval in &mut inter {\n        if interval[0] < interval[1] {\n  \
    \          prime = false;\n        }\n    }\n    if prime {\n        return String::from(\"\
    YES\");\n    }\n    return String::from(\"NO\");", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_end < interval2_start {\n      \
    \  interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        return \"NO\";\n \
    \   }\n    if interval1_end < interval2_start {\n        return \"NO\";\n    }\n\
    \n    if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\
    \n    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start < interval2_start {\n        return \"NO\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n   \
    \ if interval1_start < interval2_start {\n        return \"YES\";\n    }\n\n \
    \   if interval1_end > interval2_end {\n        return \"YES\";\n    }\n\n   \
    \ if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n\n \
    \   if interval1_start < interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"YES\";\n    }\n\n  \
    \  if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n\n \
    \   if interval1_start < interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"YES\";\n    }\n\n  \
    \  if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n\n \
    \   if interval1_start < interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"YES\";\n    }\n\n  \
    \  if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n\n \
    \   if interval1_start < interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"YES\";\n    }\n\n  \
    \  if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n\n",
  "    let mut interval1_start = interval1.0;\n    let mut interval1_end = interval1.1;\n\
    \    let mut interval2_start = interval2.0;\n    let mut interval2_end = interval2.1;\n\
    \    let mut intersection_length = 0;\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            intersection_length += 1;\n            interval1_start += 1;\n\
    \        } else {\n            intersection_length += 1;\n            interval1_end\
    \ += 1;\n        }\n        if interval2_start < interval2_end {\n           \
    \ intersection_length += 1;\n            interval2_start += 1;\n        } else\
    \ {\n            intersection_length += 1;\n            interval2_end += 1;\n\
    \        }\n    }\n    \n    if interval1_start > interval1_end {\n        intersection_length\
    \ += 1;\n        interval1_start += 1;\n    }\n    if interval2_start > interval2_end\
    \ {\n        intersection_length += 1;\n        interval2_start += 1;\n    }\n\
    \    \n    if intersection_length == 2 {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    let mut prime_number: isize = 1;\n    let mut prime_number_found = false;\n\
    \    loop {\n        if interval1_start > interval2_end {\n            break;\n\
    \        }\n        if interval1_end < interval2_start {\n            break;\n\
    \        }\n        if interval1_start == interval2_start {\n            intersection_length\
    \ += 1;\n        }\n        if interval1_end == interval2_end {\n            intersection_length\
    \ += 1;\n        }\n        if prime_number_found {\n            break;\n    \
    \    }\n        if interval1_start < interval2_end {\n            prime_number_found\
    \ = true;\n        }\n        if interval1_end > interval2_start {\n         \
    \   prime_number_found = true;\n        }\n        if prime_number_found {\n \
    \           break;\n        }\n        prime_number += 1;\n    }\n    if prime_number_found\
    \ {\n        if prime_number == intersection_length {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    return \"NO\";", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    \n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n    \n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval2_start {\n            intersection_length += 1;\n            interval1_start\
    \ += 1;\n        }\n        if interval1_end > interval2_end {\n            intersection_length\
    \ += 1;\n            interval1_end -= 1;\n        }\n        if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n            intersection_length\
    \ += 1;\n            interval2_start += 1;\n        }\n        if interval1_end\
    \ > interval2_end {\n            intersection_length += 1;\n            interval2_end\
    \ -= 1;\n        }\n    }\n    \n    if interval1_start > interval1_end {\n  \
    \      intersection_length += 1;\n    }\n    if interval2_start > interval2_end\
    \ {\n        intersection_length += 1;\n    }\n    \n    if intersection_length\
    \ == 2 {\n        return \"YES\";\n    }\n    \n    if intersection_length ==\
    \ 1 {\n        return \"NO\";\n    }\n    \n    return \"NO\";", "    let (start,\
    \ end) = interval1;\n    let (start_2, end_2) = interval2;\n    if start > end\
    \ {\n        (start, end) = (end, start)\n    }\n    if start_2 > end_2 {\n  \
    \      (start_2, end_2) = (end_2, start_2)\n    }\n    let mut prime = true;\n\
    \    let mut prime_length = 0;\n    let mut prime_length2 = 0;\n    let mut prime_length3\
    \ = 0;\n    let mut prime_length4 = 0;\n    let mut prime_length5 = 0;\n    let\
    \ mut prime_length6 = 0;\n    let mut prime_length7 = 0;\n    let mut prime_length8\
    \ = 0;\n    let mut prime_length9 = 0;\n    let mut prime_length10 = 0;\n    let\
    \ mut prime_length11 = 0;\n    let mut prime_length12 = 0;\n    let mut prime_length13\
    \ = 0;\n    let mut prime_length14 = 0;\n    let mut prime_length15 = 0;\n   \
    \ let mut prime_length16 = 0;\n    let mut prime_length17 = 0;\n    let mut prime_length18\
    \ = 0;\n    let mut prime_length19 = 0;\n    let mut prime_length20 = 0;\n   \
    \ let mut prime_length21 = 0;\n    let mut prime_length22 = 0;\n    let mut prime_length23\
    \ = 0;\n    let mut prime_length24 = 0;\n    let mut prime_length25 = 0;\n   \
    \ let mut prime_length26 = 0;\n    let mut prime_length27 = 0;\n    let mut prime_length28\
    \ = 0;\n    let mut prime_length29 = 0;\n    let mut prime_length30 = 0;\n   \
    \ let mut prime_length31 = 0;\n    let mut prime_length32 = 0;\n    let mut prime_length33\
    \ = 0;\n    let mut prime_length34 = 0;\n    let mut prime_length35 = 0;\n   \
    \ let mut prime_length36 = 0;\n    let mut prime_length37 = 0;\n    let mut prime_length38\
    \ = 0;\n    let mut prime_length39 = 0;\n    let mut prime_length40 = 0;\n   \
    \ let mut prime_length41 = 0;\n    let mut prime_length42 = 0;\n    let mut prime_length43\
    \ = 0;\n    let mut prime_length44 = 0;\n    let mut prime_length45 = 0;\n   \
    \ let mut prime_length46 = 0;\n    let mut prime_length47 = 0;\n    let mut prime_length48\
    \ = 0;\n    let mut prime_length49 = 0;\n    let mut prime_length50 = 0;\n   \
    \ let mut prime_length51 = 0;\n", "    let mut interval_1 = interval1.0;\n   \
    \ let mut interval_2 = interval2.0;\n    let mut intersection = interval_1;\n\
    \    let mut interval_1_end = interval_1;\n    let mut interval_2_end = interval_2;\n\
    \    let mut interval_1_start = interval_1;\n    let mut interval_2_start = interval_2;\n\
    \    let mut interval_1_end_next = interval_1;\n    let mut interval_2_end_next\
    \ = interval_2;\n    let mut interval_1_start_next = interval_1;\n    let mut\
    \ interval_2_start_next = interval_2;\n    let mut interval_1_end_next_next =\
    \ interval_1;\n    let mut interval_2_end_next_next = interval_2;\n    let mut\
    \ interval_1_start_next_next = interval_1;\n    let mut interval_2_start_next_next\
    \ = interval_2;\n    let mut interval_1_end_next_next_next = interval_1;\n   \
    \ let mut interval_2_end_next_next_next = interval_2;\n    let mut interval_1_start_next_next_next\
    \ = interval_1;\n    let mut interval_2_start_next_next_next = interval_2;\n \
    \   let mut interval_1_end_next_next_next_next = interval_1;\n    let mut interval_2_end_next_next_next_next\
    \ = interval_2;\n    let mut interval_1_start_next_next_next_next = interval_1;\n\
    \    let mut interval_2_start_next_next_next_next = interval_2;\n    let mut interval_1_end_next_next_next_next_next\
    \ = interval_1;\n    let mut interval_2_end_next_next_next_next_next = interval_2;\n\
    \    let mut interval_1_start_next_next_next_next_next = interval_1;\n    let\
    \ mut interval_2_start_next_next_next_next_next = interval_2;\n    let mut interval_1_end_next_next_next_next_next\
    \ = interval_1;\n    let mut interval_2_end_next_next_next_next_next = interval_2;\n\
    \    let mut interval_1_start_next_next_next_next_next = interval_1;\n    let\
    \ mut interval_2_start_next_next_next_next_next = interval_2;\n    let mut interval_1_end_next_next_next_next_next_next\
    \ = interval_1;\n    let mut interval_2_end_next_next_next_next_next_next = interval_2;\n\
    \    let mut interval_1_start_next_next_next_next_next_next = interval_1;\n  \
    \  let mut interval_2_start_next_next_next_next_next_next = interval_2;\n    let\
    \ mut interval_1_end_next_next_next_next_next_next = interval_1;\n    let mut\
    \ interval_2_end_next_next_next_", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut prime_number: isize = 1;\n \
    \   let mut prime_number_found = false;\n    let mut prime_number_found2 = false;\n\
    \    let mut prime_number_found3 = false;\n    let mut prime_number_found4 = false;\n\
    \    let mut prime_number_found5 = false;\n    let mut prime_number_found6 = false;\n\
    \    let mut prime_number_found7 = false;\n    let mut prime_number_found8 = false;\n\
    \    let mut prime_number_found9 = false;\n    let mut prime_number_found10 =\
    \ false;\n    let mut prime_number_found11 = false;\n    let mut prime_number_found12\
    \ = false;\n    let mut prime_number_found13 = false;\n    let mut prime_number_found14\
    \ = false;\n    let mut prime_number_found15 = false;\n    let mut prime_number_found16\
    \ = false;\n    let mut prime_number_found17 = false;\n    let mut prime_number_found18\
    \ = false;\n    let mut prime_number_found19 = false;\n    let mut prime_number_found20\
    \ = false;\n    let mut prime_number_found21 = false;\n    let mut prime_number_found22\
    \ = false;\n    let mut prime_number_found23 = false;\n    let mut prime_number_found24\
    \ = false;\n    let mut prime_number_found25 = false;\n    let mut prime_number_found26\
    \ = false;\n    let mut prime_number_found27 = false;\n    let mut prime_number_found28\
    \ = false;\n    let mut prime_number_found29 = false;\n    let mut prime_number_found30\
    \ = false;\n    let mut prime_number_found31 = false;\n    let mut prime_number_found32\
    \ = false;\n    let mut prime_number_found33 = false;\n    let mut prime_number_found34\
    \ = false;\n    let mut prime_number_found35 = false;\n    let mut prime_number_found36\
    \ = false;\n    let mut prime_number_found37 = false;\n    let mut prime_number_found38\
    \ = false;\n    let mut prime_number_found39 = false;\n    let mut prime_number_found40\
    \ = false;\n    let mut prime_number_found41 = false;\n    let mut prime_number_found42\
    \ = false;\n    let mut prime_", "    let (start, end) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    if start > end {\n        let tmp = start;\n       \
    \ start = end;\n        end = tmp;\n    }\n    if start2 > end2 {\n        let\
    \ tmp = start2;\n        start2 = end2;\n        end2 = tmp;\n    }\n    if start\
    \ > start2 {\n        return \"NO\";\n    }\n    let mut prime: isize = 1;\n \
    \   let mut prime2: isize = 1;\n    let mut prime3: isize = 1;\n    let mut prime4:\
    \ isize = 1;\n    let mut prime5: isize = 1;\n    let mut prime6: isize = 1;\n\
    \    let mut prime7: isize = 1;\n    let mut prime8: isize = 1;\n    let mut prime9:\
    \ isize = 1;\n    let mut prime10: isize = 1;\n    let mut prime11: isize = 1;\n\
    \    let mut prime12: isize = 1;\n    let mut prime13: isize = 1;\n    let mut\
    \ prime14: isize = 1;\n    let mut prime15: isize = 1;\n    let mut prime16: isize\
    \ = 1;\n    let mut prime17: isize = 1;\n    let mut prime18: isize = 1;\n   \
    \ let mut prime19: isize = 1;\n    let mut prime20: isize = 1;\n    let mut prime21:\
    \ isize = 1;\n    let mut prime22: isize = 1;\n    let mut prime23: isize = 1;\n\
    \    let mut prime24: isize = 1;\n    let mut prime25: isize = 1;\n    let mut\
    \ prime26: isize = 1;\n    let mut prime27: isize = 1;\n    let mut prime28: isize\
    \ = 1;\n    let mut prime29: isize = 1;\n    let mut prime30: isize = 1;\n   \
    \ let mut prime31: isize = 1;\n    let mut prime32: isize = 1;\n    let mut prime33:\
    \ isize = 1;\n    let mut prime34: isize = 1;\n    let mut prime35: isize = 1;\n\
    \    let mut prime36: isize = 1;\n    let mut prime37: isize = 1;\n    let mut\
    \ prime38: isize = 1;\n    let mut prime39: isize = 1;\n    let mut prime40: isize\
    \ = 1;\n    let mut prime41: isize = 1;\n    let mut prime42: isize = 1;\n   \
    \ let mut prime43: isize = 1;\n    let mut prime44: isize = 1;\n    let mut ",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut prime_number: isize = 1;\n    let mut prime_number_counter:\
    \ isize = 1;\n    let mut prime_number_counter2: isize = 1;\n    let mut prime_number_counter3:\
    \ isize = 1;\n    let mut prime_number_counter4: isize = 1;\n    let mut prime_number_counter5:\
    \ isize = 1;\n    let mut prime_number_counter6: isize = 1;\n    let mut prime_number_counter7:\
    \ isize = 1;\n    let mut prime_number_counter8: isize = 1;\n    let mut prime_number_counter9:\
    \ isize = 1;\n    let mut prime_number_counter10: isize = 1;\n    let mut prime_number_counter11:\
    \ isize = 1;\n    let mut prime_number_counter12: isize = 1;\n    let mut prime_number_counter13:\
    \ isize = 1;\n    let mut prime_number_counter14: isize = 1;\n    let mut prime_number_counter15:\
    \ isize = 1;\n    let mut prime_number_counter16: isize = 1;\n    let mut prime_number_counter17:\
    \ isize = 1;\n    let mut prime_number_counter18: isize = 1;\n    let mut prime_number_counter19:\
    \ isize = 1;\n    let mut prime_number_counter20: isize = 1;\n    let mut prime_number_counter21:\
    \ isize = 1;\n    let mut prime_number_counter22: isize = 1;\n    let mut prime_number_counter23:\
    \ isize = 1;\n    let mut prime_number_counter24: isize = 1;\n    let mut prime_number_counter25:\
    \ isize = 1;\n    let mut prime_number_counter26: isize = 1;\n    let mut prime_number_counter27:\
    \ isize = 1;\n    let mut prime_number_counter28: isize = 1;\n    let mut prime_number_counter29:\
    \ isize = 1;\n    let mut prime_number_counter30: isize = 1;\n    let mut prime_number_counter31:\
    \ isize = 1;\n    let mut prime_number_counter32: isize = 1;\n    let mut prime_number_counter33:\
    \ isize = 1;\n    let mut prime_number_counter34: isize = 1;\n    let mut prime",
  "    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval_len = interval1.0;\n    let mut interval2_len = interval2.0;\n\
    \    let mut prime_number: isize = 0;\n    let mut prime_number_len: isize = 0;\n\
    \    let mut prime_number_len2: isize = 0;\n    let mut prime_number_len3: isize\
    \ = 0;\n    let mut prime_number_len4: isize = 0;\n    let mut prime_number_len5:\
    \ isize = 0;\n    let mut prime_number_len6: isize = 0;\n    let mut prime_number_len7:\
    \ isize = 0;\n    let mut prime_number_len8: isize = 0;\n    let mut prime_number_len9:\
    \ isize = 0;\n    let mut prime_number_len10: isize = 0;\n    let mut prime_number_len11:\
    \ isize = 0;\n    let mut prime_number_len12: isize = 0;\n    let mut prime_number_len13:\
    \ isize = 0;\n    let mut prime_number_len14: isize = 0;\n    let mut prime_number_len15:\
    \ isize = 0;\n    let mut prime_number_len16: isize = 0;\n    let mut prime_number_len17:\
    \ isize = 0;\n    let mut prime_number_len18: isize = 0;\n    let mut prime_number_len19:\
    \ isize = 0;\n    let mut prime_number_len20: isize = 0;\n    let mut prime_number_len21:\
    \ isize = 0;\n    let mut prime_number_len22: isize = 0;\n    let mut prime_number_len23:\
    \ isize = 0;\n    let mut prime_number_len24: isize = 0;\n    let mut prime_number_len25:\
    \ isize = 0;\n    let mut prime_number_len26: isize = 0;\n    let mut prime_number_len27:\
    \ isize = 0;\n    let mut prime_number_len28: isize = 0;\n    let mut prime_number_len29:\
    \ isize = 0;\n    let mut prime_number_len30: isize = 0;\n    let mut prime_number_len31:\
    \ isize = 0;\n    let mut prime_number_len32: isize = 0;\n    let mut prime_number_len33:\
    \ isize = 0;\n    let mut prime_number_len34: isize = 0;\n    let mut prime_number_len35:\
    \ isize = 0;\n    let mut prime_number_len36: isize = 0;\n    let mu", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        let temp = interval1_end;\n\
    \        interval1_end = interval2_start;\n        interval2_start = temp;\n \
    \   }\n    if interval1_end < interval2_start {\n        let temp = interval1_start;\n\
    \        interval1_start = interval2_end;\n        interval2_end = temp;\n   \
    \ }\n    if interval1_start <= interval2_end {\n        if interval1_end >= interval2_start\
    \ {\n            if interval1_start <= interval2_end {\n                if interval1_end\
    \ >= interval2_start {\n                    if interval1_end >= interval2_end\
    \ {\n                        if interval1_start <= interval2_end {\n         \
    \                   if interval1_end >= interval2_start {\n                  \
    \              if interval1_end >= interval2_end {\n                         \
    \           if interval1_start <= interval2_end {\n                          \
    \              return \"YES\";\n                                    }\n      \
    \                          }\n                            }\n                \
    \        }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return \"NO\";", "    let mut intervals = vec![interval1, interval2];\n\
    \    intervals.sort();\n    let mut start = intervals[0] as isize;\n    let mut\
    \ end = intervals[1] as isize;\n    let mut length = 0;\n    while start < end\
    \ {\n        if start < end {\n            length += 1;\n        }\n        start\
    \ += 1;\n        end += 1;\n    }\n    if length == 2 {\n        return \"YES\"\
    ;\n    }\n    if length == 1 {\n        return \"NO\";\n    }\n    if length ==\
    \ 0 {\n        return \"NO\";\n    }\n    if length == 2 {\n        return \"\
    YES\";\n    }\n    if length == 1 {\n        return \"NO\";\n    }\n    if length\
    \ == 0 {\n        return \"NO\";\n    }\n    if length == 2 {\n        return\
    \ \"YES\";\n    }\n    if length == 1 {\n        return \"NO\";\n    }\n    if\
    \ length == 0 {\n        return \"NO\";\n    }\n    if length == 2 {\n       \
    \ return \"YES\";\n    }\n    if length == 1 {\n        return \"NO\";\n    }\n\
    \    if length == 0 {\n        return \"NO\";\n    }\n    if length == 2 {\n \
    \       return \"YES\";\n    }\n    if length == 1 {\n        return \"NO\";\n\
    \    }\n    if length == 0 {\n        return \"NO\";\n    }\n    if length ==\
    \ 2 {\n        return \"YES\";\n    }\n    if length == 1 {\n        return \"\
    NO\";\n    }\n    if length == 0 {\n        return \"NO\";\n    }\n    if length\
    \ == 2 {\n        return \"YES\";\n    }\n    if length == 1 {\n        return\
    \ \"NO\";\n    }\n    if length == 0 {\n        return \"NO\";\n    }\n    if\
    \ length == 2 {\n        return \"YES\";\n    }\n    if length == 1 {\n      \
    \  return \"NO\";\n    }\n    if length == 0 {\n        return \"NO\";\n    }\n\
    \    if length == 2 {\n        return \"YES\";\n    }\n    if length == 1 {\n\
    \        return \"NO\";\n    }\n    if length == 0 {\n        return \"NO\";\n\
    \    }\n    if length == 2 {\n        return \"YES\";\n    }\n    if length ==\
    \ 1 {\n        return \"NO\";\n    }\n    if length == 0 {\n        return \"\
    NO\";\n    }\n    if length == 2 {\n        return \"YES\";\n    }\n    if length\
    \ == 1 {\n        return \"NO\";\n    }\n    if length == 0 {\n        return\
    \ \"NO\";\n    }\n    if length == 2 {\n        return \"YES\";\n    }\n    if\
    \ length == 1 {\n        return \"NO\";\n    }\n    if length == 0 {\n       \
    \ return \"NO\";\n    }\n    if length == 2 {\n        return \"YES\";\n    }\n\
    \    if length == 1 {\n        return \"NO\";\n    }\n    if length == 0 {\n \
    \       return \"NO\";\n    }\n    if length == 2 {\n        return \"YES\";",
  "    let mut interval = interval1;\n    if interval1.0 > interval2.1 {\n       \
    \ interval = interval2;\n    }\n    let mut start = interval.0;\n    let mut end\
    \ = interval.1;\n    let mut prime = true;\n    let mut prime_length = 1;\n  \
    \  while start < end {\n        if start % prime_length == 0 {\n            prime\
    \ = false;\n        }\n        start += prime_length;\n    }\n    if prime {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    if interval1.0 > interval2.0\
    \ {\n        let tmp = interval1;\n        interval1 = interval2;\n        interval2\
    \ = tmp;\n    }\n    let mut interval = interval1;\n    let mut interval_end =\
    \ interval1.1;\n    let mut interval_start = interval1.0;\n    let mut interval_len\
    \ = interval_end - interval_start;\n    let mut interval_prime = true;\n    let\
    \ mut interval_prime_len = interval_len;\n    let mut interval_prime_start = interval_start;\n\
    \    let mut interval_prime_end = interval_end;\n    let mut interval_prime_len\
    \ = interval_end - interval_start;\n    let mut interval_prime_start = interval_start;\n\
    \    let mut interval_prime_end = interval_end;\n    let mut interval_prime_len\
    \ = interval_end - interval_start;\n    let mut interval_prime_start = interval_start;\n\
    \    let mut interval_prime_end = interval_end;\n    let mut interval_prime_len\
    \ = interval_end - interval_start;\n    let mut interval_prime_start = interval_start;\n\
    \    let mut interval_prime_end = interval_end;\n    let mut interval_prime_len\
    \ = interval_end - interval_start;\n    let mut interval_prime_start = interval_start;\n\
    \    let mut interval_prime_end = interval_end;\n    let mut interval_prime_len\
    \ = interval_end - interval_start;\n    let mut interval_prime_start = interval_start;\n\
    \    let mut interval_prime_end = interval_end;\n    let mut interval_prime_len\
    \ = interval_end - interval_start;\n    let mut interval_prime_start = interval_start;\n\
    \    let mut interval_prime_end = interval_end;\n    let mut interval_prime_len\
    \ = interval_end - interval_start;\n    let mut interval_prime_start = interval_start;\n\
    \    let mut interval_prime_end = interval_end;\n    let mut interval_prime_len\
    \ = interval_end - interval_start;\n    let mut interval_prime_start = interval_start;\n\
    \    let mut interval_prime_end = interval_end;\n    let mut interval_prime_len\
    \ = interval_end - interval_start;\n    let mut interval_prime_start = interval_start;\n\
    \    let mut interval_prime_end = interval_end;\n    let mut interval_prime_len\
    \ = interval_end - interval_start;\n    let mut interval_prime_start = interval_start;\n\
    \    let mut interval_prime_end = interval_end;\n    let mut interval_prime_len\
    \ = interval", "    let mut intervals = vec![];\n    intervals.push(interval1);\n\
    \    intervals.push(interval2);\n    let mut intersection = intervals[0];\n  \
    \  for i in 1..intervals.len() {\n        if intervals[i].start > intersection.end\
    \ {\n            intersection = intervals[i];\n        }\n    }\n    if intersection.start\
    \ == intersection.end {\n        return \"NO\";\n    }\n    if intervals[0].start\
    \ < intervals[1].start {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].end\
    \ > intervals[1].end {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].start\
    \ < intervals[1].start {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].end\
    \ > intervals[1].end {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].start\
    \ == intervals[1].start {\n        return \"YES\";\n    }\n    if intervals[0].start\
    \ < intervals[1].start {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].end\
    \ > intervals[1].end {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].start\
    \ < intervals[1].start {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].end\
    \ > intervals[1].end {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].start\
    \ == intervals[1].start {\n        return \"YES\";\n    }\n    if intervals[0].start\
    \ < intervals[1].start {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].end\
    \ > intervals[1].end {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].start\
    \ < intervals[1].start {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].end\
    \ > intervals[1].end {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].start\
    \ == intervals[1].start {\n        return \"YES\";\n    }\n    if intervals[0].start\
    \ < intervals[1].start {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].end\
    \ > intervals[1].end {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].start\
    \ < intervals[1].start {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].end\
    \ > intervals[1].end {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].start\
    \ == intervals[1].start {\n        return \"YES\";\n    }\n    if intervals[0].start\
    \ < intervals[1].start {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].end\
    \ > intervals[1].end {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].start\
    \ < intervals[1].start {\n        intervals.swap(0, 1);\n    }\n    if intervals[0].end\
    \ > intervals[1].end {\n        intervals.swap", "    let mut interval_1 = interval1;\n\
    \    let mut interval_2 = interval2;\n    let mut intersection = interval1;\n\
    \    let mut intersection_length = interval1.0;\n    let mut interval_1_end =\
    \ interval1.0;\n    let mut interval_2_end = interval2.0;\n    let mut interval_1_start\
    \ = interval1.0;\n    let mut interval_2_start = interval2.0;\n    let mut interval_1_start_end\
    \ = interval1.0;\n    let mut interval_2_start_end = interval2.0;\n    let mut\
    \ interval_1_end_start = interval1.0;\n    let mut interval_2_end_start = interval2.0;\n\
    \    let mut interval_1_start_end_end = interval1.0;\n    let mut interval_2_start_end_end\
    \ = interval2.0;\n    let mut interval_1_start_end_end_end = interval1.0;\n  \
    \  let mut interval_2_start_end_end_end = interval2.0;\n    let mut interval_1_start_end_end_end_end\
    \ = interval1.0;\n    let mut interval_2_start_end_end_end_end = interval2.0;\n\
    \    let mut interval_1_start_end_end_end_end_end = interval1.0;\n    let mut\
    \ interval_2_start_end_end_end_end_end = interval2.0;\n    let mut interval_1_start_end_end_end_end_end_end\
    \ = interval1.0;\n    let mut interval_2_start_end_end_end_end_end_end = interval2.0;\n\
    \    let mut interval_1_start_end_end_end_end_end_end_end = interval1.0;\n   \
    \ let mut interval_2_start_end_end_end_end_end_end_end = interval2.0;\n    let\
    \ mut interval_1_start_end_end_end_end_end_end_end_end = interval1.0;\n    let\
    \ mut interval_2_start_end_end_end_end_end_end_end_end = interval2.0;\n    let\
    \ mut interval_1_start_end_end_end_end_end_end_end_end_end = interval1.0;\n  \
    \  let mut interval_2_start_end_end_end_end_end_end_end_end_end_end = interval2.0;\n\
    \    let mut interval_1_start_end_end_end_end_end_end_end_end_end_end_end = interval1.0;\n\
    \    let mut interval_2_start_end_end_end_end_end_end_end_end_end_end_end = interval2.0;\n\
    \    let mut interval_1_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = interval1.0;\n    let mut interval_2_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = interval2.0;\n    let mut interval_1_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = interval1.0;\n    let mut ", "    let mut intervals = vec![interval1, interval2];\n\
    \    let mut start = interval1[0];\n    let mut end = interval1[1];\n    let mut\
    \ length = interval1[1] - interval1[0] + 1;\n    let mut prime = true;\n    while\
    \ start < interval1[1] && end < interval1[1] {\n        if intervals[start].0\
    \ > intervals[end].1 {\n            prime = false;\n            break;\n     \
    \   }\n        start = intervals[start].1;\n        end = intervals[end].1;\n\
    \        length = length + intervals[end].0 - intervals[start].0 + 1;\n    }\n\
    \    if prime {\n        return \"YES\";\n    } else {\n        return \"NO\"\
    ;\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_end\
    \ > interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start <\
    \ interval2_start {\n        return \"NO\";\n    }\n\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n\n    while interval1_length > 0 && interval2_length\
    \ > 0 {\n        if interval1_start < interval2_start {\n            interval1_length\
    \ -= 1;\n        } else {\n            interval2_length -= 1;\n        }\n   \
    \ }\n\n    if interval1_length == 0 {\n        return \"NO\";\n    }\n\n    if\
    \ interval2_length == 0 {\n        return \"NO\";\n    }\n\n    if interval1_length\
    \ == interval2_length {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ < interval2_length {\n        return \"NO\";\n    }\n\n    return \"YES\";",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n\n    if interval1_start == interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ < interval2_start {\n            interval1_length = interval2_end - interval2_start\
    \ + 1;\n        } else {\n            interval1_length = interval1_end - interval1_start\
    \ + 1;\n        }\n    }\n\n    if interval1_length == 2 {\n        if interval1_end\
    \ % 2 == 0 {\n            return \"YES\";\n        } else {\n            return\
    \ \"NO\";\n        }\n    }\n\n    if interval1_length == 3 {\n        if interval1_end\
    \ % 3 == 0 {\n            return \"YES\";\n        } else {\n            return\
    \ \"NO\";\n        }\n    }\n\n    if interval1_length == 4 {\n        if interval1_end\
    \ % 4 == 0 {\n            return \"YES\";\n        } else {\n            return\
    \ \"NO\";\n        }\n    }\n\n    if interval1_length == 5 || interval1_length\
    \ == 6 {\n        if interval1_end % 5 == 0 || interval1_end % 6 == 0 {\n    \
    \        return \"YES\";\n        } else {\n            return \"NO\";\n     \
    \   }\n    }\n\n    if interval1_length == 7 || interval1_length == 8 {\n    \
    \    if interval1_end % 7 == 0 || interval1_end % 8 == 0 {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n\
    \    if interval1_length == 9 || interval1_length == 10 {\n        if interval1_end\
    \ % 9 == 0 || interval1_end % 10 == 0 {\n            return \"YES\";\n       \
    \ } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_length\
    \ == 11 || interval1_length == 12 {\n        if interval1_end % 11 == 0 || interval1_end\
    \ % 12 == 0 {\n            return \"YES\";\n        } else {\n            return\
    \ \"NO\";\n        }\n    }\n\n    if interval1_length == 13 || interval1_length\
    \ == 14 {\n        if interval1_end % 13 == 0 || interval1_end % 14 == 0 {\n \
    \           return \"YES", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_prime = true;\n  \
    \  let mut interval2_prime = true;\n    \n    while interval1_start < interval1_end\
    \ && interval2_start < interval2_end {\n        if interval1_start == interval1_end\
    \ {\n            interval1_prime = false;\n            interval1_start = interval1_end\
    \ + 1;\n        }\n        \n        if interval2_start == interval2_end {\n \
    \           interval2_prime = false;\n            interval2_start = interval2_end\
    \ + 1;\n        }\n        \n        if intersection_start == intersection_end\
    \ {\n            intersection_length = intersection_end - intersection_start;\n\
    \            intersection_start = intersection_end + 1;\n        }\n        \n\
    \        if intersection_start < intersection_end {\n            if interval1_start\
    \ < intersection_start {\n                intersection_start = intersection_start;\n\
    \            }\n            \n            if interval2_start < intersection_start\
    \ {\n                intersection_start = intersection_start;\n            }\n\
    \            \n            if interval1_end > intersection_end {\n           \
    \     intersection_end = intersection_end;\n            }\n            \n    \
    \        if interval2_end > intersection_end {\n                intersection_end\
    \ = intersection_end;\n            }\n        }\n    }\n    \n    if interval1_prime\
    \ && interval2_prime {\n        if intersection_length == 2 {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    } else\
    \ {\n        return \"NO\";\n    }", "    let mut interval_1 = interval1;\n  \
    \  let mut interval_2 = interval2;\n    let mut intersection = interval1;\n  \
    \  let mut intersection_length = interval1.0;\n    let mut interval_1_end = interval1.0;\n\
    \    let mut interval_2_end = interval2.0;\n    let mut interval_1_start = interval1.0;\n\
    \    let mut interval_2_start = interval2.0;\n    let mut interval_1_start_end\
    \ = interval1.0;\n    let mut interval_2_start_end = interval2.0;\n    let mut\
    \ interval_1_start_end_length = interval1.0;\n    let mut interval_2_start_end_length\
    \ = interval2.0;\n    let mut interval_1_start_end_length_end = interval1.0;\n\
    \    let mut interval_2_start_end_length_end = interval2.0;\n    let mut interval_1_start_end_length_end_end\
    \ = interval1.0;\n    let mut interval_2_start_end_length_end_end = interval2.0;\n\
    \    let mut interval_1_start_end_length_end_end_length = interval1.0;\n    let\
    \ mut interval_2_start_end_length_end_end_length = interval2.0;\n    let mut interval_1_start_end_length_end_end_length_end\
    \ = interval1.0;\n    let mut interval_2_start_end_length_end_end_length_end =\
    \ interval2.0;\n    let mut interval_1_start_end_length_end_end_length_end_length\
    \ = interval1.0;\n    let mut interval_2_start_end_length_end_end_length_end_length\
    \ = interval2.0;\n    let mut interval_1_start_end_length_end_end_length_end_length_end\
    \ = interval1.0;\n    let mut interval_2_start_end_length_end_end_length_end_length_end\
    \ = interval2.0;\n    let mut interval_1_start_end_length_end_end_length_end_length_end_length\
    \ = interval1.0;\n    let mut interval_2_start_end_length_end_end_length_end_length_end_length\
    \ = interval2.0;\n    let mut interval_1_start_end_length_end_end_length_end_length_end_length_end_length\
    \ = interval1.0;\n    let mut interval_2_start_end_length_end_end_length_end_length_end_length_end_length_end\
    \ = interval2.0;\n    let mut interval_1_start_end_length_end_end_length_end_length_end_length_end_length_end\
    \ = interval1.0;\n    let mut interval_2_start_end_length_end_end_length_end_length_end_length_end_length_end_length\
    \ = interval2.0;\n    let mut interval_1_start_end_length_end_end_length_end_length_end_length_end_length_end_length_end\
    \ = interval1.0;\n    let mut interval_2_start_end_length_end_end_length_end_length_end_length_end_length_end_length_end_length_end\
    \ = interval2.0;\n", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    let mut intersection_len = 0;\n    \n    while interval1_len > 0 && interval2_len\
    \ > 0 {\n        if interval1_start < interval2_start {\n            interval1_start\
    \ += interval1_len;\n            interval1_len -= 1;\n        } else {\n     \
    \       interval2_start += interval2_len;\n            interval2_len -= 1;\n \
    \       }\n        intersection_len += 1;\n    }\n    \n    if interval1_len >\
    \ 0 {\n        interval1_start += interval1_len;\n        interval1_len -= 1;\n\
    \    }\n    if interval2_len > 0 {\n        interval2_start += interval2_len;\n\
    \        interval2_len -= 1;\n    }\n    \n    if interval1_len == 0 && interval2_len\
    \ == 0 {\n        return \"NO\";\n    }\n    \n    if interval1_len == 0 {\n \
    \       return \"YES\";\n    }\n    \n    if interval2_len == 0 {\n        return\
    \ \"YES\";\n    }\n    \n    if intersection_len == 1 {\n        return \"YES\"\
    ;\n    }\n    \n    if intersection_len == 2 {\n        return \"YES\";\n    }\n\
    \    \n    if intersection_len == 3 {\n        return \"YES\";\n    }\n    \n\
    \    if intersection_len > 3 {\n        return \"NO\";\n    }\n    \n    return\
    \ \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_length = 0;\n    \n    while interval1_start\
    \ < interval1_end && interval2_start < interval2_end {\n        if interval1_start\
    \ < interval2_start {\n            interval1_start += 1;\n        } else {\n \
    \           interval2_start += 1;\n        }\n        intersection_length += 1;\n\
    \    }\n    \n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"NO\";\n        } else {\n         \
    \   return \"YES\";\n        }\n    } else {\n        if intersection_length ==\
    \ 2 {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    \n    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            interval1_start\
    \ += 1;\n        } else {\n            interval1_end -= 1;\n        }\n      \
    \  \n        if interval2_start < interval2_end {\n            interval2_start\
    \ += 1;\n        } else {\n            interval2_end -= 1;\n        }\n      \
    \  intersection_length += 1;\n    }\n    \n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end - 1;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end - 1;\n    }\n   \
    \ \n    if intersection_length == 2 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    } else {\n        return \"NO\";\n    }", "    let mut interval1_start\
    \ = interval1.0;\n    let mut interval1_end = interval1.1;\n    let mut interval2_start\
    \ = interval2.0;\n    let mut interval2_end = interval2.1;\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_start = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end = interval2_start;\n    }\n\n   \
    \ if interval1_start > interval2_end {\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_start =\
    \ interval2_end;\n    }\n    if interval1_end < interval2_start {\n        interval1_end\
    \ = interval2_start;\n    }\n\n    if interval1_start > interval2_end {\n    \
    \    interval1_start = interval2_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n    }\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_start = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end = interval2_start;\n    }\n\n   \
    \ if interval1_start > interval2_end {\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_start =\
    \ interval2_end;\n    }\n    if interval1_end < interval2_start {\n        interval1_end\
    \ = interval2_start;\n    }\n\n    if interval1_start > interval2_end {\n    \
    \    interval1_start = interval2_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n    }\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_start = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end = interval2_start;\n    }\n\n   \
    \ if interval1_start > interval2_end {\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_start =\
    \ interval2_end;\n    }\n    if interval1_end < interval2_start {\n        interval1_end\
    \ = interval2_start;\n    }\n\n    if interval1_start > interval2_end {\n    \
    \    interval1_start = interval2_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_len =\
    \ interval1_end - interval1_start;\n    let mut prime_found = false;\n    let\
    \ mut prime_len = interval1_end - interval2_start;\n    let mut prime_start =\
    \ interval2_start;\n    let mut prime_end = interval2_end;\n    let mut prime_len\
    \ = interval2_end - interval1_start;\n    let mut prime_start = interval1_start;\n\
    \    let mut prime_end = interval1_end;\n    let mut prime_len = interval1_end\
    \ - interval1_start;\n    let mut prime_start = interval2_start;\n    let mut\
    \ prime_end = interval2_end;\n    let mut prime_len = interval2_end - interval2_start;\n\
    \    let mut prime_start = interval1_start;\n    let mut prime_end = interval1_end;\n\
    \    let mut prime_len = interval1_end - interval1_start;\n    let mut prime_start\
    \ = interval2_start;\n    let mut prime_end = interval2_end;\n    let mut prime_len\
    \ = interval2_end - interval2_start;\n    let mut prime_start = interval1_start;\n\
    \    let mut prime_end = interval1_end;\n    let mut prime_len = interval1_end\
    \ - interval1_start;\n    let mut prime_start = interval2_start;\n    let mut\
    \ prime_end = interval2_end;\n    let mut prime_len = interval2_end - interval2_start;\n\
    \    let mut prime_start = interval1_start;\n    let mut prime_end = interval1_end;\n\
    \    let mut prime_len = interval1_end - interval1_start;\n    let mut prime_start\
    \ = interval2_start;\n    let mut prime_end = interval2_end;\n    let mut prime_len\
    \ = interval2_end - interval2_start;\n    let mut prime_start = interval1_start;\n\
    \    let mut prime_end = interval1_end;\n    let mut prime_len = interval1_end\
    \ - interval1_start;\n    let mut prime_start = interval2_start;\n    let mut\
    \ prime_end = interval2_end;\n    let mut prime_len = interval2_end - interval2_start;\n\
    \    let mut prime_start = interval1_start;\n    let mut prime_end = interval1_end;\n\
    \    let mut prime_len = interval1_end - interval1_start;\n    let mut prime_start\
    \ = interval2_start;\n    let mut prime_end = interval2_end;\n    let mu", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \n    if interval1_length == interval2_length {\n        if interval1_length ==\
    \ 1 {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n\n    if interval1_length < interval2_length {\n        interval1_length\
    \ = interval2_length;\n        interval2_length = interval1_length;\n    }\n\n\
    \    if interval1_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n\n    if interval1_length == 3 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n\n    if interval1_length == 4 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_length\
    \ == 5 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n\
    \    if interval1_length == 6 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n\n    if interval1_length == 7 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n\n    if interval1_length == 8 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_length\
    \ == 9 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n\
    \    if interval1_length == 10 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n\n    if interval1_length == 11 {\n        if interval1_start\
    \ == interval2_start {\n            return \"", "    let mut interval_1 = interval1;\n\
    \    let mut interval_2 = interval2;\n    let mut intersection = interval1;\n\
    \    let mut intersection_len = interval1.0;\n    let mut interval_1_len = interval1.0;\n\
    \    let mut interval_2_len = interval2.0;\n    let mut interval_1_start = interval1.0;\n\
    \    let mut interval_2_start = interval2.0;\n    let mut interval_1_end = interval1.0;\n\
    \    let mut interval_2_end = interval2.0;\n    let mut interval_1_start_end =\
    \ interval1.0;\n    let mut interval_2_start_end = interval2.0;\n    let mut interval_1_start_end_len\
    \ = interval1.0;\n    let mut interval_2_start_end_len = interval2.0;\n    let\
    \ mut interval_1_start_end_start = interval1.0;\n    let mut interval_2_start_end_start\
    \ = interval2.0;\n    let mut interval_1_start_end_end_len = interval1.0;\n  \
    \  let mut interval_2_start_end_end_len = interval2.0;\n    let mut interval_1_start_end_end_start\
    \ = interval1.0;\n    let mut interval_2_start_end_end_start = interval2.0;\n\
    \    let mut interval_1_start_end_end_end_len = interval1.0;\n    let mut interval_2_start_end_end_end_len\
    \ = interval2.0;\n    let mut interval_1_start_end_end_end_start = interval1.0;\n\
    \    let mut interval_2_start_end_end_end_start = interval2.0;\n    let mut interval_1_start_end_end_end_end_len\
    \ = interval1.0;\n    let mut interval_2_start_end_end_end_end_len = interval2.0;\n\
    \    let mut interval_1_start_end_end_end_end_start = interval1.0;\n    let mut\
    \ interval_2_start_end_end_end_end_start = interval2.0;\n    let mut interval_1_start_end_end_end_end_end_len\
    \ = interval1.0;\n    let mut interval_2_start_end_end_end_end_end_len = interval2.0;\n\
    \    let mut interval_1_start_end_end_end_end_end_start = interval1.0;\n    let\
    \ mut interval_2_start_end_end_end_end_start_len = interval2.0;\n    let mut interval_1_start_end_end_end_end_end_start_start\
    \ = interval1.0;\n    let mut interval_2_start_end_end_end_end_end_start_start_len\
    \ = interval2.0;\n    let mut interval_1_start_end_end_end_end_end_start_start_start\
    \ = interval1.0;\n    let mut interval_2_start_end_end_end_end_start_start_start_len\
    \ = interval2.0;\n    let mut interval_1_start_end_end_end_end_", "    let mut\
    \ intervals = vec![interval1, interval2];\n    let mut start = interval1[0];\n\
    \    let mut end = interval1[1];\n    let mut length = 1;\n    loop {\n      \
    \  if start > end {\n            break;\n        }\n        let mut found = false;\n\
    \        for interval in intervals.iter() {\n            if interval[0] > end\
    \ {\n                break;\n            }\n            if interval[1] < start\
    \ {\n                break;\n            }\n            if interval[0] == interval[1]\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if found {\n            length += 1;\n        }\n        start\
    \ = end;\n        end = interval2[1];\n    }\n    if length == 2 {\n        return\
    \ \"NO\";\n    }\n    if length == 1 {\n        return \"YES\";\n    }\n    if\
    \ length == 0 {\n        return \"NO\";\n    }\n    return \"YES\";", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval1_len = interval1_end - interval1_start;\n    let mut interval2_len\
    \ = interval2_end - interval2_start;\n    let mut intersection_len = interval1_len\
    \ + interval2_len;\n    if interval1_len > interval2_len {\n        interval1_len\
    \ = interval2_len;\n        interval2_start = interval1[0];\n        interval2_end\
    \ = interval1[1];\n    }\n    if interval1_len < interval2_len {\n        interval1_start\
    \ = interval2[0];\n        interval1_end = interval2[1];\n    }\n    if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n        intersection_len\
    \ -= 1;\n    }\n    if intersection_len == 2 {\n        if interval1_start < interval2_start\
    \ {\n            interval1_start += 1;\n        }\n        if interval1_end >\
    \ interval2_end {\n            interval1_end -= 1;\n        }\n        if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n            intersection_len\
    \ -= 1;\n        }\n    }\n    if intersection_len == 1 {\n        if interval1_start\
    \ == interval2_start {\n            interval1_start += 1;\n        }\n       \
    \ if interval1_end == interval2_end {\n            interval1_end -= 1;\n     \
    \   }\n        if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n            intersection_len -= 1;\n        }\n    }\n    if intersection_len\
    \ == 0 {\n        return \"NO\";\n    }\n    if intersection_len % 2 == 0 {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n    }\n    if\
    \ interval1_start > interval1_end {\n        return \"NO\";\n    }\n    if interval2_start\
    \ > interval2_end {\n        return \"NO\";\n    }\n    if interval1_start ==\
    \ interval2_start {\n        return \"NO\";\n    }\n    if interval1_end == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n     \
    \   return \"NO\";\n    }\n    if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n        return \"YES\";\n    }\n    if interval1_start <=\
    \ interval2_end && interval1_end >= interval2_start {\n        return \"YES\"\
    ;\n    }\n    if interval1_start >= interval2_start && interval1_end <= interval2_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start >= interval2_end &&\
    \ interval1_end <= interval2_start {\n        return \"YES\";\n    }\n    if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n        return \"YES\"\
    ;\n    }\n    if interval1_start >= interval2_start && interval1_end <= interval2_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_start >= interval2_start && interval1_end <= interval2_end {\n   \
    \     return \"YES\";\n    }\n    if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n        return \"YES\";\n    }\n    if interval1_start >=\
    \ interval2_start && interval1_end <= interval2_end {\n        return \"YES\"\
    ;\n    }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start >= interval2_start\
    \ && interval1_end <= interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_start <= interval2_start && interval1_end >= interval2_end {\n   \
    \     return \"YES\";\n    }\n    if interval1_start >= interval2_start ", " \
    \   let mut interval1_start = interval1.0;\n    let mut interval1_end = interval1.1;\n\
    \    let mut interval2_start = interval2.0;\n    let mut interval2_end = interval2.1;\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval1_length = interval1_end - interval1_start;\n    let mut\
    \ interval2_length = interval2_end - interval2_start;\n    let mut interval_length\
    \ = interval1_length + interval2_length;\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            intersection_start = interval1_start;\n            intersection_end\
    \ = interval1_end;\n            intersection_length = interval1_length;\n    \
    \        interval1_length = interval1_end - interval1_start;\n        }\n    \
    \    if interval2_start < interval2_end {\n            intersection_start = interval2_start;\n\
    \            intersection_end = interval2_end;\n            intersection_length\
    \ = interval2_length;\n            interval2_length = interval2_end - interval2_start;\n\
    \        }\n    }\n    \n    if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n        if intersection_length == interval1_length && intersection_length\
    \ == interval2_length {\n            if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                if interval1_start < interval1_end {\n \
    \                   interval_length = interval1_length;\n                }\n \
    \               if interval2_start < interval2_end {\n                    interval_length\
    \ = interval2_length;\n                }\n                if interval_length ==\
    \ 2 {\n                    return \"YES\";\n                }\n              \
    \  if interval_length == 1 {\n                    return \"NO\";\n           \
    \     }\n            }\n        }\n    }\n    \n    return \"NO\";", "    let\
    \ (start, end) = interval1;\n    let (start2, end2) = interval2;\n    if start\
    \ > end {\n        (start, end) = (end, start)\n    }\n    if start2 > end2 {\n\
    \        (start2, end2) = (end2, start2)\n    }\n    if start == start2 && end\
    \ == end2 {\n        return \"NO\"\n    }\n    if start == end2 {\n        return\
    \ \"YES\"\n    }\n    let mut prime_numbers = vec![true; 2..=start];\n    for\
    \ i in 2..=end {\n        if prime_numbers[i - 2] {\n            prime_numbers[i]\
    \ = false;\n        }\n    }\n    if prime_numbers[end] {\n        return \"YES\"\
    \n    }\n    return \"NO\"", "    let (start, end) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    if start > end {\n        (start, end) = (end, start);\n\
    \    }\n    if start2 > end2 {\n        (start2, end2) = (end2, start2);\n   \
    \ }\n    let mut intersection = start;\n    if start < end2 {\n        intersection\
    \ = intersection.min(end2);\n    }\n    if intersection == end {\n        return\
    \ \"NO\";\n    }\n    if intersection == start2 {\n        return \"YES\";\n \
    \   }\n    if intersection == start {\n        return \"YES\";\n    }\n    if\
    \ intersection == end {\n        return \"YES\";\n    }\n    if intersection ==\
    \ start2 {\n        return \"YES\";\n    }\n    if intersection == end {\n   \
    \     return \"YES\";\n    }\n    if intersection == start2 {\n        return\
    \ \"YES\";\n    }\n    if intersection == end {\n        return \"YES\";\n   \
    \ }\n    if intersection == start2 {\n        return \"YES\";\n    }\n    if intersection\
    \ == end {\n        return \"YES\";\n    }\n    if intersection == start2 {\n\
    \        return \"YES\";\n    }\n    if intersection == end {\n        return\
    \ \"YES\";\n    }\n    if intersection == start2 {\n        return \"YES\";\n\
    \    }\n    if intersection == end {\n        return \"YES\";\n    }\n    if intersection\
    \ == start2 {\n        return \"YES\";\n    }\n    if intersection == end {\n\
    \        return \"YES\";\n    }\n    if intersection == start2 {\n        return\
    \ \"YES\";\n    }\n    if intersection == end {\n        return \"YES\";\n   \
    \ }\n    if intersection == start2 {\n        return \"YES\";\n    }\n    if intersection\
    \ == end {\n        return \"YES\";\n    }\n    if intersection == start2 {\n\
    \        return \"YES\";\n    }\n    if intersection == end {\n        return\
    \ \"YES\";\n    }\n    if intersection == start2 {\n        return \"YES\";\n\
    \    }\n    if intersection == end {\n        return \"YES\";\n    }\n    if intersection\
    \ == start2 {\n        return \"YES\";\n    }\n    if intersection == end {\n\
    \        return \"YES\";\n    }\n    if intersection == start2 {\n        return\
    \ \"YES\";\n    }\n    if intersection == end {\n        return \"YES\";\n   \
    \ }\n    if intersection == start2 {\n        return \"YES\";\n    }\n    if intersection\
    \ == end {\n        return \"YES\";\n    }\n    if intersection == start2 {\n\
    \        return \"YES\";\n    }\n    if intersection == end {\n        return\
    \ \"YES\";\n    }\n    if intersection == start2 {\n        return \"YES\";\n\
    \    }\n    if intersection == end {\n        return \"YES\";\n    }\n    if intersection\
    \ == start2 {\n        return \"YES\";\n    }\n    if intersection == end {\n\
    \        return \"YES\";\n    }\n    if intersection == ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_len\
    \ = interval1_end - interval1_start;\n    let mut interval2_len = interval2_end\
    \ - interval2_start;\n    let mut intersection_len = interval1_len + interval2_len;\n\
    \    if interval1_len > interval2_len {\n        interval1_len = interval2_len;\n\
    \        interval2_start = interval1_start + interval1_len - 1;\n        interval2_end\
    \ = interval1_end;\n    }\n    if interval2_len > interval1_len {\n        interval2_len\
    \ = interval1_len;\n        interval1_start = interval2_start + interval2_len\
    \ - 1;\n        interval1_end = interval2_end;\n    }\n    if interval1_len ==\
    \ interval2_len {\n        if interval1_start <= interval2_start {\n         \
    \   intersection_len = interval1_len;\n        } else {\n            intersection_len\
    \ = interval2_len;\n        }\n    }\n    if intersection_len == 2 {\n       \
    \ if interval1_start <= interval2_start {\n            if interval1_end >= interval2_end\
    \ {\n                return \"YES\";\n            } else {\n                return\
    \ \"NO\";\n            }\n        } else {\n            if interval1_end >= interval2_end\
    \ {\n                return \"NO\";\n            } else {\n                return\
    \ \"YES\";\n            }\n        }\n    }\n    if intersection_len == 1 {\n\
    \        if interval1_start <= interval2_start {\n            return \"YES\";\n\
    \        } else {\n            return \"NO\";\n        }\n    }\n    if intersection_len\
    \ == 0 {\n        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        intersection_start = interval1_start;\n        intersection_end =\
    \ interval1_end;\n    }\n    if interval1_end < interval2_start {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval1_end;\n    }\n    if\
    \ interval1_start == interval2_start {\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_end == interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_start < interval2_start {\n        intersection_start = interval1_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if interval1_end > interval2_end\
    \ {\n        intersection_start = interval1_start;\n        intersection_end =\
    \ interval1_end;\n    }\n    if interval1_start < interval2_end {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval1_end;\n    }\n    if\
    \ interval1_end > interval2_start {\n        intersection_start = interval1_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if interval1_start == interval2_end\
    \ {\n        if interval1_end == interval2_start {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval1_end == interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_start < interval2_end {\n\
    \        intersection_start = interval1_start;\n        intersection_end = interval1_end;\n\
    \    }\n    if interval1_end > interval2_start {\n        intersection_start =\
    \ interval1_start;\n        intersection_end = interval1_end;\n    }\n    if interval1_start\
    \ == interval2_end {\n        if interval1_end == interval2_start {\n        \
    \    return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_end\
    \ == interval2_end {\n        return \"NO", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_len =\
    \ interval1_end - interval1_start;\n    let mut interval1_len = interval2_end\
    \ - interval2_start;\n    let mut interval2_len = interval1_end - interval1_start;\n\
    \    let mut prime_number: isize = 1;\n    let mut prime_number_len: isize = 1;\n\
    \    let mut prime_number_flag = true;\n    let mut prime_number_flag2 = true;\n\
    \    let mut prime_number_flag3 = true;\n    let mut prime_number_flag4 = true;\n\
    \    let mut prime_number_flag5 = true;\n    let mut prime_number_flag6 = true;\n\
    \    let mut prime_number_flag7 = true;\n    let mut prime_number_flag8 = true;\n\
    \    let mut prime_number_flag9 = true;\n    let mut prime_number_flag10 = true;\n\
    \    let mut prime_number_flag11 = true;\n    let mut prime_number_flag12 = true;\n\
    \    let mut prime_number_flag13 = true;\n    let mut prime_number_flag14 = true;\n\
    \    let mut prime_number_flag15 = true;\n    let mut prime_number_flag16 = true;\n\
    \    let mut prime_number_flag17 = true;\n    let mut prime_number_flag18 = true;\n\
    \    let mut prime_number_flag19 = true;\n    let mut prime_number_flag20 = true;\n\
    \    let mut prime_number_flag21 = true;\n    let mut prime_number_flag22 = true;\n\
    \    let mut prime_number_flag23 = true;\n    let mut prime_number_flag24 = true;\n\
    \    let mut prime_number_flag25 = true;\n    let mut prime_number_flag26 = true;\n\
    \    let mut prime_number_flag27 = true;\n    let mut prime_number_flag28 = true;\n\
    \    let mut prime_number_flag29 = true;\n    let mut prime_number_flag30 = true;\n\
    \    let mut prime_number_flag31 = true;\n    let mut prime_number_flag32 = true;\n\
    \    let mut prime_number_flag33 = true;\n    let mut prime_number_flag34 = true;\n\
    \    let mut prime_number_flag35 = true;\n    let mut prime_number_flag36 = true;\n\
    \    let mut prime_number_flag37 = true;\n    let mut prime_number_flag38 = true;\n\
    \    let mut prime_number_flag39 = true;", "    let mut interval_1 = interval1.0;\n\
    \    let mut interval_2 = interval2.0;\n    let mut intersection = interval_1;\n\
    \    let mut interval_1_end = interval_1;\n    let mut interval_2_end = interval_2;\n\
    \    let mut interval_1_start = interval_1;\n    let mut interval_2_start = interval_2;\n\
    \    let mut interval_1_end = interval_1;\n    let mut interval_2_end = interval_2;\n\
    \    let mut interval_1_start = interval_1;\n    let mut interval_2_start = interval_2;\n\
    \    let mut interval_1_end = interval_1;\n    let mut interval_2_end = interval_2;\n\
    \    let mut interval_1_start = interval_1;\n    let mut interval_2_start = interval_2;\n\
    \    let mut interval_1_end = interval_1;\n    let mut interval_2_end = interval_2;\n\
    \    let mut interval_1_start = interval_1;\n    let mut interval_2_start = interval_2;\n\
    \    let mut interval_1_end = interval_1;\n    let mut interval_2_end = interval_2;\n\
    \    let mut interval_1_start = interval_1;\n    let mut interval_2_start = interval_2;\n\
    \    let mut interval_1_end = interval_1;\n    let mut interval_2_end = interval_2;\n\
    \    let mut interval_1_start = interval_1;\n    let mut interval_2_start = interval_2;\n\
    \    let mut interval_1_end = interval_1;\n    let mut interval_2_end = interval_2;\n\
    \    let mut interval_1_start = interval_1;\n    let mut interval_2_start = interval_2;\n\
    \    let mut interval_1_end = interval_1;\n    let mut interval_2_end = interval_2;\n\
    \    let mut interval_1_start = interval_1;\n    let mut interval_2_start = interval_2;\n\
    \    let mut interval_1_end = interval_1;\n    let mut interval_2_end = interval_2;\n\
    \    let mut interval_1_start = interval_1;\n    let mut interval_2_start = interval_2;\n\
    \    let mut interval_1_end = interval_1;\n    let mut interval_2_end = interval_2;\n\
    \    let mut interval_1_start = interval_1;\n    let mut interval_2_start = interval_2;\n\
    \    let mut interval_1_end = interval_1;\n    let mut interval_2_end = interval_2;\n\
    \    let mut interval_1_start = interval_1;\n    let mut interval_2_start = interval_2;",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        let tmp = interval1_end;\n\
    \        interval1_end = interval2_start;\n        interval2_start = tmp;\n  \
    \  }\n\n    if interval1_end < interval2_start {\n        let tmp = interval1_start;\n\
    \        interval1_start = interval2_end;\n        interval2_end = tmp;\n    }\n\
    \n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"YES\";\n    }\n\n    if interval1_start <= interval2_end\
    \ && interval1_end >= interval2_start {\n        return \"NO\";\n    }\n\n   \
    \ return \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_length = 0;\n    \n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            intersection_length += 1;\n            interval1_start\
    \ += 1;\n        } else {\n            interval1_end += 1;\n        }\n      \
    \  if interval2_start < interval2_end {\n            intersection_length += 1;\n\
    \            interval2_start += 1;\n        } else {\n            interval2_end\
    \ += 1;\n        }\n    }\n    \n    if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n        if interval1_start < interval1_end {\n         \
    \   intersection_length += 1;\n            interval1_start += 1;\n        } else\
    \ {\n            interval1_end += 1;\n        }\n        if interval2_start <\
    \ interval2_end {\n            intersection_length += 1;\n            interval2_start\
    \ += 1;\n        } else {\n            interval2_end += 1;\n        }\n    }\n\
    \    \n    if interval1_start <= interval1_end && interval2_start > interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            intersection_length\
    \ += 1;\n            interval1_start += 1;\n        } else {\n            interval1_end\
    \ += 1;\n        }\n        if interval2_start < interval2_end {\n           \
    \ intersection_length += 1;\n            interval2_start += 1;\n        } else\
    \ {\n            interval2_end += 1;\n        }\n    }\n    \n    if interval1_start\
    \ <= interval1_end && interval2_start < interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            intersection_length += 1;\n            interval1_start\
    \ += 1;\n        } else {\n            interval1_end += 1;\n        }\n      \
    \  if interval2_start < interval2_end {\n            intersection_length += 1;\n\
    \            interval2_start += 1;\n        } else {\n            interval2_end\
    \ += 1;\n        }\n    }\n    \n    if interval1_start > interval1_end && interval2_start\
    \ <= interval2_end {\n        if interval1_start < interval1_end {\n         \
    \   intersection_length += 1;\n            interval1_start += 1;\n        } else\
    \ {\n            interval1_end += 1;\n        }\n        if interval2_start <\
    \ interval2_end {\n            intersection_length += 1;\n            interval2_start\
    \ += 1;\n        } else {\n            interval2_end += 1;\n        }\n    }\n\
    \    \n    if interval", "    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval1_len = interval1_end - interval1_start;\n    let mut interval2_len\
    \ = interval2_end - interval2_start;\n    let mut intersection_len = interval1_len;\n\
    \    let mut prime_found = false;\n    while interval1_len > 0 || interval2_len\
    \ > 0 {\n        if interval1_len > 0 {\n            if interval1_start <= interval2_start\
    \ {\n                interval1_len -= 1;\n                interval1_start += 1;\n\
    \            } else {\n                interval2_len -= 1;\n                interval2_start\
    \ += 1;\n            }\n        } else {\n            if interval2_start <= interval1_start\
    \ {\n                interval2_len -= 1;\n                interval2_start += 1;\n\
    \            } else {\n                interval1_len -= 1;\n                interval1_start\
    \ += 1;\n            }\n        }\n    }\n    if interval1_len == 0 && interval2_len\
    \ == 0 {\n        return \"NO\";\n    }\n    if interval1_len == 0 {\n       \
    \ return \"YES\";\n    }\n    if interval2_len == 0 {\n        return \"YES\"\
    ;\n    }\n    if interval1_len == interval2_len {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1_len > interval2_len {\n        intersection_len\
    \ = interval1_len;\n    } else {\n        intersection_len = interval2_len;\n\
    \    }\n    if intersection_len == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if intersection_len == 1 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if intersection_len == 0 {\n        return \"NO\";\n    }\n    if prime_found\
    \ {\n        return \"YES\";\n    }\n    if intersection_len == 2 {\n        if\
    \ interval1_start == interval2_start {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    if intersection_len == 1 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if intersection_len == 0 {\n        return \"NO\";\n   \
    \ }\n    if interval1_len == interval2_len {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_len > interval2_len {\n        intersection_len = interval1_len;\n\
    \    } else {\n        intersection_len = interval2_len;\n    }\n    if intersection_len",
  "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n       \
    \ return \"NO\";\n    }\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval_len = interval1[1] - interval1[0] + 1;\n\
    \    let mut interval2_len = interval2[1] - interval2[0] + 1;\n    let mut flag\
    \ = false;\n    while interval_len > 0 || interval2_len > 0 {\n        if interval_len\
    \ > 0 && interval2_len > 0 {\n            if interval[0] >= interval2[0] {\n \
    \               interval[0] -= 1;\n                interval_len -= 1;\n      \
    \      } else {\n                interval2[0] -= 1;\n                interval2_len\
    \ -= 1;\n            }\n        }\n        if interval_len > 0 {\n           \
    \ interval[0] += 1;\n            interval_len -= 1;\n        }\n        if interval2_len\
    \ > 0 {\n            interval2[0] += 1;\n            interval2_len -= 1;\n   \
    \     }\n        if interval[0] == interval2[0] && interval[1] < interval2[1]\
    \ {\n            flag = true;\n            break;\n        }\n    }\n    if flag\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval_length\
    \ = interval1_end - interval1_start;\n    let mut interval_length_2 = interval2_end\
    \ - interval2_start;\n    let mut interval_length_3 = interval_length * interval_length;\n\
    \    let mut interval_length_4 = interval_length_2 * interval_length_2;\n    let\
    \ mut interval_length_5 = interval_length_3 * interval_length_3;\n    let mut\
    \ interval_length_6 = interval_length_4 * interval_length_4;\n    let mut interval_length_7\
    \ = interval_length_5 * interval_length_5;\n    let mut interval_length_8 = interval_length_6\
    \ * interval_length_6;\n    let mut interval_length_9 = interval_length_7 * interval_length_7;\n\
    \    let mut interval_length_10 = interval_length_8 * interval_length_8;\n   \
    \ let mut interval_length_11 = interval_length_9 * interval_length_9;\n    let\
    \ mut interval_length_12 = interval_length_10 * interval_length_10;\n    let mut\
    \ interval_length_13 = interval_length_11 * interval_length_11;\n    let mut interval_length_14\
    \ = interval_length_12 * interval_length_12;\n    let mut interval_length_15 =\
    \ interval_length_13 * interval_length_13;\n    let mut interval_length_16 = interval_length_14\
    \ * interval_length_14;\n    let mut interval_length_17 = interval_length_15 *\
    \ interval_length_15;\n    let mut interval_length_18 = interval_length_16 * interval_length_16;\n\
    \    let mut interval_length_19 = interval_length_17 * interval_length_17;\n \
    \   let mut interval_length_20 = interval_length_18 * interval_length_18;\n  \
    \  let mut interval_length_21 = interval_length_19 * interval_length_19;\n   \
    \ let mut interval_length_22 = interval_length_20 * interval_length_20;\n    let\
    \ mut interval_length_23 = interval_length_21 * interval_length_21;\n    let mut\
    \ interval_length_24 = interval_length_22 * interval_length_22;\n    let mut interval_length_25\
    \ = interval_length_23 * interval_length_23;\n    let mut interval_length_26 =\
    \ interval_length_24 * interval_length_24;\n    let mut interval_length_27 = interval_length_25\
    \ * interval_length_25;\n    let mut interval_", "    let mut interval1_start\
    \ = interval1.0;\n    let mut interval1_end = interval1.1;\n    let mut interval2_start\
    \ = interval2.0;\n    let mut interval2_end = interval2.1;\n    let mut interval1_length\
    \ = interval1_end - interval1_start;\n    let mut interval2_length = interval2_end\
    \ - interval2_start;\n    let mut intersection_length = 0;\n    \n    while interval1_length\
    \ >= interval2_length {\n        interval1_length -= interval2_length;\n     \
    \   interval2_length += interval1_length;\n    }\n    \n    while interval2_length\
    \ >= interval1_length {\n        interval2_length -= interval1_length;\n     \
    \   interval1_length += interval2_length;\n    }\n    \n    if interval1_length\
    \ == 0 {\n        return \"NO\";\n    }\n    \n    if interval2_length == 0 {\n\
    \        return \"NO\";\n    }\n    \n    while interval1_start <= interval2_end\
    \ {\n        intersection_length += 1;\n        interval1_start += interval1_length;\n\
    \        interval1_end += interval1_length;\n    }\n    \n    while interval2_start\
    \ <= interval1_end {\n        intersection_length += 1;\n        interval2_start\
    \ += interval2_length;\n        interval2_end += interval2_length;\n    }\n  \
    \  \n    if intersection_length == 2 {\n        return \"YES\";\n    }\n    \n\
    \    return \"NO\";", "    let mut interval1_start = interval1.0;\n    let mut\
    \ interval1_end = interval1.1;\n    let mut interval2_start = interval2.0;\n \
    \   let mut interval2_end = interval2.1;\n\n    if interval1_start > interval2_end\
    \ {\n        let temp = interval1_end;\n        interval1_end = interval2_start;\n\
    \        interval2_start = temp;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        let temp = interval1_start;\n        interval1_start = interval2_end;\n\
    \        interval2_end = temp;\n    }\n\n    if interval1_start > interval2_start\
    \ {\n        let temp = interval1_start;\n        interval1_start = interval2_start;\n\
    \        interval2_start = temp;\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        let temp = interval1_end;\n        interval1_end = interval2_end;\n\
    \        interval2_end = temp;\n    }\n\n    if interval1_start == interval1_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        let temp = interval1_start;\n        interval1_start = interval2_start;\n\
    \        interval2_start = temp;\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        let temp = interval1_end;\n        interval1_end = interval2_end;\n\
    \        interval2_end = temp;\n    }\n\n    if interval1_start < interval2_end\
    \ {\n        let temp = interval1_start;\n        interval1_start = interval2_end;\n\
    \        interval2_end = temp;\n    }\n\n    if interval1_end > interval2_start\
    \ {\n        let temp = interval1_end;\n        interval1_end = interval2_start;\n\
    \        interval2_start = temp;\n    }\n\n    if interval1_start < interval2_end\
    \ {\n        let temp = interval1_start;\n        interval1_start = interval2_end;\n\
    \        interval2_end = temp;\n    }\n\n    if interval1_end > interval2_start\
    \ {\n        let temp = interval1_end;\n        interval1_end = interval2_start;\n\
    \        interval2_start = temp;\n    }\n\n    if interval1_start < interval2_end\
    \ {\n        let temp = interval1_start;\n        interval1_start = interval2_end;\n\
    \        interval2_end = temp;\n    }\n\n    if interval1_end > interval2_start\
    \ {\n        let temp = interval1_end;\n        interval1_end = interval2_start;\n\
    \        interval2_start = temp;\n    }\n\n    if interval1_start < interval2_end\
    \ {\n        let temp = interval1_start;\n        interval1_start = interval2_end;\n\
    \        interval2_end = temp;\n    }\n\n    if interval1_end > interval2_start\
    \ {\n        let ", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    \n    while interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start\
    \ += 1;\n        } else {\n            interval2_start += 1;\n        }\n    \
    \    intersection_length += 1;\n    }\n    \n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }\n    } else {\n   \
    \     if intersection_length == 2 {\n            return \"YES\";\n        } else\
    \ {\n            return \"NO\";\n        }\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval1_end < interval2_start {\n      \
    \  interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start =\
    \ interval2_start;\n        interval2_start = interval1_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end = interval2_end;\n        interval2_end\
    \ = interval1_start;\n    }\n    if interval1_start == interval2_start {\n   \
    \     return \"NO\";\n    }\n    if interval1_end == interval2_end {\n       \
    \ return \"NO\";\n    }\n    if interval1_start < interval2_start {\n        return\
    \ \"NO\";\n    }\n    if interval1_end > interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start < interval2_end {\n        return \"NO\";\n \
    \   }\n    if interval1_end > interval2_start {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval2_end {\n        return \"NO\";\n    }\n  \
    \  if interval1_start == interval2_start {\n        return \"NO\";\n    }\n  \
    \  if interval1_end == interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_start == interval2_start {\n        return \"NO\";\n    }\n    if\
    \ interval1_end == interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ < interval2_end {\n        return \"NO\";\n    }\n    if interval1_end > interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n     \
    \   return \"NO\";\n    }\n    if interval1_start == interval2_end {\n       \
    \ return \"NO\";\n    }\n    if interval1_start == interval2_start {\n       \
    \ return \"NO\";\n    }\n    if interval1_end == interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_start < interval2_end {\n        return \"\
    NO\";\n    }\n    if interval1_end > interval2_start {\n        return \"NO\"\
    ;\n    }\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval2_end ", "    let mut intervals = vec![interval1,\
    \ interval2];\n    let mut intervals_len = intervals.len();\n    let mut prime_numbers\
    \ = vec![];\n    let mut prime_numbers_len = prime_numbers.len();\n    let mut\
    \ prime_numbers_counter = 0;\n    let mut prime_numbers_counter_len = 0;\n   \
    \ let mut prime_numbers_counter_len2 = 0;\n    let mut prime_numbers_counter_len3\
    \ = 0;\n    let mut prime_numbers_counter_len4 = 0;\n    let mut prime_numbers_counter_len5\
    \ = 0;\n    let mut prime_numbers_counter_len6 = 0;\n    let mut prime_numbers_counter_len7\
    \ = 0;\n    let mut prime_numbers_counter_len8 = 0;\n    let mut prime_numbers_counter_len9\
    \ = 0;\n    let mut prime_numbers_counter_len10 = 0;\n    let mut prime_numbers_counter_len11\
    \ = 0;\n    let mut prime_numbers_counter_len12 = 0;\n    let mut prime_numbers_counter_len13\
    \ = 0;\n    let mut prime_numbers_counter_len14 = 0;\n    let mut prime_numbers_counter_len15\
    \ = 0;\n    let mut prime_numbers_counter_len16 = 0;\n    let mut prime_numbers_counter_len17\
    \ = 0;\n    let mut prime_numbers_counter_len18 = 0;\n    let mut prime_numbers_counter_len19\
    \ = 0;\n    let mut prime_numbers_counter_len20 = 0;\n    let mut prime_numbers_counter_len21\
    \ = 0;\n    let mut prime_numbers_counter_len22 = 0;\n    let mut prime_numbers_counter_len23\
    \ = 0;\n    let mut prime_numbers_counter_len24 = 0;\n    let mut prime_numbers_counter_len25\
    \ = 0;\n    let mut prime_numbers_counter_len26 = 0;\n    let mut prime_numbers_counter_len27\
    \ = 0;\n    let mut prime_numbers_counter_len28 = 0;\n    let mut prime_numbers_counter_len29\
    \ = 0;\n    let mut prime_numbers_counter_len30 = 0;\n    let mut prime_numbers_counter_len31\
    \ = 0;\n    let mut prime_numbers_counter_len32 = 0;\n    let mut prime_numbers_counter_len33\
    \ = 0;\n    let mut prime_numbers_counter_len34 = 0;\n    let mut prime_numbers_counter_len35\
    \ = 0;\n    let mut prime_numbers_counter_len36 = 0;\n    let mut prime_numbers_counter_len37\
    \ = 0;\n    let mut prime_numbers_counter_len38 = 0;\n    let mut ", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval1_len = interval1_end - interval1_start;\n    let mut interval2_len\
    \ = interval2_end - interval2_start;\n    let mut intersection_len = interval1_len\
    \ + interval2_len;\n    \n    if interval1_len > interval2_len {\n        interval1_len\
    \ = interval2_len;\n        interval2_start = interval1[0];\n        interval2_end\
    \ = interval1[1];\n    }\n    \n    if interval1_len < interval2_len {\n     \
    \   interval1_start = interval2[0];\n        interval1_end = interval2[1];\n \
    \   }\n    \n    if interval1_start > interval2_end {\n        interval1_len =\
    \ interval2_end - interval1_start;\n        interval1_start = interval2[0];\n\
    \        interval1_end = interval2[1];\n    }\n    \n    if interval1_end < interval2_start\
    \ {\n        interval1_len = interval2_start - interval1_end;\n        interval1_start\
    \ = interval2[0];\n        interval1_end = interval2[1];\n    }\n    \n    if\
    \ interval1_len == 0 {\n        return \"NO\";\n    }\n    \n    if interval1_len\
    \ == 1 {\n        return \"YES\";\n    }\n    \n    if interval1_len == 2 {\n\
    \        if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        \n        if interval1_end == interval2_end {\n          \
    \  return \"YES\";\n        }\n        \n        if interval1_start < interval2_start\
    \ {\n            return \"NO\";\n        }\n        \n        if interval1_end\
    \ > interval2_end {\n            return \"NO\";\n        }\n    }\n    \n    if\
    \ interval1_len > 2 {\n        if interval1_start == interval2_start {\n     \
    \       return \"YES\";\n        }\n        \n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        \n        if interval1_start\
    \ < interval2_start {\n            return \"NO\";\n        }\n        \n     \
    \   if interval1_end > interval2_end {\n            return \"NO\";\n        }\n\
    \    }\n    \n    if interval1_len > 3 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        \n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        \n     \
    \   if interval1_start < interval2_start {\n            return \"NO\";\n     \
    \   }\n        \n        if interval1_end > interval2_end {\n            return\
    \ \"NO\";\n        }\n    }\n    \n    if interval1_len > 4 {", "    let (start,\
    \ end) = interval1;\n    let (start2, end2) = interval2;\n    if start > end {\n\
    \        (start, end) = (end, start)\n    }\n    if start2 > end2 {\n        (start2,\
    \ end2) = (end2, start2)\n    }\n    if start == start2 && end == end2 {\n   \
    \     return \"YES\"\n    }\n    if start == start2 && end > end2 {\n        return\
    \ \"NO\"\n    }\n    if start > start2 && end == end2 {\n        return \"NO\"\
    \n    }\n    if start > start2 && end > end2 {\n        let (start3, end3) = (start2\
    \ + 1, end2 - 1);\n        if start < start3 && end > end3 {\n            return\
    \ \"NO\"\n        }\n        if start < start3 && end < end3 {\n            return\
    \ \"YES\"\n        }\n        if start > start3 && end < end3 {\n            return\
    \ \"NO\"\n        }\n        if start > start3 && end > end3 {\n            return\
    \ \"YES\"\n        }\n    }\n    return \"NO\"", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n\n    if interval1_end < interval2_start {\n    \
    \    interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end < interval2_start {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_start <= interval2_end {\n        return \"NO\";\n    }\n\n\
    \    if interval1_start >= interval2_start {\n        return \"NO\";\n    }\n\n\
    \    if interval1_start < interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start > interval2_start {\n        return \"YES\";\n    }\n\n\
    \    return \"YES\";", "    let (start, end) = interval1;\n    let (start2, end2)\
    \ = interval2;\n    if start > end {\n        (start, end) = (end, start);\n \
    \   }\n    if start2 > end2 {\n        (start2, end2) = (end2, start2);\n    }\n\
    \    if start == start2 && end == end2 {\n        return \"NO\";\n    }\n    let\
    \ mut prime = true;\n    let mut i = start;\n    let mut j = end2;\n    while\
    \ i <= end && j >= start2 {\n        if i % j == 0 {\n            prime = false;\n\
    \            break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    if\
    \ prime {\n        return \"YES\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = 0;\n    \n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval1_end = interval2_end;\n    }\n    \n  \
    \  if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n    \n    if interval1_start\
    \ <= interval1_end {\n        intersection_length = interval1_end - interval1_start\
    \ + 1;\n    }\n    \n    if intersection_length == 2 {\n        return \"YES\"\
    ;\n    }\n    \n    if intersection_length == 3 {\n        return \"NO\";\n  \
    \  }\n    \n    if intersection_length == 1 {\n        return \"YES\";\n    }\n\
    \    \n    if intersection_length == 0 {\n        return \"NO\";\n    }\n    \n\
    \    if intersection_length == 2 {\n        return \"YES\";\n    }\n    \n   \
    \ if intersection_length == 3 {\n        return \"NO\";\n    }\n    \n    if intersection_length\
    \ == 4 {\n        return \"YES\";\n    }\n    \n    if intersection_length ==\
    \ 5 {\n        return \"NO\";\n    }\n    \n    if intersection_length == 6 {\n\
    \        return \"YES\";\n    }\n    \n    if intersection_length == 7 {\n   \
    \     return \"NO\";\n    }\n    \n    if intersection_length == 8 {\n       \
    \ return \"YES\";\n    }\n    \n    if intersection_length == 9 {\n        return\
    \ \"NO\";\n    }\n    \n    if intersection_length == 10 {\n        return \"\
    YES\";\n    }\n    \n    if intersection_length == 11 {\n        return \"NO\"\
    ;\n    }\n    \n    if intersection_length == 12 {\n        return \"YES\";\n\
    \    }\n    \n    if intersection_length == 13 {\n        return \"NO\";\n   \
    \ }\n    \n    if intersection_length == 14 {\n        return \"YES\";\n    }\n\
    \    \n    if intersection_length == 15 {\n        return \"NO\";\n    }\n   \
    \ \n    if intersection_length == 16 {\n        return \"YES\";\n    }\n    \n\
    \    if intersection_length == 17 {\n        return \"NO\";\n    }\n    \n   \
    \ if intersection_length == 18 {\n        return \"YES\";\n    }\n    \n    if\
    \ intersection_length == 19 {\n        return \"NO\";\n    }\n    \n    if intersection_length\
    \ == 20 {\n        return \"YES\";\n    }\n    \n    if intersection_length ==\
    \ 21 {\n        return \"NO\";\n    }\n    \n    if intersection_length == 22\
    \ {\n", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n\
    \        return \"NO\";\n    }\n    let mut interval = interval1;\n    let mut\
    \ interval2 = interval2;\n    let mut length = 0;\n    while interval[0] < interval[1]\
    \ {\n        if interval[0] > interval2[0] {\n            interval[0] = interval2[0];\n\
    \        }\n        if interval[1] < interval2[1] {\n            interval[1] =\
    \ interval2[1];\n        }\n        interval[0] = interval[0] + 1;\n        interval[1]\
    \ = interval[1] - 1;\n        length += 1;\n    }\n    if length == 2 {\n    \
    \    return \"YES\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_start = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end = interval2_start;\n    }\n\n   \
    \ if interval1_start > interval2_end {\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \    }\n\n    if interval1_start == interval1_end {\n        return \"NO\";\n\
    \    }\n\n    let mut interval1_length = interval1_end - interval1_start;\n  \
    \  let mut interval2_length = interval2_end - interval2_start;\n\n    if interval1_length\
    \ < interval2_length {\n        interval1_length = interval2_length;\n    }\n\n\
    \    if interval1_length == 0 {\n        return \"NO\";\n    }\n\n    if interval1_length\
    \ == 1 {\n        return \"YES\";\n    }\n\n    if interval1_length == 2 {\n \
    \       if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n\n    if interval1_length == 3 {\n\
    \        if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        if interval1_end == interval2_end {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n\n    if interval1_length ==\
    \ 4 {\n        if interval1_start == interval2_start {\n            return \"\
    YES\";\n        }\n        if interval1_end == interval2_end {\n            return\
    \ \"YES\";\n        }\n        if interval1_start == interval2_end {\n       \
    \     return \"YES\";\n        }\n        return \"NO\";\n    }\n\n    if interval1_length\
    \ == 5 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n        if interval1_start == interval2_end {\n\
    \            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 6 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == ",
  "    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut length = 0;\n    while interval.start < interval.end && interval2.start\
    \ < interval2.end {\n        if interval.start < interval2.start {\n         \
    \   interval = interval2;\n            interval2 = interval1;\n        }\n   \
    \     if interval.end > interval2.end {\n            interval = interval2;\n \
    \           interval2 = interval1;\n        }\n        interval = interval2;\n\
    \        interval2 = interval1;\n        length += 1;\n    }\n    if interval.start\
    \ == interval.end {\n        if interval2.start == interval2.end {\n         \
    \   return \"YES\";\n        } else {\n            return \"NO\";\n        }\n\
    \    } else {\n        if length == 2 {\n            return \"YES\";\n       \
    \ } else {\n            return \"NO\";\n        }\n    }", "    let mut intervals\
    \ = vec![];\n    intervals.push(interval1);\n    intervals.push(interval2);\n\
    \    let mut intersection = intervals.iter().filter(|&interval| interval[0] ==\
    \ interval[1]).collect::<Vec<_>>();\n    let mut prime = true;\n    for interval\
    \ in intersection {\n        if interval[0] % interval[1] == 0 {\n           \
    \ prime = false;\n            break;\n        }\n    }\n    if prime {\n     \
    \   return \"YES\";\n    } else {\n        return \"NO\";\n    }", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval1_len = interval1_end - interval1_start;\n    let mut interval2_len\
    \ = interval2_end - interval2_start;\n    let mut intersection_len = interval1_len;\n\
    \    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_len = interval2_len;\n    }\n    \n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_len = interval2_len;\n\
    \    }\n    \n    if interval1_len > interval2_len {\n        interval1_len =\
    \ interval2_len;\n    }\n    \n    if interval1_len == interval2_len {\n     \
    \   if interval1_start == interval2_start {\n            return \"YES\";\n   \
    \     } else {\n            return \"NO\";\n        }\n    }\n    \n    if interval1_len\
    \ > interval2_len {\n        intersection_len = interval1_len;\n    } else {\n\
    \        intersection_len = interval2_len;\n    }\n    \n    if interval1_len\
    \ == 1 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n \
    \   \n    if interval1_len == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n    \n    if interval1_len == 3 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n    \n    if interval1_len == 4 {\n \
    \       if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        } else {\n            return \"NO\";\n        }\n    }\n    \n    if\
    \ interval1_len == 5 {\n        if interval1_start == interval2_start {\n    \
    \        return \"YES\";\n        } else {\n            return \"NO\";\n     \
    \   }\n    }\n    \n    if interval1_len == 6 {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        } else {\n         \
    \   return \"NO\";\n        }\n    }\n    \n    if interval1_len == 7 {\n    \
    \    if interval1_start == interval2_start {\n            return \"YES\";\n  \
    \      } else {\n            return \"NO\";\n        }\n    }\n    \n    if interval1_len\
    \ == 8 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n \
    \   \n    if interval1_len == 9 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \    let mut interval_length = interval1_length + interval2_length;\n    let mut\
    \ prime_number: isize = 1;\n    let mut prime_number_string = \"YES\";\n    while\
    \ prime_number_string == \"YES\" {\n        if interval1_start <= interval2_end\
    \ {\n            if interval1_end <= interval2_start {\n                prime_number\
    \ = prime_number + 1;\n                prime_number_string = \"NO\";\n       \
    \     } else {\n                prime_number_string = \"YES\";\n            }\n\
    \        }\n        if interval1_end <= interval2_start {\n            prime_number\
    \ = prime_number + 1;\n            prime_number_string = \"NO\";\n        }\n\
    \        if interval1_start <= interval2_end {\n            prime_number_string\
    \ = \"YES\";\n        }\n        interval1_start = interval1_start + 1;\n    \
    \    interval1_end = interval1_end + 1;\n        interval2_start = interval2_start\
    \ + 1;\n        interval2_end = interval2_end + 1;\n        interval_length =\
    \ interval_length + 1;\n    }\n    if prime_number == interval_length {\n    \
    \    return \"YES\";\n    } else {\n        return \"NO\";\n    }", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        } else {\n        \
    \    return \"NO\";\n        }\n    }\n\n    if interval1_start > interval2_start\
    \ {\n        let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \        let mut interval2_length = interval2_end - interval2_start + 1;\n\n \
    \       if interval1_length > interval2_length {\n            interval1_length\
    \ = interval2_length;\n        }\n\n        if interval1_length == 2 {\n     \
    \       if interval1_start == interval2_start {\n                return \"YES\"\
    ;\n            } else {\n                return \"NO\";\n            }\n     \
    \   }\n\n        if interval1_length == 3 {\n            if interval1_start ==\
    \ interval2_start {\n                return \"YES\";\n            } else if interval1_start\
    \ == interval2_end {\n                return \"YES\";\n            } else {\n\
    \                return \"NO\";\n            }\n        }\n\n        if interval1_length\
    \ == 4 {\n            if interval1_start == interval2_start {\n              \
    \  return \"YES\";\n            } else if interval1_start == interval2_end {\n\
    \                return \"YES\";\n            } else if interval1_end == interval2_end\
    \ {\n                return \"YES\";\n            } else {\n                return\
    \ \"NO\";\n            }\n        }\n\n        if interval1_length == 5 || interval1_length\
    \ == 6 {\n            if interval1_start == interval2_start {\n              \
    \  return \"YES\";\n            } else if interval1_start == interval2_end {\n\
    \                return \"YES\";\n            } else if interval1_end == interval2_end\
    \ {\n                return \"YES\";\n            } else if interval1_end == interval2_start\
    \ {\n                return \"YES\";\n            } else {\n                return\
    \ \"NO\";\n            }\n        }\n\n        if interval1_length == 7 || interval1_length\
    \ == 8 {\n            if interval1_start == interval2_start {\n              \
    \  return \"YES\";\n            } else if interval1_start == interval2_end {\n\
    \                return \"YES\";\n            } else if interval1_end == interval2_end\
    \ {\n                return \"YES\";\n            } else if interval1_end == interval2_start\
    \ {\n                return \"YES\";\n            } else if interval1_end == interval",
  "    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n        let\
    \ mut result = String::new();\n        let mut i = interval1[0];\n        let\
    \ mut j = interval2[0];\n        let mut k = interval1[1];\n        let mut l\
    \ = interval2[1];\n        while i <= k {\n            while j <= l {\n      \
    \          if i == j {\n                    result.push_str(\"YES\");\n      \
    \              break;\n                }\n                j += 1;\n          \
    \  }\n            i += 1;\n            j = interval1[1];\n        }\n        if\
    \ result.len() == 0 {\n            result.push_str(\"NO\");\n        }\n     \
    \   result\n    } else {\n        \"NO\"\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n        interval2_end\
    \ = interval1_end;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n        interval2_end\
    \ = interval1_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_start > interval2_end {\n        interval1_start = interval2_end;\n\
    \        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \        interval2_end = interval1_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start = interval2_end;\n\
    \        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \        interval2_end = interval1_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start = interval2_end;\n\
    \        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \        interval2_end = interval1_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start = interval2_end;\n\
    \        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \        interval2_end = interval1_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval1_len = interval1_end - interval1_start;\n    let mut interval2_len\
    \ = interval2_end - interval2_start;\n    let mut interval1_prime = true;\n  \
    \  let mut interval2_prime = true;\n    let mut prime_len = interval1_len + interval2_len;\n\
    \    \n    if interval1_len > interval2_len {\n        interval1_len = interval2_len;\n\
    \        interval2_len = interval1_len;\n        interval1_prime = false;\n  \
    \      interval2_prime = false;\n    }\n    \n    if interval1_len == interval2_len\
    \ {\n        if interval1_start <= interval2_start {\n            interval1_prime\
    \ = false;\n            interval2_prime = false;\n        } else {\n         \
    \   interval1_prime = true;\n            interval2_prime = false;\n        }\n\
    \    }\n    \n    if interval1_prime && interval2_prime {\n        if interval1_len\
    \ % interval2_len == 0 {\n            return \"YES\";\n        } else {\n    \
    \        return \"NO\";\n        }\n    }\n    \n    if interval1_prime == false\
    \ {\n        return \"NO\";\n    }\n    \n    if interval2_prime == false {\n\
    \        return \"NO\";\n    }\n    \n    if interval1_len == prime_len {\n  \
    \      return \"YES\";\n    }\n    \n    if interval1_len == prime_len {\n   \
    \     return \"NO\";\n    }\n    \n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut interval1_length\
    \ = interval2_end - interval2_start;\n    let mut interval2_length = interval1_end\
    \ - interval1_start;\n    let mut prime_number: isize = 1;\n    let mut prime_number_counter:\
    \ isize = 1;\n    let mut prime_number_counter2: isize = 1;\n    let mut prime_number_counter3:\
    \ isize = 1;\n    let mut prime_number_counter4: isize = 1;\n    let mut prime_number_counter5:\
    \ isize = 1;\n    let mut prime_number_counter6: isize = 1;\n    let mut prime_number_counter7:\
    \ isize = 1;\n    let mut prime_number_counter8: isize = 1;\n    let mut prime_number_counter9:\
    \ isize = 1;\n    let mut prime_number_counter10: isize = 1;\n    let mut prime_number_counter11:\
    \ isize = 1;\n    let mut prime_number_counter12: isize = 1;\n    let mut prime_number_counter13:\
    \ isize = 1;\n    let mut prime_number_counter14: isize = 1;\n    let mut prime_number_counter15:\
    \ isize = 1;\n    let mut prime_number_counter16: isize = 1;\n    let mut prime_number_counter17:\
    \ isize = 1;\n    let mut prime_number_counter18: isize = 1;\n    let mut prime_number_counter19:\
    \ isize = 1;\n    let mut prime_number_counter20: isize = 1;\n    let mut prime_number_counter21:\
    \ isize = 1;\n    let mut prime_number_counter22: isize = 1;\n    let mut prime_number_counter23:\
    \ isize = 1;\n    let mut prime_number_counter24: isize = 1;\n    let mut prime_number_counter25:\
    \ isize = 1;\n    let mut prime_number_counter26: isize = 1;\n    let mut prime_number_counter27:\
    \ isize = 1;\n    let mut prime_number_counter28: isize = 1;\n    let mut prime_number_counter29:\
    \ isize = 1;\n    let mut prime_number_counter30: isize = 1;\n    let mut prime_number_counter31:\
    \ isize = 1;\n    let mut prime", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end <\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n\n    if interval1_start\
    \ > interval2_end {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start == interval1_end\
    \ {\n        return \"YES\";\n    }\n\n    if interval1_start < interval1_end\
    \ {\n        let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \        let mut interval2_length = interval2_end - interval2_start + 1;\n\n \
    \       while interval1_length > 0 && interval2_length > 0 {\n            if interval1_start\
    \ % interval2_start == 0 {\n                interval1_length -= 1;\n         \
    \   }\n            if interval1_end % interval2_end == 0 {\n                interval1_length\
    \ -= 1;\n            }\n            if interval1_start % interval2_end == 0 {\n\
    \                interval1_length -= 1;\n            }\n            if interval1_end\
    \ % interval2_start == 0 {\n                interval1_length -= 1;\n         \
    \   }\n            if interval1_start < interval1_end {\n                interval1_start\
    \ += 1;\n                interval1_length -= 1;\n            }\n            if\
    \ interval1_start < interval1_end {\n                interval1_end += 1;\n   \
    \             interval1_length -= 1;\n            }\n            if interval1_start\
    \ < interval1_end {\n                interval1_start += 1;\n                interval1_length\
    \ -= 1;\n            }\n            if interval1_start < interval1_end {\n   \
    \             interval1_end += 1;\n                interval1_length -= 1;\n  \
    \          }\n            if interval1_start < interval1_end {\n             \
    \   interval1_start += 1;\n                interval1_length -= 1;\n          \
    \  }\n            if interval1_start < interval1_end {\n                interval1_end\
    \ += 1;\n                interval1_length -= 1;\n            }\n            if\
    \ interval1_start < interval1_end {\n                interval1_start += 1;\n \
    \               interval1_length -= 1;\n            }\n            if interval1_start\
    \ < interval1_end {\n                interval1_end += 1;\n                interval1_length\
    \ -= 1;\n            }\n            if interval1_start < interval1_end {\n   \
    \             interval1_start += 1;\n                interval1_length -= 1;\n\
    \            }\n            if interval1_start < interval1_end {\n           \
    \     interval1_end += 1;\n                interval1_length -= ", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval", "    if interval1.start > interval1.end {\n        let\
    \ temp = interval1;\n        interval1 = interval2;\n        interval2 = temp;\n\
    \    }\n    if interval2.start > interval2.end {\n        let temp = interval2;\n\
    \        interval2 = interval1;\n        interval1 = temp;\n    }\n    if interval1.start\
    \ == interval1.end {\n        return \"NO\";\n    }\n    if interval2.start ==\
    \ interval2.end {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval3 = interval1;\n    let\
    \ mut interval4 = interval2;\n    let mut interval5 = interval1;\n    let mut\
    \ interval6 = interval2;\n    let mut interval7 = interval1;\n    let mut interval8\
    \ = interval2;\n    let mut interval9 = interval1;\n    let mut interval10 = interval2;\n\
    \    let mut interval11 = interval1;\n    let mut interval12 = interval2;\n  \
    \  let mut interval13 = interval1;\n    let mut interval14 = interval2;\n    let\
    \ mut interval15 = interval1;\n    let mut interval16 = interval2;\n    let mut\
    \ interval17 = interval1;\n    let mut interval18 = interval2;\n    let mut interval19\
    \ = interval1;\n    let mut interval20 = interval2;\n    let mut interval21 =\
    \ interval1;\n    let mut interval22 = interval2;\n    let mut interval23 = interval1;\n\
    \    let mut interval24 = interval2;\n    let mut interval25 = interval1;\n  \
    \  let mut interval26 = interval2;\n    let mut interval27 = interval1;\n    let\
    \ mut interval28 = interval2;\n    let mut interval29 = interval1;\n    let mut\
    \ interval30 = interval2;\n    let mut interval31 = interval1;\n    let mut interval32\
    \ = interval2;\n    let mut interval33 = interval1;\n    let mut interval34 =\
    \ interval2;\n    let mut interval35 = interval1;\n    let mut interval36 = interval2;\n\
    \    let mut interval37 = interval1;\n    let mut interval38 = interval2;\n  \
    \  let mut interval39 = interval1;\n    let mut interval40 = interval2;\n    let\
    \ mut interval41 = interval1;\n    let mut interval42 = interval2;\n    let mut\
    \ interval43 = interval1;\n    let mut interval44 = interval2;\n    let mut interval45\
    \ = interval1;\n    let mut interval46 = interval2;\n    let mut interval47 =\
    \ interval1;\n    let mut interval48 = interval2;\n    let mu", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n    let mut prime_found = false;\n\
    \    \n    while intersection_end < interval2_end {\n        if interval1_end\
    \ == intersection_end {\n            interval1_prime = false;\n        }\n   \
    \     if interval2_end == intersection_end {\n            interval2_prime = false;\n\
    \        }\n        if interval1_end < intersection_end {\n            intersection_end\
    \ = intersection_end + 1;\n        }\n        if interval2_end < intersection_end\
    \ {\n            intersection_end = intersection_end + 1;\n        }\n       \
    \ if interval1_end == intersection_end {\n            intersection_length = intersection_length\
    \ + 1;\n        }\n        if interval2_end == intersection_end {\n          \
    \  intersection_length = intersection_length + 1;\n        }\n        if interval1_end\
    \ < intersection_end {\n            intersection_start = intersection_start -\
    \ 1;\n        }\n        if interval2_end < intersection_end {\n            intersection_start\
    \ = intersection_start - 1;\n        }\n        if interval1_end == intersection_end\
    \ {\n            intersection_length = intersection_length + 1;\n        }\n \
    \       if interval2_end == intersection_end {\n            intersection_length\
    \ = intersection_length + 1;\n        }\n        if interval1_end < intersection_end\
    \ {\n            intersection_end = intersection_end - 1;\n        }\n       \
    \ if interval2_end < intersection_end {\n            intersection_end = intersection_end\
    \ - 1;\n        }\n    }\n    \n    if interval1_prime == true {\n        if interval2_prime\
    \ == true {\n            if intersection_length == 2 {\n                return\
    \ \"YES\";\n            }\n            else {\n                return \"NO\";\n\
    \            }\n        }\n        else {\n            return \"NO\";\n      \
    \  }\n    }\n    else {\n        if interval2_prime == true {\n            return\
    \ \"NO\";\n        }\n        else {\n            return \"YES\";\n        }\n\
    \    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_length = interval1_end\
    \ - interval1_start;\n    let mut prime_number: isize = 1;\n    \n    while intersection_start\
    \ <= intersection_end {\n        if interval1_start < interval2_start {\n    \
    \        intersection_start = interval2_start;\n        } else {\n           \
    \ intersection_start = interval1_start;\n        }\n        intersection_end =\
    \ intersection_start + intersection_length;\n        intersection_length = intersection_end\
    \ - intersection_start;\n    }\n    \n    if prime_number == 1 {\n        return\
    \ \"NO\";\n    } else {\n        return \"YES\";\n    }", "    if interval1.start\
    \ >= interval1.end || interval2.start >= interval2.end {\n        return \"NO\"\
    ;\n    }\n    if interval1.start <= interval2.end {\n        let mut start = interval1.start;\n\
    \        let mut end = interval1.end;\n        while start < interval2.end {\n\
    \            start = start..checked_add(1).unwrap();\n            end = end.checked_add(1).unwrap();\n\
    \        }\n        if start == interval2.end {\n            return \"YES\";\n\
    \        }\n        if start == interval1.end {\n            return \"NO\";\n\
    \        }\n        return \"YES\";\n    }\n    let mut start = interval1.start;\n\
    \    let mut end = interval1.end;\n    while start < interval2.end {\n       \
    \ start = start..checked_add(1).unwrap();\n        end = end.checked_add(1).unwrap();\n\
    \    }\n    if start == interval2.end {\n        return \"YES\";\n    }\n    if\
    \ start == interval1.end {\n        return \"NO\";\n    }\n    return \"YES\";",
  "    let (start, end) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start > end {\n        (start, end) = (end, start);\n    }\n    if start2 >\
    \ end2 {\n        (start2, end2) = (end2, start2);\n    }\n    let mut start =\
    \ start;\n    let mut end = end;\n    let mut start2 = start2;\n    let mut end2\
    \ = end2;\n    let mut length = end - start;\n    let mut length2 = end2 - start2;\n\
    \    let mut prime = true;\n    let mut prime2 = true;\n    let mut prime3 = true;\n\
    \    let mut prime4 = true;\n    let mut prime5 = true;\n    let mut prime6 =\
    \ true;\n    let mut prime7 = true;\n    let mut prime8 = true;\n    let mut prime9\
    \ = true;\n    let mut prime10 = true;\n    let mut prime11 = true;\n    let mut\
    \ prime12 = true;\n    let mut prime13 = true;\n    let mut prime14 = true;\n\
    \    let mut prime15 = true;\n    let mut prime16 = true;\n    let mut prime17\
    \ = true;\n    let mut prime18 = true;\n    let mut prime19 = true;\n    let mut\
    \ prime20 = true;\n    let mut prime21 = true;\n    let mut prime22 = true;\n\
    \    let mut prime23 = true;\n    let mut prime24 = true;\n    let mut prime25\
    \ = true;\n    let mut prime26 = true;\n    let mut prime27 = true;\n    let mut\
    \ prime28 = true;\n    let mut prime29 = true;\n    let mut prime30 = true;\n\
    \    let mut prime31 = true;\n    let mut prime32 = true;\n    let mut prime33\
    \ = true;\n    let mut prime34 = true;\n    let mut prime35 = true;\n    let mut\
    \ prime36 = true;\n    let mut prime37 = true;\n    let mut prime38 = true;\n\
    \    let mut prime39 = true;\n    let mut prime40 = true;\n    let mut prime41\
    \ = true;\n    let mut prime42 = true;\n    let mut prime43 = true;\n    let mut\
    \ prime44 = true;\n    let mut prime45 = true;\n    let mut prime46 = true;\n\
    \    let mut prime47 = true;\n    let mut prime48 = true;\n    let mut prime49\
    \ = true;\n    let mut prime50 = true;\n    let mut prime51 = true;\n    let mut\
    \ prime52 = true;\n    let mut prime53 = true;\n    let mut prime54 = true;\n\
    \    let mut prime55 = true;\n    let mut prime56 = true;\n    let mut prime57\
    \ = true;\n    let mut prime58 = true;", "    let mut interval_len = interval1[1]\
    \ - interval1[0] + 1;\n    let mut interval_len_2 = interval2[1] - interval2[0]\
    \ + 1;\n    if interval_len == interval_len_2 {\n        let mut interval_len\
    \ = interval1[1] - interval1[0] + 1;\n        let mut interval_len_2 = interval2[1]\
    \ - interval2[0] + 1;\n        if interval_len == interval_len_2 {\n         \
    \   let mut interval_len = interval1[1] - interval1[0] + 1;\n            let mut\
    \ interval_len_2 = interval2[1] - interval2[0] + 1;\n            if interval_len\
    \ == interval_len_2 {\n                let mut interval_len = interval1[1] - interval1[0]\
    \ + 1;\n                let mut interval_len_2 = interval2[1] - interval2[0] +\
    \ 1;\n                if interval_len == interval_len_2 {\n                  \
    \  let mut interval_len = interval1[1] - interval1[0] + 1;\n                 \
    \   let mut interval_len_2 = interval2[1] - interval2[0] + 1;\n              \
    \      if interval_len == interval_len_2 {\n                        let mut interval_len\
    \ = interval1[1] - interval1[0] + 1;\n                        let mut interval_len_2\
    \ = interval2[1] - interval2[0] + 1;\n                        if interval_len\
    \ == interval_len_2 {\n                            let mut interval_len = interval1[1]\
    \ - interval1[0] + 1;\n                            let mut interval_len_2 = interval2[1]\
    \ - interval2[0] + 1;\n                            if interval_len == interval_len_2\
    \ {\n                                let mut interval_len = interval1[1] - interval1[0]\
    \ + 1;\n                                let mut interval_len_2 = interval2[1]\
    \ - interval2[0] + 1;\n                                if interval_len == interval_len_2\
    \ {\n                                    let mut interval_len = interval1[1] -\
    \ interval1[0] + 1;\n                                    let mut interval_len_2\
    \ = interval2[1] - interval2[0] + 1;\n                                    if interval_len\
    \ == interval_len_2 {\n                                        let mut interval_len\
    \ = interval1[1] - interval1[0] + 1;\n                                       \
    \ let mut interval_len_2 = interval2[1] - interval2[0] + 1;\n                \
    \                        if interval_len == interval_len_2 {\n               \
    \                             return \"YES\";\n                              \
    \          } else {\n                                            return \"NO\"\
    ;\n                                        }\n                               \
    \     } else {\n                                        return \"NO\";\n     \
    \                               }\n                                } else {\n\
    \                                    return \"NO\";\n                        \
    \        }\n                            } else {\n                           \
    \     return \"NO\";\n                            }\n                        }\
    \ else {\n                            return \"NO\";\n                       \
    \ }\n                    } else {\n                        return \"NO\";\n  \
    \                  }\n                } else {\n                    return \"\
    NO\";\n                }\n            } else {\n                return \"NO\"\
    ;\n            }\n        } else {\n            return \"NO\";\n        }\n  \
    \  } else {\n        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start == interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_start > interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n \
    \       return \"YES\";\n    }\n    if interval1_end == interval2_end {\n    \
    \    return \"YES\";\n    }\n    if interval1_end > interval2_end {\n        return\
    \ \"YES\";\n    }\n    if interval1_end < interval2_end {\n        return \"YES\"\
    ;\n    }\n    return \"YES\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_prime = true;\n  \
    \  let mut interval2_prime = true;\n    \n    while intersection_start <= intersection_end\
    \ {\n        if interval1_prime == true {\n            if interval2_prime == true\
    \ {\n                if intersection_start <= interval2_end {\n              \
    \      intersection_length = intersection_end - intersection_start;\n        \
    \            intersection_start = intersection_start + 1;\n                  \
    \  intersection_end = intersection_end + 1;\n                    interval1_prime\
    \ = false;\n                    interval2_prime = false;\n                }\n\
    \                else {\n                    intersection_start = intersection_start\
    \ + 1;\n                    intersection_end = intersection_end + 1;\n       \
    \             interval1_prime = true;\n                    interval2_prime = true;\n\
    \                }\n            }\n            else {\n                intersection_start\
    \ = intersection_start + 1;\n                intersection_end = intersection_end\
    \ + 1;\n                interval1_prime = true;\n                interval2_prime\
    \ = true;\n            }\n        }\n        else {\n            if interval2_prime\
    \ == true {\n                if intersection_start <= interval1_end {\n      \
    \              intersection_length = intersection_end - intersection_start;\n\
    \                    intersection_start = intersection_start + 1;\n          \
    \          intersection_end = intersection_end + 1;\n                    interval1_prime\
    \ = true;\n                    interval2_prime = false;\n                }\n \
    \               else {\n                    intersection_start = intersection_start\
    \ + 1;\n                    intersection_end = intersection_end + 1;\n       \
    \             interval1_prime = true;\n                    interval2_prime = true;\n\
    \                }\n            }\n            else {\n                intersection_start\
    \ = intersection_start + 1;\n                intersection_end = intersection_end\
    \ + 1;\n                interval1_prime = true;\n                interval2_prime\
    \ = true;\n            }\n        }\n    }\n    \n    if interval1_prime == true\
    \ {\n        if interval2_prime == true {\n            if intersection_start <=\
    \ interval2_end {\n                intersection_length = intersection_end - intersection_start;\n\
    \                intersection_start = intersection_start + 1;\n              \
    \  intersection_end = intersection_end + 1;\n                interval1_prime =\
    \ false;\n                interval2_prime = false;\n            }\n          \
    \  else {\n                intersection_start = intersection_start + 1;\n    \
    \            intersection_end = intersection_end + 1;\n                interval1_prime\
    \ = true;\n                interval2_prime = true;\n            }\n        }\n\
    \        else {\n            intersection_start = intersection_start + 1;\n  \
    \          intersection_end = intersection", "    let mut intervals = vec![interval1,\
    \ interval2];\n    let mut primes = vec![];\n    let mut primes_len = 0;\n   \
    \ let mut primes_len2 = 0;\n    let mut primes_len3 = 0;\n    let mut primes_len4\
    \ = 0;\n    let mut primes_len5 = 0;\n    let mut primes_len6 = 0;\n    let mut\
    \ primes_len7 = 0;\n    let mut primes_len8 = 0;\n    let mut primes_len9 = 0;\n\
    \    let mut primes_len10 = 0;\n    let mut primes_len11 = 0;\n    let mut primes_len12\
    \ = 0;\n    let mut primes_len13 = 0;\n    let mut primes_len14 = 0;\n    let\
    \ mut primes_len15 = 0;\n    let mut primes_len16 = 0;\n    let mut primes_len17\
    \ = 0;\n    let mut primes_len18 = 0;\n    let mut primes_len19 = 0;\n    let\
    \ mut primes_len20 = 0;\n    let mut primes_len21 = 0;\n    let mut primes_len22\
    \ = 0;\n    let mut primes_len23 = 0;\n    let mut primes_len24 = 0;\n    let\
    \ mut primes_len25 = 0;\n    let mut primes_len26 = 0;\n    let mut primes_len27\
    \ = 0;\n    let mut primes_len28 = 0;\n    let mut primes_len29 = 0;\n    let\
    \ mut primes_len30 = 0;\n    let mut primes_len31 = 0;\n    let mut primes_len32\
    \ = 0;\n    let mut primes_len33 = 0;\n    let mut primes_len34 = 0;\n    let\
    \ mut primes_len35 = 0;\n    let mut primes_len36 = 0;\n    let mut primes_len37\
    \ = 0;\n    let mut primes_len38 = 0;\n    let mut primes_len39 = 0;\n    let\
    \ mut primes_len40 = 0;\n    let mut primes_len41 = 0;\n    let mut primes_len42\
    \ = 0;\n    let mut primes_len43 = 0;\n    let mut primes_len44 = 0;\n    let\
    \ mut primes_len45 = 0;\n    let mut primes_len46 = 0;\n    let mut primes_len47\
    \ = 0;\n    let mut primes_len48 = 0;\n    let mut primes_len49 = 0;\n    let\
    \ mut primes_len50 = 0;\n    let mut primes_len51 = 0;\n    let mut primes_len52\
    \ = 0;\n    let mut primes_len53 = 0;\n    let mut primes_len54 = 0;\n    let\
    \ mut primes_len55 = 0;\n    let ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end < interval2_start {\n        return \"NO\";\n \
    \   }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start < interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start > interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\
    \n    return \"YES\";", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut prime_number: isize = 1;\n \
    \   \n    while intersection_start <= intersection_end {\n        if interval1_start\
    \ <= intersection_end && interval2_start <= intersection_end {\n            if\
    \ intersection_start < intersection_end {\n                intersection_length\
    \ = intersection_end - intersection_start;\n            }\n            if interval1_start\
    \ < intersection_end && interval2_start < intersection_end {\n               \
    \ if intersection_length == prime_number {\n                    return \"YES\"\
    ;\n                }\n                prime_number += 1;\n            }\n    \
    \    }\n        intersection_start += 1;\n        intersection_end += 1;\n   \
    \ }\n    return \"NO\";", "    let mut interval_1: Vec<isize> = interval1.iter().cloned().collect();\n\
    \    let mut interval_2: Vec<isize> = interval2.iter().cloned().collect();\n \
    \   let mut intersection: Vec<isize> = interval_1.clone();\n    let mut intersection_length:\
    \ isize = 1;\n    let mut interval_1_end: isize = interval_1.last().unwrap();\n\
    \    let mut interval_2_end: isize = interval_2.last().unwrap();\n    let mut\
    \ interval_1_start: isize = interval_1.next().unwrap();\n    let mut interval_2_start:\
    \ isize = interval_2.next().unwrap();\n    while interval_1_start != interval_1_end\
    \ && interval_2_start != interval_2_end {\n        if interval_1_start < interval_2_start\
    \ {\n            intersection.push(interval_1_start);\n            intersection_length\
    \ += 1;\n        }\n        if interval_1_end > interval_2_end {\n           \
    \ intersection.push(interval_1_end);\n            intersection_length += 1;\n\
    \        }\n        interval_1_start = interval_1.next().unwrap();\n        interval_2_start\
    \ = interval_2.next().unwrap();\n    }\n    if interval_1_start == interval_1_end\
    \ && interval_2_start == interval_2_end {\n        if intersection_length == 2\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    } else {\n        if intersection_length == 2 {\n          \
    \  return \"NO\";\n        } else {\n            return \"YES\";\n        }\n\
    \    }", "    if interval1.start > interval1.end {\n        let tmp = interval1;\n\
    \        interval1 = interval2;\n        interval2 = tmp;\n    }\n    if interval2.start\
    \ > interval2.end {\n        let tmp = interval2;\n        interval2 = interval1;\n\
    \        interval1 = tmp;\n    }\n    let mut interval = interval1;\n    let mut\
    \ interval2 = interval2;\n    let mut interval3 = interval1;\n    let mut interval4\
    \ = interval2;\n    let mut interval5 = interval1;\n    let mut interval6 = interval2;\n\
    \    let mut interval7 = interval1;\n    let mut interval8 = interval2;\n    let\
    \ mut interval9 = interval1;\n    let mut interval10 = interval2;\n    let mut\
    \ interval11 = interval1;\n    let mut interval12 = interval2;\n    let mut interval13\
    \ = interval1;\n    let mut interval14 = interval2;\n    let mut interval15 =\
    \ interval1;\n    let mut interval16 = interval2;\n    let mut interval17 = interval1;\n\
    \    let mut interval18 = interval2;\n    let mut interval19 = interval1;\n  \
    \  let mut interval20 = interval2;\n    let mut interval21 = interval1;\n    let\
    \ mut interval22 = interval2;\n    let mut interval23 = interval1;\n    let mut\
    \ interval24 = interval2;\n    let mut interval25 = interval1;\n    let mut interval26\
    \ = interval2;\n    let mut interval27 = interval1;\n    let mut interval28 =\
    \ interval2;\n    let mut interval29 = interval1;\n    let mut interval30 = interval2;\n\
    \    let mut interval31 = interval1;\n    let mut interval32 = interval2;\n  \
    \  let mut interval33 = interval1;\n    let mut interval34 = interval2;\n    let\
    \ mut interval35 = interval1;\n    let mut interval36 = interval2;\n    let mut\
    \ interval37 = interval1;\n    let mut interval38 = interval2;\n    let mut interval39\
    \ = interval1;\n    let mut interval40 = interval2;\n    let mut interval41 =\
    \ interval1;\n    let mut interval42 = interval2;\n    let mut interval43 = interval1;\n\
    \    let mut interval44 = interval2;\n    let mut interval45 = interval1;\n  \
    \  let mut interval46 = interval2;\n    let mut interval47 = interval1;\n    let\
    \ mut interval48 = interval2;\n    let mut interval49 = interval1;\n    let mut\
    \ interval50 = interval2;\n    let mut interval51 = interval1;\n    let mut interval52\
    \ = interval", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_length = interval1_end - interval1_start;\n\
    \    let mut interval_length2 = interval2_end - interval2_start;\n    let mut\
    \ prime_number: isize = 1;\n    let mut prime_number2: isize = 1;\n    let mut\
    \ prime_number3: isize = 1;\n    let mut prime_number4: isize = 1;\n    let mut\
    \ prime_number5: isize = 1;\n    let mut prime_number6: isize = 1;\n    let mut\
    \ prime_number7: isize = 1;\n    let mut prime_number8: isize = 1;\n    let mut\
    \ prime_number9: isize = 1;\n    let mut prime_number10: isize = 1;\n    let mut\
    \ prime_number11: isize = 1;\n    let mut prime_number12: isize = 1;\n    let\
    \ mut prime_number13: isize = 1;\n    let mut prime_number14: isize = 1;\n   \
    \ let mut prime_number15: isize = 1;\n    let mut prime_number16: isize = 1;\n\
    \    let mut prime_number17: isize = 1;\n    let mut prime_number18: isize = 1;\n\
    \    let mut prime_number19: isize = 1;\n    let mut prime_number20: isize = 1;\n\
    \    let mut prime_number21: isize = 1;\n    let mut prime_number22: isize = 1;\n\
    \    let mut prime_number23: isize = 1;\n    let mut prime_number24: isize = 1;\n\
    \    let mut prime_number25: isize = 1;\n    let mut prime_number26: isize = 1;\n\
    \    let mut prime_number27: isize = 1;\n    let mut prime_number28: isize = 1;\n\
    \    let mut prime_number29: isize = 1;\n    let mut prime_number30: isize = 1;\n\
    \    let mut prime_number31: isize = 1;\n    let mut prime_number32: isize = 1;\n\
    \    let mut prime_number33: isize = 1;\n    let mut prime_number34: isize = 1;\n\
    \    let mut prime_number35: isize = 1;\n    let mut prime_number36: isize = 1;\n\
    \    let mut prime_number37: isize = 1;\n    let mut prime_number", "    if interval1.0\
    \ < interval2.0 {\n        let (start, end) = interval1;\n        let (end2, start2)\
    \ = interval2;\n        if start < end2 {\n            return intersection(interval1,\
    \ interval2);\n        }\n        if start > end2 {\n            return intersection(interval2,\
    \ interval1);\n        }\n    }\n    if interval1.0 < interval2.0 {\n        let\
    \ (start, end) = interval1;\n        let (end2, start2) = interval2;\n       \
    \ if start < end2 {\n            return intersection(interval1, interval2);\n\
    \        }\n        if start > end2 {\n            return intersection(interval2,\
    \ interval1);\n        }\n    }\n    if interval1.0 < interval2.0 {\n        let\
    \ (start, end) = interval1;\n        let (end2, start2) = interval2;\n       \
    \ if start < end2 {\n            return intersection(interval1, interval2);\n\
    \        }\n        if start > end2 {\n            return intersection(interval2,\
    \ interval1);\n        }\n    }\n    if interval1.0 < interval2.0 {\n        let\
    \ (start, end) = interval1;\n        let (end2, start2) = interval2;\n       \
    \ if start < end2 {\n            return intersection(interval1, interval2);\n\
    \        }\n        if start > end2 {\n            return intersection(interval2,\
    \ interval1);\n        }\n    }\n    if interval1.0 < interval2.0 {\n        let\
    \ (start, end) = interval1;\n        let (end2, start2) = interval2;\n       \
    \ if start < end2 {\n            return intersection(interval1, interval2);\n\
    \        }\n        if start > end2 {\n            return intersection(interval2,\
    \ interval1);\n        }\n    }\n    return \"NO\".to_string();", "    let mut\
    \ intervals = vec![];\n    intervals.push(interval1);\n    intervals.push(interval2);\n\
    \    let mut interval = intervals.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut prime_numbers = vec![];\n    let mut prime_numbers_len = vec![];\n    let\
    \ mut prime_numbers_len = intervals.iter().cloned().collect::<Vec<_>>();\n   \
    \ let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_numbers_len = prime_numbers_len.iter().cloned().collect", " \
    \   let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut intersection = interval1;\n    let mut intersection2 = interval2;\n    let\
    \ mut prime = true;\n    \n    while prime == true {\n        if interval1[0]\
    \ > interval2[0] {\n            interval = interval2;\n            intersection\
    \ = intersection2;\n        } else {\n            interval = interval1;\n    \
    \        intersection = intersection1;\n        }\n        \n        if intersection[0]\
    \ > intersection[1] {\n            prime = false;\n        } else {\n        \
    \    prime = true;\n        }\n    }\n    \n    if prime == true {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }", "    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval_len =\
    \ interval1.0;\n    let mut interval2_len = interval2.0;\n    let mut prime =\
    \ false;\n    \n    while interval_len < interval2_len {\n        if interval[0]\
    \ > interval2[0] {\n            interval[0] = interval[0] - 1;\n            interval_len\
    \ = interval_len + 1;\n        } else {\n            interval[0] = interval[0]\
    \ + 1;\n            interval_len = interval_len + 1;\n        }\n    }\n    \n\
    \    while interval_len < interval2_len {\n        if interval[1] < interval2[1]\
    \ {\n            interval[1] = interval[1] + 1;\n            interval_len = interval_len\
    \ + 1;\n        } else {\n            interval[1] = interval[1] - 1;\n       \
    \     interval_len = interval_len + 1;\n        }\n    }\n    \n    if interval_len\
    \ == interval2_len {\n        prime = true;\n    }\n    \n    if prime {\n   \
    \     return \"YES\";\n    } else {\n        return \"NO\";\n    }", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        let tmp = interval1_end;\n\
    \        interval1_end = interval2_start;\n        interval2_start = tmp;\n  \
    \  }\n    if interval1_end < interval2_start {\n        let tmp = interval1_start;\n\
    \        interval1_start = interval2_end;\n        interval2_end = tmp;\n    }\n\
    \    if interval1_start < interval1_end && interval2_start < interval2_end {\n\
    \        let mut interval1_len = interval1_end - interval1_start;\n        let\
    \ mut interval2_len = interval2_end - interval2_start;\n        let mut intersection_len\
    \ = 0;\n        while interval1_len > 0 && interval2_len > 0 {\n            if\
    \ interval1_start > interval2_start {\n                interval1_len -= interval1_start;\n\
    \                interval1_start -= interval1_start;\n            } else {\n \
    \               interval2_len -= interval2_start;\n                interval2_start\
    \ -= interval2_start;\n            }\n            intersection_len += 1;\n   \
    \     }\n        if intersection_len == 0 {\n            return \"NO\";\n    \
    \    }\n        if intersection_len == 1 {\n            return \"YES\";\n    \
    \    }\n        if intersection_len % 2 == 0 {\n            return \"NO\";\n \
    \       }\n        return \"YES\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_len\
    \ = interval1_end - interval1_start;\n    let mut interval2_len = interval2_end\
    \ - interval2_start;\n    let mut intersection_len = interval1_len;\n    let mut\
    \ prime = true;\n    while prime_checker(intersection_len) == true {\n       \
    \ if interval1_len == interval2_len {\n            prime = false;\n          \
    \  break;\n        }\n        if interval1_len > interval2_len {\n           \
    \ interval1_len -= 1;\n            interval1_start += 1;\n        } else {\n \
    \           interval2_len -= 1;\n            interval2_start += 1;\n        }\n\
    \        intersection_len += 1;\n    }\n    if prime_checker(intersection_len)\
    \ == true {\n        return \"YES\";\n    } else {\n        return \"NO\";\n \
    \   }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"NO\"\
    ;\n        } else {\n            return \"YES\";\n        }\n    }\n\n    if interval1_end\
    \ < interval2_end {\n        let mut interval1_len = interval1_end - interval1_start\
    \ + 1;\n        let mut interval2_len = interval2_end - interval2_start + 1;\n\
    \n        if interval1_len > interval2_len {\n            interval1_len = interval2_len;\n\
    \        }\n\n        if interval1_len == 1 {\n            return \"YES\";\n \
    \       }\n\n        let mut prime_found = false;\n\n        for i in 2..interval1_len\
    \ {\n            if interval1_start % i == 0 && interval1_end % i == 0 {\n   \
    \             prime_found = true;\n                break;\n            }\n   \
    \     }\n\n        if prime_found {\n            return \"YES\";\n        }\n\
    \    } else {\n        let mut interval1_len = interval1_end - interval1_start\
    \ + 1;\n        let mut interval2_len = interval2_end - interval2_start + 1;\n\
    \n        if interval1_len > interval2_len {\n            interval1_len = interval2_len;\n\
    \        }\n\n        if interval1_len == 1 {\n            return \"YES\";\n \
    \       }\n\n        let mut prime_found = false;\n\n        for i in 2..interval1_len\
    \ {\n            if interval1_start % i == 0 && interval1_end % i == 0 {\n   \
    \             prime_found = true;\n                break;\n            }\n   \
    \     }\n\n        if prime_found {\n            return \"YES\";\n        }\n\
    \    }", "    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval3 = interval1;\n    let mut interval4 = interval2;\n    let\
    \ mut interval5 = interval1;\n    let mut interval6 = interval2;\n    let mut\
    \ interval7 = interval1;\n    let mut interval8 = interval2;\n    let mut interval9\
    \ = interval1;\n    let mut interval10 = interval2;\n    let mut interval11 =\
    \ interval1;\n    let mut interval12 = interval2;\n    let mut interval13 = interval1;\n\
    \    let mut interval14 = interval2;\n    let mut interval15 = interval1;\n  \
    \  let mut interval16 = interval2;\n    let mut interval17 = interval1;\n    let\
    \ mut interval18 = interval2;\n    let mut interval19 = interval1;\n    let mut\
    \ interval20 = interval2;\n    let mut interval21 = interval1;\n    let mut interval22\
    \ = interval2;\n    let mut interval23 = interval1;\n    let mut interval24 =\
    \ interval2;\n    let mut interval25 = interval1;\n    let mut interval26 = interval2;\n\
    \    let mut interval27 = interval1;\n    let mut interval28 = interval2;\n  \
    \  let mut interval29 = interval1;\n    let mut interval30 = interval2;\n    let\
    \ mut interval31 = interval1;\n    let mut interval32 = interval2;\n    let mut\
    \ interval33 = interval1;\n    let mut interval34 = interval2;\n    let mut interval35\
    \ = interval1;\n    let mut interval36 = interval2;\n    let mut interval37 =\
    \ interval1;\n    let mut interval38 = interval2;\n    let mut interval39 = interval1;\n\
    \    let mut interval40 = interval2;\n    let mut interval41 = interval1;\n  \
    \  let mut interval42 = interval2;\n    let mut interval43 = interval1;\n    let\
    \ mut interval44 = interval2;\n    let mut interval45 = interval1;\n    let mut\
    \ interval46 = interval2;\n    let mut interval47 = interval1;\n    let mut interval48\
    \ = interval2;\n    let mut interval49 = interval1;\n    let mut interval50 =\
    \ interval2;\n    let mut interval51 = interval1;\n    let mut interval52 = interval2;\n\
    \    let mut interval53 = interval1;\n    let mut interval54 = interval2;\n  \
    \  let mut interval55 = interval1;\n    let mut interval56 = interval2;\n    let\
    \ mut interval57 = interval1;\n    let mut interval58 = interval2;\n    let mu",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval_length = interval1_end - interval1_start;\n    let mut interval_length_2\
    \ = interval2_end - interval2_start;\n    let mut prime_number: isize = 1;\n \
    \   let mut prime_number_2: isize = 1;\n    let mut prime_number_3: isize = 1;\n\
    \    let mut prime_number_4: isize = 1;\n    let mut prime_number_5: isize = 1;\n\
    \    let mut prime_number_6: isize = 1;\n    let mut prime_number_7: isize = 1;\n\
    \    let mut prime_number_8: isize = 1;\n    let mut prime_number_9: isize = 1;\n\
    \    let mut prime_number_10: isize = 1;\n    let mut prime_number_11: isize =\
    \ 1;\n    let mut prime_number_12: isize = 1;\n    let mut prime_number_13: isize\
    \ = 1;\n    let mut prime_number_14: isize = 1;\n    let mut prime_number_15:\
    \ isize = 1;\n    let mut prime_number_16: isize = 1;\n    let mut prime_number_17:\
    \ isize = 1;\n    let mut prime_number_18: isize = 1;\n    let mut prime_number_19:\
    \ isize = 1;\n    let mut prime_number_20: isize = 1;\n    let mut prime_number_21:\
    \ isize = 1;\n    let mut prime_number_22: isize = 1;\n    let mut prime_number_23:\
    \ isize = 1;\n    let mut prime_number_24: isize = 1;\n    let mut prime_number_25:\
    \ isize = 1;\n    let mut prime_number_26: isize = 1;\n    let mut prime_number_27:\
    \ isize = 1;\n    let mut prime_number_28: isize = 1;\n    let mut prime_number_29:\
    \ isize = 1;\n    let mut prime_number_30: isize = 1;\n    let mut prime_number_31:\
    \ isize = 1;\n    let mut prime_number_32: isize = 1;\n    let mut prime_number_33:\
    \ isize = 1;\n    let mut prime_number_34: isize = 1;\n    let mut prime_number_35:\
    \ isize = 1;\n    let mut prime_number_36: isize = 1;\n    let mut prime_number_37:\
    \ isize = 1;\n    let mut prime_number_", "    let mut intervals = vec![];\n \
    \   intervals.push(interval1);\n    intervals.push(interval2);\n    let mut prime_numbers\
    \ = vec![];\n    let mut prime_numbers_len = prime_numbers.len();\n    let mut\
    \ prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_len = interval1_end - interval1_start;\n\
    \    let mut interval1_len = interval2_end - interval2_start;\n    let mut interval2_len\
    \ = interval1_end - interval1_start;\n    let mut prime_number: isize = 1;\n \
    \   let mut prime_number_len: isize = 1;\n    let mut prime_number_flag = true;\n\
    \    \n    while prime_number_flag {\n        if interval1_start <= interval2_start\
    \ {\n            intersection_start = interval1_start;\n            intersection_end\
    \ = interval1_end;\n            intersection_len += interval1_len;\n         \
    \   interval1_len += interval2_len;\n            interval2_len += interval1_len;\n\
    \            prime_number_flag = false;\n        } else {\n            intersection_start\
    \ = interval2_start;\n            intersection_end = interval2_end;\n        \
    \    intersection_len += interval2_len;\n            interval2_len += interval1_len;\n\
    \            interval1_len += interval2_len;\n            prime_number_flag =\
    \ false;\n        }\n    }\n    \n    if prime_number_len == 1 {\n        if intersection_len\
    \ == 1 {\n            return \"YES\";\n        } else {\n            return \"\
    NO\";\n        }\n    } else {\n        if intersection_len == 1 {\n         \
    \   return \"NO\";\n        } else {\n            return \"YES\";\n        }\n\
    \    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    let mut interval1_len = interval1_end -\
    \ interval1_start + 1;\n    let mut interval2_len = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_len > interval2_len {\n        interval1_len = interval2_len;\n\
    \    }\n\n    if interval1_len == 0 {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_len == 1 {\n        return \"YES\";\n    }\n\n    if interval1_len\
    \ == 2 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n\n    if interval1_len ==\
    \ 3 {\n        if interval1_start == interval2_start {\n            if interval1_end\
    \ == interval2_end {\n                return \"YES\";\n            }\n       \
    \     return \"NO\";\n        }\n        return \"NO\";\n    }\n\n    if interval1_len\
    \ == 4 {\n        if interval1_start == interval2_start {\n            if interval1_end\
    \ == interval2_end {\n                if interval1_end == interval2_end {\n  \
    \                  return \"YES\";\n                }\n                return\
    \ \"NO\";\n            }\n            return \"NO\";\n        }\n        return\
    \ \"NO\";\n    }\n\n    if interval1_len == 5 {\n        if interval1_start ==\
    \ interval2_start {\n            if interval1_end == interval2_end {\n       \
    \         if interval1_end == interval2_end {\n                    if interval1_end\
    \ == interval2_end {\n                        if interval1_end == interval2_end\
    \ {\n                            if interval1_end == interval2_end {\n       \
    \                         if interval1_end == interval2_end {\n              \
    \                      if interval1_end == interval2_end {\n                 \
    \                       return \"YES\";\n                                    }\n\
    \                                    return \"NO\";\n                        \
    \        }\n                                return \"NO\";\n                 \
    \           }\n                            return \"NO\";\n                  \
    \      }\n                        return \"NO\";\n                    }\n    \
    \                return \"NO\";\n                }\n                return \"\
    NO\";\n            }\n            return \"NO\";\n        }\n        return \"\
    NO\";\n    }\n\n    if interval1_", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_len =\
    \ interval1_end - interval1_start;\n    let mut interval1_len = interval2_end\
    \ - interval2_start;\n    let mut interval2_len = interval1_end - interval1_start;\n\
    \    let mut prime_number: isize = 1;\n    let mut prime_number_len: isize = 1;\n\
    \    let mut prime_number_flag: isize = 0;\n    let mut prime_number_flag2: isize\
    \ = 0;\n    let mut prime_number_flag3: isize = 0;\n    let mut prime_number_flag4:\
    \ isize = 0;\n    let mut prime_number_flag5: isize = 0;\n    let mut prime_number_flag6:\
    \ isize = 0;\n    let mut prime_number_flag7: isize = 0;\n    let mut prime_number_flag8:\
    \ isize = 0;\n    let mut prime_number_flag9: isize = 0;\n    let mut prime_number_flag10:\
    \ isize = 0;\n    let mut prime_number_flag11: isize = 0;\n    let mut prime_number_flag12:\
    \ isize = 0;\n    let mut prime_number_flag13: isize = 0;\n    let mut prime_number_flag14:\
    \ isize = 0;\n    let mut prime_number_flag15: isize = 0;\n    let mut prime_number_flag16:\
    \ isize = 0;\n    let mut prime_number_flag17: isize = 0;\n    let mut prime_number_flag18:\
    \ isize = 0;\n    let mut prime_number_flag19: isize = 0;\n    let mut prime_number_flag20:\
    \ isize = 0;\n    let mut prime_number_flag21: isize = 0;\n    let mut prime_number_flag22:\
    \ isize = 0;\n    let mut prime_number_flag23: isize = 0;\n    let mut prime_number_flag24:\
    \ isize = 0;\n    let mut prime_number_flag25: isize = 0;\n    let mut prime_number_flag26:\
    \ isize = 0;\n    let mut prime_number_flag27: isize = 0;\n    let mut prime_number_flag28:\
    \ isize = 0;\n    let mut prime_number_flag29: isize = 0;\n    let mut prime_number_flag30:\
    \ isize = 0;\n    let mut prime_", "    let mut interval_len = interval1[1] -\
    \ interval1[0] + 1;\n    let mut interval2_len = interval2[1] - interval2[0] +\
    \ 1;\n    if interval_len == 0 || interval2_len == 0 {\n        return \"NO\"\
    ;\n    }\n    if interval_len > interval2_len {\n        interval_len = interval2_len;\n\
    \    }\n    let mut interval_start = interval1[0];\n    let mut interval_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_start_prime = true;\n    let mut interval_end_prime\
    \ = true;\n    let mut interval2_start_prime = true;\n    let mut interval2_end_prime\
    \ = true;\n    while interval_start <= interval_end && interval2_start <= interval2_end\
    \ {\n        if interval_start == interval_end {\n            interval_start_prime\
    \ = false;\n        }\n        if interval2_start == interval2_end {\n       \
    \     interval2_start_prime = false;\n        }\n        if interval_start < interval_end\
    \ {\n            if interval_start < interval2_start {\n                interval_start_prime\
    \ = false;\n            }\n            if interval_end < interval2_end {\n   \
    \             interval_end_prime = false;\n            }\n        }\n        if\
    \ interval_start < interval2_start {\n            interval_start_prime = false;\n\
    \        }\n        if interval_end < interval2_end {\n            interval_end_prime\
    \ = false;\n        }\n        interval_start += 1;\n        interval_end += 1;\n\
    \        interval2_start += 1;\n        interval2_end += 1;\n    }\n    if interval_start_prime\
    \ && interval2_start_prime {\n        if interval_end_prime && interval2_end_prime\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval_start_prime && !interval2_start_prime {\n        return \"NO\"\
    ;\n    }\n    if interval_end_prime && !interval2_end_prime {\n        return\
    \ \"NO\";\n    }\n    if interval_start_prime && interval2_start_prime {\n   \
    \     return \"NO\";\n    }\n    if interval_end_prime && interval2_end_prime\
    \ {\n        return \"NO\";\n    }\n    if interval_start_prime && !interval2_start_prime\
    \ {\n        return \"NO\";\n    }\n    if interval_end_prime && !interval2_end_prime\
    \ {\n        return \"NO\";\n    }\n    if interval_start == interval_end {\n\
    \        return \"NO\";\n    }\n    if interval2_start == interval2_end {\n  \
    \      return \"NO\";\n    }\n    if interval_start < interval_end {\n       \
    \ return \"NO\";\n    }\n    if interval_start < interval", "    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval3 = interval1;\n\
    \    let mut interval4 = interval2;\n    let mut interval5 = interval1;\n    let\
    \ mut interval6 = interval2;\n    let mut interval7 = interval1;\n    let mut\
    \ interval8 = interval2;\n    let mut interval9 = interval1;\n    let mut interval10\
    \ = interval2;\n    let mut interval11 = interval1;\n    let mut interval12 =\
    \ interval2;\n    let mut interval13 = interval1;\n    let mut interval14 = interval2;\n\
    \    let mut interval15 = interval1;\n    let mut interval16 = interval2;\n  \
    \  let mut interval17 = interval1;\n    let mut interval18 = interval2;\n    let\
    \ mut interval19 = interval1;\n    let mut interval20 = interval2;\n    let mut\
    \ interval21 = interval1;\n    let mut interval22 = interval2;\n    let mut interval23\
    \ = interval1;\n    let mut interval24 = interval2;\n    let mut interval25 =\
    \ interval1;\n    let mut interval26 = interval2;\n    let mut interval27 = interval1;\n\
    \    let mut interval28 = interval2;\n    let mut interval29 = interval1;\n  \
    \  let mut interval30 = interval2;\n    let mut interval31 = interval1;\n    let\
    \ mut interval32 = interval2;\n    let mut interval33 = interval1;\n    let mut\
    \ interval34 = interval2;\n    let mut interval35 = interval1;\n    let mut interval36\
    \ = interval2;\n    let mut interval37 = interval1;\n    let mut interval38 =\
    \ interval2;\n    let mut interval39 = interval1;\n    let mut interval40 = interval2;\n\
    \    let mut interval41 = interval1;\n    let mut interval42 = interval2;\n  \
    \  let mut interval43 = interval1;\n    let mut interval44 = interval2;\n    let\
    \ mut interval45 = interval1;\n    let mut interval46 = interval2;\n    let mut\
    \ interval47 = interval1;\n    let mut interval48 = interval2;\n    let mut interval49\
    \ = interval1;\n    let mut interval50 = interval2;\n    let mut interval51 =\
    \ interval1;\n    let mut interval52 = interval2;\n    let mut interval53 = interval1;\n\
    \    let mut interval54 = interval2;\n    let mut interval55 = interval1;\n  \
    \  let mut interval56 = interval2;\n    let mut interval57 = interval1;\n    let\
    \ mut interval58 = interval2;\n    let mu", "    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    let mut\
    \ interval = interval1;\n    let mut interval2 = interval2;\n    let mut len =\
    \ 0;\n    while interval[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        if interval[0] == interval2[0] {\n            len += 1;\n           \
    \ interval[0] = interval1[1];\n            interval2[0] = interval2[1];\n    \
    \    } else {\n            interval[0] = interval1[0];\n            interval2[0]\
    \ = interval2[1];\n        }\n    }\n    if interval[0] == interval1[1] && interval2[0]\
    \ == interval2[1] {\n        len += 1;\n    }\n    if len % 2 == 0 {\n       \
    \ return \"NO\";\n    }\n    if len % 3 == 0 {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  \n    while interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n        if interval1_start == interval1_end {\n            interval1_prime\
    \ = false;\n        }\n        if interval2_start == interval2_end {\n       \
    \     interval2_prime = false;\n        }\n        if interval1_start < interval1_end\
    \ && interval2_start < interval2_end {\n            if interval1_start < interval1_end\
    \ {\n                intersection_start = interval1_start;\n                intersection_end\
    \ = interval1_end;\n                intersection_length += 1;\n            }\n\
    \            if interval2_start < interval2_end {\n                intersection_start\
    \ = interval2_start;\n                intersection_end = interval2_end;\n    \
    \            intersection_length += 1;\n            }\n        }\n        interval1_start\
    \ += 1;\n        interval1_end += 1;\n        interval2_start += 1;\n        interval2_end\
    \ += 1;\n    }\n    \n    if interval1_prime && interval2_prime {\n        if\
    \ intersection_length == interval1_length && intersection_length == interval2_length\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   return \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n    if interval1_start > interval1_end\
    \ {\n        return \"NO\";\n    }\n    let mut intersection_length = 1;\n   \
    \ while interval1_start <= interval1_end {\n        if interval2_start <= interval2_end\
    \ {\n            if interval1_start <= interval2_end {\n                if interval1_end\
    \ <= interval2_end {\n                    if interval1_start <= interval2_end\
    \ {\n                        if interval1_end <= interval2_end {\n           \
    \                 intersection_length += 1;\n                        }\n     \
    \               }\n                }\n            }\n        }\n        interval1_start\
    \ += 1;\n        interval1_end += 1;\n        interval2_start += 1;\n        interval2_end\
    \ += 1;\n    }\n    if intersection_length == 2 {\n        return \"YES\";\n \
    \   }\n    return \"NO\";", "    let mut intervals = vec![interval1, interval2];\n\
    \    let mut intervals_len = intervals.len();\n    let mut intervals_len2 = intervals_len\
    \ * intervals_len;\n    let mut intervals_len3 = intervals_len2 * intervals_len;\n\
    \    let mut intervals_len4 = intervals_len3 * intervals_len;\n    let mut intervals_len5\
    \ = intervals_len4 * intervals_len;\n    let mut intervals_len6 = intervals_len5\
    \ * intervals_len;\n    let mut intervals_len7 = intervals_len6 * intervals_len;\n\
    \    let mut intervals_len8 = intervals_len7 * intervals_len;\n    let mut intervals_len9\
    \ = intervals_len8 * intervals_len;\n    let mut intervals_len10 = intervals_len9\
    \ * intervals_len;\n    let mut intervals_len11 = intervals_len10 * intervals_len;\n\
    \    let mut intervals_len12 = intervals_len11 * intervals_len;\n    let mut intervals_len13\
    \ = intervals_len12 * intervals_len;\n    let mut intervals_len14 = intervals_len13\
    \ * intervals_len;\n    let mut intervals_len15 = intervals_len14 * intervals_len;\n\
    \    let mut intervals_len16 = intervals_len15 * intervals_len;\n    let mut intervals_len17\
    \ = intervals_len16 * intervals_len;\n    let mut intervals_len18 = intervals_len17\
    \ * intervals_len;\n    let mut intervals_len19 = intervals_len18 * intervals_len;\n\
    \    let mut intervals_len20 = intervals_len19 * intervals_len;\n    let mut intervals_len21\
    \ = intervals_len20 * intervals_len;\n    let mut intervals_len22 = intervals_len21\
    \ * intervals_len;\n    let mut intervals_len23 = intervals_len22 * intervals_len;\n\
    \    let mut intervals_len24 = intervals_len23 * intervals_len;\n    let mut intervals_len25\
    \ = intervals_len24 * intervals_len;\n    let mut intervals_len26 = intervals_len25\
    \ * intervals_len;\n    let mut intervals_len27 = intervals_len26 * intervals_len;\n\
    \    let mut intervals_len28 = intervals_len27 * intervals_len;\n    let mut intervals_len29\
    \ = intervals_len28 * intervals_len;\n    let mut intervals_len30 = intervals_len29\
    \ * intervals_len;\n    let mut intervals_len31 = intervals_len30 * interval",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    let mut prime_numbers = vec![];\n \
    \   \n    while interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            if interval2_start\
    \ < interval2_end {\n                if interval1_start < interval2_start {\n\
    \                    intersection_length += 1;\n                } else {\n   \
    \                 intersection_length += 1;\n                }\n            }\
    \ else {\n                intersection_length += 1;\n            }\n        }\
    \ else {\n            intersection_length += 1;\n        }\n        interval1_start\
    \ += 1;\n        interval1_end += 1;\n        interval2_start += 1;\n        interval2_end\
    \ += 1;\n    }\n    \n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval1_start == interval1_end {\n    \
    \            return \"YES\";\n            } else {\n                return \"\
    NO\";\n            }\n        } else {\n            return \"NO\";\n        }\n\
    \    } else {\n        if interval2_start == interval2_end {\n            return\
    \ \"NO\";\n        } else {\n            if intersection_length == 1 {\n     \
    \           return \"YES\";\n            } else {\n                return \"NO\"\
    ;\n            }\n        }\n    }", "    let mut interval1_start = interval1.0;\n\
    \    let mut interval1_end = interval1.1;\n    let mut interval2_start = interval2.0;\n\
    \    let mut interval2_end = interval2.1;\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut prime_number: isize = 1;\n    \n    while prime_number < interval1_length\
    \ && prime_number < interval2_length {\n        if interval1_start <= intersection_end\
    \ && intersection_end <= interval2_start {\n            intersection_length =\
    \ intersection_end - intersection_start;\n            prime_number += 1;\n   \
    \     }\n        if interval2_start <= intersection_end && intersection_end <=\
    \ interval1_start {\n            intersection_length = intersection_end - intersection_start;\n\
    \            prime_number += 1;\n        }\n        if intersection_start <= interval1_end\
    \ && interval1_end <= intersection_end {\n            intersection_length = intersection_end\
    \ - intersection_start;\n            prime_number += 1;\n        }\n        if\
    \ intersection_start <= interval2_end && interval2_end <= intersection_end {\n\
    \            intersection_length = intersection_end - intersection_start;\n  \
    \          prime_number += 1;\n        }\n        if intersection_start <= interval1_end\
    \ && interval1_end <= intersection_end {\n            intersection_length = intersection_end\
    \ - intersection_start;\n            prime_number += 1;\n        }\n        if\
    \ intersection_start <= interval2_end && interval2_end <= intersection_end {\n\
    \            intersection_length = intersection_end - intersection_start;\n  \
    \          prime_number += 1;\n        }\n        if intersection_start <= interval1_end\
    \ && interval1_end <= intersection_end {\n            intersection_length = intersection_end\
    \ - intersection_start;\n            prime_number += 1;\n        }\n        if\
    \ intersection_start <= interval2_end && interval2_end <= intersection_end {\n\
    \            intersection_length = intersection_end - intersection_start;\n  \
    \          prime_number += 1;\n        }\n        if intersection_start <= interval1_end\
    \ && interval1_end <= intersection_end {\n            intersection_length = intersection_end\
    \ - intersection_start;\n            prime_number += 1;\n        }\n        if\
    \ intersection_start <= interval2_end && interval2_end <= intersection_end {\n\
    \            intersection_length = intersection_end - intersection_start;\n  \
    \          prime_number += 1;\n        }\n        if intersection", "    let mut\
    \ intervals = vec![interval1, interval2];\n    let mut start = intervals[0].0;\n\
    \    let mut end = intervals[1].0;\n    let mut intersection = vec![start];\n\
    \    while start < end {\n        start = intervals[0].0;\n        end = intervals[1].0;\n\
    \        while start < end {\n            if intervals[0].0 != intervals[1].0\
    \ {\n                if intersection.contains(&start) {\n                    return\
    \ \"NO\";\n                }\n                intersection.push(start);\n    \
    \        }\n            start = intervals[0].1;\n            end = intervals[1].1;\n\
    \        }\n    }\n    return \"YES\";", "    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut intersection = interval1;\n \
    \   let mut interval_len = interval1.1;\n    let mut interval2_len = interval2.1;\n\
    \    let mut prime = true;\n    \n    while interval_len < interval2.1 {\n   \
    \     if interval_len == interval2.1 {\n            prime = false;\n         \
    \   break;\n        }\n        \n        if interval_len > interval2.1 {\n   \
    \         interval = interval2;\n            interval_len = interval2.1;\n   \
    \     }\n        \n        intersection = interval;\n        interval_len += interval_len;\n\
    \    }\n    \n    while interval2_len < interval1.1 {\n        if interval2_len\
    \ == interval1.1 {\n            prime = false;\n            break;\n        }\n\
    \        \n        if interval2_len > interval1.1 {\n            interval2 = interval1;\n\
    \            interval2_len = interval1.1;\n        }\n        \n        intersection\
    \ = interval2;\n        interval2_len += interval2_len;\n    }\n    \n    if prime\
    \ == true {\n        return \"YES\";\n    } else {\n        return \"NO\";\n \
    \   }", "    if interval1.0 < interval2.0 {\n        let (start, end) = interval1;\n\
    \        let (start2, end2) = interval2;\n        if start > end {\n         \
    \   (start, end) = (end, start);\n        }\n        if start2 > end2 {\n    \
    \        (start2, end2) = (end2, start2);\n        }\n        let mut start =\
    \ start;\n        let mut end = end;\n        let mut start2 = start2;\n     \
    \   let mut end2 = end2;\n        let mut length = 0;\n        while start < end\
    \ && start2 < end2 {\n            if start == start2 {\n                length\
    \ += 1;\n                start += 1;\n                start2 += 1;\n         \
    \   } else if end == end2 {\n                length += 1;\n                end\
    \ += 1;\n                end2 += 1;\n            } else {\n                if\
    \ start < start2 {\n                    start += 1;\n                } else {\n\
    \                    end += 1;\n                }\n                if end < end2\
    \ {\n                    end2 += 1;\n                } else {\n              \
    \      length += 1;\n                }\n            }\n        }\n        if length\
    \ == 2 {\n            if start == end {\n                return \"YES\";\n   \
    \         } else if start2 == end2 {\n                return \"YES\";\n      \
    \      } else {\n                return \"NO\";\n            }\n        } else\
    \ {\n            return \"NO\";\n        }\n    } else {\n        let (start,\
    \ end) = interval1;\n        let (start2, end2) = interval2;\n        if start\
    \ > end {\n            (start, end) = (end, start);\n        }\n        if start2\
    \ > end2 {\n            (start2, end2) = (end2, start2);\n        }\n        let\
    \ mut start = start;\n        let mut end = end;\n        let mut start2 = start2;\n\
    \        let mut end2 = end2;\n        let mut length = 0;\n        while start\
    \ < end && start2 < end2 {\n            if start == start2 {\n               \
    \ length += 1;\n                start += 1;\n                start2 += 1;\n  \
    \          } else if end == end2 {\n                length += 1;\n           \
    \     end += 1;\n                end2 += 1;\n            } else {\n          \
    \      if start < start2 {\n                    start += 1;\n                }\
    \ else {\n                    end += 1;\n                }\n                if\
    \ end < end2 {\n                    end2 += 1;\n                } else {\n   \
    \                 length += 1;\n                }\n            }\n        }\n\
    \        if length == 2 {\n            if start == end {\n                return\
    \ \"YES\";\n            } else if start2 == end2 {\n                return \"\
    YES\";\n            } else {\n                return \"NO\";\n            }\n\
    \        } else {\n            return \"NO\";\n        }\n    }", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_len = interval1_end - interval1_start;\n\
    \    let mut interval1_len = interval2_end - interval2_start;\n    let mut interval2_len\
    \ = interval1_end - interval1_start;\n    let mut prime_number: isize = 1;\n \
    \   let mut prime_number_len: isize = 1;\n    let mut prime_number_flag = true;\n\
    \    loop {\n        if interval1_end > interval2_start {\n            if interval1_end\
    \ < interval2_end {\n                intersection_start = interval1_start;\n \
    \               intersection_end = interval1_end;\n                intersection_len\
    \ = intersection_end - intersection_start;\n            } else {\n           \
    \     intersection_start = interval2_start;\n                intersection_end\
    \ = interval2_end;\n                intersection_len = intersection_end - intersection_start;\n\
    \            }\n        } else {\n            if interval2_end < interval1_end\
    \ {\n                intersection_start = interval2_start;\n                intersection_end\
    \ = interval2_end;\n                intersection_len = intersection_end - intersection_start;\n\
    \            } else {\n                intersection_start = interval1_start;\n\
    \                intersection_end = interval1_end;\n                intersection_len\
    \ = intersection_end - intersection_start;\n            }\n        }\n       \
    \ if intersection_len % prime_number == 0 {\n            prime_number_flag = true;\n\
    \        } else {\n            prime_number_flag = false;\n        }\n       \
    \ if prime_number_flag {\n            prime_number += 1;\n            prime_number_len\
    \ += 1;\n        }\n        if prime_number_len == interval1_len {\n         \
    \   return \"YES\";\n        }\n        if prime_number_len == interval2_len {\n\
    \            return \"NO\";\n        }\n    }", "    let mut interval1_start =\
    \ interval1.0;\n    let mut interval1_end = interval1.1;\n    let mut interval2_start\
    \ = interval2.0;\n    let mut interval2_end = interval2.1;\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut prime_number:\
    \ isize = 1;\n    let mut prime_number_found = false;\n    \n    while prime_number_found\
    \ == false {\n        if intersection_start > intersection_end {\n           \
    \ break;\n        }\n        \n        if interval1_start > interval2_end {\n\
    \            intersection_start = intersection_end;\n            intersection_end\
    \ = interval1_end;\n            intersection_length = intersection_end - intersection_start;\n\
    \        }\n        \n        if interval2_start > interval1_end {\n         \
    \   intersection_start = intersection_end;\n            intersection_end = interval2_end;\n\
    \            intersection_length = intersection_end - intersection_start;\n  \
    \      }\n        \n        if intersection_start == intersection_end {\n    \
    \        prime_number_found = true;\n        }\n        \n        if prime_number_found\
    \ == true {\n            prime_number += 1;\n        }\n    }\n    \n    if prime_number\
    \ == 1 {\n        return \"YES\";\n    }\n    \n    if prime_number == 2 {\n \
    \       return \"NO\";\n    }\n    \n    if prime_number == 3 {\n        return\
    \ \"YES\";\n    }\n    \n    if prime_number == 4 {\n        return \"NO\";\n\
    \    }\n    \n    if prime_number == 5 {\n        return \"YES\";\n    }\n   \
    \ \n    if prime_number == 6 {\n        return \"NO\";\n    }\n    \n    if prime_number\
    \ == 7 {\n        return \"YES\";\n    }\n    \n    if prime_number == 8 {\n \
    \       return \"NO\";\n    }\n    \n    if prime_number == 9 {\n        return\
    \ \"YES\";\n    }\n    \n    if prime_number == 10 {\n        return \"NO\";\n\
    \    }\n    \n    if prime_number == 11 {\n        return \"YES\";\n    }\n  \
    \  \n    if prime_number == 12 {\n        return \"NO\";\n    }\n    \n    if\
    \ prime_number == 13 {\n        return \"YES\";\n    }\n    \n    if prime_number\
    \ == 14 {\n        return \"NO\";\n    }\n    \n    if prime_number == 15 {\n\
    \        return \"YES\";\n    }\n    \n    if prime_number == 16 {\n        return\
    \ \"NO\";\n    }\n    \n    if prime_number == 17 {\n        return \"YES\";\n\
    \    }\n    ", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_length = 0;\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n    }\n    if\
    \ interval1_start <= interval1_end {\n        intersection_length = interval1_end\
    \ - interval1_start + 1;\n    }\n    if intersection_length == 2 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 1 {\n        return \"NO\";\n\
    \    }\n    if intersection_length == 0 {\n        return \"NO\";\n    }\n   \
    \ if intersection_length == 3 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 4 {\n        return \"YES\";\n    }\n    if intersection_length == 5 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 6 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 7 {\n        return \"YES\";\n\
    \    }\n    if intersection_length == 8 {\n        return \"YES\";\n    }\n  \
    \  if intersection_length == 9 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 10 {\n        return \"YES\";\n    }\n    if intersection_length == 11 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 12 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 13 {\n        return \"YES\"\
    ;\n    }\n    if intersection_length == 14 {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 15 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 16 {\n        return \"YES\";\n    }\n    if intersection_length == 17 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 18 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 19 {\n        return \"YES\"\
    ;\n    }\n    if intersection_length == 20 {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 21 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 22 {\n        return \"YES\";\n    }\n    if intersection_length == 100 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 200 {\n       \
    \ return \"YES\";\n    }\n    if intersection_length == 300 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 400 {\n        return \"YES\"\
    ;\n    }\n    if intersection_length == 500 {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 600", "    if interval1.start > interval1.end {\n\
    \        let tmp = interval1;\n        interval1 = interval2;\n        interval2\
    \ = tmp;\n    }\n    if interval2.start > interval2.end {\n        let tmp = interval2;\n\
    \        interval2 = interval1;\n        interval1 = tmp;\n    }\n    let mut\
    \ interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval_len\
    \ = interval1.end - interval1.start;\n    let mut interval2_len = interval2.end\
    \ - interval2.start;\n    let mut prime = true;\n    while interval_len > 0 ||\
    \ interval2_len > 0 {\n        if interval_len == 0 && interval2_len == 0 {\n\
    \            break;\n        }\n        if interval_len > 0 {\n            if\
    \ interval_len % interval2.start == 0 {\n                interval_len -= interval2.start;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    if interval2_len > 0 {\n            if interval2_len % interval.start ==\
    \ 0 {\n                interval2_len -= interval.start;\n            } else {\n\
    \                break;\n            }\n        }\n    }\n    if interval_len\
    \ == 0 {\n        return \"NO\";\n    }\n    if interval2_len == 0 {\n       \
    \ return \"NO\";\n    }\n    if prime {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    let (start, end) = interval1;\n    let (start_2, end_2) = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval_2 = interval2;\n    if\
    \ start > end {\n        interval = interval2;\n        interval_2 = interval1;\n\
    \    }\n    if start_2 > end_2 {\n        interval = interval1;\n        interval_2\
    \ = interval2;\n    }\n    if start > start_2 {\n        interval = interval2;\n\
    \        interval_2 = interval1;\n    }\n    if end > end_2 {\n        interval\
    \ = interval1;\n        interval_2 = interval2;\n    }\n    let mut interval_3\
    \ = interval;\n    let mut interval_4 = interval_2;\n    let mut interval_5 =\
    \ interval;\n    let mut interval_6 = interval_2;\n    let mut interval_7 = interval;\n\
    \    let mut interval_8 = interval_2;\n    let mut interval_9 = interval;\n  \
    \  let mut interval_10 = interval_2;\n    let mut interval_11 = interval;\n  \
    \  let mut interval_12 = interval_2;\n    let mut interval_13 = interval;\n  \
    \  let mut interval_14 = interval_2;\n    let mut interval_15 = interval;\n  \
    \  let mut interval_16 = interval_2;\n    let mut interval_17 = interval;\n  \
    \  let mut interval_18 = interval_2;\n    let mut interval_19 = interval;\n  \
    \  let mut interval_20 = interval_2;\n    let mut interval_21 = interval;\n  \
    \  let mut interval_22 = interval_2;\n    let mut interval_23 = interval;\n  \
    \  let mut interval_24 = interval_2;\n    let mut interval_25 = interval;\n  \
    \  let mut interval_26 = interval_2;\n    let mut interval_27 = interval;\n  \
    \  let mut interval_28 = interval_2;\n    let mut interval_29 = interval;\n  \
    \  let mut interval_30 = interval_2;\n    let mut interval_31 = interval;\n  \
    \  let mut interval_32 = interval_2;\n    let mut interval_33 = interval;\n  \
    \  let mut interval_34 = interval_2;\n    let mut interval_35 = interval;\n  \
    \  let mut interval_36 = interval_2;\n    let mut interval_37 = interval;\n  \
    \  let mut interval_38 = interval_2;\n    let mut interval_39 = interval;\n  \
    \  let mut interval_40 = interval_2;\n    let mut interval_41 = ", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_len = interval1_end - interval1_start;\n\
    \    let mut prime_number: isize = 1;\n    \n    while intersection_end < interval2_start\
    \ {\n        intersection_end += 1;\n    }\n    \n    while intersection_start\
    \ < interval2_end {\n        intersection_start += 1;\n    }\n    \n    if intersection_start\
    \ > intersection_end {\n        return \"NO\";\n    }\n    \n    while intersection_len\
    \ > 0 {\n        if interval1_start < intersection_end {\n            if interval1_end\
    \ > intersection_start {\n                prime_number += 1;\n            }\n\
    \            intersection_len -= 1;\n        }\n        \n        if intersection_start\
    \ < interval1_end {\n            if interval2_start < intersection_end {\n   \
    \             prime_number += 1;\n            }\n            intersection_len\
    \ -= 1;\n        }\n        \n        if intersection_start > interval1_end {\n\
    \            if interval2_end < intersection_start {\n                prime_number\
    \ += 1;\n            }\n            intersection_len -= 1;\n        }\n      \
    \  \n        if intersection_end > interval1_end {\n            if interval2_start\
    \ < intersection_start {\n                prime_number += 1;\n            }\n\
    \            intersection_len -= 1;\n        }\n        \n        if intersection_end\
    \ < interval1_start {\n            if interval1_end > intersection_start {\n \
    \               prime_number += 1;\n            }\n            intersection_len\
    \ -= 1;\n        }\n    }\n    \n    if prime_number == 1 {\n        return \"\
    YES\";\n    } else {\n        return \"NO\";\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval1_start\
    \ = interval2_start;\n    }\n\n    if interval1_end < interval2_start {\n    \
    \    interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n\n    if interval1_end < interval2_end {\n      \
    \  interval1_end = interval2_end;\n    }\n\n    if interval1_start == interval1_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval1_end {\n\
    \        let mut prime = true;\n        let mut prime_length = 1;\n        let\
    \ mut prime_start = interval1_start;\n        let mut prime_end = interval1_end;\n\
    \n        while prime_start < prime_end {\n            if prime_start % prime_length\
    \ == 0 {\n                prime = false;\n                break;\n           \
    \ }\n            prime_start += prime_length;\n            prime_length += 1;\n\
    \        }\n\n        if prime {\n            return \"YES\";\n        }\n   \
    \ } else {\n        let mut prime = true;\n        let mut prime_length = 1;\n\
    \        let mut prime_start = interval1_end;\n        let mut prime_end = interval1_start;\n\
    \n        while prime_start < prime_end {\n            if prime_start % prime_length\
    \ == 0 {\n                prime = false;\n                break;\n           \
    \ }\n            prime_start += prime_length;\n            prime_length += 1;\n\
    \        }\n\n        if prime {\n            return \"YES\";\n        }\n   \
    \ }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_length = 0;\n    \n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            interval1_start += 1;\n        } else {\n   \
    \         interval1_end += 1;\n        }\n        if interval2_start < interval2_end\
    \ {\n            interval2_start += 1;\n        } else {\n            interval2_end\
    \ += 1;\n        }\n        intersection_length += 1;\n    }\n    \n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end - 1;\n    }\n   \
    \ if interval2_start > interval2_end {\n        interval2_start = interval2_end\
    \ - 1;\n    }\n    \n    if intersection_length == 0 {\n        return \"NO\"\
    ;\n    }\n    \n    if intersection_length == 1 {\n        return \"YES\";\n \
    \   }\n    \n    if interval1_start == interval1_end {\n        return \"YES\"\
    ;\n    }\n    \n    if interval2_start == interval2_end {\n        return \"YES\"\
    ;\n    }\n    \n    if interval1_start < interval1_end {\n        if interval2_start\
    \ < interval2_end {\n            if interval1_start < interval2_start {\n    \
    \            return \"YES\";\n            }\n            return \"NO\";\n    \
    \    }\n        return \"NO\";\n    }\n    \n    if interval2_start < interval2_end\
    \ {\n        return \"NO\";\n    }\n    \n    return \"NO\";", "    let (start,\
    \ end) = interval1;\n    let (start2, end2) = interval2;\n    let start = start..end;\n\
    \    let start2 = start2..end2;\n    let intersection = start.intersection(&start2);\n\
    \    if intersection.is_empty() {\n        return \"NO\";\n    }\n    let intersection\
    \ = intersection.iter().map(|x| x.1).collect::<Vec<_>>();\n    if intersection.iter().filter(|x|\
    \ *x.is_prime()).count() == intersection.len() {\n        return \"YES\";\n  \
    \  }\n    return \"NO\";", "    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut prime = true;\n    loop {\n        if interval1[0]\
    \ < interval2[0] {\n            interval = interval2;\n            interval2 =\
    \ interval1;\n            interval1 = interval;\n        }\n        if interval1[1]\
    \ > interval2[1] {\n            interval = interval2;\n            interval2 =\
    \ interval1;\n            interval1 = interval;\n        }\n        if interval1[0]\
    \ >= interval2[1] {\n            prime = false;\n            break;\n        }\n\
    \    }\n    if prime {\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   let mut intervals = vec![interval1, interval2];\n    let mut intervals_len\
    \ = intervals.len();\n    let mut intervals_len = intervals_len as usize;\n  \
    \  let mut prime_numbers = vec![];\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers_len as usize;\n    let mut prime_numbers_len\
    \ = prime_numbers_len as usize;\n    let mut prime_numbers_len = prime_numbers_len\
    \ as usize;\n    let mut prime_numbers_len = prime_numbers_len as usize;\n   \
    \ let mut prime_numbers_len = prime_numbers_len as usize;\n    let mut prime_numbers_len\
    \ = prime_numbers_len as usize;\n    let mut prime_numbers_len = prime_numbers_len\
    \ as usize;\n    let mut prime_numbers_len = prime_numbers_len as usize;\n   \
    \ let mut prime_numbers_len = prime_numbers_len as usize;\n    let mut prime_numbers_len\
    \ = prime_numbers_len as usize;\n    let mut prime_numbers_len = prime_numbers_len\
    \ as usize;\n    let mut prime_numbers_len = prime_numbers_len as usize;\n   \
    \ let mut prime_numbers_len = prime_numbers_len as usize;\n    let mut prime_numbers_len\
    \ = prime_numbers_len as usize;\n    let mut prime_numbers_len = prime_numbers_len\
    \ as usize;\n    let mut prime_numbers_len = prime_numbers_len as usize;\n   \
    \ let mut prime_numbers_len = prime_numbers_len as usize;\n    let mut prime_numbers_len\
    \ = prime_numbers_len as usize;\n    let mut prime_numbers_len = prime_numbers_len\
    \ as usize;\n    let mut prime_numbers_len = prime_numbers_len as usize;\n   \
    \ let mut prime_numbers_len = prime_numbers_len as usize;\n    let mut prime_numbers_len\
    \ = prime_numbers_len as usize;\n    let mut prime_numbers_len = prime_numbers_len\
    \ as usize;\n    let mut prime_numbers_len = prime_numbers_len as usize;\n   \
    \ let mut prime_numbers_len = prime_numbers_len as usize;\n    let mut prime_numbers_len\
    \ = prime_numbers_len as usize;\n    let mut prime_numbers_len = prime", "   \
    \ let mut interval_len = interval1[1] - interval1[0] + 1;\n    let mut interval2_len\
    \ = interval2[1] - interval2[0] + 1;\n    let mut intersection_len = 0;\n    \n\
    \    if interval_len > interval2_len {\n        interval_len = interval2_len;\n\
    \    }\n    \n    for i in 0..interval_len {\n        if interval1[0] <= i &&\
    \ i <= interval1[1] {\n            intersection_len += 1;\n        }\n    }\n\
    \    \n    for i in 0..interval2_len {\n        if interval2[0] <= i && i <= interval2[1]\
    \ {\n            intersection_len += 1;\n        }\n    }\n    \n    if intersection_len\
    \ == interval_len {\n        return \"YES\";\n    }\n    else {\n        return\
    \ \"NO\";\n    }", "    if interval1.start >= interval1.end || interval2.start\
    \ >= interval2.end {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval3 = interval1;\n    let\
    \ mut interval4 = interval2;\n    let mut interval5 = interval1;\n    let mut\
    \ interval6 = interval2;\n    let mut interval7 = interval1;\n    let mut interval8\
    \ = interval2;\n    let mut interval9 = interval1;\n    let mut interval10 = interval2;\n\
    \    let mut interval11 = interval1;\n    let mut interval12 = interval2;\n  \
    \  let mut interval13 = interval1;\n    let mut interval14 = interval2;\n    let\
    \ mut interval15 = interval1;\n    let mut interval16 = interval2;\n    let mut\
    \ interval17 = interval1;\n    let mut interval18 = interval2;\n    let mut interval19\
    \ = interval1;\n    let mut interval20 = interval2;\n    let mut interval21 =\
    \ interval1;\n    let mut interval22 = interval2;\n    let mut interval23 = interval1;\n\
    \    let mut interval24 = interval2;\n    let mut interval25 = interval1;\n  \
    \  let mut interval26 = interval2;\n    let mut interval27 = interval1;\n    let\
    \ mut interval28 = interval2;\n    let mut interval29 = interval1;\n    let mut\
    \ interval30 = interval2;\n    let mut interval31 = interval1;\n    let mut interval32\
    \ = interval2;\n    let mut interval33 = interval1;\n    let mut interval34 =\
    \ interval2;\n    let mut interval35 = interval1;\n    let mut interval36 = interval2;\n\
    \    let mut interval37 = interval1;\n    let mut interval38 = interval2;\n  \
    \  let mut interval39 = interval1;\n    let mut interval40 = interval2;\n    let\
    \ mut interval41 = interval1;\n    let mut interval42 = interval2;\n    let mut\
    \ interval43 = interval1;\n    let mut interval44 = interval2;\n    let mut interval45\
    \ = interval1;\n    let mut interval46 = interval2;\n    let mut interval47 =\
    \ interval1;\n    let mut interval48 = interval2;\n    let mut interval49 = interval1;\n\
    \    let mut interval50 = interval2;\n    let mut interval51 = interval1;\n  \
    \  let mut interval52 = interval2;\n    let mut interval53 = interval1;\n    let\
    \ mut interval54 = interval2;\n    let mut interval55 = interval1;\n    let mut\
    \ interval5", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n\n    if interval1_start ", "    let mut interval1_start\
    \ = interval1.0;\n    let mut interval1_end = interval1.1;\n    let mut interval2_start\
    \ = interval2.0;\n    let mut interval2_end = interval2.1;\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n\n    if interval1_end < interval2_start {\n    \
    \    interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"NO\";\n        } else {\n       \
    \     return \"YES\";\n        }\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \n    if interval1_length == interval2_length {\n        if interval1_start <\
    \ interval2_start {\n            interval1_length = interval2_end - interval1_start;\n\
    \        } else {\n            interval2_length = interval1_end - interval2_start;\n\
    \        }\n    }\n\n    if interval1_length == interval2_length {\n        if\
    \ interval1_start < interval2_start {\n            interval1_length = interval2_end\
    \ - interval1_start;\n        } else {\n            interval2_length = interval1_end\
    \ - interval2_start;\n        }\n    }\n\n    if interval1_length == interval2_length\
    \ {\n        if interval1_start < interval2_start {\n            interval1_length\
    \ = interval2_end - interval1_start;\n        } else {\n            interval2_length\
    \ = interval1_end - interval2_start;\n        }\n    }\n\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start < interval2_start {\n    \
    \        interval1_length = interval2_end - interval1_start;\n        } else {\n\
    \            interval2_length = interval1_end - interval2_start;\n        }\n\
    \    }\n\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ < interval2_start {\n            interval1_length = interval2_end - interval1_start;\n\
    \        } else {\n            interval2_length = interval1_end - interval2_start;\n\
    \        }\n    }\n\n    if interval1_length == interval2_length {\n        if\
    \ interval1_start < interval2_start {\n            interval1_length = interval2_end\
    \ - interval1_start;\n        } else {\n            interval2_length = interval1_end\
    \ - interval2_start;\n        }\n    }\n\n    if interval1_length == interval2_length\
    \ {\n        if interval1_start < interval2_start {\n            interval1_length\
    \ = interval2_end - interval1_start;\n        } else {\n            interval2_length\
    \ = interval1_end - interval2_start;\n        }\n    }\n\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start < interval2_start {\n", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end < interval2_start {\n        return \"NO\";\n \
    \   }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end < interval2_end {\n        return \"YES\";\n    }\n\
    \n    if interval1_start > interval2_start {\n        return \"YES\";\n    }\n\
    \n    if interval1_start < interval2_start {\n        return \"YES\";\n    }\n\
    \n    return \"YES\";", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval_length = interval1_end\
    \ - interval1_start;\n    let mut interval_length2 = interval2_end - interval2_start;\n\
    \    if interval_length < interval_length2 {\n        interval_length = interval_length2;\n\
    \        interval_length2 = interval1_end - interval1_start;\n    }\n    if interval_length\
    \ == 0 {\n        return \"NO\";\n    }\n    if interval_length2 == 0 {\n    \
    \    return \"NO\";\n    }\n    if interval1_start > interval2_start {\n     \
    \   interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        return \"NO\";\n  \
    \  }\n    if interval2_start == interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        return \"NO\";\n    }\n    if interval2_start == interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n \
    \       interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        return \"NO\";\n  \
    \  }\n    if interval2_start == interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_end > interval",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"NO\";\n        } else {\n       \
    \     return \"YES\";\n        }\n    }\n\n    let mut prime_number: isize = 0;\n\
    \    let mut prime_number_counter: isize = 0;\n    let mut prime_number_counter2:\
    \ isize = 0;\n\n    while prime_number_counter < interval1_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"NO\";\n        }\n\n        if interval1_start\
    \ < interval2_end {\n            if interval1_start % interval2_start == 0 {\n\
    \                prime_number += 1;\n                prime_number_counter += 1;\n\
    \            }\n        }\n\n        if interval1_end < interval2_end {\n    \
    \        if interval1_end % interval2_end == 0 {\n                prime_number\
    \ += 1;\n                prime_number_counter += 1;\n            }\n        }\n\
    \n        if interval1_start > interval2_end {\n            if interval1_start\
    \ % interval2_end == 0 {\n                prime_number += 1;\n               \
    \ prime_number_counter += 1;\n            }\n        }\n\n        if interval1_end\
    \ > interval2_end {\n            if interval1_end % interval2_end == 0 {\n   \
    \             prime_number += 1;\n                prime_number_counter += 1;\n\
    \            }\n        }\n\n        if interval1_start < interval2_end {\n  \
    \          if interval1_start % interval2_end == 0 {\n                prime_number\
    \ += 1;\n                prime_number_counter += 1;\n            }\n        }\n\
    \n        if interval1_end > interval2_end {\n            if interval1_end % interval2_end\
    \ == 0 {\n                prime_number += 1;\n                prime_number_counter\
    \ += 1;\n            }\n        }\n\n        if interval1_start == interval2_start\
    \ {\n            if interval1_end == interval2_end {\n                prime_number\
    \ += 1;\n                prime_number_counter += 1;\n            }\n        }\n\
    \n        if interval1_end == interval2_end {\n            if interval1_start\
    \ == interval2_start {\n                prime_number += 1;\n                prime_number_counter\
    \ += 1;\n            }\n        }\n\n        if interval", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ prime_number: isize = 1;\n    let mut prime_number_found = false;\n    while\
    \ prime_number_found == false {\n        if interval1_start < interval2_start\
    \ {\n            intersection_start = interval1_start;\n            interval1_start\
    \ += 1;\n        } else {\n            intersection_start = interval2_start;\n\
    \            interval2_start += 1;\n        }\n        if intersection_start >\
    \ interval1_end {\n            intersection_end = interval1_end;\n           \
    \ interval1_end += 1;\n        } else {\n            intersection_end = interval2_end;\n\
    \            interval2_end += 1;\n        }\n        if intersection_end > interval1_end\
    \ {\n            intersection_end = interval1_end;\n            interval1_end\
    \ += 1;\n        } else {\n            intersection_end = interval2_end;\n   \
    \         interval2_end += 1;\n        }\n        if intersection_start == intersection_end\
    \ {\n            prime_number_found = true;\n        }\n        if prime_number_found\
    \ == false {\n            prime_number += 1;\n        }\n    }\n    if prime_number\
    \ == 1 {\n        return \"NO\";\n    } else {\n        return \"YES\";\n    }",
  "    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval_len = interval1.0;\n    let mut interval2_len = interval2.0;\n\
    \    let mut prime = true;\n    let mut prime_len = prime_len;\n    let mut prime_len\
    \ = prime_len;\n    let mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n\
    \    let mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let\
    \ mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let mut\
    \ prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let mut prime_len\
    \ = prime_len;\n    let mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n\
    \    let mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let\
    \ mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let mut\
    \ prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let mut prime_len\
    \ = prime_len;\n    let mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n\
    \    let mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let\
    \ mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let mut\
    \ prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let mut prime_len\
    \ = prime_len;\n    let mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n\
    \    let mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let\
    \ mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let mut\
    \ prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let mut prime_len\
    \ = prime_len;\n    let mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n\
    \    let mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let\
    \ mut prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let mut\
    \ prime_len = prime_len;\n    let mut prime_len = prime_len;\n    let mut prime_len\
    \ = prime_len;\n", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n    }\n\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval1_start = interval2_end;\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }\n    }\n\n    let mut\
    \ interval1_length = interval1_end - interval1_start + 1;\n    let mut interval2_length\
    \ = interval2_end - interval2_start + 1;\n\n    if interval1_length == interval2_length\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_length\
    \ < interval2_length {\n        interval1_length = interval2_length;\n       \
    \ interval2_length = interval1_length;\n    }\n\n    let mut prime_numbers = vec![false;\
    \ interval1_length];\n\n    for i in 0..interval1_length {\n        if interval1_start\
    \ == interval2_start {\n            prime_numbers[i] = true;\n        } else {\n\
    \            if prime_numbers[interval1_start - i] {\n                prime_numbers[i]\
    \ = true;\n            } else {\n                prime_numbers[i] = false;\n \
    \           }\n        }\n    }\n\n    if prime_numbers[interval1_length] {\n\
    \        return \"YES\";\n    } else {\n        return \"NO\";\n    }", "    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval_len\
    \ = interval1.0;\n    let mut interval2_len = interval2.0;\n    let mut prime_number:\
    \ isize = 1;\n    \n    while interval_len < interval2.0 {\n        if interval_len\
    \ == interval2.0 {\n            prime_number = interval_len;\n            break;\n\
    \        }\n        interval_len += interval1.0;\n    }\n    \n    while interval2_len\
    \ < interval1.0 {\n        if interval2_len == interval1.0 {\n            prime_number\
    \ = interval2_len;\n            break;\n        }\n        interval2_len += interval2.0;\n\
    \    }\n    \n    if prime_number == 1 {\n        return \"NO\";\n    }\n    \n\
    \    if prime_number == interval_len {\n        return \"YES\";\n    }\n    \n\
    \    if prime_number == interval2_len {\n        return \"YES\";\n    }\n    \n\
    \    return \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval_length = interval1_end\
    \ - interval1_start;\n    let mut interval_length_2 = interval2_end - interval2_start;\n\
    \    if interval_length == interval_length_2 {\n        if interval1_start < interval2_start\
    \ {\n            interval1_start = interval2_start;\n        } else {\n      \
    \      interval1_end = interval2_end;\n        }\n    }\n    if interval1_end\
    \ > interval2_end {\n        interval1_end = interval2_end;\n    }\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ < interval2_end {\n            interval2_start = interval2_end;\n        } else\
    \ {\n            interval2_end = interval2_start;\n        }\n    }\n    if interval2_start\
    \ < interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval2_end\
    \ > interval2_start {\n        interval2_end = interval2_start;\n    }\n    if\
    \ interval1_start == interval1_end {\n        if interval2_start < interval2_end\
    \ {\n            interval2_start = interval2_end;\n        } else {\n        \
    \    interval2_end = interval2_start;\n        }\n    }\n    if interval2_start\
    \ < interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval2_end\
    \ > interval2_start {\n        interval2_end = interval2_start;\n    }\n    if\
    \ interval1_start == interval1_end {\n        if interval2_start < interval2_end\
    \ {\n            interval2_start = interval2_end;\n        } else {\n        \
    \    interval2_end = interval2_start;\n        }\n    }\n    if interval2_start\
    \ < interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval2_end\
    \ > interval2_start {\n        interval2_end = interval2_start;\n    }\n    if\
    \ interval1_start == interval1_end {\n        if interval2_start < interval2_end\
    \ {\n            interval2_start = interval2_end;\n        } else {\n        \
    \    interval2_end = interval2_start;\n        }\n    }\n    if interval2_start\
    \ < interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval2_end\
    \ > interval2_start {\n        interval2_end = interval2_start;\n    }\n    if\
    \ interval1_start == interval1_end {\n        if interval2_start < ", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval_length = interval1_end - interval1_start + interval2_end\
    \ - interval2_start;\n    if interval_length == 0 {\n        return \"NO\";\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_start > interval1_end {\n        return \"NO\";\n   \
    \ }\n    if interval2_start > interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\
    \    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n   \
    \ if interval1_start < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start < interval1_end {\n        interval1_start = interval1_end;\n\
    \        interval1_end = interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        return \"YES\";\n    }\n    if interval2_start < interval2_end {\n\
    \        interval2_start = interval2_end;\n        interval2_end = interval2_end;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \        interval2_end = interval2_end;\n    }\n    if interval2_start < interval2_end\
    \ {\n        interval2_start = interval2_end;\n        interval2_end = interval2_end;\n\
    \    }\n    if interval2_start == interval2_end {\n        return \"YES\";\n \
    \   }\n    if interval1_start < interval1_end {\n        interval1_start = interval1_end;\n\
    \        interval1_end = interval1_end;\n    }\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        return \"YES\";\n \
    \   }\n    if interval2_start < interval2_end {\n        interval2_start = interval2_end;\n\
    \        interval2_end = interval2_end;\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start = interval2_end;\n        interval", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = 0;\n    let mut intersection_end = 0;\n    let\
    \ mut prime_number: isize = 1;\n    let mut prime_number_counter: isize = 1;\n\
    \    let mut prime_number_counter2: isize = 1;\n    let mut prime_number_counter3:\
    \ isize = 1;\n    let mut prime_number_counter4: isize = 1;\n    let mut prime_number_counter5:\
    \ isize = 1;\n    let mut prime_number_counter6: isize = 1;\n    let mut prime_number_counter7:\
    \ isize = 1;\n    let mut prime_number_counter8: isize = 1;\n    let mut prime_number_counter9:\
    \ isize = 1;\n    let mut prime_number_counter10: isize = 1;\n    let mut prime_number_counter11:\
    \ isize = 1;\n    let mut prime_number_counter12: isize = 1;\n    let mut prime_number_counter13:\
    \ isize = 1;\n    let mut prime_number_counter14: isize = 1;\n    let mut prime_number_counter15:\
    \ isize = 1;\n    let mut prime_number_counter16: isize = 1;\n    let mut prime_number_counter17:\
    \ isize = 1;\n    let mut prime_number_counter18: isize = 1;\n    let mut prime_number_counter19:\
    \ isize = 1;\n    let mut prime_number_counter20: isize = 1;\n    let mut prime_number_counter21:\
    \ isize = 1;\n    let mut prime_number_counter22: isize = 1;\n    let mut prime_number_counter23:\
    \ isize = 1;\n    let mut prime_number_counter24: isize = 1;\n    let mut prime_number_counter25:\
    \ isize = 1;\n    let mut prime_number_counter26: isize = 1;\n    let mut prime_number_counter27:\
    \ isize = 1;\n    let mut prime_number_counter28: isize = 1;\n    let mut prime_number_counter29:\
    \ isize = 1;\n    let mut prime_number_counter30: isize = 1;\n    let mut prime_number_counter31:\
    \ isize = 1;\n    let mut prime_number_counter32: isize = 1;\n    let mut prime_number_counter33:\
    \ isize = 1;\n    let mut prime_number_counter34: isize = 1;\n    let mut prime_number_counter35",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end < interval2_end {\n        let mut interval1_length\
    \ = interval1_end - interval1_start;\n        let mut interval2_length = interval2_end\
    \ - interval2_start;\n\n        if interval1_length == interval2_length {\n  \
    \          if interval1_start <= interval2_start {\n                return \"\
    NO\";\n            }\n            return \"YES\";\n        }\n\n        if interval1_length\
    \ < interval2_length {\n            interval1_length = interval2_length;\n   \
    \         interval2_length = interval1_length;\n        }\n\n        let mut interval1_prime\
    \ = true;\n        let mut interval2_prime = true;\n\n        for i in 0..interval1_length\
    \ {\n            if interval1_start + i == interval2_start {\n               \
    \ interval1_prime = false;\n            }\n        }\n\n        for i in 0..interval2_length\
    \ {\n            if interval2_start + i == interval1_end {\n                interval2_prime\
    \ = false;\n            }\n        }\n\n        if interval1_prime && interval2_prime\
    \ {\n            return \"YES\";\n        }\n\n        if interval1_prime && !interval2_prime\
    \ {\n            return \"NO\";\n        }\n\n        if !interval1_prime && interval2_prime\
    \ {\n            return \"NO\";\n        }\n\n        if !interval1_prime && !interval2_prime\
    \ {\n            return \"NO\";\n        }\n    }\n\n    return \"NO\";", "  \
    \  let mut interval = interval1;\n    let mut interval2 = interval2;\n    if interval1.0\
    \ > interval2.0 {\n        interval = interval2;\n        interval2 = interval1;\n\
    \    }\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    if interval1.0 > interval2.0 {\n        interval = interval2;\n        interval2\
    \ = interval1;\n    }\n    if interval1.0 < interval2.0 {\n        interval =\
    \ interval1;\n        interval2 = interval2;\n    }\n    if interval1.0 < interval2.0\
    \ {\n        interval = interval1;\n        interval2 = interval2;\n    }\n  \
    \  if interval1.0 < interval2.0 {\n        interval = interval1;\n        interval2\
    \ = interval2;\n    }\n    if interval1.0 < interval2.0 {\n        interval =\
    \ interval1;\n        interval2 = interval2;\n    }\n    if interval1.0 < interval2.0\
    \ {\n        interval = interval1;\n        interval2 = interval2;\n    }\n  \
    \  if interval1.0 < interval2.0 {\n        interval = interval1;\n        interval2\
    \ = interval2;\n    }\n    if interval1.0 < interval2.0 {\n        interval =\
    \ interval1;\n        interval2 = interval2;\n    }\n    if interval1.0 < interval2.0\
    \ {\n        interval = interval1;\n        interval2 = interval2;\n    }\n  \
    \  if interval1.0 < interval2.0 {\n        interval = interval1;\n        interval2\
    \ = interval2;\n    }\n    if interval1.0 < interval2.0 {\n        interval =\
    \ interval1;\n        interval2 = interval2;\n    }\n    if interval1.0 < interval2.0\
    \ {\n        interval = interval1;\n        interval2 = interval2;\n    }\n  \
    \  if interval1.0 < interval2.0 {\n        interval = interval1;\n        interval2\
    \ = interval2;\n    }\n    if interval1.0 < interval2.0 {\n        interval =\
    \ interval1;\n        interval2 = interval2;\n    }\n    if interval1.0 < interval2.0\
    \ {\n        interval = interval1;\n        interval2 = interval2;\n    }\n  \
    \  if interval1.0 < interval2.0 {\n        interval = interval1;\n        interval2\
    \ = interval2;\n    }\n    if interval1.0 < interval2.0 {\n        interval =\
    \ interval1;\n        interval2 = interval2;\n    }\n    if interval1.0 < interval2.0\
    \ {\n        interval = interval1;\n        interval2 = interval2;\n    }\n  \
    \  if interval1.0 < interval2.0 {\n        interval = interval1;\n        interval2\
    \ = interval2;\n    }\n    if interval1.0 < interval2.0 {\n        interval =\
    \ interval1;\n        interval2 = interval2;\n    }\n    if interval1.0 < interval2.0\
    \ {\n        interval = interval1;\n        interval", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = 0;\n    let mut intersection_end = 0;\n    let mut intersection_length = 0;\n\
    \    let mut prime_number = 0;\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            if interval2_start < interval2_end {\n                if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \ intersection_start = interval1_start;\n                    intersection_end\
    \ = interval1_end;\n                    intersection_length = interval1_end -\
    \ intersection_start;\n                    prime_number = 1;\n               \
    \ }\n                else {\n                    intersection_start = interval2_start;\n\
    \                    intersection_end = interval2_end;\n                    intersection_length\
    \ = intersection_end - intersection_start;\n                    prime_number =\
    \ 0;\n                }\n            }\n            else {\n                intersection_start\
    \ = interval1_start;\n                intersection_end = interval1_end;\n    \
    \            intersection_length = interval1_end - intersection_start;\n     \
    \           prime_number = 0;\n            }\n        }\n        else {\n    \
    \        intersection_start = interval2_start;\n            intersection_end =\
    \ interval2_end;\n            intersection_length = intersection_end - intersection_start;\n\
    \            prime_number = 0;\n        }\n        \n        interval1_start +=\
    \ 1;\n        interval1_end += 1;\n        interval2_start += 1;\n        interval2_end\
    \ += 1;\n    }\n    \n    if prime_number == 1 {\n        return \"YES\";\n  \
    \  }\n    else {\n        return \"NO\";\n    }", "    let mut interval1_start\
    \ = interval1.0;\n    let mut interval1_end = interval1.1;\n    let mut interval2_start\
    \ = interval2.0;\n    let mut interval2_end = interval2.1;\n\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n    }\n\n    if\
    \ interval1_start < interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start == interval1_end {\n        return \"NO\";\n\
    \    }\n\n    if interval2_start == interval2_end {\n        return \"NO\";\n\
    \    }\n\n    let mut interval1_length = interval1_end - interval1_start;\n  \
    \  let mut interval2_length = interval2_end - interval2_start;\n\n    if interval1_length\
    \ == interval2_length {\n        return \"NO\";\n    }\n\n    if interval1_length\
    \ < interval2_length {\n        interval1_length = interval2_length;\n    }\n\n\
    \    if interval1_length == 2 {\n        return \"YES\";\n    }\n\n    let mut\
    \ interval1_prime = true;\n    let mut interval2_prime = true;\n\n    if interval1_length\
    \ == 2 {\n        return \"YES\";\n    }\n\n    if interval1_length == 1 {\n \
    \       return \"NO\";\n    }\n\n    if interval2_length == 1 {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_length == interval2_length {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 2 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 1 {\n        return \"NO\";\n    }\n\n  \
    \  if interval2_length == 1 {\n        return \"NO\";\n    }\n\n    if interval1_length\
    \ == interval2_length {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 2 {\n        return \"YES\";\n    }\n\n    if interval1_length == 1 {\n \
    \       return \"NO\";\n    }\n\n    if interval2_length == 1 {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_length == interval2_length {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 2 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 1 {\n        return \"NO\";\n    }\n\n  \
    \  if interval2_length == 1 {\n        return \"NO\";\n    }\n\n    if interval1_length\
    \ == interval2_length {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 2 {\n        return \"YES\";\n    }\n\n    if interval1_length == 1 {\n \
    \       return \"NO\";\n    }\n\n    if interval2_length == 1 {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_length == interval2_length {\n", "    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval3\
    \ = interval1;\n    let mut interval4 = interval2;\n    let mut interval5 = interval1;\n\
    \    let mut interval6 = interval2;\n    let mut interval7 = interval1;\n    let\
    \ mut interval8 = interval2;\n    let mut interval9 = interval1;\n    let mut\
    \ interval10 = interval2;\n    let mut interval11 = interval1;\n    let mut interval12\
    \ = interval2;\n    let mut interval13 = interval1;\n    let mut interval14 =\
    \ interval2;\n    let mut interval15 = interval1;\n    let mut interval16 = interval2;\n\
    \    let mut interval17 = interval1;\n    let mut interval18 = interval2;\n  \
    \  let mut interval19 = interval1;\n    let mut interval20 = interval2;\n    let\
    \ mut interval21 = interval1;\n    let mut interval22 = interval2;\n    let mut\
    \ interval23 = interval1;\n    let mut interval24 = interval2;\n    let mut interval25\
    \ = interval1;\n    let mut interval26 = interval2;\n    let mut interval27 =\
    \ interval1;\n    let mut interval28 = interval2;\n    let mut interval29 = interval1;\n\
    \    let mut interval30 = interval2;\n    let mut interval31 = interval1;\n  \
    \  let mut interval32 = interval2;\n    let mut interval33 = interval1;\n    let\
    \ mut interval34 = interval2;\n    let mut interval35 = interval1;\n    let mut\
    \ interval36 = interval2;\n    let mut interval37 = interval1;\n    let mut interval38\
    \ = interval2;\n    let mut interval39 = interval1;\n    let mut interval40 =\
    \ interval2;\n    let mut interval41 = interval1;\n    let mut interval42 = interval2;\n\
    \    let mut interval43 = interval1;\n    let mut interval44 = interval2;\n  \
    \  let mut interval45 = interval1;\n    let mut interval46 = interval2;\n    let\
    \ mut interval47 = interval1;\n    let mut interval48 = interval2;\n    let mut\
    \ interval49 = interval1;\n    let mut interval50 = interval2;\n    let mut interval51\
    \ = interval1;\n    let mut interval52 = interval2;\n    let mut interval53 =\
    \ interval1;\n    let mut interval54 = interval2;\n    let mut interval55 = interval1;\n\
    \    let mut interval56 = interval2;\n    let mut interval57 = interval1;\n  \
    \  let mut interval58 = interval2;\n    let mu", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n\n    if interval1_end < interval2_start {\n    \
    \    interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"NO\";\n        } else {\n       \
    \     return \"YES\";\n        }\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ == interval2_start {\n            return \"NO\";\n        } else {\n       \
    \     return \"YES\";\n        }\n    }\n\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n        interval2_length =\
    \ interval1_length;\n    }\n\n    let mut prime_numbers = vec![true; interval1_length];\n\
    \n    for i in 0..interval1_length {\n        if prime_numbers[i] == true {\n\
    \            if interval1_start == interval2_start {\n                prime_numbers[i]\
    \ = false;\n            } else {\n                prime_numbers[i] = true;\n \
    \           }\n        }\n    }\n\n    if prime_numbers[interval1_length] == true\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }", " \
    \   let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut intersection = interval1;\n    let mut intersection2 = interval2;\n    let\
    \ mut prime = true;\n    loop {\n        if interval1.start < interval2.start\
    \ {\n            intersection = interval1;\n            interval = interval2;\n\
    \            prime = false;\n        }\n        else if interval1.end > interval2.end\
    \ {\n            intersection2 = interval2;\n            interval2 = interval1;\n\
    \            prime = false;\n        }\n        else {\n            break;\n \
    \       }\n    }\n    if prime {\n        return \"YES\";\n    }\n    else {\n\
    \        return \"NO\";\n    }", "    let mut interval_1: Vec<isize> = interval1.0;\n\
    \    let mut interval_2: Vec<isize> = interval2.0;\n    let mut intersection:\
    \ Vec<isize> = interval_1.clone();\n    let mut intersection_length: isize = 0;\n\
    \    let mut prime_number: isize = 2;\n    let mut prime_number_length: isize\
    \ = 1;\n    let mut prime_number_found: isize = 0;\n    let mut prime_number_found1:\
    \ isize = 0;\n    let mut prime_number_found2: isize = 0;\n    let mut prime_number_found3:\
    \ isize = 0;\n    let mut prime_number_found4: isize = 0;\n    let mut prime_number_found5:\
    \ isize = 0;\n    let mut prime_number_found6: isize = 0;\n    let mut prime_number_found7:\
    \ isize = 0;\n    let mut prime_number_found8: isize = 0;\n    let mut prime_number_found9:\
    \ isize = 0;\n    let mut prime_number_found10: isize = 0;\n    let mut prime_number_found11:\
    \ isize = 0;\n    let mut prime_number_found12: isize = 0;\n    let mut prime_number_found13:\
    \ isize = 0;\n    let mut prime_number_found14: isize = 0;\n    let mut prime_number_found15:\
    \ isize = 0;\n    let mut prime_number_found16: isize = 0;\n    let mut prime_number_found17:\
    \ isize = 0;\n    let mut prime_number_found18: isize = 0;\n    let mut prime_number_found19:\
    \ isize = 0;\n    let mut prime_number_found20: isize = 0;\n    let mut prime_number_found21:\
    \ isize = 0;\n    let mut prime_number_found22: isize = 0;\n    let mut prime_number_found23:\
    \ isize = 0;\n    let mut prime_number_found24: isize = 0;\n    let mut prime_number_found25:\
    \ isize = 0;\n    let mut prime_number_found26: isize = 0;\n    let mut prime_number_found27:\
    \ isize = 0;\n    let mut prime_number_found28: isize = 0;\n    let mut prime_number_found29:\
    \ isize = 0;\n    let mut prime_number_found30: isize = 0;\n    let mut prime_number_found31:\
    \ isize = 0;\n    let mut prime_number_found32: isize = 0;\n    let mut prime_number_found",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval_length = interval1_end - interval1_start + interval2_end\
    \ - interval2_start;\n    if interval_length == 0 {\n        return \"NO\";\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start = interval2_end;\n\
    \        interval1_end = interval2_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_start > interval1_end {\n        return \"NO\";\n   \
    \ }\n    let mut prime_number: isize = 1;\n    while prime_number < interval_length\
    \ {\n        if interval1_start % prime_number == 0 && interval1_end % prime_number\
    \ == 0 {\n            prime_number += 1;\n        }\n        prime_number += 1;\n\
    \    }\n    if prime_number == interval_length {\n        return \"YES\";\n  \
    \  }\n    return \"NO\";", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut length = 0;\n    while interval[0]\
    \ < interval[1] && interval2[0] < interval2[1] {\n        if interval[0] == interval2[0]\
    \ {\n            interval[0] = interval[0] + 1;\n            interval2[0] = interval2[0]\
    \ + 1;\n        } else {\n            interval[0] = interval[0] + 1;\n       \
    \ }\n        length = length + 1;\n    }\n    if interval[0] < interval[1] {\n\
    \        return \"NO\";\n    }\n    if interval2[0] < interval2[1] {\n       \
    \ return \"NO\";\n    }\n    if length == 2 {\n        return \"YES\";\n    }\n\
    \    if length == 3 {\n        return \"YES\";\n    }\n    if length == 4 {\n\
    \        return \"YES\";\n    }\n    if length == 5 {\n        return \"YES\"\
    ;\n    }\n    if length == 6 {\n        return \"YES\";\n    }\n    if length\
    \ == 7 {\n        return \"YES\";\n    }\n    if length == 8 {\n        return\
    \ \"YES\";\n    }\n    if length == 9 {\n        return \"YES\";\n    }\n    if\
    \ length == 10 {\n        return \"YES\";\n    }\n    if length == 11 {\n    \
    \    return \"YES\";\n    }\n    if length == 12 {\n        return \"YES\";\n\
    \    }\n    if length == 13 {\n        return \"YES\";\n    }\n    if length ==\
    \ 14 {\n        return \"YES\";\n    }\n    if length == 15 {\n        return\
    \ \"YES\";\n    }\n    if length == 16 {\n        return \"YES\";\n    }\n   \
    \ if length == 17 {\n        return \"YES\";\n    }\n    if length == 18 {\n \
    \       return \"YES\";\n    }\n    if length == 19 {\n        return \"YES\"\
    ;\n    }\n    if length == 20 {\n        return \"YES\";\n    }\n    if length\
    \ == 21 {\n        return \"YES\";\n    }\n    if length == 22 {\n        return\
    \ \"YES\";\n    }\n    if length == 100 {\n        return \"YES\";\n    }\n  \
    \  if length == 200 {\n        return \"YES\";\n    }\n    if length == 300 {\n\
    \        return \"YES\";\n    }\n    if length == 400 {\n        return \"YES\"\
    ;\n    }\n    if length == 500 {\n        return \"YES\";\n    }\n    if length\
    \ == 600 {\n        return \"YES\";\n    }\n    if length == 700 {\n        return\
    \ \"YES\";\n    }\n    if length == 800 {\n        return \"YES\";\n    }\n  \
    \  if length == 900 {\n        return \"YES\";\n    }\n    if length == 1000 {\n\
    \        return \"YES\";\n    }\n    if length == 1100 {\n        return \"YES\"\
    ;\n    }\n    if length == 1200 {\n", "    let mut intervals = vec![interval1,\
    \ interval2];\n    let mut start = interval1[0];\n    let mut end = interval1[1];\n\
    \    let mut length = interval1[1] - interval1[0] + 1;\n    let mut prime = true;\n\
    \    while start < interval1[1] {\n        prime = prime && intervals.iter().any(|&(_,\
    \ end)| end > start);\n        start = interval1[0] + 1;\n    }\n    while end\
    \ < interval2[1] {\n        prime = prime && intervals.iter().any(|&(_, start)|\
    \ start < end);\n        end = interval2[1] + 1;\n    }\n    if prime {\n    \
    \    return \"YES\".to_string();\n    }\n    return \"NO\".to_string();", "  \
    \  let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval_length = interval2_end - interval2_start;\n    let mut interval_start\
    \ = interval2_start;\n    let mut interval_end = interval2_end;\n    let mut interval_length\
    \ = interval_end - interval_start;\n    let mut interval_start = interval_end;\n\
    \    let mut interval_end = interval_start;\n    let mut interval_length = interval_end\
    \ - interval_start;\n    let mut interval_start = interval_end;\n    let mut interval_end\
    \ = interval_start;\n    let mut interval_length = interval_end - interval_start;\n\
    \    let mut interval_start = interval_end;\n    let mut interval_end = interval_start;\n\
    \    let mut interval_length = interval_end - interval_start;\n    let mut interval_start\
    \ = interval_end;\n    let mut interval_end = interval_start;\n    let mut interval_length\
    \ = interval_end - interval_start;\n    let mut interval_start = interval_end;\n\
    \    let mut interval_end = interval_start;\n    let mut interval_length = interval_end\
    \ - interval_start;\n    let mut interval_start = interval_end;\n    let mut interval_end\
    \ = interval_start;\n    let mut interval_length = interval_end - interval_start;\n\
    \    let mut interval_start = interval_end;\n    let mut interval_end = interval_start;\n\
    \    let mut interval_length = interval_end - interval_start;\n    let mut interval_start\
    \ = interval_end;\n    let mut interval_end = interval_start;\n    let mut interval_length\
    \ = interval_end - interval_start;\n    let mut interval_start = interval_end;\n\
    \    let mut interval_end = interval_start;\n    let mut interval_length = interval_end\
    \ - interval_start;\n    let mut interval_start = interval_end;\n    let mut interval_end\
    \ = interval_start;\n    let mut interval_length = interval_end - interval_start;\n\
    \    let mut interval_start = interval_end;\n    let mut interval_end = interval_start;\n\
    \    let mut interval_length = interval_end - interval_start;\n    let mut interval_start\
    \ = interval_end;\n    let mut interval_end = interval_start;\n    let mut interval_length\
    \ = interval_end - interval", "    if interval1.0 < interval2.0 {\n        let\
    \ (start, end) = interval1;\n        let (start2, end2) = interval2;\n       \
    \ if start <= end2 && end <= start2 {\n            return \"YES\";\n        }\n\
    \    }\n    if interval1.0 < interval2.0 {\n        let (start, end) = interval2;\n\
    \        let (start2, end2) = interval1;\n        if start <= end2 && end <= start2\
    \ {\n            return \"YES\";\n        }\n    }\n    return \"NO\";", "   \
    \ let mut intervals = vec![];\n    intervals.push(interval1);\n    intervals.push(interval2);\n\
    \    let mut intervals_len = intervals.len();\n    let mut prime = true;\n   \
    \ while intervals_len > 1 {\n        let mut interval = intervals.remove(0);\n\
    \        let mut interval_len = interval.len();\n        while interval_len >\
    \ 1 {\n            let mut interval_start = interval.remove(0);\n            let\
    \ mut interval_end = interval.remove(0);\n            if interval_start <= interval_end\
    \ {\n                intervals.push(interval);\n                intervals_len\
    \ += interval_len;\n                interval_len = interval_end - interval_start\
    \ + 1;\n            } else {\n                intervals.push(interval);\n    \
    \            intervals_len += interval_len;\n                interval_len = interval_end\
    \ - interval_start + 1;\n                interval_start = interval_end + 1;\n\
    \            }\n        }\n        if interval_start == interval_end {\n     \
    \       prime = false;\n        }\n    }\n    if prime {\n        return \"YES\"\
    ;\n    } else {\n        return \"NO\";\n    }", "    let mut intervals = vec![];\n\
    \    intervals.push(interval1);\n    intervals.push(interval2);\n    let mut intersection\
    \ = intervals[0];\n    let mut prime = true;\n    for interval in intervals.iter().skip(1)\
    \ {\n        if interval[0].start > interval[1].end {\n            prime = false;\n\
    \            break;\n        }\n        if interval[0].start < interval[1].end\
    \ {\n            intersection = interval;\n        }\n    }\n    if prime {\n\
    \        return \"YES\";\n    } else {\n        return \"NO\";\n    }", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = 0;\n    let mut intersection_end = 0;\n    let\
    \ mut intersection_length = 0;\n    let mut prime_number: isize = 1;\n    let\
    \ mut prime_number_found = false;\n    loop {\n        if interval1_start < interval2_start\
    \ {\n            interval1_start += 1;\n        } else {\n            interval2_start\
    \ += 1;\n        }\n        if interval1_end > interval2_end {\n            interval1_end\
    \ -= 1;\n        } else {\n            interval2_end -= 1;\n        }\n      \
    \  if interval1_start > interval2_end {\n            break;\n        }\n     \
    \   if interval1_end < interval2_start {\n            break;\n        }\n    \
    \    if interval1_start == interval2_start {\n            intersection_start =\
    \ interval1_start;\n            intersection_end = interval1_end;\n          \
    \  intersection_length += 1;\n        }\n        if interval1_end == interval2_end\
    \ {\n            intersection_start = interval1_start;\n            intersection_end\
    \ = interval1_end;\n            intersection_length += 1;\n        }\n       \
    \ if intersection_length == prime_number {\n            prime_number_found = true;\n\
    \        }\n        prime_number += 1;\n    }\n    if prime_number_found {\n \
    \       return \"YES\";\n    } else {\n        return \"NO\";\n    }", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start < interval2_start {\n        return \"NO\";\n    }\n \
    \   let mut intersection_length = interval1_end - interval2_start;\n    let mut\
    \ prime = true;\n    for i in 1..=intersection_length {\n        if interval1_start\
    \ % i == 0 && interval2_start % i == 0 {\n            prime = false;\n       \
    \ }\n    }\n    if prime {\n        return \"YES\";\n    }\n    return \"NO\";",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    let mut prime_numbers = vec![];\n \
    \   prime_numbers.push(2);\n    prime_numbers.push(3);\n    prime_numbers.push(5);\n\
    \    prime_numbers.push(7);\n    prime_numbers.push(11);\n    prime_numbers.push(13);\n\
    \    prime_numbers.push(17);\n    prime_numbers.push(19);\n    prime_numbers.push(23);\n\
    \    prime_numbers.push(29);\n    prime_numbers.push(31);\n    prime_numbers.push(37);\n\
    \    prime_numbers.push(41);\n    prime_numbers.push(43);\n    prime_numbers.push(47);\n\
    \    prime_numbers.push(53);\n    prime_numbers.push(59);\n    prime_numbers.push(61);\n\
    \    prime_numbers.push(67);\n    prime_numbers.push(71);\n    prime_numbers.push(73);\n\
    \    prime_numbers.push(79);\n    prime_numbers.push(83);\n    prime_numbers.push(89);\n\
    \    prime_numbers.push(97);\n    prime_numbers.push(101);\n    prime_numbers.push(103);\n\
    \    prime_numbers.push(107);\n    prime_numbers.push(109);\n    prime_numbers.push(113);\n\
    \    prime_numbers.push(127);\n    prime_numbers.push(131);\n    prime_numbers.push(137);\n\
    \    prime_numbers.push(139);\n    prime_numbers.push(149);\n    prime_numbers.push(151);\n\
    \    prime_numbers.push(157);\n    prime_numbers.push(163);\n    prime_numbers.push(167);\n\
    \    prime_numbers.push(173);\n    prime_numbers.push(179);\n    prime_numbers.push(181);\n\
    \    prime_numbers.push(191);\n    prime_numbers.push(193);\n    prime_numbers.push(197);\n\
    \    prime_numbers.push(199);\n    prime_numbers.push(203);\n    prime_numbers.push(209);\n\
    \    prime_numbers.push(211);\n    prime_numbers.push(223);\n    prime_numbers.push(227);\n\
    \    prime_numbers.push(229);\n    prime_numbers.push(233);\n    prime_numbers.push(239);\n\
    \    prime_numbers.push(241);\n    prime_numbers.push(251);\n    prime_numbers.push(257);\n\
    \    prime_number", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_start = interval1_end;\n\
    \    }\n\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_start = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval2_start = interval1_start;\n    }\n\n  \
    \  if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_start == interval2_start {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_end < interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start\
    \ == interval2_start {\n        return \"NO\";\n    }\n\n    if interval1_start\
    \ < interval2_start {\n        return \"NO\";\n    }\n\n    if interval1_end ==\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n\
    \        return \"NO\";\n    }\n\n    if interval1_end < interval2_end {\n   \
    \     return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n     \
    \   return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n    \
    \    return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n      \
    \  return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n     \
    \   return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n       \
    \ return \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n     \
    \   return \"NO\";\n    }\n\n    if interval1_end < interval2_end {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n        return \"\
    NO\";\n    }\n\n    if interval1_start < interval2_start {\n        return \"\
    NO\";\n    }\n\n    if interval1_end == interval2_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_start < interval2_start {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n\
    \    }\n\n    if interval1_start == interval2_start ", "    let mut interval =\
    \ interval1;\n    let mut interval2 = interval2;\n    let mut interval_len = interval1.0;\n\
    \    let mut interval2_len = interval2.0;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval2_start = interval2.0;\n\
    \    let mut interval2_end = interval2.1;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval_end = interval_end;\n    let mut interval2_start = interval2_start;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval_end = interval_end;\n    let mut interval2_start = interval2_start;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval_end = interval_end;\n    let mut interval2_start = interval2_start;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval_end = interval_end;\n    let mut interval2_start = interval2_start;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval_end = interval_end;\n    let mut interval2_start = interval2_start;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval_end = interval_end;\n    let mut interval2_start = interval2_start;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval_end = interval_end;\n    let mut interval2_start = interval2_start;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  \n    while interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n        if interval1_start == interval1_end {\n            interval1_prime\
    \ = false;\n        }\n        if interval2_start == interval2_end {\n       \
    \     interval2_prime = false;\n        }\n        if interval1_start < interval1_end\
    \ && interval2_start < interval2_end {\n            if interval1_start < interval1_end\
    \ {\n                intersection_start = interval1_start;\n                intersection_end\
    \ = interval1_end;\n                intersection_length = interval1_end - interval1_start;\n\
    \            }\n            if interval2_start < interval2_end {\n           \
    \     intersection_start = interval2_start;\n                intersection_end\
    \ = interval2_end;\n                intersection_length = interval2_end - interval2_start;\n\
    \            }\n        }\n        interval1_start += 1;\n        interval1_end\
    \ += 1;\n        interval2_start += 1;\n        interval2_end += 1;\n    }\n \
    \   \n    if interval1_start == interval1_end {\n        interval1_prime = false;\n\
    \    }\n    if interval2_start == interval2_end {\n        interval2_prime = false;\n\
    \    }\n    \n    if intersection_length == interval1_length && intersection_length\
    \ == interval2_length {\n        if intersection_start == intersection_end {\n\
    \            if interval1_prime && interval2_prime {\n                return \"\
    YES\";\n            }\n            return \"NO\";\n        }\n        if intersection_start\
    \ == intersection_end {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    \n    if intersection_length == interval1_length {\n   \
    \     return \"YES\";\n    }\n    if intersection_length == interval2_length {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n\n    if interval1_end < interval2_start {\n    \
    \    interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end < interval2_start {\n        return \"NO\";\n \
    \   }\n\n    if interval1_start > interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \    let mut interval2_length = interval2_end - interval2_start + 1;\n\n    if\
    \ interval1_length == interval2_length {\n        return \"YES\";\n    }\n\n \
    \   if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n\n    if interval1_length > interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n\n    if interval1_length == 2 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 3 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 4 {\n        return \"YES\";\n    }\n\n \
    \   if interval1_length == 5 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 6 {\n        return \"YES\";\n    }\n\n    if interval1_length == 7 {\n \
    \       return \"YES\";\n    }\n\n    if interval1_length == 8 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 9 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 10 {\n        return \"YES\";\n    }\n\n\
    \    if interval1_length == 11 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 12 {\n        return \"YES\";\n    }\n\n    if interval1_length == 13 {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length == 14 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 15 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 16 {\n        return \"YES\";\n    }\n\n\
    \    if interval1_length == 17 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 18 {\n        return \"YES\";\n    }\n\n    if interval1_length == 19 {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length == 20 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 21 {\n        return \"YES\";\n\
    \    }\n\n    if ", "    if interval1.0 > interval2.1 {\n        interval1, interval2\
    \ = interval2, interval1\n    }\n    let mut interval = interval1;\n    let mut\
    \ interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut ", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start == interval2_start {\n        return \"YES\";\n\
    \    }\n\n    let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \    let mut interval2_length = interval2_end - interval2_start + 1;\n\n    if\
    \ interval1_length == interval2_length {\n        return \"YES\";\n    }\n\n \
    \   if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n\n    if interval1_length > interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n\n    if interval1_length == 2 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 3 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 4 {\n        return \"YES\";\n    }\n\n \
    \   if interval1_length == 5 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 6 {\n        return \"YES\";\n    }\n\n    if interval1_length == 7 {\n \
    \       return \"YES\";\n    }\n\n    if interval1_length == 8 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 9 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 10 {\n        return \"YES\";\n    }\n\n\
    \    if interval1_length == 11 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 12 {\n        return \"YES\";\n    }\n\n    if interval1_length == 13 {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length == 14 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 15 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 16 {\n        return \"YES\";\n    }\n\n\
    \    if interval1_length == 17 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 18 {\n        return \"YES\";\n    }\n\n    if interval1_length == 19 {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length == 20 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 21 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 22 {\n        return \"YES\";\n    }\n\n\
    \    if interval1_", "    if interval1.0 < interval2.0 {\n        let (start,\
    \ end) = interval1;\n        let (start2, end2) = interval2;\n        if start\
    \ < end2 {\n            if start < end2 {\n                if start < end {\n\
    \                    if end < end2 {\n                        if end < end {\n\
    \                            if end < end {\n                                if\
    \ end < end {\n                                    return \"NO\";\n          \
    \                      }\n                            }\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \   }\n    return \"YES\";", "    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    if interval1.start > interval2.start {\n        interval =\
    \ interval2;\n        interval2 = interval1;\n    }\n    if interval1.end < interval2.end\
    \ {\n        interval = interval2;\n        interval2 = interval1;\n    }\n  \
    \  let mut intervals = vec![];\n    let mut interval = interval1;\n    let mut\
    \ interval2 = interval2;\n    while interval.start <= interval.end {\n       \
    \ while interval2.start <= interval2.end {\n            if interval.start == interval2.start\
    \ {\n                intervals.push(interval2.clone());\n                interval2\
    \ = interval2.clone();\n            } else {\n                intervals.push(interval.clone());\n\
    \                interval = interval.clone();\n            }\n        }\n    \
    \    intervals.push(interval.clone());\n        interval = interval.clone();\n\
    \    }\n    if intervals.len() == 1 {\n        return \"NO\".to_string();\n  \
    \  }\n    if intervals.len() == 2 {\n        return \"YES\".to_string();\n   \
    \ }\n    if intervals.len() == 3 {\n        return \"YES\".to_string();\n    }\n\
    \    if intervals.len() == 4 {\n        return \"YES\".to_string();\n    }\n \
    \   if intervals.len() == 5 {\n        return \"YES\".to_string();\n    }\n  \
    \  if intervals.len() == 6 {\n        return \"YES\".to_string();\n    }\n   \
    \ if intervals.len() == 7 {\n        return \"YES\".to_string();\n    }\n    if\
    \ intervals.len() == 8 {\n        return \"YES\".to_string();\n    }\n    if intervals.len()\
    \ == 9 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 10 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 11 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 12 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 13 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 14 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 15 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 16 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 17 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 18 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 19 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 20 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 21 {\n        return \"YES\".to_string();\n    }\n    if intervals.len() ==\
    \ 22 {\n        return \"YES\".to_string();\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n        interval2_end\
    \ = interval1_end;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n        interval2_end\
    \ = interval1_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_start <= interval2_end {\n        intersection_start = interval1_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if intersection_start ==\
    \ intersection_end {\n        return \"NO\";\n    }\n    let mut prime_number:\
    \ isize = 1;\n    let mut prime_number_found = false;\n    let mut prime_number_found2\
    \ = false;\n    let mut prime_number_found3 = false;\n    let mut prime_number_found4\
    \ = false;\n    let mut prime_number_found5 = false;\n    let mut prime_number_found6\
    \ = false;\n    let mut prime_number_found7 = false;\n    let mut prime_number_found8\
    \ = false;\n    let mut prime_number_found9 = false;\n    let mut prime_number_found10\
    \ = false;\n    let mut prime_number_found11 = false;\n    let mut prime_number_found12\
    \ = false;\n    let mut prime_number_found13 = false;\n    let mut prime_number_found14\
    \ = false;\n    let mut prime_number_found15 = false;\n    let mut prime_number_found16\
    \ = false;\n    let mut prime_number_found17 = false;\n    let mut prime_number_found18\
    \ = false;\n    let mut prime_number_found19 = false;\n    let mut prime_number_found20\
    \ = false;\n    let mut prime_number_found21 = false;\n    let mut prime_number_found22\
    \ = false;\n    let mut prime_number_found23 = false;\n    let mut prime_number_found24\
    \ = false;\n    let mut prime_number_found25 = false;\n    let mut prime_number_found26\
    \ = false;\n    let mut prime_number_found27 = false;\n    let mut prime_number_found28\
    \ = false;\n    let mut prime_number_found29 = false;\n    let mut prime_number_found30\
    \ = false;\n    let mut prime_number_found31 = ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = 0;\n    \n    while interval1_start <= interval1_end && interval2_start <=\
    \ interval2_end {\n        if interval1_start < interval1_end {\n            interval1_start\
    \ += 1;\n        } else {\n            interval1_end -= 1;\n        }\n      \
    \  \n        if interval2_start < interval2_end {\n            interval2_start\
    \ += 1;\n        } else {\n            interval2_end -= 1;\n        }\n      \
    \  \n        intersection_length += 1;\n    }\n    \n    if interval1_start >\
    \ interval1_end {\n        interval1_start = interval1_end - 1;\n    }\n    \n\
    \    if interval2_start > interval2_end {\n        interval2_start = interval2_end\
    \ - 1;\n    }\n    \n    if intersection_length == 2 {\n        if interval1_start\
    \ == interval1_end {\n            if interval2_start == interval2_end {\n    \
    \            return \"YES\";\n            } else {\n                return \"\
    NO\";\n            }\n        } else {\n            return \"NO\";\n        }\n\
    \    } else {\n        return \"NO\";\n    }", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = 0;\n    let mut intersection_end = 0;\n    let mut intersection_length = 0;\n\
    \    let mut prime_number = 0;\n    let mut prime_number_found = false;\n    \n\
    \    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            if interval2_start\
    \ < interval2_end {\n                if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n                    intersection_start = interval1_start;\n\
    \                    intersection_end = interval1_end;\n                    intersection_length\
    \ = interval1_end - intersection_start;\n                    prime_number = 1;\n\
    \                    prime_number_found = true;\n                }\n         \
    \   }\n        }\n        \n        if interval1_start > interval1_end {\n   \
    \         if interval2_start < interval2_end {\n                if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \ intersection_start = interval2_start;\n                    intersection_end\
    \ = interval2_end;\n                    intersection_length = intersection_end\
    \ - intersection_start;\n                    prime_number = 1;\n             \
    \       prime_number_found = true;\n                }\n            }\n       \
    \ }\n        \n        if prime_number_found {\n            break;\n        }\n\
    \        \n        interval1_start += 1;\n        interval1_end += 1;\n      \
    \  interval2_start += 1;\n        interval2_end += 1;\n    }\n    \n    if prime_number_found\
    \ {\n        if intersection_length == prime_number {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }\n    } else {\n   \
    \     return \"NO\";\n    }", "    if interval1.start <= interval2.end {\n   \
    \     if interval1.end <= interval2.start {\n            return \"NO\";\n    \
    \    }\n        let mut interval = interval1;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        return intersection(interval,\
    \ interval2);\n    }\n    if interval1.end <= interval2.start {\n        return\
    \ \"NO\";\n    }\n    let mut interval = interval1;\n    interval.end = interval.start;\n\
    \    interval.start = interval.end;\n    return intersection(interval, interval2);",
  "    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval_length = interval1.0;\n    let mut interval2_length = interval2.0;\n\
    \    let mut prime = true;\n    loop {\n        if interval_length == interval2.0\
    \ {\n            break;\n        }\n        if interval_length < interval2_length\
    \ {\n            interval = interval2;\n            interval_length = interval_length\
    \ + interval2.0;\n        } else {\n            interval2 = interval;\n      \
    \      interval2_length = interval2_length + interval.0;\n        }\n    }\n \
    \   if interval_length == interval2_length {\n        return \"NO\";\n    }\n\
    \    if prime {\n        return \"YES\";\n    }\n    return \"NO\";", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"NO\";\n        } else {\n       \
    \     return \"YES\";\n        }\n    }\n\n    let mut intersection_length = interval1_end\
    \ - interval2_start;\n\n    if interval1_start < interval2_start {\n        intersection_length\
    \ = interval2_end - interval1_start;\n    }\n\n    if intersection_length == 2\
    \ {\n        return \"YES\";\n    }\n\n    if intersection_length == 1 {\n   \
    \     return \"NO\";\n    }\n\n    if intersection_length == 0 {\n        return\
    \ \"NO\";\n    }\n\n    if intersection_length == 3 {\n        return \"YES\"\
    ;\n    }\n\n    if intersection_length == 2 {\n        return \"YES\";\n    }\n\
    \n    if intersection_length == 1 {\n        return \"NO\";\n    }\n\n    if intersection_length\
    \ == 0 {\n        return \"NO\";\n    }\n\n    if intersection_length == 3 {\n\
    \        return \"YES\";\n    }\n\n    if intersection_length == 2 {\n       \
    \ return \"YES\";\n    }\n\n    if intersection_length == 1 {\n        return\
    \ \"NO\";\n    }\n\n    if intersection_length == 0 {\n        return \"NO\";\n\
    \    }\n\n    if intersection_length == 3 {\n        return \"YES\";\n    }\n\n\
    \    if intersection_length == 2 {\n        return \"YES\";\n    }\n\n    if intersection_length\
    \ == 1 {\n        return \"NO\";\n    }\n\n    if intersection_length == 0 {\n\
    \        return \"NO\";\n    }\n\n    if intersection_length == 3 {\n        return\
    \ \"YES\";\n    }\n\n    if intersection_length == 2 {\n        return \"YES\"\
    ;\n    }\n\n    if intersection_length == 1 {\n        return \"NO\";\n    }\n\
    \n    if intersection_length == 0 {\n        return \"NO\";\n    }\n\n    if intersection_length\
    \ == 3 {\n        return \"YES\";\n    }\n\n    if intersection_length == 2 {\n\
    \        return \"YES\";\n    }\n\n    if intersection_length == 1 {\n       \
    \ return \"NO\";\n    }\n\n    if intersection_length == 0 {\n        return \"\
    NO\";\n    }\n\n    if intersection_length == 3 {\n        return \"YES\";\n \
    \   }\n\n    if intersection_length == 2 {\n        return \"YES\";\n    }\n\n\
    \    if intersection_length == 1 {\n        return \"NO\";\n    }\n\n    if intersection_length\
    \ == 0 {\n        return \"", "    let mut interval_1_start = interval1[0];\n\
    \    let mut interval_1_end = interval1[1];\n    let mut interval_2_start = interval2[0];\n\
    \    let mut interval_2_end = interval2[1];\n    let mut interval_1_len = interval_1_end\
    \ - interval_1_start;\n    let mut interval_2_len = interval_2_end - interval_2_start;\n\
    \    let mut intersection_len = interval_1_len;\n    \n    while interval_1_len\
    \ > 0 && interval_2_len > 0 {\n        if interval_1_start < interval_2_start\
    \ {\n            interval_1_start += 1;\n            interval_1_len -= 1;\n  \
    \      } else {\n            interval_2_start += 1;\n            interval_2_len\
    \ -= 1;\n        }\n    }\n    \n    if interval_1_len > 0 {\n        intersection_len\
    \ += 1;\n    }\n    \n    if interval_2_len > 0 {\n        intersection_len +=\
    \ 1;\n    }\n    \n    if intersection_len == 2 {\n        return \"YES\";\n \
    \   }\n    \n    return \"NO\";", "    let mut intervals = vec![interval1, interval2];\n\
    \    let mut start = interval1.0;\n    let mut end = interval1.1;\n    let mut\
    \ len = 0;\n    loop {\n        if start > end {\n            break;\n       \
    \ }\n        let mut found = false;\n        for interval in intervals.iter_mut()\
    \ {\n            if interval.0 == start {\n                found = true;\n   \
    \             interval.1 = end;\n                break;\n            }\n     \
    \       if interval.1 == end {\n                found = true;\n              \
    \  interval.0 = start;\n                break;\n            }\n        }\n   \
    \     if !found {\n            intervals.push(vec![start, end]);\n        }\n\
    \        start += 1;\n        end += 1;\n        len += 1;\n    }\n    if len\
    \ % 2 == 0 {\n        return \"NO\";\n    }\n    let mut prime = true;\n    for\
    \ i in 0..len {\n        if intervals[i].0 % 2 == 0 {\n            prime = false;\n\
    \            break;\n        }\n    }\n    if prime {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \    let mut intersection_length = interval1_length + interval2_length;\n    if\
    \ interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_length = interval2_length;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_length = interval2_length;\n\
    \    }\n    if interval1_length == 0 {\n        return \"NO\";\n    }\n    if\
    \ interval2_length == 0 {\n        return \"NO\";\n    }\n    if interval1_length\
    \ == interval2_length {\n        return \"YES\";\n    }\n    if interval1_length\
    \ < interval2_length {\n        interval1_length = interval2_length;\n    }\n\
    \    if interval1_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n    }\n    if interval1_length ==\
    \ 3 {\n        if interval1_start == interval2_start {\n            return \"\
    YES\";\n        }\n        if interval1_end == interval2_end {\n            return\
    \ \"YES\";\n        }\n        if interval1_start == interval2_end {\n       \
    \     return \"YES\";\n        }\n    }\n    if interval1_length == 4 {\n    \
    \    if interval1_start == interval2_start {\n            return \"YES\";\n  \
    \      }\n        if interval1_end == interval2_end {\n            return \"YES\"\
    ;\n        }\n        if interval1_start == interval2_end {\n            return\
    \ \"YES\";\n        }\n        if interval1_start == interval2_start {\n     \
    \       return \"YES\";\n        }\n    }\n    if interval1_length == 5 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        if interval1_end == interval2_end {\n            return \"\
    YES\";\n        }\n        if interval1_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n        if interval1_start == interval2_start {\n\
    \            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n    }\n    if interval1_length ==\
    \ 6 {\n        if interval1_start == interval2_start {\n            return \"\
    YES\";\n        }\n        if interval1_end == interval2_end {\n            return\
    \ \"YES\";\n        }\n        if interval1_start == interval2_end {\n       \
    \     return \"YES\";\n        }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval1_start = interval2_end;\n    }\n\n    if interval1_start > interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n\
    \        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n  \
    \      return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n \
    \       return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n    \
    \    return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n   \
    \     return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n      \
    \  return \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n    \
    \    return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n      \
    \  return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n     \
    \   return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n        return \"\
    NO\";\n    }\n\n    if interval1_start < interval2_start {\n        return \"\
    NO\";\n    }\n\n    if interval1_end > interval2_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_start == interval2_start {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n\
    \    }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n \
    \   }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_start == interval2_start {\n        return \"NO\";\n    }\n\
    \n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"NO\";\n        }\n        return\
    \ \"YES\";\n    }\n\n    if interval1_start == interval2_start {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_start < interval2_start {\n        return\
    \ \"YES\";\n    }\n\n    return \"NO\";", "    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval_len = interval1.0;\n\
    \    let mut interval2_len = interval2.0;\n    let mut interval_end = interval1.0;\n\
    \    let mut interval2_end = interval2.0;\n    let mut interval_start = interval1.0;\n\
    \    let mut interval2_start = interval2.0;\n    let mut interval_end_prime =\
    \ false;\n    let mut interval2_end_prime = false;\n    let mut interval_start_prime\
    \ = false;\n    let mut interval2_start_prime = false;\n    let mut interval_prime\
    \ = false;\n    let mut interval2_prime = false;\n    let mut interval_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime = false;\n    let mut interval_prime_prime_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime_prime_prime = false;\n    let\
    \ mut interval_prime_prime_prime_prime_prime_prime = false;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = false;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = false;\n    let mut interval", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut prime_number: isize\
    \ = 1;\n    let mut prime_number_counter: isize = 1;\n    let mut prime_number_counter2:\
    \ isize = 1;\n    let mut prime_number_counter3: isize = 1;\n    let mut prime_number_counter4:\
    \ isize = 1;\n    let mut prime_number_counter5: isize = 1;\n    let mut prime_number_counter6:\
    \ isize = 1;\n    let mut prime_number_counter7: isize = 1;\n    let mut prime_number_counter8:\
    \ isize = 1;\n    let mut prime_number_counter9: isize = 1;\n    let mut prime_number_counter10:\
    \ isize = 1;\n    let mut prime_number_counter11: isize = 1;\n    let mut prime_number_counter12:\
    \ isize = 1;\n    let mut prime_number_counter13: isize = 1;\n    let mut prime_number_counter14:\
    \ isize = 1;\n    let mut prime_number_counter15: isize = 1;\n    let mut prime_number_counter16:\
    \ isize = 1;\n    let mut prime_number_counter17: isize = 1;\n    let mut prime_number_counter18:\
    \ isize = 1;\n    let mut prime_number_counter19: isize = 1;\n    let mut prime_number_counter20:\
    \ isize = 1;\n    let mut prime_number_counter21: isize = 1;\n    let mut prime_number_counter22:\
    \ isize = 1;\n    let mut prime_number_counter23: isize = 1;\n    let mut prime_number_counter24:\
    \ isize = 1;\n    let mut prime_number_counter25: isize = 1;\n    let mut prime_number_counter26:\
    \ isize = 1;\n    let mut prime_number_counter27: isize = 1;\n    let mut prime_number_counter28:\
    \ isize = 1;\n    let mut prime_number_counter29: isize = 1;\n    let mut prime_number_counter30:\
    \ isize = 1;\n    let mut prime_number_counter31: isize = 1;\n    let mut prime_number_counter32:\
    \ isize = 1;\n    let mut prime_number_counter33: isize = 1;\n    let mut prime_number_counter34:\
    \ isize = 1;\n    let mut prime", "    let (start, end) = interval1;\n    let\
    \ (start_2, end_2) = interval2;\n    if start > end {\n        (start, end) =\
    \ (end, start)\n    }\n    if start_2 > end_2 {\n        (start_2, end_2) = (end_2,\
    \ start_2)\n    }\n    let mut start = start;\n    let mut end = end;\n    let\
    \ mut start_2 = start_2;\n    let mut end_2 = end_2;\n    let mut length = 0;\n\
    \    while start <= end && start_2 <= end_2 {\n        if start == start_2 {\n\
    \            start = start + 1;\n        }\n        if end == end_2 {\n      \
    \      end = end - 1;\n        }\n        if start > end_2 {\n            length\
    \ = length + 1;\n        }\n        if start_2 > end_2 {\n            length =\
    \ length + 1;\n        }\n    }\n    if length == 0 {\n        return \"NO\";\n\
    \    }\n    if length == 1 {\n        return \"YES\";\n    }\n    if length ==\
    \ 2 {\n        return \"YES\";\n    }\n    if length == 3 {\n        return \"\
    YES\";\n    }\n    if length == 4 {\n        return \"YES\";\n    }\n    if length\
    \ == 5 {\n        return \"YES\";\n    }\n    if length == 6 {\n        return\
    \ \"YES\";\n    }\n    if length == 7 {\n        return \"YES\";\n    }\n    if\
    \ length == 8 {\n        return \"YES\";\n    }\n    if length == 9 {\n      \
    \  return \"YES\";\n    }\n    if length == 10 {\n        return \"YES\";\n  \
    \  }\n    if length == 11 {\n        return \"YES\";\n    }\n    if length ==\
    \ 12 {\n        return \"YES\";\n    }\n    if length == 13 {\n        return\
    \ \"YES\";\n    }\n    if length == 14 {\n        return \"YES\";\n    }\n   \
    \ if length == 15 {\n        return \"YES\";\n    }\n    if length == 16 {\n \
    \       return \"YES\";\n    }\n    if length == 17 {\n        return \"YES\"\
    ;\n    }\n    if length == 18 {\n        return \"YES\";\n    }\n    if length\
    \ == 19 {\n        return \"YES\";\n    }\n    if length == 20 {\n        return\
    \ \"YES\";\n    }\n    if length == 21 {\n        return \"YES\";\n    }\n   \
    \ if length == 22 {\n        return \"YES\";\n    }\n    if length == 100 {\n\
    \        return \"YES\";\n    }\n    if length == 200 {\n        return \"YES\"\
    ;\n    }\n    if length == 300 {\n        return \"YES\";\n    }\n    if length\
    \ == 400 {\n        return \"YES\";\n    }\n    if length == 500 {\n        return\
    \ \"YES\";\n    }\n    if length == 600 {\n        return \"YES\";\n    }\n  \
    \  if length == 700 {\n        return \"YES\";\n    }\n    if length == 800 {\n\
    \        return \"YES\";\n    }\n    if length"]
stop_tokens:
- "\n}"
