name: HumanEval_127_intersection
language: rs
prompt: "/// You are given two intervals,\n/// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed\
  \ which means that the interval (start, end)\n/// includes both start and end.\n\
  /// For each given interval, it is assumed that its start is less or equal its end.\n\
  /// Your task is to determine whether the length of intersection of these two \n\
  /// intervals is a prime number.\n/// Example, the intersection of the intervals\
  \ (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n\
  /// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise,\
  \ return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n///\
  \ [input/output] samples:\nfn intersection(interval1: (isize, isize), interval2:\
  \ (isize, isize)) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!(candidate((1,\
  \ 2), (2, 3)), String::from(\"NO\"));\n    assert_eq!(candidate((-1, 1), (0, 4)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-3, -1), (-5, 5)), String::from(\"\
  YES\"));\n    assert_eq!(candidate((-2, 2), (-4, 0)), String::from(\"YES\"));\n\
  \    assert_eq!(candidate((-11, 2), (-1, -1)), String::from(\"NO\"));\n    assert_eq!(candidate((1,\
  \ 2), (3, 5)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (1, 2)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-2, -2), (-3, -2)), String::from(\"\
  NO\"));\n}\n"
completions: ["    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval3 = interval1;\n    let mut interval4 = interval2;\n    let\
    \ mut interval5 = interval1;\n    let mut interval6 = interval2;\n    let mut\
    \ interval7 = interval1;\n    let mut interval8 = interval2;\n    let mut interval9\
    \ = interval1;\n    let mut interval10 = interval2;\n    let mut interval11 =\
    \ interval1;\n    let mut interval12 = interval2;\n    let mut interval13 = interval1;\n\
    \    let mut interval14 = interval2;\n    let mut interval15 = interval1;\n  \
    \  let mut interval16 = interval2;\n    let mut interval17 = interval1;\n    let\
    \ mut interval18 = interval2;\n    let mut interval19 = interval1;\n    let mut\
    \ interval20 = interval2;\n    let mut interval21 = interval1;\n    let mut interval22\
    \ = interval2;\n    let mut interval23 = interval1;\n    let mut interval24 =\
    \ interval2;\n    let mut interval25 = interval1;\n    let mut interval26 = interval2;\n\
    \    let mut interval27 = interval1;\n    let mut interval28 = interval2;\n  \
    \  let mut interval29 = interval1;\n    let mut interval30 = interval2;\n    let\
    \ mut interval31 = interval1;\n    let mut interval32 = interval2;\n    let mut\
    \ interval33 = interval1;\n    let mut interval34 = interval2;\n    let mut interval35\
    \ = interval1;\n    let mut interval36 = interval2;\n    let mut interval37 =\
    \ interval1;\n    let mut interval38 = interval2;\n    let mut interval39 = interval1;\n\
    \    let mut interval40 = interval2;\n    let mut interval41 = interval1;\n  \
    \  let mut interval42 = interval2;\n    let mut interval43 = interval1;\n    let\
    \ mut interval44 = interval2;\n    let mut interval45 = interval1;\n    let mut\
    \ interval46 = interval2;\n    let mut interval47 = interval1;\n    let mut interval48\
    \ = interval2;\n    let mut interval49 = interval1;\n    let mut interval50 =\
    \ interval2;\n    let mut interval51 = interval1;\n    let mut interval52 = interval2;\n\
    \    let mut interval53 = interval1;\n    let mut interval54 = interval2;\n  \
    \  let mut interval55 = interval1;\n    let mut interval56 = interval2;\n    let\
    \ mut interval57 = interval1;\n    let mut interval58 = interval2;\n    let mu",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  let mut prime_found = false;\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            if interval2_start < interval2_end {\n                if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \ intersection_start = interval1_start;\n                    intersection_end\
    \ = interval1_end;\n                    intersection_length = interval1_end -\
    \ interval1_start;\n                    interval1_prime = true;\n            \
    \        interval2_prime = true;\n                    prime_found = true;\n  \
    \                  break;\n                }\n                if interval2_start\
    \ <= interval1_start && interval2_end >= interval1_end {\n                   \
    \ intersection_start = interval2_start;\n                    intersection_end\
    \ = interval2_end;\n                    intersection_length = interval2_end -\
    \ interval2_start;\n                    interval1_prime = true;\n            \
    \        interval2_prime = true;\n                    prime_found = true;\n  \
    \                  break;\n                }\n            }\n            else\
    \ {\n                if interval1_start <= interval2_start && interval1_end >=\
    \ interval2_end {\n                    intersection_start = interval1_start;\n\
    \                    intersection_end = interval1_end;\n                    intersection_length\
    \ = interval1_end - interval1_start;\n                    interval1_prime = true;\n\
    \                    interval2_prime = true;\n                    prime_found\
    \ = true;\n                    break;\n                }\n                if interval2_start\
    \ <= interval1_start && interval2_end >= interval1_end {\n                   \
    \ intersection_start = interval2_start;\n                    intersection_end\
    \ = interval2_end;\n                    intersection_length = interval2_end -\
    \ interval2_start;\n                    interval1_prime = true;\n            \
    \        interval2_prime = true;\n                    prime_found = true;\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   else {\n            if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n                intersection_start = interval1_start;\n\
    \                intersection_end = interval1_end;\n                intersection_length\
    \ = interval1_end - interval1_start;\n                interval1_prime = true;\n\
    \                interval2_prime = true;\n                prime_found = true;\n\
    \                break;\n            }\n            if interval2_start <= interval1_start\
    \ && interval2_end >= interval1_end {\n                intersection_start = interval2_start;\n\
    \                intersection_end = ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut prime_number: isize = 1;\n    let mut prime_number_counter: isize\
    \ = 1;\n    let mut prime_number_counter2: isize = 1;\n    let mut prime_number_counter3:\
    \ isize = 1;\n    let mut prime_number_counter4: isize = 1;\n    let mut prime_number_counter5:\
    \ isize = 1;\n    let mut prime_number_counter6: isize = 1;\n    let mut prime_number_counter7:\
    \ isize = 1;\n    let mut prime_number_counter8: isize = 1;\n    let mut prime_number_counter9:\
    \ isize = 1;\n    let mut prime_number_counter10: isize = 1;\n    let mut prime_number_counter11:\
    \ isize = 1;\n    let mut prime_number_counter12: isize = 1;\n    let mut prime_number_counter13:\
    \ isize = 1;\n    let mut prime_number_counter14: isize = 1;\n    let mut prime_number_counter15:\
    \ isize = 1;\n    let mut prime_number_counter16: isize = 1;\n    let mut prime_number_counter17:\
    \ isize = 1;\n    let mut prime_number_counter18: isize = 1;\n    let mut prime_number_counter19:\
    \ isize = 1;\n    let mut prime_number_counter20: isize = 1;\n    let mut prime_number_counter21:\
    \ isize = 1;\n    let mut prime_number_counter22: isize = 1;\n    let mut prime_number_counter23:\
    \ isize = 1;\n    let mut prime_number_counter24: isize = 1;\n    let mut prime_number_counter25:\
    \ isize = 1;\n    let mut prime_number_counter26: isize = 1;\n    let mut prime_number_counter27:\
    \ isize = 1;\n    let mut prime_number_counter28: isize = 1;\n    let mut prime_number_counter29:\
    \ isize = 1;\n    let mut prime_number_counter30: isize = 1;\n    let mut prime_number_counter31:\
    \ isize = 1;\n    let mut prime", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut is_prime = true;\n    \n   \
    \ while intersection_start <= interval2_end {\n        if interval1_start < intersection_end\
    \ {\n            if interval1_end < intersection_end {\n                intersection_length\
    \ = intersection_end - intersection_start;\n                is_prime = is_prime\
    \ && interval1_length == intersection_length;\n            }\n            else\
    \ {\n                intersection_length = intersection_end - intersection_start;\n\
    \                is_prime = is_prime && interval1_length == intersection_length;\n\
    \            }\n        }\n        else {\n            intersection_length = intersection_end\
    \ - intersection_start;\n            is_prime = is_prime && interval1_length ==\
    \ intersection_length;\n        }\n        \n        intersection_start = intersection_end\
    \ + 1;\n        intersection_end = intersection_start + 1;\n    }\n    \n    if\
    \ is_prime {\n        return \"YES\";\n    }\n    else {\n        return \"NO\"\
    ;\n    }", "    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut intersection = interval1;\n    let mut intersection2 = interval2;\n\
    \    let mut prime = true;\n    let mut prime2 = true;\n    let mut prime3 = true;\n\
    \    let mut prime4 = true;\n    let mut prime5 = true;\n    let mut prime6 =\
    \ true;\n    let mut prime7 = true;\n    let mut prime8 = true;\n    let mut prime9\
    \ = true;\n    let mut prime10 = true;\n    let mut prime11 = true;\n    let mut\
    \ prime12 = true;\n    let mut prime13 = true;\n    let mut prime14 = true;\n\
    \    let mut prime15 = true;\n    let mut prime16 = true;\n    let mut prime17\
    \ = true;\n    let mut prime18 = true;\n    let mut prime19 = true;\n    let mut\
    \ prime20 = true;\n    let mut prime21 = true;\n    let mut prime22 = true;\n\
    \    let mut prime23 = true;\n    let mut prime24 = true;\n    let mut prime25\
    \ = true;\n    let mut prime26 = true;\n    let mut prime27 = true;\n    let mut\
    \ prime28 = true;\n    let mut prime29 = true;\n    let mut prime30 = true;\n\
    \    let mut prime31 = true;\n    let mut prime32 = true;\n    let mut prime33\
    \ = true;\n    let mut prime34 = true;\n    let mut prime35 = true;\n    let mut\
    \ prime36 = true;\n    let mut prime37 = true;\n    let mut prime38 = true;\n\
    \    let mut prime39 = true;\n    let mut prime40 = true;\n    let mut prime41\
    \ = true;\n    let mut prime42 = true;\n    let mut prime43 = true;\n    let mut\
    \ prime44 = true;\n    let mut prime45 = true;\n    let mut prime46 = true;\n\
    \    let mut prime47 = true;\n    let mut prime48 = true;\n    let mut prime49\
    \ = true;\n    let mut prime50 = true;\n    let mut prime51 = true;\n    let mut\
    \ prime52 = true;\n    let mut prime53 = true;\n    let mut prime54 = true;\n\
    \    let mut prime55 = true;\n    let mut prime56 = true;\n    let mut prime57\
    \ = true;\n    let mut prime58 = true;\n    let mut prime59 = true;\n    let mut\
    \ prime60 = true;\n    let mut prime61 = true;\n    let mut prime62 = true;\n\
    \    let mut prime63 = true;\n    let mut prime64 = true;\n    let mut prime65\
    \ = true;\n    let mut prime66 = true;\n    let mut prime67 = true;", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval1_is_prime = true;\n    let mut interval2_is_prime = true;\n\
    \    \n    while interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n        if interval1_start == interval1_end {\n            interval1_is_prime\
    \ = false;\n            interval1_start = interval1_end + 1;\n        }\n    \
    \    if interval2_start == interval2_end {\n            interval2_is_prime = false;\n\
    \            interval2_start = interval2_end + 1;\n        }\n        if interval1_start\
    \ < interval1_end {\n            if interval2_start < interval2_end {\n      \
    \          intersection_start = interval1_start;\n                intersection_end\
    \ = interval1_end;\n                intersection_length = interval1_end - interval1_start;\n\
    \            }\n            else {\n                intersection_start = interval1_end;\n\
    \                intersection_end = interval1_end + 1;\n                intersection_length\
    \ = interval1_end - interval1_start;\n            }\n        }\n        else {\n\
    \            if interval2_start < interval2_end {\n                intersection_start\
    \ = interval1_end + 1;\n                intersection_end = interval1_end + 1;\n\
    \                intersection_length = interval1_end - interval1_start;\n    \
    \        }\n            else {\n                intersection_start = interval1_end\
    \ + 1;\n                intersection_end = interval1_end + 1;\n              \
    \  intersection_length = interval1_end - interval1_start;\n            }\n   \
    \     }\n        \n        if intersection_length == 2 {\n            if interval1_is_prime\
    \ && interval2_is_prime {\n                return \"YES\";\n            }\n  \
    \          else if interval1_is_prime {\n                return \"NO\";\n    \
    \        }\n            else if interval2_is_prime {\n                return \"\
    NO\";\n            }\n        }\n        \n        interval1_start += 1;\n   \
    \     interval1_end += 1;\n        interval2_start += 1;\n        interval2_end\
    \ += 1;\n    }\n    \n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  let mut prime_number = false;\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            intersection_start = interval1_start;\n            intersection_end\
    \ = interval1_end;\n            intersection_length = interval1_end - intersection_start;\n\
    \            interval1_length = interval1_end - interval1_start;\n           \
    \ interval1_prime = true;\n        } else {\n            intersection_start =\
    \ interval1_end;\n            intersection_end = interval1_end;\n            intersection_length\
    \ = interval1_end - intersection_start;\n            interval1_length = interval1_end\
    \ - interval1_start;\n            interval1_prime = false;\n        }\n      \
    \  \n        if interval2_start < interval2_end {\n            interval2_start\
    \ = interval2_end;\n            interval2_end = interval2_end;\n            interval2_length\
    \ = interval2_end - interval2_start;\n            interval2_prime = true;\n  \
    \      } else {\n            interval2_start = interval2_end;\n            interval2_end\
    \ = interval2_end;\n            interval2_length = interval2_end - interval2_start;\n\
    \            interval2_prime = false;\n        }\n        \n        if intersection_length\
    \ == interval1_length && intersection_length == interval2_length {\n         \
    \   if intersection_start == intersection_end {\n                if interval1_prime\
    \ && interval2_prime {\n                    prime_number = true;\n           \
    \     }\n            } else {\n                if interval1_prime {\n        \
    \            prime_number = true;\n                }\n            }\n        }\n\
    \    }\n    \n    if interval1_start > interval1_end {\n        prime_number =\
    \ false;\n    }\n    \n    if interval2_start > interval2_end {\n        prime_number\
    \ = false;\n    }\n    \n    if prime_number {\n        return \"YES\";\n    }\
    \ else {\n        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \        interval2_start, interval2_end = interval1_start, interval1_end;\n  \
    \  }\n\n    if interval1_end < interval2_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n        interval2_start, interval2_end =\
    \ interval2_end, interval2_start;\n    }\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \        interval2_start, interval2_end = interval2_end, interval2_start;\n  \
    \  }\n\n    if interval1_end < interval2_start {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n        interval2_start, interval2_end =\
    \ interval2_end, interval2_start;\n    }\n\n    if interval1_start == interval1_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start == interval1_end {\n\
    \        return \"YES\";\n    }\n\n    if interval2_start == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_start < interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end > interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start == interval1_end {\n \
    \       return \"YES\";\n    }\n\n    if interval2_start == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_start < interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end > interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start == interval1_end {\n \
    \       return \"YES\";\n    }\n\n    if interval2_start == interval2_end ", " \
    \   let mut intervals = vec![interval1, interval2];\n    intervals.sort();\n \
    \   let mut start = intervals[0].0;\n    let mut end = intervals[1].0;\n    let\
    \ mut length = 0;\n    let mut prime = false;\n    while start < end {\n     \
    \   if start % end == 0 {\n            prime = true;\n            break;\n   \
    \     }\n        start += 1;\n    }\n    if prime == true {\n        return \"\
    YES\";\n    } else {\n        return \"NO\";\n    }", "    let mut interval =\
    \ interval1;\n    let mut interval2 = interval2;\n    let mut interval_len = interval1.0;\n\
    \    let mut interval2_len = interval2.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval2_end = interval2.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval2_start = interval2.0;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_", "    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut interval =\
    \ interval1;\n        interval[0] = interval1[1];\n        interval[1] = interval2[0];\n\
    \        interval\n    } else {\n        let mut interval = interval2;\n     \
    \   interval[0] = interval2[0];\n        interval[1] = interval1[0];\n       \
    \ interval\n    }\n    let mut prime = true;\n    for i in 0..interval[0] {\n\
    \        if interval[0] % i == 0 {\n            prime = false;\n            break;\n\
    \        }\n    }\n    for i in 0..interval[1] {\n        if interval[1] % i ==\
    \ 0 {\n            prime = false;\n            break;\n        }\n    }\n    if\
    \ prime {\n        return \"YES\";\n    }\n    return \"NO\";", "    let (start,\
    \ end) = interval1;\n    let (start2, end2) = interval2;\n    if start > end {\n\
    \        (start, end) = (end, start);\n    }\n    if start2 > end2 {\n       \
    \ (start2, end2) = (end2, start2);\n    }\n    if start == end2 {\n        return\
    \ \"NO\";\n    }\n    let mut prime = true;\n    let mut prime2 = true;\n    let\
    \ mut prime3 = true;\n    let mut prime4 = true;\n    let mut prime5 = true;\n\
    \    let mut prime6 = true;\n    let mut prime7 = true;\n    let mut prime8 =\
    \ true;\n    let mut prime9 = true;\n    let mut prime10 = true;\n    let mut\
    \ prime11 = true;\n    let mut prime12 = true;\n    let mut prime13 = true;\n\
    \    let mut prime14 = true;\n    let mut prime15 = true;\n    let mut prime16\
    \ = true;\n    let mut prime17 = true;\n    let mut prime18 = true;\n    let mut\
    \ prime19 = true;\n    let mut prime20 = true;\n    let mut prime21 = true;\n\
    \    let mut prime22 = true;\n    let mut prime23 = true;\n    let mut prime24\
    \ = true;\n    let mut prime25 = true;\n    let mut prime26 = true;\n    let mut\
    \ prime27 = true;\n    let mut prime28 = true;\n    let mut prime29 = true;\n\
    \    let mut prime30 = true;\n    let mut prime31 = true;\n    let mut prime32\
    \ = true;\n    let mut prime33 = true;\n    let mut prime34 = true;\n    let mut\
    \ prime35 = true;\n    let mut prime36 = true;\n    let mut prime37 = true;\n\
    \    let mut prime38 = true;\n    let mut prime39 = true;\n    let mut prime40\
    \ = true;\n    let mut prime41 = true;\n    let mut prime42 = true;\n    let mut\
    \ prime43 = true;\n    let mut prime44 = true;\n    let mut prime45 = true;\n\
    \    let mut prime46 = true;\n    let mut prime47 = true;\n    let mut prime48\
    \ = true;\n    let mut prime49 = true;\n    let mut prime50 = true;\n    let mut\
    \ prime51 = true;\n    let mut prime52 = true;\n    let mut prime53 = true;\n\
    \    let mut prime54 = true;\n    let mut prime55 = true;\n    let mut prime56\
    \ = true;\n    let mut prime57 = true;\n    let mut prime58 = true;\n    let mut\
    \ prime59 = true;\n    let mut prime60 = true;\n    let mut prime61 = true;\n\
    \    let mut prime62 = true;\n    let mu", "    let mut intervals = vec![interval1,\
    \ interval2];\n    let mut start = interval1.0;\n    let mut end = interval2.0;\n\
    \    let mut length = 0;\n    let mut prime = false;\n    loop {\n        if start\
    \ > end {\n            break;\n        }\n        let mut i = start;\n       \
    \ let mut j = end;\n        while i <= j {\n            if intervals[i].0 > intervals[j].0\
    \ {\n                i += 1;\n            } else {\n                j -= 1;\n\
    \            }\n        }\n        if i == j {\n            prime = true;\n  \
    \          length += 1;\n            i += 1;\n            j -= 1;\n        } else\
    \ {\n            intervals.push(vec![i, j]);\n            i += 1;\n          \
    \  j -= 1;\n        }\n    }\n    if prime {\n        return \"YES\".to_string();\n\
    \    } else {\n        return \"NO\".to_string();\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut interval1_length\
    \ = interval2_end - interval2_start;\n    let mut interval2_length = interval1_end\
    \ - interval1_start;\n    \n    while interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n        if interval1_start < interval1_end {\n         \
    \   intersection_start = interval1_start;\n            intersection_end = interval1_end;\n\
    \            intersection_length += 1;\n        }\n        if interval2_start\
    \ < interval2_end {\n            interval1_start = interval2_start;\n        \
    \    interval1_end = interval2_end;\n            interval1_length += 1;\n    \
    \    }\n        interval2_start = interval2_end;\n        interval2_end = interval2_start\
    \ + 1;\n        interval2_length += 1;\n    }\n    \n    if interval1_start ==\
    \ interval1_end {\n        if interval2_start == interval2_end {\n           \
    \ if intersection_length == interval1_length {\n                return \"YES\"\
    ;\n            }\n            return \"NO\";\n        }\n        return \"NO\"\
    ;\n    }\n    \n    if interval2_start == interval2_end {\n        return \"NO\"\
    ;\n    }\n    \n    if intersection_length == interval1_length {\n        return\
    \ \"YES\";\n    }\n    \n    if intersection_length == interval2_length {\n  \
    \      return \"YES\";\n    }\n    \n    if intersection_length < interval1_length\
    \ {\n        return \"NO\";\n    }\n    \n    if intersection_length < interval2_length\
    \ {\n        return \"NO\";\n    }\n    \n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_end {\n        let temp = interval1_end;\n        interval1_end\
    \ = interval2_start;\n        interval2_start = temp;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        let temp = interval1_start;\n        interval1_start\
    \ = interval2_end;\n        interval2_end = temp;\n    }\n\n    if interval1_start\
    \ > interval2_start {\n        let temp = interval1_start;\n        interval1_start\
    \ = interval2_start;\n        interval2_start = temp;\n    }\n\n    if interval1_end\
    \ < interval2_end {\n        let temp = interval1_end;\n        interval1_end\
    \ = interval2_end;\n        interval2_end = temp;\n    }\n\n    if interval1_start\
    \ == interval1_end {\n        return \"NO\";\n    }\n\n    if interval2_start\
    \ == interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start\
    \ < interval2_start {\n        return \"NO\";\n    }\n\n    if interval1_end >\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end > interval2_start {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end == interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end < interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end == interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end < interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_end == interval2_end {\n   \
    \     return \"YES\";\n    }\n\n    if interval1_start == interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end < interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end == interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = 0;\n    \n    while interval1_start <= interval1_end && interval2_start <=\
    \ interval2_end {\n        if interval1_start < interval1_end {\n            intersection_length\
    \ += 1;\n            interval1_start += 1;\n        }\n        if interval2_start\
    \ < interval2_end {\n            intersection_length += 1;\n            interval2_start\
    \ += 1;\n        }\n    }\n    \n    if interval1_start > interval1_end {\n  \
    \      intersection_length -= 1;\n        interval1_end += 1;\n    }\n    if interval2_start\
    \ > interval2_end {\n        intersection_length -= 1;\n        interval2_end\
    \ += 1;\n    }\n    \n    if intersection_length == 0 {\n        return \"NO\"\
    ;\n    }\n    \n    if intersection_length == 1 {\n        return \"YES\";\n \
    \   }\n    \n    if intersection_length == 2 {\n        if interval1_start ==\
    \ interval1_end {\n            return \"YES\";\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    \n  \
    \  if intersection_length == 3 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\";\n        }\n        if interval2_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n    }\n    \n    if intersection_length\
    \ == 4 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n        if interval1_start == interval2_start {\n\
    \            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n    }\n    \n    if intersection_length\
    \ == 5 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n        if interval1_start == interval2_start {\n\
    \            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n    }\n    \n    if intersection_length\
    \ == 6 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    let mut intersection_len = interval1_len + interval2_len;\n    let mut prime_number:\
    \ isize = 1;\n    let mut prime_number_flag = false;\n    let mut prime_number_flag2\
    \ = false;\n    let mut prime_number_flag3 = false;\n    let mut prime_number_flag4\
    \ = false;\n    let mut prime_number_flag5 = false;\n    let mut prime_number_flag6\
    \ = false;\n    let mut prime_number_flag7 = false;\n    let mut prime_number_flag8\
    \ = false;\n    let mut prime_number_flag9 = false;\n    let mut prime_number_flag10\
    \ = false;\n    let mut prime_number_flag11 = false;\n    let mut prime_number_flag12\
    \ = false;\n    let mut prime_number_flag13 = false;\n    let mut prime_number_flag14\
    \ = false;\n    let mut prime_number_flag15 = false;\n    let mut prime_number_flag16\
    \ = false;\n    let mut prime_number_flag17 = false;\n    let mut prime_number_flag18\
    \ = false;\n    let mut prime_number_flag19 = false;\n    let mut prime_number_flag20\
    \ = false;\n    let mut prime_number_flag21 = false;\n    let mut prime_number_flag22\
    \ = false;\n    let mut prime_number_flag23 = false;\n    let mut prime_number_flag24\
    \ = false;\n    let mut prime_number_flag25 = false;\n    let mut prime_number_flag26\
    \ = false;\n    let mut prime_number_flag27 = false;\n    let mut prime_number_flag28\
    \ = false;\n    let mut prime_number_flag29 = false;\n    let mut prime_number_flag30\
    \ = false;\n    let mut prime_number_flag31 = false;\n    let mut prime_number_flag32\
    \ = false;\n    let mut prime_number_flag33 = false;\n    let mut prime_number_flag34\
    \ = false;\n    let mut prime_number_flag35 = false;\n    let mut prime_number_flag36\
    \ = false;\n    let mut prime_number_flag37 = false;\n    let mut prime_number_flag38\
    \ = false;\n    let mut prime_number_flag39 = false;\n    let mut prime_number_flag40\
    \ = false;\n    let mut prime_number_flag41 = false;\n    let mut prime_number_flag42\
    \ = ", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_length = interval1_end - interval1_start;\n\
    \    let mut interval_length2 = interval2_end - interval2_start;\n    let mut\
    \ prime_number: isize = 0;\n    let mut prime_number2: isize = 0;\n    let mut\
    \ prime_number3: isize = 0;\n    let mut prime_number4: isize = 0;\n    let mut\
    \ prime_number5: isize = 0;\n    let mut prime_number6: isize = 0;\n    let mut\
    \ prime_number7: isize = 0;\n    let mut prime_number8: isize = 0;\n    let mut\
    \ prime_number9: isize = 0;\n    let mut prime_number10: isize = 0;\n    let mut\
    \ prime_number11: isize = 0;\n    let mut prime_number12: isize = 0;\n    let\
    \ mut prime_number13: isize = 0;\n    let mut prime_number14: isize = 0;\n   \
    \ let mut prime_number15: isize = 0;\n    let mut prime_number16: isize = 0;\n\
    \    let mut prime_number17: isize = 0;\n    let mut prime_number18: isize = 0;\n\
    \    let mut prime_number19: isize = 0;\n    let mut prime_number20: isize = 0;\n\
    \    let mut prime_number21: isize = 0;\n    let mut prime_number22: isize = 0;\n\
    \    let mut prime_number23: isize = 0;\n    let mut prime_number24: isize = 0;\n\
    \    let mut prime_number25: isize = 0;\n    let mut prime_number26: isize = 0;\n\
    \    let mut prime_number27: isize = 0;\n    let mut prime_number28: isize = 0;\n\
    \    let mut prime_number29: isize = 0;\n    let mut prime_number30: isize = 0;\n\
    \    let mut prime_number31: isize = 0;\n    let mut prime_number32: isize = 0;\n\
    \    let mut prime_number33: isize = 0;\n    let mut prime_number34: isize = 0;\n\
    \    let mut prime_number35: isize = 0;\n    let mut prime_number36: isize = 0;\n\
    \    let mut prime_number37: isize = 0;\n    let mut prime_number", "    let mut\
    \ interval = interval1;\n    interval.0 = interval.0 as isize;\n    interval.1\
    \ = interval.1 as isize;\n    let mut interval2 = interval2;\n    interval2.0\
    \ = interval2.0 as isize;\n    interval2.1 = interval2.1 as isize;\n    if interval.0\
    \ > interval2.0 {\n        interval = interval2;\n    }\n    if interval.1 > interval2.1\
    \ {\n        interval = interval2;\n    }\n    if interval.0 > interval2.0 ||\
    \ interval.1 > interval2.1 {\n        return \"NO\";\n    }\n    let mut flag\
    \ = false;\n    let mut i = interval.0;\n    let mut j = interval.1;\n    let\
    \ mut k = interval2.0;\n    let mut l = interval2.1;\n    while i <= j && k <=\
    \ l {\n        if interval[i] < interval[k] {\n            i += 1;\n        }\n\
    \        if interval[j] > interval[k] {\n            j += 1;\n        }\n    \
    \    if interval[i] < interval[k] {\n            k += 1;\n        }\n        if\
    \ interval[j] > interval[k] {\n            l += 1;\n        }\n        if interval[i]\
    \ == interval[j] {\n            flag = true;\n        }\n    }\n    if flag {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    let (start, end) =\
    \ interval1;\n    let (start2, end2) = interval2;\n    if start > end {\n    \
    \    (start, end) = (end, start);\n    }\n    if start2 > end2 {\n        (start2,\
    \ end2) = (end2, start2);\n    }\n    let mut intersection = start;\n    while\
    \ intersection < end {\n        if intersection == start2 {\n            intersection\
    \ += 1;\n        }\n        if intersection == end2 {\n            intersection\
    \ += 1;\n        }\n    }\n    if intersection == end {\n        return \"YES\"\
    ;\n    }\n    if intersection == start {\n        return \"NO\";\n    }\n    if\
    \ intersection % 2 == 0 {\n        return \"NO\";\n    }\n    return \"YES\";"]
stop_tokens:
- "\n}"
