name: HumanEval_58_common
language: rs
prompt: "/// Return sorted unique common elements for two lists.\nfn common(l1: Vec<isize>,\
  \ l2: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
  \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
  \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
  \ vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n}\n"
completions: ["    let mut result = Vec::new();\n    for i in l1.iter() {\n      \
    \  if !l2.contains(&i) {\n            result.push(i);\n        }\n    }\n    result",
  "    let mut result = Vec::new();\n    let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n    while l1.len()\
    \ > 0 || l2.len() > 0 {\n        if l1.len() == 0 {\n            result.push(*l2.pop());\n\
    \        } else if l2.len() == 0 {\n            result.push(*l1.pop());\n    \
    \    } else {\n            let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n\
    \            let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n          \
    \  let mut i = 0;\n            while l1.len() > 0 && l2.len() > 0 {\n        \
    \        if l1[0] < l2[0] {\n                    result.push(*l1.pop());\n   \
    \                 i += 1;\n                } else {\n                    result.push(*l2.pop());\n\
    \                    i += 1;\n                }\n            }\n            while\
    \ l1.len() > 0 {\n                result.push(*l1.pop());\n                i +=\
    \ 1;\n            }\n            while l2.len() > 0 {\n                result.push(*l2.pop());\n\
    \                i += 1;\n            }\n        }\n    }\n    result", "    let\
    \ mut result = Vec::new();\n    let mut i = 0;\n    while i < l1.len() && i <\
    \ l2.len() {\n        if l1[i] == l2[i] {\n            result.push(l1[i]);\n \
    \           i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result", "    let mut result = Vec::new();\n    for i in l1.iter().cloned().chain(l2.iter().cloned())\
    \ {\n        if result.iter().any(|&x| x == i) {\n            continue;\n    \
    \    }\n        result.push(i);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n    let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n\
    \    while l1.len() > 0 || l2.len() > 0 {\n        if l1.len() == 0 {\n      \
    \      result.push(l2.pop());\n        } else if l2.len() == 0 {\n           \
    \ result.push(l1.pop());\n        } else {\n            let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n\
    \            let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n          \
    \  while l1.len() > 0 && l2.len() > 0 {\n                if l1.front() == l2.front()\
    \ {\n                    l1.pop();\n                    l2.pop();\n          \
    \      } else {\n                    break;\n                }\n            }\n\
    \            result.push(l1.pop());\n            result.push(l2.pop());\n    \
    \    }\n    }\n    result", "    let mut l3 = Vec::new();\n    for i in l1.iter()\
    \ {\n        if l2.iter().any(|&x| x == i) {\n            l3.push(i);\n      \
    \  }\n    }\n    l3", "    let mut result = Vec::new();\n    for i in l1.iter()\
    \ {\n        if l2.iter().any(|&x| x == i) {\n            result.push(i);\n  \
    \      }\n    }\n    result", "    let mut result = Vec::new();\n    for i in\
    \ l1.iter() {\n        if l2.iter().any(|&x| x == i) {\n            result.push(i);\n\
    \        }\n    }\n    result", "    let mut result = Vec::new();\n    let mut\
    \ l1 = l1.iter().cloned().collect::<Vec<_>>();\n    let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n\
    \    while l1.len() > 0 || l2.len() > 0 {\n        if l1.len() == 0 {\n      \
    \      result.push(l2.pop());\n        } else if l2.len() == 0 {\n           \
    \ result.push(l1.pop());\n        } else {\n            let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n\
    \            let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n          \
    \  let mut i = 0;\n            while l1.len() > 0 && l2.len() > 0 {\n        \
    \        if l1[i] < l2[i] {\n                    result.push(l1.pop());\n    \
    \            } else {\n                    result.push(l2.pop());\n          \
    \      }\n                i += 1;\n            }\n            while l1.len() >\
    \ 0 {\n                result.push(l1.pop());\n            }\n            while\
    \ l2.len() > 0 {\n                result.push(l2.pop());\n            }\n    \
    \    }\n    }\n    result", "    let mut result = Vec::new();\n    let mut l1_iter\
    \ = l1.iter();\n    let mut l2_iter = l2.iter();\n    while let Some(i) = l1_iter.next()\
    \ {\n        if let Some(j) = l2_iter.next() {\n            if i == j {\n    \
    \            continue;\n            }\n            result.push(i);\n        }\n\
    \    }\n    result", "    let mut result = Vec::new();\n    for i in l1.iter()\
    \ {\n        if l2.iter().any(|&x| x == i) {\n            result.push(i);\n  \
    \      }\n    }\n    result", "    let mut l = l1.clone();\n    l.retain(l2);\n\
    \    l", "    let mut l3 = l1.clone();\n    l3.sort();\n    let mut l4 = l2.clone();\n\
    \    l4.sort();\n    l3.iter().zip(l4.iter()).filter(|&(i, j)| i == j).collect()",
  "    let mut l3 = Vec::new();\n    for i in l1.iter() {\n        if l2.iter().any(|&x|\
    \ x == i) {\n            l3.push(i);\n        }\n    }\n    l3", "    let mut\
    \ result = Vec::new();\n    let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n    while l1.len()\
    \ > 0 || l2.len() > 0 {\n        if l1.len() == 0 {\n            result.push(*l2.pop());\n\
    \        } else if l2.len() == 0 {\n            result.push(*l1.pop());\n    \
    \    } else {\n            let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n\
    \            let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n          \
    \  while l1.len() > 0 && l2.len() > 0 {\n                if *l1.front() == *l2.front()\
    \ {\n                    l1.pop();\n                    l2.pop();\n          \
    \      } else {\n                    break;\n                }\n            }\n\
    \            result.push(*l1.pop());\n        }\n    }\n    result", "    let\
    \ mut result = Vec::new();\n    for i in l1.iter() {\n        if !l2.contains(&i)\
    \ {\n            result.push(i);\n        }\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n    while l1.len()\
    \ > 0 || l2.len() > 0 {\n        if l1.len() == 0 {\n            result.push(l2.pop());\n\
    \        } else if l2.len() == 0 {\n            result.push(l1.pop());\n     \
    \   } else {\n            let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n\
    \            let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n          \
    \  while l1.len() > 0 && l2.len() > 0 {\n                if l1.front() == l2.front()\
    \ {\n                    l1.pop();\n                    l2.pop();\n          \
    \      } else {\n                    break;\n                }\n            }\n\
    \            result.push(l1.pop());\n            result.push(l2.pop());\n    \
    \    }\n    }\n    result", "    let mut result = Vec::new();\n    let mut l1\
    \ = l1.iter().cloned().collect::<Vec<_>>();\n    let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n\
    \    while l1.len() != 0 || l2.len() != 0 {\n        if l1.len() == 0 {\n    \
    \        result.push(l2.pop());\n        } else if l2.len() == 0 {\n         \
    \   result.push(l1.pop());\n        } else {\n            let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n\
    \            let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n          \
    \  while l1.len() != 0 || l2.len() != 0 {\n                if l1.len() == 0 {\n\
    \                    result.push(l2.pop());\n                } else if l2.len()\
    \ == 0 {\n                    result.push(l1.pop());\n                } else {\n\
    \                    if l1.last().unwrap() == l2.last().unwrap() {\n         \
    \               l1.pop();\n                        l2.pop();\n               \
    \     } else {\n                        break;\n                    }\n      \
    \          }\n            }\n        }\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n  \
    \  let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n    while l1.len() >\
    \ 0 || l2.len() > 0 {\n        if l1.len() == 0 {\n            result.push(*l2.pop());\n\
    \        } else if l2.len() == 0 {\n            result.push(*l1.pop());\n    \
    \    } else {\n            let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n\
    \            let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n          \
    \  while l1.len() > 0 && l2.len() > 0 {\n                if *l1.front() == *l2.front()\
    \ {\n                    l1.pop();\n                    l2.pop();\n          \
    \      } else {\n                    break;\n                }\n            }\n\
    \            result.push(*l1.pop());\n        }\n    }\n    result", "    let\
    \ mut result = Vec::new();\n    let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n    while l1.len()\
    \ != 0 || l2.len() != 0 {\n        if l1.len() == 0 {\n            result.push(l2.pop());\n\
    \        } else if l2.len() == 0 {\n            result.push(l1.pop());\n     \
    \   } else {\n            let mut l1 = l1.iter().cloned().collect::<Vec<_>>();\n\
    \            let mut l2 = l2.iter().cloned().collect::<Vec<_>>();\n          \
    \  while l1.len() != 0 || l2.len() != 0 {\n                if l1.len() == 0 {\n\
    \                    result.push(l2.pop());\n                } else if l2.len()\
    \ == 0 {\n                    result.push(l1.pop());\n                } else {\n\
    \                    if l1.last() == l2.last() {\n                        l1.pop();\n\
    \                        l2.pop();\n                    } else {\n           \
    \             break;\n                    }\n                }\n            }\n\
    \        }\n    }\n    result"]
stop_tokens:
- "\n}"
