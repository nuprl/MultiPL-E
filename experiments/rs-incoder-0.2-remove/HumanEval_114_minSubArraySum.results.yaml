language: rs
name: HumanEval_114_minSubArraySum
results:
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n\
    \    for num in nums.iter().skip(1) {\n        min_sum = min_sum - num;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpqc0wqjt9.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1ha2p7rm.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().sum();\n    for &n in nums.iter().rev()\
    \ {\n        min_sum = min_sum - n;\n    }\n    min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_mw2yr4k.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n\
    \    for num in nums.iter() {\n        min_sum = min_sum - num;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpj67ivxtn.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n\
    \    for &i in nums.iter() {\n        min_sum = min_sum - i;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp59hbdq1f.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1ha2p7rm.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().sum();\n    for &n in nums.iter()\
    \ {\n        min_sum = min_sum - n;\n    }\n    min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpj0tyg7t7.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().sum();\n    for num in nums.iter()\
    \ {\n        min_sum = min_sum - num;\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpzx1_k945.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1ha2p7rm.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().sum();\n    for &n in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - n;\n    }\n    min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpc9ut5u2t.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 1
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = isize::MAX;\n    for num in nums.iter() {\n \
    \       min_sum = min(min_sum, num + min_sum);\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpulsor03u.rs:7:19\n\
    \   |\n7  |         min_sum = min(min_sum, num + min_sum);\n   |             \
    \      ^^^\n...\n12 | fn main() {\n   | --------- similarly named function `main`\
    \ defined here\n   |\nhelp: a function with a similar name exists\n   |\n7  |\
    \         min_sum = main(min_sum, num + min_sum);\n   |                   ~~~~\n\
    help: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n\
    \    for num in nums.iter() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmps_220zfz.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 1
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n\
    \    for &i in nums.iter().skip(1) {\n        min_sum = min_sum.min(|a, b| a +\
    \ b - i);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmcme9k5r.rs:7:31\n  |\n7 |\
    \         min_sum = min_sum.min(|a, b| a + b - i);\n  |                      \
    \         ^^^^^^^^^^^^^^^^ expected `isize`, found closure\n  |\n  = note: expected\
    \ type `isize`\n          found closure `[closure@/tmp/tmpmcme9k5r.rs:7:31: 7:47]`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n    for\
    \ &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpp2ly4wbz.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().sum();\n    for num in nums.iter()\
    \ {\n        min_sum = min_sum - num;\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpzx1_k945.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().sum();\n    for num in nums.iter()\
    \ {\n        min_sum = min_sum - num;\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpzx1_k945.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n\
    \    for num in nums.iter() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            break;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp3y_60ftn.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().sum();\n    for &n in nums.iter().rev()\
    \ {\n        min_sum = min_sum - n;\n    }\n    min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_mw2yr4k.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 1
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min = nums.iter().min().unwrap();\n    for num in nums.iter()\
    \ {\n        if num < min {\n            min = num;\n        }\n    }\n    min\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo0hflba0.rs:11:5\n   |\n\
    4  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n11 |\
    \     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |     *min\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805113
- exit_code: 101
  program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n    let mut min_sum = nums.iter().sum();\n    for num in nums.iter()\
    \ {\n        min_sum = min_sum - num;\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpzx1_k945.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805113
