name: HumanEval_161_solve
language: rs
prompt: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the\
  \ string contains no letters, reverse the string.\n/// The function should return\
  \ the resulted string.\n/// Examples\nfn solve(s: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut s = s;\n    let mut res = String::new();\n    for i in\
    \ s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    res.reverse();\n    return res;", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    let mut i = 0;\n    while i < s.len() {\n        let c\
    \ = s[i];\n        if c.is_lowercase() {\n            s[i] = c.to_uppercase();\n\
    \        } else {\n            s[i] = c.to_lowercase();\n        }\n        res\
    \ += &s[i];\n        i += 1;\n    }\n    res", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s[i].is_ascii() {\n            if s[i].to_ascii_lowercase() == s[i] {\n    \
    \            s[i] = s[i].to_ascii_uppercase();\n            } else {\n       \
    \         s[i] = s[i].to_ascii_lowercase();\n            }\n        } else {\n\
    \            s[i] = s[i].to_ascii_lowercase();\n        }\n        res.push_str(&s[i]);\n\
    \        i += 1;\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(&s[..]);\n    return res;", "    let mut s = String::from(s);\n\
    \    let mut res = String::from(s);\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(&i.to_uppercase());\n        } else {\n        \
    \    res.push_str(&i.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n       \
    \ } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n  \
    \  res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(&s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    while !s.is_empty() {\n        let c = s.chars().next().unwrap();\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.reverse();\n    return res;", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            res.push_str(c.to_lowercase());\n        } else {\n            res.push_str(c.to_uppercase());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for i in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(&s);\n    res", "    let mut s = s;\n    let mut res =\
    \ \"\";\n    for c in s.chars() {\n        if c.is_uppercase() {\n           \
    \ res = c.to_string() + res;\n        } else {\n            res = c + res;\n \
    \       }\n    }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for i in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(&i.to_uppercase());\n\
    \        } else {\n            res.push_str(&i.to_lowercase());\n        }\n \
    \   }\n    res.push_str(&s);\n    return res;", "    let mut s = String::from(s);\n\
    \    s.chars().for_each(|c| {\n        if c.is_lowercase() {\n            s.swap(0,\
    \ 1);\n        }\n        if c.is_uppercase() {\n            s.swap(0, 1);\n \
    \       }\n    });\n    s", "    let mut s = s;\n    let mut res = String::new();\n\
    \    while !s.is_empty() {\n        let c = s.chars().next().unwrap();\n     \
    \   if c.is_uppercase() {\n            res.push_str(&c.to_lowercase());\n    \
    \    } else {\n            res.push_str(&c.to_uppercase());\n        }\n    }\n\
    \    res.reverse();\n    return res;", "    let mut s = s;\n    let mut res =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_lowercase() {\n  \
    \          res.push_str(c.to_uppercase());\n        } else {\n            res.push_str(c.to_lowercase());\n\
    \        }\n    }\n    res.push_str(&s[..]);\n    return res;", "    let mut s\
    \ = s;\n    let mut res = String::new();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        let c = s[i];\n        if c.is_uppercase() {\n            res.push_str(&s[..i].to_lowercase());\n\
    \            i += 1;\n        } else {\n            res.push_str(&s[..i].to_uppercase());\n\
    \            i += 1;\n        }\n    }\n    res.push_str(&s[..i].to_uppercase());\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for i in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_letter() {\n       \
    \     if s[i].to_ascii_lowercase() != s[i] {\n                s[i] = s[i].to_ascii_uppercase();\n\
    \            } else {\n                s[i] = s[i].to_ascii_lowercase();\n   \
    \         }\n        } else {\n            s[i] = s[i];\n        }\n        res\
    \ += s[i];\n        i += 1;\n    }\n    res", "    let mut s = String::from(s);\n\
    \    s.reverse();\n    if s.chars().any(|c| !c.is_letter()) {\n        s.reverse();\n\
    \    }\n    s", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s[i].is_letter() {\n            if s[i].to_ascii_lowercase() == s[i] {\n   \
    \             res.push_str(&s[i].to_ascii_uppercase());\n            } else {\n\
    \                res.push_str(&s[i].to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&s[i]);\n        }\n        i += 1;\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ i in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(&i.to_uppercase());\n\
    \        } else {\n            res.push_str(&i.to_lowercase());\n        }\n \
    \   }\n    res.push_str(&s[..]);\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_lowercase()\
    \ {\n            s.swap(i, i + 1);\n            res.swap(i, i + 1);\n        \
    \    i += 1;\n        } else {\n            i += 1;\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n\
    \        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            res.push_str(c.to_lowercase());\n        } else {\n         \
    \   res.push_str(c.to_uppercase());\n        }\n    }\n    res.push_str(&s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n       \
    \ if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n       \
    \ } else {\n            res.push_str(i.to_lowercase());\n        }\n    }\n  \
    \  res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut res =\
    \ String::new();\n    for i in s.chars() {\n        if i.is_lowercase() {\n  \
    \          res.push_str(&i.to_uppercase());\n        } else {\n            res.push_str(&i.to_lowercase());\n\
    \        }\n    }\n    res", "    let mut s = String::from(s);\n    let mut res\
    \ = String::from(s);\n    for i in s.chars() {\n        if i.is_lowercase() {\n\
    \            res.push_str(&i.to_uppercase());\n        } else {\n            res.push_str(&i.to_lowercase());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for i in s.chars() {\n        if i.is_lowercase() {\n            s.swap(0,\
    \ 1);\n        }\n        if i.is_uppercase() {\n            s.swap(0, 1);\n \
    \       }\n        res += &i;\n    }\n    res", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res.push_str(&s[..]);\n\
    \    return res;", "    let mut s = String::from(s);\n    let mut res = String::from(s);\n\
    \    for i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(&i.to_lowercase());\n\
    \        } else {\n            res.push_str(&i.to_uppercase());\n        }\n \
    \   }\n    res", "    let mut s = String::from(s);\n    s.chars().for_each(|c|\
    \ {\n        if c.is_uppercase() {\n            s.swap(0, 1);\n        }\n   \
    \     if c.is_lowercase() {\n            s.swap(0, 1);\n        }\n    });\n \
    \   s", "    let mut s = s;\n    let mut res = String::new();\n    while !s.is_empty()\
    \ {\n        let c = s.chars().next().unwrap();\n        if c.is_uppercase() {\n\
    \            res.push_str(&c.to_lowercase());\n        } else {\n            res.push_str(&c.to_uppercase());\n\
    \        }\n    }\n    res.reverse();\n    return res;", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for i in s.chars() {\n        if i.is_uppercase()\
    \ {\n            res.push_str(&i.to_lowercase());\n        } else {\n        \
    \    res.push_str(&i.to_uppercase());\n        }\n    }\n    res.push_str(&s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for i in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = \"\";\n    for c in s.chars() {\n        if c.is_uppercase() {\n     \
    \       res = c.to_string() + res;\n        } else {\n            res = c + res;\n\
    \        }\n    }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(&i.to_lowercase());\n\
    \        } else {\n            res.push_str(&i.to_uppercase());\n        }\n \
    \   }\n    res.push_str(&s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = \"\";\n    while !s.is_empty() {\n        let c = s.chars().next().unwrap();\n\
    \        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    res.reverse();\n    return res;", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for i in s.chars() {\n        if i.is_uppercase() {\n\
    \            res.push_str(i.to_lowercase());\n        } else {\n            res.push_str(i.to_uppercase());\n\
    \        }\n    }\n    res.reverse();\n    return res;", "    let mut s = s;\n\
    \    let mut res = \"\";\n    for i in s.chars() {\n        if i.is_uppercase()\
    \ {\n            res += i.to_lowercase();\n        } else {\n            res +=\
    \ i.to_uppercase();\n        }\n    }\n    return res;", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for i in s.chars() {\n        if i.is_uppercase()\
    \ {\n            res.push_str(i.to_lowercase());\n        } else {\n         \
    \   res.push_str(i.to_uppercase());\n        }\n    }\n    res.push_str(s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(&s[..]);\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_lowercase() {\n\
    \            res.push_str(c.to_uppercase());\n        } else {\n            res.push_str(c.to_lowercase());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for ch in s.chars() {\n        if ch.is_lowercase() {\n            ch.to_uppercase();\n\
    \        } else {\n            ch.to_lowercase();\n        }\n        res += ch;\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ i in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(i.to_uppercase());\n        } else {\n         \
    \   res.push_str(i.to_lowercase());\n        }\n    }\n    res.push_str(s);\n\
    \    return res;", "    let mut s = String::from(s);\n    s.chars().for_each(|c|\
    \ {\n        if c.is_lowercase() {\n            s.swap(0, s.len() - 1, &c.to_uppercase());\n\
    \        } else {\n            s.swap(0, s.len() - 1, &c.to_lowercase());\n  \
    \      }\n    });\n    s", "    let mut s = String::from(s);\n    let mut res\
    \ = String::from(s);\n    for i in s.chars() {\n        if i.is_lowercase() {\n\
    \            res.swap(0, 1);\n        }\n        if i.is_uppercase() {\n     \
    \       res.swap(0, 1);\n        }\n    }\n    res", "    let mut s = s;\n   \
    \ let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res.push_str(\"\\n\"\
    );\n    return res;", "    let mut s = String::from(s);\n    s.chars().for_each(|c|\
    \ {\n        if c.is_lowercase() {\n            s.swap(0, s.len());\n        }\n\
    \    });\n    s", "    let mut s = s;\n    let mut res = String::new();\n    while\
    \ !s.is_empty() {\n        let c = s.chars().next().unwrap();\n        if c.is_uppercase()\
    \ {\n            res.push_str(c.to_lowercase());\n        } else {\n         \
    \   res.push_str(c.to_uppercase());\n        }\n    }\n    res.reverse();\n  \
    \  res", "    let mut s = s;\n    let mut res = String::new();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i].is_letter() {\n            if\
    \ s[i].to_lowercase() != s[i] {\n                res.push_str(&s[i].to_lowercase());\n\
    \            } else {\n                res.push_str(&s[i]);\n            }\n \
    \       } else {\n            res.push_str(&s[i]);\n        }\n        i += 1;\n\
    \    }\n    res.push_str(\"\\n\");\n    return res;", "    let mut s = s;\n  \
    \  let mut res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(i.to_uppercase());\n        } else {\n         \
    \   res.push_str(i.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n       \
    \ } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n  \
    \  res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut res =\
    \ String::new();\n    let mut i = 0;\n    while i < s.len() {\n        let c =\
    \ s[i];\n        if c.is_ascii_lowercase() {\n            s[i] = c.to_ascii_uppercase();\n\
    \            i += 1;\n        } else {\n            s[i] = c.to_ascii_lowercase();\n\
    \            i += 1;\n        }\n    }\n    res = s.to_string();\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n\
    \        if i.is_lowercase() {\n            res.push_str(&i.to_uppercase());\n\
    \        } else {\n            res.push_str(&i.to_lowercase());\n        }\n \
    \   }\n    res.push_str(&s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res.push_str(&s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ let mut i = 0;\n    while i < s.len() {\n        if s[i].is_lowercase() {\n\
    \            s[i] = s[i].to_uppercase();\n        } else {\n            s[i] =\
    \ s[i].to_lowercase();\n        }\n        res += s[i];\n        i += 1;\n   \
    \ }\n    return res;", "    let mut s = s;\n    let mut res = \"\";\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res = c.to_uppercase()\
    \ + res;\n        } else {\n            res = c.to_lowercase() + res;\n      \
    \  }\n    }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n \
    \           if s[i].to_ascii_lowercase() == s[i] {\n                s[i] = s[i].to_ascii_uppercase();\n\
    \            } else {\n                s[i] = s[i].to_ascii_lowercase();\n   \
    \         }\n        } else {\n            s[i] = s[i].to_ascii_lowercase();\n\
    \        }\n        res += s[i];\n        i += 1;\n    }\n    res.reverse();\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for i in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for ch in s.chars() {\n        if ch.is_lowercase()\
    \ {\n            res.push_str(ch.to_uppercase());\n        } else {\n        \
    \    res.push_str(ch.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            s.swap(0, 1);\n        }\n        if c.is_lowercase()\
    \ {\n            s.swap(0, 1);\n        }\n        res += c;\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(&s[..]);\n    return res;", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(i.to_uppercase());\n        } else {\n         \
    \   res.push_str(i.to_lowercase());\n        }\n    }\n    res.push_str(s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ let mut i = 0;\n    while i < s.len() {\n        if s[i].is_lowercase() {\n\
    \            s[i] = s[i].to_uppercase();\n        } else {\n            s[i] =\
    \ s[i].to_lowercase();\n        }\n        res += s[i];\n        i += 1;\n   \
    \ }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            s.swap(0,\
    \ 1);\n        }\n        if c.is_uppercase() {\n            s.swap(0, 1);\n \
    \       }\n        res.push_str(&s);\n    }\n    res", "    let mut s = s;\n \
    \   let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n       \
    \ } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n  \
    \  res.push_str(&s[..]);\n    return res;", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for i in s.chars() {\n        if i.is_lowercase() {\n\
    \            res.push_str(i.to_uppercase());\n        } else {\n            res.push_str(i.to_lowercase());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            s.swap(0, 1);\n            res.swap(0, 1);\n        }\n     \
    \   if i.is_uppercase() {\n            s.swap(0, 1);\n            res.swap(0,\
    \ 1);\n        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(&s[..]);\n    return res;", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for ch in s.chars() {\n        if ch.is_lowercase()\
    \ {\n            res.push_str(ch.to_uppercase());\n        } else {\n        \
    \    res.push_str(ch.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n       \
    \ } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n  \
    \  res.push_str(&s);\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut s = String::from(s);\n\
    \    s.reverse();\n    if s.chars().any(|c| !c.is_letter()) {\n        s.reverse();\n\
    \    }\n    s", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            s.swap(0, 1);\n\
    \        }\n        if c.is_uppercase() {\n            s.swap(0, 1);\n       \
    \ }\n        res += c;\n    }\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for i in s.chars() {\n        if i.is_lowercase() {\n\
    \            s.swap(0, 1);\n            res.swap(0, 1);\n        }\n        if\
    \ i.is_uppercase() {\n            s.swap(0, 1);\n            res.swap(0, 1);\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(\"\\n\");\n    return res;", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for i in s.chars() {\n        if i.is_uppercase()\
    \ {\n            res.push_str(&i.to_lowercase());\n        } else {\n        \
    \    res.push_str(&i.to_uppercase());\n        }\n    }\n    res.push_str(&s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ let mut i = 0;\n    while i < s.len() {\n        if s[i].is_lowercase() {\n\
    \            s[i] = s[i].to_uppercase();\n        } else {\n            s[i] =\
    \ s[i].to_lowercase();\n        }\n        res.push_str(&s[i]);\n        i +=\
    \ 1;\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n \
    \           if s[i].to_ascii_lowercase() != s[i] {\n                s[i] = s[i].to_ascii_uppercase();\n\
    \            } else {\n                s[i] = s[i].to_ascii_lowercase();\n   \
    \         }\n        } else {\n            s[i] = s[i].to_ascii_uppercase();\n\
    \        }\n        res += s[i];\n        i += 1;\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    while !s.is_empty() {\n      \
    \  let mut c = s.chars().next();\n        if c.is_none() {\n            break;\n\
    \        }\n        let c = c.unwrap();\n        if c.is_uppercase() {\n     \
    \       res.push_str(c.to_lowercase());\n        } else {\n            res.push_str(c.to_uppercase());\n\
    \        }\n        s = s.chars().next().unwrap();\n    }\n    res.push_str(s);\n\
    \    return res", "    let mut s = String::from(s);\n    let mut res = String::from(s);\n\
    \    for i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(&i.to_lowercase());\n\
    \        } else {\n            res.push_str(&i.to_uppercase());\n        }\n \
    \   }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut s = String::from(s);\n\
    \    s.reverse();\n    if s.chars().any(|c| !c.is_letter()) {\n        s.reverse();\n\
    \    }\n    s", "    let mut s = String::from(s);\n    let mut res = String::from(s);\n\
    \    for i in 0..s.len() {\n        if s[i].is_letter() {\n            if s[i].to_ascii_lowercase()\
    \ != s[i] {\n                s = s.chars().map(|c| c.to_ascii_uppercase()).collect();\n\
    \            } else {\n                s = s.chars().map(|c| c.to_ascii_lowercase()).collect();\n\
    \            }\n        } else {\n            res = s.chars().map(|c| c.to_ascii_lowercase()).collect();\n\
    \        }\n    }\n    return res.to_ascii_lowercase();", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    while !s.is_empty() {\n      \
    \  if s.chars().any(|c| c.is_uppercase()) {\n            res.push_str(&s.to_uppercase());\n\
    \        } else {\n            res.push_str(&s.to_lowercase());\n        }\n \
    \       s = s.chars().next().unwrap();\n    }\n    res.push_str(&s.to_lowercase());\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_lowercase() {\n        \
    \    s[i] = s[i].to_uppercase();\n        } else {\n            s[i] = s[i].to_lowercase();\n\
    \        }\n        res += s[i];\n        i += 1;\n    }\n    res.reverse();\n\
    \    return res;", "    let mut s = s;\n    let mut res = \"\";\n    for c in\
    \ s.chars() {\n        if c.is_uppercase() {\n            res = c.to_string()\
    \ + res;\n        } else {\n            res = c + res;\n        }\n    }\n   \
    \ return res;", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ ch in s.chars() {\n        if ch.is_uppercase() {\n            res.push_str(ch.to_lowercase());\n\
    \        } else {\n            res.push_str(ch.to_uppercase());\n        }\n \
    \   }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    while\
    \ !s.is_empty() {\n        let c = s.chars().next().unwrap();\n        if c.is_uppercase()\
    \ {\n            res.push_str(&c.to_lowercase());\n        } else {\n        \
    \    res.push_str(&c.to_uppercase());\n        }\n    }\n    res.reverse();\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(&s[..]);\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            res.push_str(c.to_lowercase());\n        } else {\n            res.push_str(c.to_uppercase());\n\
    \        }\n    }\n    res.push_str(&s);\n    return res;", "    let mut s = s;\n\
    \    let mut res = String::new();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        let c = s[i];\n        if c.is_lowercase() {\n            s[i] = c.to_uppercase();\n\
    \        } else {\n            s[i] = c.to_lowercase();\n        }\n        res\
    \ += s[i];\n        i += 1;\n    }\n    res", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            s.swap(0, 1);\n            res.swap(0, 1);\n        }\n     \
    \   if c.is_uppercase() {\n            s.swap(0, 1);\n            res.swap(0,\
    \ 1);\n        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n \
    \           if s[i].to_ascii_lowercase().is_ascii() {\n                res.push_str(&s[i].to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res.reverse();\n    return res;", "    let mut s\
    \ = s;\n    let mut res = String::new();\n    let mut len = s.len();\n    while\
    \ len > 0 {\n        let mut i = 0;\n        while i < len {\n            let\
    \ c = s[i];\n            if c.is_uppercase() {\n                s[i] = c.to_lowercase();\n\
    \                i += 1;\n            } else if c.is_lowercase() {\n         \
    \       s[i] = c.to_uppercase();\n                i += 1;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n        res.push_str(&s[..i]);\n\
    \        len = i;\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s[i].is_letter() {\n            if s[i].to_ascii_lowercase() != s[i] {\n   \
    \             s[i] = s[i].to_ascii_uppercase();\n            } else {\n      \
    \          s[i] = s[i].to_ascii_lowercase();\n            }\n        } else {\n\
    \            s[i] = s[i];\n        }\n        res += s[i];\n        i += 1;\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ i in s.chars() {\n        if i.is_lowercase() {\n            s.swap(0, i.len_utf8());\n\
    \        }\n    }\n    for i in s.chars() {\n        if i.is_uppercase() {\n \
    \           s.swap(0, i.len_utf8());\n        }\n    }\n    for i in s.chars()\
    \ {\n        res.push_str(&i.to_string());\n    }\n    res", "    let mut s =\
    \ s;\n    let mut res = String::new();\n    while !s.is_empty() {\n        let\
    \ c = s.chars().next().unwrap();\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    res.reverse();\n    return res;", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for i in s.chars() {\n        if i.is_lowercase() {\n\
    \            res.push_str(i.to_uppercase());\n        } else {\n            res.push_str(i.to_lowercase());\n\
    \        }\n    }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res.push_str(&s[..]);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for ch in s.chars() {\n      \
    \  if ch.is_lowercase() {\n            ch.to_uppercase();\n        } else {\n\
    \            ch.to_lowercase();\n        }\n        res.push_str(&ch);\n    }\n\
    \    res", "    let mut s = String::from(s);\n    let mut res = String::from(s);\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_uppercase() {\n\
    \            s[i] = s[i].to_lowercase();\n        } else {\n            s[i] =\
    \ s[i].to_uppercase();\n        }\n        i += 1;\n    }\n    return res;", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_lowercase() {\n    \
    \        s.swap(i, i + 1);\n            res.push_str(&s[..i]);\n            i\
    \ += 1;\n        } else {\n            res.push_str(&s[..i]);\n            i +=\
    \ 1;\n        }\n    }\n    res.push_str(&s[..i]);\n    res", "    let mut s =\
    \ s;\n    let mut res = String::new();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s[i].is_letter() {\n            if s[i].to_ascii_lowercase() !=\
    \ s[i] {\n                res.push_str(&s[i].to_ascii_uppercase());\n        \
    \    } else {\n                res.push_str(&s[i].to_ascii_lowercase());\n   \
    \         }\n        } else {\n            res.push_str(&s[i]);\n        }\n \
    \       i += 1;\n    }\n    res.push_str(\"\\n\");\n    return res;", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n   \
    \     if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n   \
    \     } else {\n            res.push_str(i.to_lowercase());\n        }\n    }\n\
    \    res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_lowercase() {\n\
    \            res.push_str(c.to_uppercase());\n        } else {\n            res.push_str(c.to_lowercase());\n\
    \        }\n    }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n\
    \    let mut res = String::new();\n    while !s.is_empty() {\n        if s.chars().any(|c|\
    \ c.is_lowercase()) {\n            res.push_str(&s.to_lowercase());\n        }\
    \ else {\n            res.push_str(&s.to_uppercase());\n        }\n        s =\
    \ s.chars().next().unwrap();\n    }\n    res.push_str(&s.to_uppercase());\n  \
    \  res", "    let mut s = s;\n    let mut res = String::new();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i].is_lowercase() {\n          \
    \  s.swap(i, i + 1);\n            res.push_str(&s[..i]);\n            i += 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    res.push_str(&s[..i]);\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for ch in\
    \ s.chars() {\n        if ch.is_uppercase() {\n            res.push_str(ch.to_lowercase());\n\
    \        } else {\n            res.push_str(ch.to_uppercase());\n        }\n \
    \   }\n    res", "    let mut s = String::from(s);\n    let mut res = String::from(s);\n\
    \    for i in 0..s.len() {\n        if s[i].is_lowercase() {\n            res.swap(s[i],\
    \ s[i].to_uppercase());\n        } else {\n            res.swap(s[i], s[i].to_lowercase());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(&s[..]);\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_lowercase() {\n\
    \            res.push_str(c.to_uppercase());\n        } else {\n            res.push_str(c.to_lowercase());\n\
    \        }\n    }\n    res.push_str(&s);\n    return res;", "    let mut s = s;\n\
    \    let mut res = \"\";\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res = c.to_uppercase() + res;\n        } else {\n           \
    \ res = c.to_lowercase() + res;\n        }\n    }\n    return res;", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n   \
    \     if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n   \
    \     } else {\n            res.push_str(i.to_lowercase());\n        }\n    }\n\
    \    res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    while !s.is_empty() {\n        let c = s.chars().next().unwrap();\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_uppercase() {\n    \
    \        s.swap(i, i + 1);\n            res.swap(i, i + 1);\n            i +=\
    \ 1;\n        } else {\n            i += 1;\n        }\n    }\n    res", "   \
    \ let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    res.push_str(&s[..]);\n    return res;", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(&i.to_uppercase());\n        } else {\n        \
    \    res.push_str(&i.to_lowercase());\n        }\n    }\n    res.push_str(&s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ let mut i = 0;\n    while i < s.len() {\n        if s[i].is_letter() {\n   \
    \         if s[i].to_ascii_lowercase() != s[i] {\n                s[i] = s[i].to_ascii_uppercase();\n\
    \            } else {\n                s[i] = s[i].to_ascii_lowercase();\n   \
    \         }\n        } else {\n            s[i] = s[i];\n        }\n        res\
    \ += s[i];\n        i += 1;\n    }\n    res", "    let mut s = String::from(s);\n\
    \    s.chars().for_each(|c| {\n        if c.is_lowercase() {\n            s.swap(0,\
    \ 1);\n        }\n        if c.is_uppercase() {\n            s.swap(0, 1);\n \
    \       }\n    });\n    s", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(&s[..]);\n    return res;", "    let mut s = s;\n    let\
    \ mut res = \"\";\n    for i in s.chars() {\n        if i.is_uppercase() {\n \
    \           res.push_str(i.to_lowercase());\n        } else {\n            res.push_str(i.to_uppercase());\n\
    \        }\n    }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(i.to_uppercase());\n        } else {\n         \
    \   res.push_str(i.to_lowercase());\n        }\n    }\n    res.push_str(s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(&i.to_lowercase());\n\
    \        } else {\n            res.push_str(&i.to_uppercase());\n        }\n \
    \   }\n    res.push_str(&s.to_lowercase());\n    return res;", "    let mut s\
    \ = s;\n    let mut res = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n        } else\
    \ {\n            res.push_str(c.to_lowercase());\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(\"\\n\");\n    return res;", "    let mut s = String::from(s);\n\
    \    let mut res = String::from(s);\n    for i in s.chars() {\n        if i.is_ascii()\
    \ {\n            if i.to_ascii_lowercase() == i {\n                res = res.to_ascii_uppercase();\n\
    \            } else {\n                res = res.to_ascii_lowercase();\n     \
    \       }\n        } else {\n            res = res.to_ascii_lowercase();\n   \
    \     }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n \
    \           if s[i].to_ascii_lowercase() == s[i] {\n                s[i] = s[i].to_ascii_uppercase();\n\
    \            } else {\n                s[i] = s[i].to_ascii_lowercase();\n   \
    \         }\n        } else {\n            s[i] = s[i].to_ascii_lowercase();\n\
    \        }\n        res += s[i];\n        i += 1;\n    }\n    res", "    let mut\
    \ s = String::from(s);\n    let mut res = String::from(s);\n    for i in s.chars()\
    \ {\n        if i.is_lowercase() {\n            res.swap(0, 1);\n        } else\
    \ {\n            res.swap(0, 2);\n        }\n    }\n    res", "    let mut s =\
    \ s;\n    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n       \
    \ if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n       \
    \ } else {\n            res.push_str(i.to_uppercase());\n        }\n    }\n  \
    \  res.push_str(s);\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(&s[..]);\n    return res;", "    let mut s = s;\n    let\
    \ mut res = \"\";\n    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_letter()\
    \ {\n            if s[i].to_ascii_lowercase() != s[i] {\n                s = s.to_ascii_lowercase()\
    \ + s[i];\n            } else {\n                s = s.to_ascii_uppercase() +\
    \ s[i];\n            }\n        } else {\n            res += s[i];\n        }\n\
    \        i += 1;\n    }\n    return s;", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for i in s.chars() {\n        if i.is_uppercase() {\n\
    \            res.push_str(&i.to_lowercase());\n        } else {\n            res.push_str(&i.to_uppercase());\n\
    \        }\n    }\n    res.push_str(&s);\n    return res;", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(i.to_uppercase());\n        } else {\n         \
    \   res.push_str(i.to_lowercase());\n        }\n    }\n    res.push_str(s);\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for i in\
    \ s.chars() {\n        if i.is_lowercase() {\n            res.push_str(&i.to_uppercase());\n\
    \        } else {\n            res.push_str(&i.to_lowercase());\n        }\n \
    \   }\n    res.push_str(&s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n       \
    \ } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n  \
    \  res.push_str(&s[..]);\n    return res;", "    let mut s = s;\n    let mut res\
    \ = \"\";\n    while !s.is_empty() {\n        let c = s.chars().next().unwrap();\n\
    \        if c.is_uppercase() {\n            s = s.to_lowercase();\n        } else\
    \ {\n            s = s.to_uppercase();\n        }\n        res += c;\n    }\n\
    \    return res;", "    let mut s = String::from(s);\n    s.chars().for_each(|c|\
    \ {\n        if c.is_lowercase() {\n            s.swap(0, 1);\n        }\n   \
    \     if c.is_uppercase() {\n            s.swap(0, 1);\n        }\n    });\n \
    \   s", "    let mut s = s;\n    let mut res = String::new();\n    for i in s.chars()\
    \ {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res.reverse();\n    return res;", "    let mut s = String::from(s);\n\
    \    let mut res = String::from(s);\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(&i.to_uppercase());\n        } else {\n        \
    \    res.push_str(&i.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n       \
    \ } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n  \
    \  res", "    let mut s = s;\n    let mut res = String::new();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i].is_letter() {\n            if\
    \ s[i].to_ascii_lowercase() != s[i] {\n                s[i] = s[i].to_ascii_uppercase();\n\
    \            } else {\n                s[i] = s[i].to_ascii_lowercase();\n   \
    \         }\n        } else {\n            s[i] = s[i];\n        }\n        res\
    \ += s[i];\n        i += 1;\n    }\n    return res;", "    let mut s = s;\n  \
    \  let mut res = \"\";\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s[i].is_lowercase() {\n            res += s[i].to_uppercase();\n        } else\
    \ {\n            res += s[i].to_lowercase();\n        }\n        i += 1;\n   \
    \ }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_letter() {\n\
    \            i += 1;\n            let mut j = i;\n            while j < s.len()\
    \ {\n                if s[j].is_letter() {\n                    res += s[j].to_uppercase();\n\
    \                    i += 1;\n                    j += 1;\n                } else\
    \ {\n                    res += s[j];\n                    i += 1;\n         \
    \       }\n            }\n        } else {\n            res += s[i];\n       \
    \     i += 1;\n        }\n    }\n    res.reverse();\n    return res;", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n   \
    \     if i.is_ascii() {\n            if i.to_ascii_lowercase() == i {\n      \
    \          res.push(i.to_ascii_uppercase());\n            } else {\n         \
    \       res.push(i.to_ascii_lowercase());\n            }\n        } else {\n \
    \           res.push(i);\n        }\n    }\n    res.reverse();\n    return res;",
  "    let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s[i].is_letter() {\n            if s[i].to_ascii_lowercase()\
    \ != s[i] {\n                res.push_str(&s[i].to_ascii_lowercase());\n     \
    \       } else {\n                res.push_str(&s[i]);\n            }\n      \
    \  } else {\n            res.push_str(&s[i]);\n        }\n        i += 1;\n  \
    \  }\n    res.push_str(\"\\n\");\n    return res;", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(i.to_uppercase());\n        } else {\n         \
    \   res.push_str(i.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = String::from(s);\n    let mut res = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            res.push_str(&s[..i].to_lowercase());\n            i += 1;\n\
    \        } else {\n            res.push_str(&s[..i].to_uppercase());\n       \
    \     i += 1;\n        }\n    }\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for i in s.chars() {\n        if i.is_uppercase() {\n\
    \            res.push_str(i.to_lowercase());\n        } else {\n            res.push_str(i.to_uppercase());\n\
    \        }\n    }\n    res.push_str(s);\n    return res;", "    let mut s = String::from(s);\n\
    \    let mut res = String::from(s);\n    for i in s.chars() {\n        if i.is_uppercase()\
    \ {\n            res.push_str(&i.to_lowercase());\n        } else {\n        \
    \    res.push_str(&i.to_uppercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n       \
    \ } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n  \
    \  res.push_str(&s[..]);\n    return res;", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_letter()\
    \ {\n            if s[i].to_ascii_lowercase() != s[i] {\n                res.push_str(&s[i].to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_uppercase() {\n            s.swap(0,\
    \ 1);\n        } else {\n            s.swap(0, 0);\n        }\n        res.push_str(&s);\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(&i.to_lowercase());\n\
    \        } else {\n            res.push_str(&i.to_uppercase());\n        }\n \
    \   }\n    if res.len() == 0 {\n        res.push_str(&s.to_lowercase());\n   \
    \ }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(&i.to_lowercase());\n\
    \        } else {\n            res.push_str(&i.to_uppercase());\n        }\n \
    \   }\n    if res.len() == 0 {\n        res.push_str(&s.to_lowercase());\n   \
    \ }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ ch in s.chars() {\n        if ch.is_uppercase() {\n            res.push_str(ch.to_lowercase());\n\
    \        } else {\n            res.push_str(ch.to_uppercase());\n        }\n \
    \   }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ ch in s.chars() {\n        if ch.is_uppercase() {\n            res.push_str(ch.to_lowercase());\n\
    \        } else {\n            res.push_str(ch.to_uppercase());\n        }\n \
    \   }\n    res.push_str(s);\n    return res;", "    let mut s = String::from(s);\n\
    \    s.chars().for_each(|c| {\n        if c.is_lowercase() {\n            s.swap(0,\
    \ s.len() - 1);\n        }\n        if c.is_uppercase() {\n            s.swap(0,\
    \ s.len() - 1);\n        }\n    });\n    s", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(i.to_uppercase());\n        } else {\n         \
    \   res.push_str(i.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n       \
    \ if i.is_uppercase() {\n            res.push_str(&i.to_lowercase());\n      \
    \  } else {\n            res.push_str(&i.to_uppercase());\n        }\n    }\n\
    \    res.push_str(&s);\n    return res;", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for ch in s.chars() {\n        if ch.is_uppercase() {\n\
    \            ch.to_ascii_lowercase();\n        } else {\n            ch.to_ascii_uppercase();\n\
    \        }\n        res += ch;\n    }\n    return res;", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(&i.to_uppercase());\n        } else {\n        \
    \    res.push_str(&i.to_lowercase());\n        }\n    }\n    res.push_str(&s.to_lowercase());\n\
    \    return res;", "    let mut s = String::from(s);\n    let mut res = String::from(s);\n\
    \    for i in s.chars() {\n        if i.is_lowercase() {\n            res.swap(0,\
    \ 1);\n        } else {\n            res.swap(0, 2);\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(&s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = \"\";\n    for c in s.chars() {\n        if c.is_lowercase() {\n     \
    \       res = c.to_uppercase() + res;\n        } else {\n            res = c.to_lowercase()\
    \ + res;\n        }\n    }\n    return res;", "    let mut s = String::from(s);\n\
    \    let mut res = String::from(s);\n    for i in s.chars() {\n        if i.is_uppercase()\
    \ {\n            res.push_str(i.to_lowercase());\n        } else {\n         \
    \   res.push_str(i.to_uppercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n       \
    \ if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n       \
    \ } else {\n            res.push_str(i.to_lowercase());\n        }\n    }\n  \
    \  res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut res =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_lowercase() {\n  \
    \          res.push_str(c.to_uppercase());\n        } else {\n            res.push_str(c.to_lowercase());\n\
    \        }\n    }\n    res.push_str(&s[..]);\n    return res;", "    let mut s\
    \ = s;\n    let mut res = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n        } else\
    \ {\n            res.push_str(c.to_uppercase());\n        }\n    }\n    res.push_str(&s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for i in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = String::from(s);\n    s.chars().for_each(|c|\
    \ {\n        if c.is_uppercase() {\n            s.swap(0, s.len());\n        }\n\
    \    });\n    s", "    let mut s = String::from(s);\n    s.chars().for_each(|c|\
    \ {\n        if c.is_lowercase() {\n            s.swap(0, 1);\n        }\n   \
    \     if c.is_uppercase() {\n            s.swap(0, 1);\n        }\n    });\n \
    \   s", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ i in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(i.to_uppercase());\n        } else {\n         \
    \   res.push_str(i.to_lowercase());\n        }\n    }\n    res.push_str(s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for i in s.chars() {\n        if i.is_ascii() {\n            if i.to_ascii_lowercase()\
    \ == i {\n                res.push(i.to_ascii_uppercase());\n            } else\
    \ {\n                res.push(i.to_ascii_lowercase());\n            }\n      \
    \  } else {\n            res.push(i);\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    let mut i = 0;\n    while i <\
    \ s.len() {\n        if s[i].is_uppercase() {\n            s[i] = s[i].to_lowercase();\n\
    \        } else {\n            s[i] = s[i].to_uppercase();\n        }\n      \
    \  res.push_str(&s[i]);\n        i += 1;\n    }\n    res"]
stop_tokens:
- "\n}"
