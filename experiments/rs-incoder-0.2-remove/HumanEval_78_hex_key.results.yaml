language: rs
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_index: usize = 0;\n    let mut prime_digit_value:\
    \ usize = 0;\n    let mut prime_digit_is_prime: usize = 0;\n    let mut prime_digit_is_prime_2:\
    \ usize = 0;\n    let mut prime_digit_is_prime_3: usize = 0;\n    let mut prime_digit_is_prime_5:\
    \ usize = 0;\n    let mut prime_digit_is_prime_7: usize = 0;\n    let mut prime_digit_is_prime_11:\
    \ usize = 0;\n    let mut prime_digit_is_prime_13: usize = 0;\n    let mut prime_digit_is_prime_17:\
    \ usize = 0;\n    let mut prime_digit_is_prime_19: usize = 0;\n    let mut prime_digit_is_prime_23:\
    \ usize = 0;\n    let mut prime_digit_is_prime_29: usize = 0;\n    let mut prime_digit_is_prime_31:\
    \ usize = 0;\n    let mut prime_digit_is_prime_37: usize = 0;\n    let mut prime_digit_is_prime_43:\
    \ usize = 0;\n    let mut prime_digit_is_prime_47: usize = 0;\n    let mut prime_digit_is_prime_53:\
    \ usize = 0;\n    let mut prime_digit_is_prime_59: usize = 0;\n    let mut prime_digit_is_prime_61:\
    \ usize = 0;\n    let mut prime_digit_is_prime_67: usize = 0;\n    let mut prime_digit_is_prime_73:\
    \ usize = 0;\n    let mut prime_digit_is_prime_79: usize = 0;\n    let mut prime_digit_is_prime_83:\
    \ usize = 0;\n    let mut prime_digit_is_prime_89: usize = 0;\n    let mut prime_digit_is_prime_97:\
    \ usize = 0;\n    let mut prime_digit_is_prime_101: usize = 0;\n    let mut prime_digit_is_prime_103:\
    \ usize = 0;\n    let mut prime_digit_is_prime_107: usize = 0;\n    let mut prime_digit_is_prime_109:\
    \ usize = 0;\n    let mut prime_digit_is_prime_113: usize = 0;\n    let mut \n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpzb1rtx9z.rs:49:1\n\
    \   |\n49 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpzb1rtx9z.rs:53:17\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpzb1rtx9z.rs:53:25\n \
    \  |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzb1rtx9z.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzb1rtx9z.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzb1rtx9z.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzb1rtx9z.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzb1rtx9z.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzb1rtx9z.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzb1rtx9z.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzb1rtx9z.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzb1rtx9z.rs:58:17\n   |\n58 |     "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk6rc601j.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits: isize = 0;\n    let mut num_primes:\
    \ isize = 0;\n    let mut num_primes_digits: isize = 0;\n    let mut num_primes_digits_2:\
    \ isize = 0;\n    let mut num_primes_digits_3: isize = 0;\n    let mut num_primes_digits_4:\
    \ isize = 0;\n    let mut num_primes_digits_5: isize = 0;\n    let mut num_primes_digits_6:\
    \ isize = 0;\n    let mut num_primes_digits_7: isize = 0;\n    let mut num_primes_digits_8:\
    \ isize = 0;\n    let mut num_primes_digits_9: isize = 0;\n    let mut num_primes_digits_10:\
    \ isize = 0;\n    let mut num_primes_digits_11: isize = 0;\n    let mut num_primes_digits_12:\
    \ isize = 0;\n    let mut num_primes_digits_13: isize = 0;\n    let mut num_primes_digits_14:\
    \ isize = 0;\n    let mut num_primes_digits_15: isize = 0;\n    let mut num_primes_digits_16:\
    \ isize = 0;\n    let mut num_primes_digits_17: isize = 0;\n    let mut num_primes_digits_18:\
    \ isize = 0;\n    let mut num_primes_digits_19: isize = 0;\n    let mut num_primes_digits_20:\
    \ isize = 0;\n    let mut num_primes_digits_21: isize = 0;\n    let mut num_primes_digits_22:\
    \ isize = 0;\n    let mut num_primes_digits_23: isize = 0;\n    let mut num_primes_digits_24:\
    \ isize = 0;\n    let mut num_primes_digits_25: isize = 0;\n    let mut num_primes_digits_26:\
    \ isize = 0;\n    let mut num_primes_digits_27: isize = 0;\n    let mut num_primes_digits_28:\
    \ isize = 0;\n    let mut num_primes_digits_29: isize = 0;\n    let mut num_primes_digits_30:\
    \ isize = 0;\n    let mut num_primes_digits_31: isize = 0;\n    let mut num_primes_digits_32:\
    \ isize = 0;\n    let mut num_primes_digits_33: isize = 0;\n    let mut num_primes_digits_34:\
    \ isize = 0;\n    let mut num_primes_digits_35: isize = 0;\n}\n\nfn main() {\n\
    \    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2qbdv97m.rs:55:17\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2qbdv97m.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2qbdv97m.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2qbdv97m.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2qbdv97m.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2qbdv97m.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2qbdv97m.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2qbdv97m.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2qbdv97m.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2qbdv97m.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2qbdv97m.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.to_digits().parse().unwrap();\n    let mut prime:\
    \ isize = 2;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let mu\n}\n\nfn main() {\n\
    \    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpho7i_21f.rs:68:11\n   |\n\
    68 |     let mu\n   |           ^ help: add `;` here\n69 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpho7i_21f.rs:73:17\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpho7i_21f.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpho7i_21f.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpho7i_21f.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpho7i_21f.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpho7i_21f.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpho7i_21f.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpho7i_21f.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpho7i_21f.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpho7i_21f.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_chars().collect();\n\
    \    let mut prime: isize = 2;\n    let mut prime_found = false;\n    let mut\
    \ prime_found2 = false;\n    let mut prime_found3 = false;\n    let mut prime_found4\
    \ = false;\n    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n\
    \    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let\
    \ mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let mut prime_found11\
    \ = false;\n    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n\
    \    let mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let\
    \ mut prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut\
    \ prime_found18 = false;\n    let mut prime_found19 = false;\n    let mut prime_found20\
    \ = false;\n    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n\
    \    let mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let\
    \ mut prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut\
    \ prime_found27 = false;\n    let mut prime_found28 = false;\n    let mut prime_found29\
    \ = false;\n    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n\
    \    let mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let\
    \ mut prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut\
    \ prime_found36 = false;\n    let mut prime_found37 = false;\n    let mut prime_found38\
    \ = false;\n    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n\
    \    let mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let\
    \ mut prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut\
    \ prime_found45 = false;\n    let mut prime_found46 = false;\n    let mut prime_found47\
    \ = false;\n    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n\
    \    let mut prime_found50 = false;\n    let mut prime_found51 = false;\n    let\
    \ mut prime_found52 = false;\n    let \n}\n\nfn main() {\n    let candidate =\
    \ hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpd76lxfe7.rs:69:1\n  \
    \ |\n69 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpd76lxfe7.rs:73:17\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpd76lxfe7.rs:73:25\n \
    \  |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd76lxfe7.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd76lxfe7.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd76lxfe7.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd76lxfe7.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd76lxfe7.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd76lxfe7.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd76lxfe7.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd76lxfe7.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd76lxfe7.rs:78:17\n   |\n78 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime_digits: Vec<&str>\
    \ = vec![];\n    let mut prime_digits_len: usize = 0;\n    let mut prime_digit_len:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count: usize = 0;\n    let mut prime_digit_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count: usize = 0;\n    let mut\
    \ prime_digit_count_count_count_len: usize = 0;\n    let mut prime_digit_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_len: usize = 0;\n\
    \    let mut prime_digit_count_count_count_count_count: usize = 0;\n    let mut\
    \ prime_digit_count_count_count_count_count_len: usize = 0;\n    let mut prime_digit_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count: usize\
    \ = 0;\n    let mut prime_digit_count_count_count_count_count_count_len: usize\
    \ = 0;\n    let mut prime_digit_count_count_count_count_count_count_count: usize\
    \ = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = hex_key;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7k1s6c_w.rs:44:11\n   |\n\
    44 |     let mu\n   |           ^ help: add `;` here\n45 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7k1s6c_w.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7k1s6c_w.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7k1s6c_w.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7k1s6c_w.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7k1s6c_w.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7k1s6c_w.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7k1s6c_w.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7k1s6c_w.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7k1s6c_w.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7k1s6c_w.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_u8fpmr.rs:42:20\n   |\n\
    42 |     let mut num_str\n   |                    ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ prime_digits = false;\n    let mut prime_digits_counter = 0;\n    let mut prime_digits_counter2\
    \ = 0;\n    let mut prime_digits_counter3 = 0;\n    let mut prime_digits_counter4\
    \ = 0;\n    let mut prime_digits_counter5 = 0;\n    let mut prime_digits_counter6\
    \ = 0;\n    let mut prime_digits_counter7 = 0;\n    let mut prime_digits_counter8\
    \ = 0;\n    let mut prime_digits_counter9 = 0;\n    let mut prime_digits_counter10\
    \ = 0;\n    let mut prime_digits_counter11 = 0;\n    let mut prime_digits_counter12\
    \ = 0;\n    let mut prime_digits_counter13 = 0;\n    let mut prime_digits_counter14\
    \ = 0;\n    let mut prime_digits_counter15 = 0;\n    let mut prime_digits_counter16\
    \ = 0;\n    let mut prime_digits_counter17 = 0;\n    let mut prime_digits_counter18\
    \ = 0;\n    let mut prime_digits_counter19 = 0;\n    let mut prime_digits_counter20\
    \ = 0;\n    let mut prime_digits_counter21 = 0;\n    let mut prime_digits_counter22\
    \ = 0;\n    let mut prime_digits_counter23 = 0;\n    let mut prime_digits_counter24\
    \ = 0;\n    let mut prime_digits_counter25 = 0;\n    let mut prime_digits_counter26\
    \ = 0;\n    let mut prime_digits_counter27 = 0;\n    let mut prime_digits_counter28\
    \ = 0;\n    let mut prime_digits_counter29 = 0;\n    let mut prime_digits_counter30\
    \ = 0;\n    let mut prime_digits_counter31 = 0;\n    let mut prime_digits_counter32\
    \ = 0;\n    let mut prime_digits_counter33 = 0;\n    let mut prime_digits_counter34\
    \ = 0;\n    let mut prime_digits_counter35 = 0;\n    let mut prime_digits_counter36\
    \ = 0;\n    let mut prime_digits_counter37 = 0;\n    let mut prime_digits_counter38\
    \ = 0;\n    let mut prime_digits_counter39 = 0;\n    let mut prime_digits_counter40\
    \ = 0;\n    let mut prime_digits_counter41 = 0;\n    let mut prime_digits_counter42\
    \ = 0;\n    let mut prime_digits_counter43 = 0;\n    let mut prime_digits_counter44\
    \ = 0;\n    let mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2c3v4ax.rs:60:18\n   |\n\
    60 |     let mut prime\n   |                  ^ help: add `;` here\n61 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_2c3v4ax.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_2c3v4ax.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_2c3v4ax.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_2c3v4ax.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut prime: isize = 0;\n    let mut prime_digits: Vec<&str> = vec![];\n\
    \    \n    for digit in digits {\n        prime_digits.push(digit.to_string());\n\
    \    }\n    \n    for digit in prime_digits {\n        if digit == \"A\" || digit\
    \ == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"\
    F\" {\n            prime = digit as isize;\n        }\n    }\n    \n    for digit\
    \ in digits {\n        if digit == \"2\" || digit == \"3\" || digit == \"5\" ||\
    \ digit == \"7\" || digit == \"B\" || digit == \"D\" || digit == \"E\" {\n   \
    \         num = num + digit as isize;\n        }\n    }\n    \n    return num;\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppzimi02k.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppzimi02k.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppzimi02k.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppzimi02k.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppzimi02k.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppzimi02k.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppzimi02k.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppzimi02k.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppzimi02k.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppzimi02k.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppzimi02k.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_digits_count:\
    \ isize = 0;\n    let mut prime_digits_sum: isize = 0;\n    let mut prime_digits_product:\
    \ isize = 1;\n    let mut prime_digits_product2: isize = 1;\n    let mut prime_digits_product3:\
    \ isize = 1;\n    let mut prime_digits_product4: isize = 1;\n    let mut prime_digits_product5:\
    \ isize = 1;\n    let mut prime_digits_product6: isize = 1;\n    let mut prime_digits_product7:\
    \ isize = 1;\n    let mut prime_digits_product8: isize = 1;\n    let mut prime_digits_product9:\
    \ isize = 1;\n    let mut prime_digits_product10: isize = 1;\n    let mut prime_digits_product11:\
    \ isize = 1;\n    let mut prime_digits_product12: isize = 1;\n    let mut prime_digits_product13:\
    \ isize = 1;\n    let mut prime_digits_product14: isize = 1;\n    let mut prime_digits_product15:\
    \ isize = 1;\n    let mut prime_digits_product16: isize = 1;\n    let mut prime_digits_product17:\
    \ isize = 1;\n    let mut prime_digits_product18: isize = 1;\n    let mut prime_digits_product19:\
    \ isize = 1;\n    let mut prime_digits_product20: isize = 1;\n    let mut prime_digits_product21:\
    \ isize = 1;\n    let mut prime_digits_product22: isize = 1;\n    let mut prime_digits_product23:\
    \ isize = 1;\n    let mut prime_digits_product24: isize = 1;\n    let mut prime_digits_product25:\
    \ isize = 1;\n    let mut prime_digits_product26: isize = 1;\n    let mut prime_digits_product27:\
    \ isize = 1;\n    let mut prime_digits_product28: isize = 1;\n    let mut prime_digits_product29:\
    \ isize = 1;\n    let mut prime_digits_product30: isize = 1;\n    let mut prime_digits_product31:\
    \ isize = 1;\n    let mut prime_digits_product32: isize\n}\n\nfn main() {\n  \
    \  let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfmowi19m.rs:49:42\n   |\n\
    49 |     let mut prime_digits_product32: isize\n   |                         \
    \                 ^ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfmowi19m.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfmowi19m.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfmowi19m.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfmowi19m.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfmowi19m.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfmowi19m.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfmowi19m.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfmowi19m.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfmowi19m.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfmowi19m.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this s"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    for d in digits {\n        if d >= 'a' && d <= 'f' {\n            num +=\
    \ (d - 'a' + 10) as isize;\n        } else {\n            num += d as isize;\n\
    \        }\n    }\n    return num;\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpivpg2ett.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpivpg2ett.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpivpg2ett.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpivpg2ett.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpivpg2ett.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpivpg2ett.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpivpg2ett.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpivpg2ett.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpivpg2ett.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpivpg2ett.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpivpg2ett.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime: isize\
    \ = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let \n}\n\nfn main() {\n \
    \   let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp180x13g9.rs:70:1\n  \
    \ |\n70 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp180x13g9.rs:74:17\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:74:25\n \
    \  |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp180x13g9.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:78:25\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:79:17\n   |\n79 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut primes_count:\
    \ usize = 0;\n    let mut primes_count_2: usize = 0;\n    let mut primes_count_3:\
    \ usize = 0;\n    let mut primes_count_4: usize = 0;\n    let mut primes_count_5:\
    \ usize = 0;\n    let mut primes_count_6: usize = 0;\n    let mut primes_count_7:\
    \ usize = 0;\n    let mut primes_count_8: usize = 0;\n    let mut primes_count_9:\
    \ usize = 0;\n    let mut primes_count_10: usize = 0;\n    let mut primes_count_11:\
    \ usize = 0;\n    let mut primes_count_12: usize = 0;\n    let mut primes_count_13:\
    \ usize = 0;\n    let mut primes_count_14: usize = 0;\n    let mut primes_count_15:\
    \ usize = 0;\n    let mut primes_count_16: usize = 0;\n    let mut primes_count_17:\
    \ usize = 0;\n    let mut primes_count_18: usize = 0;\n    let mut primes_count_19:\
    \ usize = 0;\n    let mut primes_count_20: usize = 0;\n    let mut primes_count_21:\
    \ usize = 0;\n    let mut primes_count_22: usize = 0;\n    let mut primes_count_23:\
    \ usize = 0;\n    let mut primes_count_24: usize = 0;\n    let mut primes_count_25:\
    \ usize = 0;\n    let mut primes_count_26: usize = 0;\n    let mut primes_count_27:\
    \ usize = 0;\n    let mut primes_count_28: usize = 0;\n    let mut primes_count_29:\
    \ usize = 0;\n    let mut primes_count_30: usize = 0;\n    let mut primes_count_31:\
    \ usize = 0;\n    let mut primes_count_32: usize = 0;\n    let mut primes_count_33:\
    \ usize = 0;\n    let mut primes_count_34: usize = 0;\n    let mut primes_count_35:\
    \ usize = 0;\n    let mut primes_count_36: usize = 0;\n    let mut primes_count_37:\
    \ usize = 0;\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3a05nnun.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3a05nnun.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3a05nnun.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3a05nnun.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3a05nnun.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3a05nnun.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3a05nnun.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3a05nnun.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3a05nnun.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3a05nnun.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3a05nnun.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut\
    \ prime_digit: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime\n}\n\nfn main()\
    \ {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdgkzgmgw.rs:36:18\n   |\n\
    36 |     let mut prime\n   |                  ^ help: add `;` here\n37 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdgkzgmgw.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdgkzgmgw.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdgkzgmgw.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdgkzgmgw.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdgkzgmgw.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdgkzgmgw.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdgkzgmgw.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdgkzgmgw.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdgkzgmgw.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdgkzgmgw.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime: isize = 0;\n    let\
    \ mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq6oih_gv.rs:67:18\n   |\n\
    67 |     let mut prime\n   |                  ^ help: add `;` here\n68 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq6oih_gv.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq6oih_gv.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq6oih_gv.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq6oih_gv.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq6oih_gv.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq6oih_gv.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq6oih_gv.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq6oih_gv.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq6oih_gv.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq6oih_gv.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![];\n    let mut prime: isize = 2;\n   \
    \ let mut prime_found = false;\n    let mut digit_found = false;\n    let mut\
    \ digit_found2 = false;\n    let mut digit_found3 = false;\n    let mut digit_found4\
    \ = false;\n    let mut digit_found5 = false;\n    let mut digit_found6 = false;\n\
    \    let mut digit_found7 = false;\n    let mut digit_found8 = false;\n    let\
    \ mut digit_found9 = false;\n    let mut digit_found10 = false;\n    let mut digit_found11\
    \ = false;\n    let mut digit_found12 = false;\n    let mut digit_found13 = false;\n\
    \    let mut digit_found14 = false;\n    let mut digit_found15 = false;\n    let\
    \ mut digit_found16 = false;\n    let mut digit_found17 = false;\n    let mut\
    \ digit_found18 = false;\n    let mut digit_found19 = false;\n    let mut digit_found20\
    \ = false;\n    let mut digit_found21 = false;\n    let mut digit_found22 = false;\n\
    \    let mut digit_found23 = false;\n    let mut digit_found24 = false;\n    let\
    \ mut digit_found25 = false;\n    let mut digit_found26 = false;\n    let mut\
    \ digit_found27 = false;\n    let mut digit_found28 = false;\n    let mut digit_found29\
    \ = false;\n    let mut digit_found30 = false;\n    let mut digit_found31 = false;\n\
    \    let mut digit_found32 = false;\n    let mut digit_found33 = false;\n    let\
    \ mut digit_found34 = false;\n    let mut digit_found35 = false;\n    let mut\
    \ digit_found36 = false;\n    let mut digit_found37 = false;\n    let mut digit_found38\
    \ = false;\n    let mut digit_found39 = false;\n    let mut digit_found40 = false;\n\
    \    let mut digit_found41 = false;\n    let mut digit_found42 = false;\n    let\
    \ mut digit_found43 = false;\n    let mut digit_found44 = false;\n    let mut\
    \ digit_found45 = false;\n    let mut digit_found46 = false;\n    let mut digit_found47\
    \ = false;\n    let mut digit_found48 = false;\n    let mut digit_found49 = false;\n\
    \    let mut digit_found50 = false;\n    let mut digit_found51 = false;\n    let\
    \ mut digit_found52 = false;\n    let mut digit_found53 = false;\n    let mut\
    \ digit_found54 = false;\n    let mut digit_found55 = false;\n    let mut digit_found\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmozh4ldc.rs:73:24\n   |\n\
    73 |     let mut digit_found\n   |                        ^ help: add `;` here\n\
    74 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpmozh4ldc.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmozh4ldc.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmozh4ldc.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmozh4ldc.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmozh4ldc.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmozh4ldc.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmozh4ldc.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmozh4ldc.rs:81:25\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmozh4ldc.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmozh4ldc.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ prime_digits = false;\n    let mut prime_digits_counter = 0;\n    let mut prime_digits_counter2\
    \ = 0;\n    let mut prime_digits_counter3 = 0;\n    let mut prime_digits_counter4\
    \ = 0;\n    let mut prime_digits_counter5 = 0;\n    let mut prime_digits_counter6\
    \ = 0;\n    let mut prime_digits_counter7 = 0;\n    let mut prime_digits_counter8\
    \ = 0;\n    let mut prime_digits_counter9 = 0;\n    let mut prime_digits_counter10\
    \ = 0;\n    let mut prime_digits_counter11 = 0;\n    let mut prime_digits_counter12\
    \ = 0;\n    let mut prime_digits_counter13 = 0;\n    let mut prime_digits_counter14\
    \ = 0;\n    let mut prime_digits_counter15 = 0;\n    let mut prime_digits_counter16\
    \ = 0;\n    let mut prime_digits_counter17 = 0;\n    let mut prime_digits_counter18\
    \ = 0;\n    let mut prime_digits_counter19 = 0;\n    let mut prime_digits_counter20\
    \ = 0;\n    let mut prime_digits_counter21 = 0;\n    let mut prime_digits_counter22\
    \ = 0;\n    let mut prime_digits_counter23 = 0;\n    let mut prime_digits_counter24\
    \ = 0;\n    let mut prime_digits_counter25 = 0;\n    let mut prime_digits_counter26\
    \ = 0;\n    let mut prime_digits_counter27 = 0;\n    let mut prime_digits_counter28\
    \ = 0;\n    let mut prime_digits_counter29 = 0;\n    let mut prime_digits_counter30\
    \ = 0;\n    let mut prime_digits_counter31 = 0;\n    let mut prime_digits_counter32\
    \ = 0;\n    let mut prime_digits_counter33 = 0;\n    let mut prime_digits_counter34\
    \ = 0;\n    let mut prime_digits_counter35 = 0;\n    let mut prime_digits_counter36\
    \ = 0;\n    let mut prime_digits_counter37 = 0;\n    let mut prime_digits_counter38\
    \ = 0;\n    let mut prime_digits_counter39 = 0;\n    let mut prime_digits_counter40\
    \ = 0;\n    let mut prime_digits_counter41 = 0;\n    let mut prime_digits_counter42\
    \ = 0;\n    let mut prime_digits_counter43 = 0;\n    let mut prime_digits_counter44\
    \ = 0;\n    let mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2c3v4ax.rs:60:18\n   |\n\
    60 |     let mut prime\n   |                  ^ help: add `;` here\n61 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_2c3v4ax.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_2c3v4ax.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_2c3v4ax.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_2c3v4ax.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![2, 3];\n    let mut prime: isize = 2;\n\
    \    let mut prime_found = false;\n    let mut prime_found2 = false;\n    let\
    \ mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let mut prime_found5\
    \ = false;\n    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n\
    \    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let\
    \ mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let mut\
    \ prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut prime_found14\
    \ = false;\n    let mut prime_found15 = false;\n    let mut prime_found16 = false;\n\
    \    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n    let\
    \ mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let mut\
    \ prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut prime_found23\
    \ = false;\n    let mut prime_found24 = false;\n    let mut prime_found25 = false;\n\
    \    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n    let\
    \ mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let mut\
    \ prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut prime_found32\
    \ = false;\n    let mut prime_found33 = false;\n    let mut prime_found34 = false;\n\
    \    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n    let\
    \ mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let mut\
    \ prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut prime_found41\
    \ = false;\n    let mut prime_found42 = false;\n    let mut prime_found43 = false;\n\
    \    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n    let\
    \ mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let mut\
    \ prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut prime_found50\
    \ = false;\n    let mu\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqe6vnecl.rs:67:11\n   |\n\
    67 |     let mu\n   |           ^ help: add `;` here\n68 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqe6vnecl.rs:72:17\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqe6vnecl.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqe6vnecl.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqe6vnecl.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqe6vnecl.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqe6vnecl.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqe6vnecl.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqe6vnecl.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqe6vnecl.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqe6vnecl.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_digits_count:\
    \ isize = 0;\n    let mut prime_digits_count_max: isize = 0;\n    let mut prime_digits_count_min:\
    \ isize = 0;\n    let mut prime_digits_count_max2: isize = 0;\n    let mut prime_digits_count_min2:\
    \ isize = 0;\n    let mut prime_digits_count_max3: isize = 0;\n    let mut prime_digits_count_min3:\
    \ isize = 0;\n    let mut prime_digits_count_max4: isize = 0;\n    let mut prime_digits_count_min4:\
    \ isize = 0;\n    let mut prime_digits_count_max5: isize = 0;\n    let mut prime_digits_count_min5:\
    \ isize = 0;\n    let mut prime_digits_count_max6: isize = 0;\n    let mut prime_digits_count_min6:\
    \ isize = 0;\n    let mut prime_digits_count_max7: isize = 0;\n    let mut prime_digits_count_min7:\
    \ isize = 0;\n    let mut prime_digits_count_max8: isize = 0;\n    let mut prime_digits_count_min8:\
    \ isize = 0;\n    let mut prime_digits_count_max9: isize = 0;\n    let mut prime_digits_count_min9:\
    \ isize = 0;\n    let mut prime_digits_count_max10: isize = 0;\n    let mut prime_digits_count_min10:\
    \ isize = 0;\n    let mut prime_digits_count_max11: isize = 0;\n    let mut prime_digits_count_min11:\
    \ isize = 0;\n    let mut prime_digits_count_max12: isize = 0;\n    let mut prime_digits_count_min12:\
    \ isize = 0;\n    let mut prime_digits_count_max13: isize = 0;\n    let mut prime_digits_count_min13:\
    \ isize = 0;\n    let mut prime_digits_count_max14: isize = 0;\n    let mut prime_digits_count_min14:\
    \ isize = 0;\n    let mut prime_digits_count_max15: isize = 0;\n    let mut prime_digits_count_min15:\
    \ isize = 0;\n    let mut prime_digits_count_max16: isize = 0;\n}\n\nfn main()\
    \ {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2lo0utj6.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2lo0utj6.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2lo0utj6.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2lo0utj6.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2lo0utj6.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2lo0utj6.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2lo0utj6.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2lo0utj6.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2lo0utj6.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2lo0utj6.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2lo0utj6.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits: isize = 0;\n    let mut num_primes:\
    \ isize = 0;\n    let mut num_primes_digits: isize = 0;\n    let mut num_primes_digits_2:\
    \ isize = 0;\n    let mut num_primes_digits_3: isize = 0;\n    let mut num_primes_digits_4:\
    \ isize = 0;\n    let mut num_primes_digits_5: isize = 0;\n    let mut num_primes_digits_6:\
    \ isize = 0;\n    let mut num_primes_digits_7: isize = 0;\n    let mut num_primes_digits_8:\
    \ isize = 0;\n    let mut num_primes_digits_9: isize = 0;\n    let mut num_primes_digits_10:\
    \ isize = 0;\n    let mut num_primes_digits_11: isize = 0;\n    let mut num_primes_digits_12:\
    \ isize = 0;\n    let mut num_primes_digits_13: isize = 0;\n    let mut num_primes_digits_14:\
    \ isize = 0;\n    let mut num_primes_digits_15: isize = 0;\n    let mut num_primes_digits_16:\
    \ isize = 0;\n    let mut num_primes_digits_17: isize = 0;\n    let mut num_primes_digits_18:\
    \ isize = 0;\n    let mut num_primes_digits_19: isize = 0;\n    let mut num_primes_digits_20:\
    \ isize = 0;\n    let mut num_primes_digits_21: isize = 0;\n    let mut num_primes_digits_22:\
    \ isize = 0;\n    let mut num_primes_digits_23: isize = 0;\n    let mut num_primes_digits_24:\
    \ isize = 0;\n    let mut num_primes_digits_25: isize = 0;\n    let mut num_primes_digits_26:\
    \ isize = 0;\n    let mut num_primes_digits_27: isize = 0;\n    let mut num_primes_digits_28:\
    \ isize = 0;\n    let mut num_primes_digits_29: isize = 0;\n    let mut num_primes_digits_30:\
    \ isize = 0;\n    let mut num_primes_digits_31: isize = 0;\n    let mut num_primes_digits_32:\
    \ isize = 0;\n    let mut num_primes_digits_33: isize = 0;\n    let mut num_primes_digits_34:\
    \ isize = 0;\n    let mut num_primes_digits_35: isize = 0;\n}\n\nfn main() {\n\
    \    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2qbdv97m.rs:55:17\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2qbdv97m.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2qbdv97m.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2qbdv97m.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2qbdv97m.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2qbdv97m.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2qbdv97m.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2qbdv97m.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2qbdv97m.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2qbdv97m.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2qbdv97m.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_digits_prime = 0;\n    let mut num_digits_not_prime = 0;\n    let mut num_digits_not_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_not_prime = 0;\n    let mut num_digits_not_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_not_prime = 0;\n    let mut num_digits_not_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_not_prime = 0;\n    let mut\
    \ num_digits_not_prime_prime_prime_prime_prime = 0;\n    let mut num_digits_not_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime = 0;\n\
    \    let mut num_digits_not_prime_prime_prime_prime_prime_not_prime = 0;\n   \
    \ let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime = 0;\n    let\
    \ mut num_digits_not_prime_prime_prime_prime_prime_prime_not_prime = 0;\n    let\
    \ mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  \
    \  let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_\n}\n\nfn main()\
    \ {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmplsjkas68.rs:38:58\n   |\n\
    38 |     let mut num_digits_not_prime_prime_prime_prime_prime_\n   |         \
    \                                                 ^ help: add `;` here\n39 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplsjkas68.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplsjkas68.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplsjkas68.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplsjkas68.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplsjkas68.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplsjkas68.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplsjkas68.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplsjkas68.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplsjkas68.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplsjkas68.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                  "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![];\n    \n    for digit in digits {\n \
    \       if digit == 'a' || digit == 'b' || digit == 'c' || digit == 'd' || digit\
    \ == 'e' || digit == 'f' {\n            primes.push(digit as isize);\n       \
    \ }\n    }\n    \n    for prime in primes {\n        for digit in digits {\n \
    \           if prime % digit == 0 {\n                num += 1;\n             \
    \   break;\n            }\n        }\n    }\n    \n    return num;\n}\n\nfn main()\
    \ {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_fbh1d0j.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_fbh1d0j.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_fbh1d0j.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_fbh1d0j.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_fbh1d0j.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_fbh1d0j.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_fbh1d0j.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_fbh1d0j.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_fbh1d0j.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_fbh1d0j.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_fbh1d0j.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut\
    \ digit: isize = 0;\n    let mut prime_found = false;\n    let mut digit_found\
    \ = false;\n    let mut prime_found2 = false;\n    let mut digit_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut digit_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut digit_found4 = false;\n    let mut prime_found5\
    \ = false;\n    let mut digit_found5 = false;\n    let mut prime_found6 = false;\n\
    \    let mut digit_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut digit_found7 = false;\n    let mut prime_found8 = false;\n    let mut digit_found8\
    \ = false;\n    let mut prime_found9 = false;\n    let mut digit_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut digit_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut digit_found11 = false;\n    let mut\
    \ prime_found12 = false;\n    let mut digit_found12 = false;\n    let mut prime_found13\
    \ = false;\n    let mut digit_found13 = false;\n    let mut prime_found14 = false;\n\
    \    let mut digit_found14 = false;\n    let mut prime_found15 = false;\n    let\
    \ mut digit_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ digit_found16 = false;\n    let mut prime_found17 = false;\n    let mut digit_found17\
    \ = false;\n    let mut prime_found18 = false;\n    let mut digit_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut digit_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut digit_found20 = false;\n    let mut\
    \ prime_found21 = false;\n    let mut digit_found21 = false;\n    let mut prime_found22\
    \ = false;\n    let mut digit_found22 = false;\n    let mut prime_found23 = false;\n\
    \    let mut digit_found23 = false;\n    let mut prime_found24 = false;\n    let\
    \ mut digit_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ digit_found25 = false;\n    let mut prime_found26 = false;\n    let mut digit_found26\
    \ = false;\n    let mut prime_found27 = false;\n    let mut digit_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut digit_found28 = false;\n    let\
    \ mut prime_found\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptuexz37q.rs:72:24\n   |\n\
    72 |     let mut prime_found\n   |                        ^ help: add `;` here\n\
    73 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmptuexz37q.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptuexz37q.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptuexz37q.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptuexz37q.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptuexz37q.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptuexz37q.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptuexz37q.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptuexz37q.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptuexz37q.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptuexz37q.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpruvn2_qs.rs:34:127\n   |\n\
    34 |     let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                       ^ help: add `;` here\n\
    35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpruvn2_qs.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpruvn2_qs.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpruvn2_qs.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpruvn2_qs.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpruvn2_qs.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpruvn2_qs.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpruvn2_qs.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpruvn2_qs.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpruvn2_qs.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![];\n    let mut prime: isize = 0;\n   \
    \ let mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut\
    \ prime_found3 = false;\n    let mut prime_found4 = false;\n    let mut prime_found5\
    \ = false;\n    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n\
    \    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let\
    \ mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let mut\
    \ prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut prime_found14\
    \ = false;\n    let mut prime_found15 = false;\n    let mut prime_found16 = false;\n\
    \    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n    let\
    \ mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let mut\
    \ prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut prime_found23\
    \ = false;\n    let mut prime_found24 = false;\n    let mut prime_found25 = false;\n\
    \    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n    let\
    \ mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let mut\
    \ prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut prime_found32\
    \ = false;\n    let mut prime_found33 = false;\n    let mut prime_found34 = false;\n\
    \    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n    let\
    \ mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let mut\
    \ prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut prime_found41\
    \ = false;\n    let mut prime_found42 = false;\n    let mut prime_found43 = false;\n\
    \    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n    let\
    \ mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let mut\
    \ prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut prime_found50\
    \ = false;\n    let mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwtrbkcs3.rs:67:18\n   |\n\
    67 |     let mut prime\n   |                  ^ help: add `;` here\n68 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwtrbkcs3.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwtrbkcs3.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwtrbkcs3.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwtrbkcs3.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwtrbkcs3.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwtrbkcs3.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwtrbkcs3.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwtrbkcs3.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwtrbkcs3.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwtrbkcs3.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![2, 3, 5, 7];\n    let mut primes_count:\
    \ isize = 0;\n    let mut primes_sum: isize = 0;\n    let mut primes_sum2: isize\
    \ = 0;\n    let mut primes_sum3: isize = 0;\n    let mut primes_sum4: isize =\
    \ 0;\n    let mut primes_sum5: isize = 0;\n    let mut primes_sum6: isize = 0;\n\
    \    let mut primes_sum7: isize = 0;\n    let mut primes_sum8: isize = 0;\n  \
    \  let mut primes_sum9: isize = 0;\n    let mut primes_sum10: isize = 0;\n   \
    \ let mut primes_sum11: isize = 0;\n    let mut primes_sum12: isize = 0;\n   \
    \ let mut primes_sum13: isize = 0;\n    let mut primes_sum14: isize = 0;\n   \
    \ let mut primes_sum15: isize = 0;\n    let mut primes_sum16: isize = 0;\n   \
    \ let mut primes_sum17: isize = 0;\n    let mut primes_sum18: isize = 0;\n   \
    \ let mut primes_sum19: isize = 0;\n    let mut primes_sum20: isize = 0;\n   \
    \ let mut primes_sum21: isize = 0;\n    let mut primes_sum22: isize = 0;\n   \
    \ let mut primes_sum23: isize = 0;\n    let mut primes_sum24: isize = 0;\n   \
    \ let mut primes_sum25: isize = 0;\n    let mut primes_sum26: isize = 0;\n   \
    \ let mut primes_sum27: isize = 0;\n    let mut primes_sum28: isize = 0;\n   \
    \ let mut primes_sum29: isize = 0;\n    let mut primes_sum30: isize = 0;\n   \
    \ let mut primes_sum31: isize = 0;\n    let mut primes_sum32: isize = 0;\n   \
    \ let mut primes_sum33: isize = 0;\n    let mut primes_sum34: isize = 0;\n   \
    \ let mut primes_sum35: isize = 0;\n    let mut primes_sum36: isize = 0;\n   \
    \ let mut primes_sum37: isize = 0;\n    let mut primes_sum38: isize = 0;\n   \
    \ let mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7_hfw9n2.rs:55:18\n   |\n\
    55 |     let mut prime\n   |                  ^ help: add `;` here\n56 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7_hfw9n2.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7_hfw9n2.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7_hfw9n2.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7_hfw9n2.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7_hfw9n2.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7_hfw9n2.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7_hfw9n2.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7_hfw9n2.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7_hfw9n2.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7_hfw9n2.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ];\n    let mut primes_found: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n\
    \    let mut primes_found2: Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found3:\
    \ Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found4: Vec<&str> = vec![\"\
    B\", \"D\"];\n    let mut primes_found5: Vec<&str> = vec![\"B\", \"D\"];\n   \
    \ let mut primes_found6: Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found7:\
    \ Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found8: Vec<&str> = vec![\"\
    B\", \"D\"];\n    let mut primes_found9: Vec<&str> = vec![\"B\", \"D\"];\n   \
    \ let mut primes_found10: Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found11:\
    \ Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found12: Vec<&str> = vec![\"\
    B\", \"D\"];\n    let mut primes_found13: Vec<&str> = vec![\"B\", \"D\"];\n  \
    \  let mut primes_found14: Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found15:\
    \ Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found16: Vec<&str> = vec![\"\
    B\", \"D\"];\n    let mut primes_found17: Vec<&str> = vec![\"B\", \"D\"];\n  \
    \  let mut primes_found18: Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found19:\
    \ Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found20: Vec<&str> = vec![\"\
    B\", \"D\"];\n    let mut primes_found21: Vec<&str> = vec![\"B\", \"D\"];\n}\n\
    \nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpetpraxth.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpetpraxth.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpetpraxth.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpetpraxth.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpetpraxth.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpetpraxth.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpetpraxth.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpetpraxth.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpetpraxth.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpetpraxth.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpetpraxth.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut prime_digits = vec![];\n    let mut\
    \ num_digits = num.len();\n    let mut digits = vec![];\n    let mut prime_digit\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let \n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp5h9_nkwd.rs:61:1\n  \
    \ |\n61 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp5h9_nkwd.rs:65:17\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp5h9_nkwd.rs:65:25\n \
    \  |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5h9_nkwd.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5h9_nkwd.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5h9_nkwd.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5h9_nkwd.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5h9_nkwd.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5h9_nkwd.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5h9_nkwd.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5h9_nkwd.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5h9_nkwd.rs:70:17\n   |\n70 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ];\n    let mut primes_found: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"];\n    let mut primes_found2: Vec<&str> = vec![\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\"];\n    let mut primes_found3: Vec<&str> = vec![\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found4: Vec<&str> = vec![\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found5: Vec<&str>\
    \ = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found6:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found7:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found8:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found9:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found10:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found11:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found12:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found13:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found14:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found15:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found16:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found17:\
    \ Vec<&str> = vec\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw19wcx5n.rs:32:44\n   |\n\
    32 |     let mut primes_found17: Vec<&str> = vec\n   |                       \
    \                     ^ help: add `;` here\n33 | }\n   | - unexpected token\n\n\
    error[E0423]: expected value, found macro `vec`\n  --> /tmp/tmpw19wcx5n.rs:32:41\n\
    \   |\n32 |     let mut primes_found17: Vec<&str> = vec\n   |                \
    \                         ^^^ not a value\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpw19wcx5n.rs:37:17\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpw19wcx5n.rs:37:25\n \
    \  |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw19wcx5n.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw19wcx5n.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw19wcx5n.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw19wcx5n.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw19wcx5n.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw19wcx5n.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw19wcx5n.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not foun"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![2, 3, 5, 7];\n    let mut prime: isize\
    \ = 2;\n    let mut i: isize = 0;\n    while i < digits.len() {\n        if primes.contains(&prime)\
    \ {\n            primes.push(prime);\n        }\n        prime = prime + 1;\n\
    \        i += 1;\n    }\n    for digit in digits {\n        if primes.contains(&digit)\
    \ {\n            num += 1;\n        }\n    }\n    return num;\n}\n\nfn main()\
    \ {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgxtvhlpm.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgxtvhlpm.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgxtvhlpm.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgxtvhlpm.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgxtvhlpm.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgxtvhlpm.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgxtvhlpm.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgxtvhlpm.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgxtvhlpm.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgxtvhlpm.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgxtvhlpm.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    \n    for digit in digits {\n  \
    \      if digit == 'A' || digit == 'B' || digit == 'C' || digit == 'D' || digit\
    \ == 'E' || digit == 'F' {\n            primes.push(digit);\n        }\n    }\n\
    \    \n    for prime in primes {\n        num = num * prime + primes.iter().skip(primes.iter().position(|&x|\
    \ x == prime)).next().unwrap();\n    }\n    \n    return num;\n}\n\nfn main()\
    \ {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfqvphmtm.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfqvphmtm.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfqvphmtm.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfqvphmtm.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfqvphmtm.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfqvphmtm.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfqvphmtm.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfqvphmtm.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfqvphmtm.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfqvphmtm.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfqvphmtm.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_u8fpmr.rs:42:20\n   |\n\
    42 |     let mut num_str\n   |                    ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime: isize\
    \ = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let \n}\n\nfn main() {\n \
    \   let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp180x13g9.rs:70:1\n  \
    \ |\n70 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp180x13g9.rs:74:17\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:74:25\n \
    \  |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp180x13g9.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:78:25\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:79:17\n   |\n79 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_digits = vec![];\n    let mut num_digits = num.len();\n    let\
    \ mut prime_digits_counter = 0;\n    let mut prime_digits_counter2 = 0;\n    let\
    \ mut prime_digits_counter3 = 0;\n    let mut prime_digits_counter4 = 0;\n   \
    \ let mut prime_digits_counter5 = 0;\n    let mut prime_digits_counter6 = 0;\n\
    \    let mut prime_digits_counter7 = 0;\n    let mut prime_digits_counter8 = 0;\n\
    \    let mut prime_digits_counter9 = 0;\n    let mut prime_digits_counter10 =\
    \ 0;\n    let mut prime_digits_counter11 = 0;\n    let mut prime_digits_counter12\
    \ = 0;\n    let mut prime_digits_counter13 = 0;\n    let mut prime_digits_counter14\
    \ = 0;\n    let mut prime_digits_counter15 = 0;\n    let mut prime_digits_counter16\
    \ = 0;\n    let mut prime_digits_counter17 = 0;\n    let mut prime_digits_counter18\
    \ = 0;\n    let mut prime_digits_counter19 = 0;\n    let mut prime_digits_counter20\
    \ = 0;\n    let mut prime_digits_counter21 = 0;\n    let mut prime_digits_counter22\
    \ = 0;\n    let mut prime_digits_counter23 = 0;\n    let mut prime_digits_counter24\
    \ = 0;\n    let mut prime_digits_counter25 = 0;\n    let mut prime_digits_counter26\
    \ = 0;\n    let mut prime_digits_counter27 = 0;\n    let mut prime_digits_counter28\
    \ = 0;\n    let mut prime_digits_counter29 = 0;\n    let mut prime_digits_counter30\
    \ = 0;\n    let mut prime_digits_counter31 = 0;\n    let mut prime_digits_counter32\
    \ = 0;\n    let mut prime_digits_counter33 = 0;\n    let mut prime_digits_counter34\
    \ = 0;\n    let mut prime_digits_counter35 = 0;\n    let mut prime_digits_counter36\
    \ = 0;\n    let mut prime_digits_counter37 = 0;\n    let mut prime_digits_counter38\
    \ = 0;\n    let mut prime_digits_counter39 = 0;\n    let mut prime_digits_counter40\
    \ = 0;\n    let mut prime_digits_counter41 = 0;\n    let mut prime_digits_counter42\
    \ = 0;\n    let mut prime_digits_counter43 = 0;\n    let mut prime_digits_counter44\
    \ = 0;\n    let mut prime_digits_counter45 = 0;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbidj07sx.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbidj07sx.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbidj07sx.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbidj07sx.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbidj07sx.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbidj07sx.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbidj07sx.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbidj07sx.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbidj07sx.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbidj07sx.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbidj07sx.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf8boz6ci.rs:34:134\n   |\n\
    34 |     let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                              ^ help: add `;`\
    \ here\n35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf8boz6ci.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![];\n    let mut prime_found = false;\n  \
    \  let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let mut\
    \ prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut prime_found51\
    \ = false;\n    let mut \n}\n\nfn main() {\n    let candidate = hex_key;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpjz6suf66.rs:68:1\n\
    \   |\n68 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpjz6suf66.rs:72:17\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpjz6suf66.rs:72:25\n \
    \  |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjz6suf66.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjz6suf66.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjz6suf66.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjz6suf66.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjz6suf66.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjz6suf66.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjz6suf66.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjz6suf66.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjz6suf66.rs:77:17\n   |\n77 |     "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut prime_digits = vec![2, 3, 5, 7, 11,\
    \ 13, 17, 19];\n    let mut prime_digits_count = prime_digits.len();\n    let\
    \ mut prime_digits_count_2 = prime_digits_count / 2;\n    let mut prime_digits_count_3\
    \ = prime_digits_count / 3;\n    let mut prime_digits_count_4 = prime_digits_count\
    \ / 4;\n    let mut prime_digits_count_5 = prime_digits_count / 5;\n    let mut\
    \ prime_digits_count_6 = prime_digits_count / 6;\n    let mut prime_digits_count_7\
    \ = prime_digits_count / 7;\n    let mut prime_digits_count_8 = prime_digits_count\
    \ / 8;\n    let mut prime_digits_count_9 = prime_digits_count / 9;\n    let mut\
    \ prime_digits_count_10 = prime_digits_count / 10;\n    let mut prime_digits_count_11\
    \ = prime_digits_count / 11;\n    let mut prime_digits_count_12 = prime_digits_count\
    \ / 12;\n    let mut prime_digits_count_13 = prime_digits_count / 13;\n    let\
    \ mut prime_digits_count_14 = prime_digits_count / 14;\n    let mut prime_digits_count_15\
    \ = prime_digits_count / 15;\n    let mut prime_digits_count_16 = prime_digits_count\
    \ / 16;\n    let mut prime_digits_count_17 = prime_digits_count / 17;\n    let\
    \ mut prime_digits_count_18 = prime_digits_count / 18;\n    let mut prime_digits_count_19\
    \ = prime_digits_count / 19;\n    let mut prime_digits_count_20 = prime_digits_count\
    \ / 20;\n    let mut prime_digits_count_21 = prime_digits_count / 21;\n    let\
    \ mut prime_digits_count_22 = prime_digits_count / 22;\n    let mut prime_digits_count_23\
    \ = prime_digits_count / 23;\n    let mut prime_digits_count_24 = prime_digits_count\
    \ / 24;\n    let mut prime_digits_count_25 = prime_digits_count / 25;\n    let\
    \ mut prime_digits_count_26 = prime_digits_count / 26;\n    let mut prime_digits_count_27\
    \ = prime_digits_count / 27;\n    let mut prime_digit\n}\n\nfn main() {\n    let\
    \ candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpylcgb3cw.rs:42:24\n   |\n\
    42 |     let mut prime_digit\n   |                        ^ help: add `;` here\n\
    43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpylcgb3cw.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpylcgb3cw.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpylcgb3cw.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpylcgb3cw.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpylcgb3cw.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpylcgb3cw.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpylcgb3cw.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpylcgb3cw.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpylcgb3cw.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpylcgb3cw.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num_digits = num.len();\n    let mut num_primes = 0;\n    let mut\
    \ num_primes_found = 0;\n    let mut num_primes_found2 = 0;\n    let mut num_primes_found3\
    \ = 0;\n    let mut num_primes_found4 = 0;\n    let mut num_primes_found5 = 0;\n\
    \    let mut num_primes_found6 = 0;\n    let mut num_primes_found7 = 0;\n    let\
    \ mut num_primes_found8 = 0;\n    let mut num_primes_found9 = 0;\n    let mut\
    \ num_primes_found10 = 0;\n    let mut num_primes_found11 = 0;\n    let mut num_primes_found12\
    \ = 0;\n    let mut num_primes_found13 = 0;\n    let mut num_primes_found14 =\
    \ 0;\n    let mut num_primes_found15 = 0;\n    let mut num_primes_found16 = 0;\n\
    \    let mut num_primes_found17 = 0;\n    let mut num_primes_found18 = 0;\n  \
    \  let mut num_primes_found19 = 0;\n    let mut num_primes_found20 = 0;\n    let\
    \ mut num_primes_found21 = 0;\n    let mut num_primes_found22 = 0;\n    let mut\
    \ num_primes_found23 = 0;\n    let mut num_primes_found24 = 0;\n    let mut num_primes_found25\
    \ = 0;\n    let mut num_primes_found26 = 0;\n    let mut num_primes_found27 =\
    \ 0;\n    let mut num_primes_found28 = 0;\n    let mut num_primes_found29 = 0;\n\
    \    let mut num_primes_found30 = 0;\n    let mut num_primes_found31 = 0;\n  \
    \  let mut num_primes_found32 = 0;\n    let mut num_primes_found33 = 0;\n    let\
    \ mut num_primes_found34 = 0;\n    let mut num_primes_found35 = 0;\n    let mut\
    \ num_primes_found36 = 0;\n    let mut num_primes_found37 = 0;\n    let mut num_primes_found38\
    \ = 0;\n    let mut num_primes_found39 = 0;\n    let mut num_primes_found40 =\
    \ 0;\n    let mut num_primes_found41 = 0;\n    let mut num_primes_found42 = 0;\n\
    \    let mut num_primes_found43 = 0;\n    let mut num_primes_found44 = 0;\n  \
    \  let mut num_primes_found45 = 0;\n    let mut num_primes_found46 = 0;\n    let\
    \ mut num_primes_found47 = 0;\n    let mut num_primes_found48 = 0;\n    let mut\
    \ num_primes_found49 = 0;\n    let mut num_primes_found50 = 0;\n}\n\nfn main()\
    \ {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:69:17\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_mp6lv3w.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_mp6lv3w.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_mp6lv3w.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_mp6lv3w.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n    let mut\
    \ prime_count: isize = 0;\n    let mut prime: isize = 2;\n    let mut digit: u8\
    \ = 0;\n    while num.len() > 0 {\n        digit = num.chars().nth(1).unwrap();\n\
    \        if digit == 'a' || digit == 'b' || digit == 'c' || digit == 'd' || digit\
    \ == 'e' || digit == 'f' {\n            prime_count += 1;\n        }\n       \
    \ prime = prime * digit as isize;\n        num = num.chars().skip(1).collect();\n\
    \    }\n    prime_count\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk1_dv93l.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk1_dv93l.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk1_dv93l.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk1_dv93l.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk1_dv93l.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk1_dv93l.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk1_dv93l.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk1_dv93l.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk1_dv93l.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk1_dv93l.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk1_dv93l.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_digits_count:\
    \ usize = 0;\n    let mut prime_digits_sum: usize = 0;\n    let mut prime_digits_sum2:\
    \ usize = 0;\n    let mut prime_digits_sum3: usize = 0;\n    let mut prime_digits_sum4:\
    \ usize = 0;\n    let mut prime_digits_sum5: usize = 0;\n    let mut prime_digits_sum6:\
    \ usize = 0;\n    let mut prime_digits_sum7: usize = 0;\n    let mut prime_digits_sum8:\
    \ usize = 0;\n    let mut prime_digits_sum9: usize = 0;\n    let mut prime_digits_sum10:\
    \ usize = 0;\n    let mut prime_digits_sum11: usize = 0;\n    let mut prime_digits_sum12:\
    \ usize = 0;\n    let mut prime_digits_sum13: usize = 0;\n    let mut prime_digits_sum14:\
    \ usize = 0;\n    let mut prime_digits_sum15: usize = 0;\n    let mut prime_digits_sum16:\
    \ usize = 0;\n    let mut prime_digits_sum17: usize = 0;\n    let mut prime_digits_sum18:\
    \ usize = 0;\n    let mut prime_digits_sum19: usize = 0;\n    let mut prime_digits_sum20:\
    \ usize = 0;\n    let mut prime_digits_sum21: usize = 0;\n    let mut prime_digits_sum22:\
    \ usize = 0;\n    let mut prime_digits_sum23: usize = 0;\n    let mut prime_digits_sum24:\
    \ usize = 0;\n    let mut prime_digits_sum25: usize = 0;\n    let mut prime_digits_sum26:\
    \ usize = 0;\n    let mut prime_digits_sum27: usize = 0;\n    let mut prime_digits_sum28:\
    \ usize = 0;\n    let mut prime_digits_sum29: usize = 0;\n    let mut prime_digits_sum30:\
    \ usize = 0;\n    let mut prime_digits_sum31: usize = 0;\n    let mut prime_digits_sum32:\
    \ usize = 0;\n    let mut prime_digits_sum33: u\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpp0tivabs.rs:49:34\n   |\n\
    49 |     let mut prime_digits_sum33: u\n   |                                 \
    \ ^ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0412]: cannot\
    \ find type `u` in this scope\n  --> /tmp/tmpp0tivabs.rs:49:33\n   |\n49 |   \
    \  let mut prime_digits_sum33: u\n   |                                 ^ help:\
    \ a builtin type with a similar name exists: `u8`\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmpp0tivabs.rs:54:17\n   |\n54 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpp0tivabs.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpp0tivabs.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpp0tivabs.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpp0tivabs.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpp0tivabs.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpp0tivabs.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp0tivabs.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp0tivabs.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not f"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19];\n    let mut\
    \ primes_found: Vec<isize> = vec![];\n    \n    for digit in digits {\n      \
    \  if primes.contains(&digit) {\n            primes_found.push(digit);\n     \
    \   }\n    }\n    \n    for prime in primes_found {\n        if num % prime ==\
    \ 0 {\n            num = num / prime;\n        }\n    }\n    \n    return num;\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6wd2pyju.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6wd2pyju.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6wd2pyju.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6wd2pyju.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6wd2pyju.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6wd2pyju.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6wd2pyju.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6wd2pyju.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6wd2pyju.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6wd2pyju.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6wd2pyju.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk6rc601j.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19];\n    let mut\
    \ primes_count: isize = 0;\n    let mut primes_sum: isize = 0;\n    let mut primes_index:\
    \ isize = 0;\n    let mut primes_sum_index: isize = 0;\n    let mut primes_sum_index2:\
    \ isize = 0;\n    let mut primes_sum_index3: isize = 0;\n    let mut primes_sum_index4:\
    \ isize = 0;\n    let mut primes_sum_index5: isize = 0;\n    let mut primes_sum_index6:\
    \ isize = 0;\n    let mut primes_sum_index7: isize = 0;\n    let mut primes_sum_index8:\
    \ isize = 0;\n    let mut primes_sum_index9: isize = 0;\n    let mut primes_sum_index10:\
    \ isize = 0;\n    let mut primes_sum_index11: isize = 0;\n    let mut primes_sum_index12:\
    \ isize = 0;\n    let mut primes_sum_index13: isize = 0;\n    let mut primes_sum_index14:\
    \ isize = 0;\n    let mut primes_sum_index15: isize = 0;\n    let mut primes_sum_index16:\
    \ isize = 0;\n    let mut primes_sum_index17: isize = 0;\n    let mut primes_sum_index18:\
    \ isize = 0;\n    let mut primes_sum_index19: isize = 0;\n    let mut primes_sum_index20:\
    \ isize = 0;\n    let mut primes_sum_index21: isize = 0;\n    let mut primes_sum_index22:\
    \ isize = 0;\n    let mut primes_sum_index23: isize = 0;\n    let mut primes_sum_index24:\
    \ isize = 0;\n    let mut primes_sum_index25: isize = 0;\n    let mut primes_sum_index26:\
    \ isize = 0;\n    let mut primes_sum_index27: isize = 0;\n    let mut primes_sum_index28:\
    \ isize = 0;\n    let mut primes_sum_index29: isize = 0;\n    let mut primes_sum_index30:\
    \ isize = 0;\n    let mut primes_sum_index31: isize = 0;\n    let mut primes_sum_index32:\
    \ isize = 0;\n    let mut primes_sum_index33: isize = 0;\n    let mut primes_sum\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpphv7o040.rs:52:23\n   |\n\
    52 |     let mut primes_sum\n   |                       ^ help: add `;` here\n\
    53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpphv7o040.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpphv7o040.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpphv7o040.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpphv7o040.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpphv7o040.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpphv7o040.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpphv7o040.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpphv7o040.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpphv7o040.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpphv7o040.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut digits = num.chars().collect::<Vec<_>>();\n\
    \    let mut prime_digits = vec![];\n    let mut prime_digit = vec![];\n    let\
    \ mut prime_digit_count = 0;\n    let mut prime_digit_index = 0;\n    let mut\
    \ prime_digit_value = 1;\n    let mut prime_digit_index2 = 0;\n    let mut prime_digit_value2\
    \ = 1;\n    let mut prime_digit_index3 = 0;\n    let mut prime_digit_value3 =\
    \ 1;\n    let mut prime_digit_index4 = 0;\n    let mut prime_digit_value4 = 1;\n\
    \    let mut prime_digit_index5 = 0;\n    let mut prime_digit_value5 = 1;\n  \
    \  let mut prime_digit_index6 = 0;\n    let mut prime_digit_value6 = 1;\n    let\
    \ mut prime_digit_index7 = 0;\n    let mut prime_digit_value7 = 1;\n    let mut\
    \ prime_digit_index8 = 0;\n    let mut prime_digit_value8 = 1;\n    let mut prime_digit_index9\
    \ = 0;\n    let mut prime_digit_value9 = 1;\n    let mut prime_digit_index10 =\
    \ 0;\n    let mut prime_digit_value10 = 1;\n    let mut prime_digit_index11 =\
    \ 0;\n    let mut prime_digit_value11 = 1;\n    let mut prime_digit_index12 =\
    \ 0;\n    let mut prime_digit_value12 = 1;\n    let mut prime_digit_index13 =\
    \ 0;\n    let mut prime_digit_value13 = 1;\n    let mut prime_digit_index14 =\
    \ 0;\n    let mut prime_digit_value14 = 1;\n    let mut prime_digit_index15 =\
    \ 0;\n    let mut prime_digit_value15 = 1;\n    let mut prime_digit_index16 =\
    \ 0;\n    let mut prime_digit_value16 = 1;\n    let mut prime_digit_index17 =\
    \ 0;\n    let mut prime_digit_value17 = 1;\n    let mut prime_digit_index18 =\
    \ 0;\n    let mut prime_digit_value18 = 1;\n    let mut prime_digit_index19 =\
    \ 0;\n    let mut prime_digit_value19 = 1;\n    let mut prime_digit_index20 =\
    \ 0;\n    let mut prime_digit_value20 = 1;\n    let mut prime_digit_index21 =\
    \ 0;\n    let mut prime_digit_value21 = 1;\n    let mut prime_digit_index22 =\
    \ 0;\n    let mut prime_digit_value22 = 1;\n    let mut prime_digit_index23 =\
    \ 0;\n    let mut prime_digit_value23 = 1;\n    let mut prime_\n}\n\nfn main()\
    \ {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpaoiqkigh.rs:64:19\n   |\n\
    64 |     let mut prime_\n   |                   ^ help: add `;` here\n65 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpaoiqkigh.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpaoiqkigh.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpaoiqkigh.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpaoiqkigh.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpaoiqkigh.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpaoiqkigh.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpaoiqkigh.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpaoiqkigh.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpaoiqkigh.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpaoiqkigh.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` i"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num_digits = num.len();\n    let mut prime_count = 0;\n    let mut\
    \ prime_digits = vec![0; 8];\n    let mut prime_digits_index = 0;\n    let mut\
    \ prime_digits_index2 = 0;\n    let mut prime_digits_index3 = 0;\n    let mut\
    \ prime_digits_index4 = 0;\n    let mut prime_digits_index5 = 0;\n    let mut\
    \ prime_digits_index6 = 0;\n    let mut prime_digits_index7 = 0;\n    let mut\
    \ prime_digits_index8 = 0;\n    let mut prime_digits_index9 = 0;\n    let mut\
    \ prime_digits_index10 = 0;\n    let mut prime_digits_index11 = 0;\n    let mut\
    \ prime_digits_index12 = 0;\n    let mut prime_digits_index13 = 0;\n    let mut\
    \ prime_digits_index14 = 0;\n    let mut prime_digits_index15 = 0;\n    let mut\
    \ prime_digits_index16 = 0;\n    let mut prime_digits_index17 = 0;\n    let mut\
    \ prime_digits_index18 = 0;\n    let mut prime_digits_index19 = 0;\n    let mut\
    \ prime_digits_index20 = 0;\n    let mut prime_digits_index21 = 0;\n    let mut\
    \ prime_digits_index22 = 0;\n    let mut prime_digits_index23 = 0;\n    let mut\
    \ prime_digits_index24 = 0;\n    let mut prime_digits_index25 = 0;\n    let mut\
    \ prime_digits_index26 = 0;\n    let mut prime_digits_index27 = 0;\n    let mut\
    \ prime_digits_index28 = 0;\n    let mut prime_digits_index29 = 0;\n    let mut\
    \ prime_digits_index30 = 0;\n    let mut prime_digits_index31 = 0;\n    let mut\
    \ prime_digits_index32 = 0;\n    let mut prime_digits_index33 = 0;\n    let mut\
    \ prime_digits_index34 = 0;\n    let mut prime_digits_index35 = 0;\n    let mut\
    \ prime_digits_index36 = 0;\n    let mut prime_digits_index37 = 0;\n    let mut\
    \ prime_digits_index38 = 0;\n    let mut prime_digits_index39 = 0;\n    let mut\
    \ prime_digits_index40 = 0;\n    let mut prime_digits_index41 = 0;\n    let mut\
    \ prime_digits_index42 = 0;\n    let mut prime_digits_index43 = 0;\n    let mut\
    \ prime_digits_index44 = 0;\n    let mu\n}\n\nfn main() {\n    let candidate =\
    \ hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0looojrb.rs:60:11\n   |\n\
    60 |     let mu\n   |           ^ help: add `;` here\n61 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0looojrb.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0looojrb.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0looojrb.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0looojrb.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0looojrb.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0looojrb.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0looojrb.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0looojrb.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0looojrb.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0looojrb.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut\
    \ prime_digits: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n}\n\nfn main() {\n  \
    \  let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpw75c3xp2.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw75c3xp2.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw75c3xp2.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw75c3xp2.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw75c3xp2.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw75c3xp2.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw75c3xp2.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw75c3xp2.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw75c3xp2.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw75c3xp2.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw75c3xp2.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk6rc601j.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![];\n    let mut prime_digit: Vec<&str> =\
    \ vec![];\n    let mut prime_digit_count: Vec<&str> = vec![];\n    let mut prime_digit_count_2:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_3: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_4: Vec<&str> = vec![];\n    let mut prime_digit_count_5:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_6: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_7: Vec<&str> = vec![];\n    let mut prime_digit_count_8:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_9: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_10: Vec<&str> = vec![];\n    let mut prime_digit_count_11:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_12: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_13: Vec<&str> = vec![];\n    let mut prime_digit_count_14:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_15: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_16: Vec<&str> = vec![];\n    let mut prime_digit_count_17:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_18: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_19: Vec<&str> = vec![];\n    let mut prime_digit_count_20:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_21: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_22: Vec<&str> = vec![];\n    let mut prime_digit_count_23:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_24: Vec<&str> = vec![];\n\
    \    let \n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpz9xmgvhy.rs:42:1\n  \
    \ |\n42 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpz9xmgvhy.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpz9xmgvhy.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9xmgvhy.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9xmgvhy.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9xmgvhy.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9xmgvhy.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9xmgvhy.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9xmgvhy.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9xmgvhy.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9xmgvhy.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9xmgvhy.rs:51:17\n   |\n51 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime = 0;\n    let mut num_primes_digits_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime = 0;\n    let mut num_primes_digits_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime = 0;\n   \
    \ let mut num_primes_digits_not_prime_not_prime_not_prime_prime = 0;\n    let\
    \ mut num_primes_digits_not_prime_not_prime_not_prime_not_prime = 0;\n    let\
    \ mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_prime = 0;\n \
    \   let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_\n}\n\n\
    fn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqes41jd9.rs:36:65\n   |\n\
    36 |     let mut num_primes_digits_not_prime_not_prime_not_prime_not_\n   |  \
    \                                                               ^ help: add `;`\
    \ here\n37 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpqes41jd9.rs:41:17\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqes41jd9.rs:41:25\n \
    \  |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqes41jd9.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqes41jd9.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqes41jd9.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqes41jd9.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqes41jd9.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqes41jd9.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqes41jd9.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqes41jd9.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |    "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ];\n    let mut prime_digits: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"];\n    let mut prime_digits_count: usize = 0;\n    let mut prime_digits_count_max:\
    \ usize = 2;\n    let mut prime_digits_count_min: usize = 2;\n    let mut prime_digits_count_step:\
    \ usize = 2;\n    let mut prime_digits_count_max2: usize = 2;\n    let mut prime_digits_count_min2:\
    \ usize = 2;\n    let mut prime_digits_count_step2: usize = 2;\n    let mut prime_digits_count_max3:\
    \ usize = 2;\n    let mut prime_digits_count_min3: usize = 2;\n    let mut prime_digits_count_step3:\
    \ usize = 2;\n    let mut prime_digits_count_max4: usize = 2;\n    let mut prime_digits_count_min4:\
    \ usize = 2;\n    let mut prime_digits_count_step4: usize = 2;\n    let mut prime_digits_count_max5:\
    \ usize = 2;\n    let mut prime_digits_count_min5: usize = 2;\n    let mut prime_digits_count_step5:\
    \ usize = 2;\n    let mut prime_digits_count_max6: usize = 2;\n    let mut prime_digits_count_min6:\
    \ usize = 2;\n    let mut prime_digits_count_step6: usize = 2;\n    let mut prime_digits_count_max7:\
    \ usize = 2;\n    let mut prime_digits_count_min7: usize = 2;\n    let mut prime_digits_count_step7:\
    \ usize = 2;\n    let mut prime_digits_count_max8: usize = 2;\n    let mut prime_digits_count_min8:\
    \ usize = 2;\n    let mut prime_digits_count_step8: usize = 2;\n    let mut prime_digits_count_max9:\
    \ usize = 2;\n    let mut prime_digits_count_min9: usize = 2;\n    let mut prime_digits_count_step9:\
    \ usize = 2;\n    let mut prime_digits_count_max10: usize = 2;\n    let mut prime_digits_count_min10:\
    \ usize = 2;\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpo2n5_hl_.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo2n5_hl_.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo2n5_hl_.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo2n5_hl_.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo2n5_hl_.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo2n5_hl_.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo2n5_hl_.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo2n5_hl_.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo2n5_hl_.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo2n5_hl_.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo2n5_hl_.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut prime_digits = vec![2, 3];\n    let\
    \ mut prime_digit_counts = vec![2, 3];\n    let mut digits = num.chars().collect::<Vec<_>>();\n\
    \    let mut digit_counts = vec![2, 3];\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_count\n}\n\nfn main() {\n    let candidate = hex_key;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps4gkz1z1.rs:55:24\n   |\n\
    55 |     let mut digit_count\n   |                        ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmps4gkz1z1.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps4gkz1z1.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps4gkz1z1.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps4gkz1z1.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps4gkz1z1.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps4gkz1z1.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps4gkz1z1.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps4gkz1z1.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps4gkz1z1.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps4gkz1z1.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![];\n    let mut prime_digits: Vec<&str> =\
    \ vec![];\n    let mut prime_digits_len: usize = 0;\n    let mut prime_digits_len2:\
    \ usize = 0;\n    let mut prime_digits_len3: usize = 0;\n    let mut prime_digits_len4:\
    \ usize = 0;\n    let mut prime_digits_len5: usize = 0;\n    let mut prime_digits_len6:\
    \ usize = 0;\n    let mut prime_digits_len7: usize = 0;\n    let mut prime_digits_len8:\
    \ usize = 0;\n    let mut prime_digits_len9: usize = 0;\n    let mut prime_digits_len10:\
    \ usize = 0;\n    let mut prime_digits_len11: usize = 0;\n    let mut prime_digits_len12:\
    \ usize = 0;\n    let mut prime_digits_len13: usize = 0;\n    let mut prime_digits_len14:\
    \ usize = 0;\n    let mut prime_digits_len15: usize = 0;\n    let mut prime_digits_len16:\
    \ usize = 0;\n    let mut prime_digits_len17: usize = 0;\n    let mut prime_digits_len18:\
    \ usize = 0;\n    let mut prime_digits_len19: usize = 0;\n    let mut prime_digits_len20:\
    \ usize = 0;\n    let mut prime_digits_len21: usize = 0;\n    let mut prime_digits_len22:\
    \ usize = 0;\n    let mut prime_digits_len23: usize = 0;\n    let mut prime_digits_len24:\
    \ usize = 0;\n    let mut prime_digits_len25: usize = 0;\n    let mut prime_digits_len26:\
    \ usize = 0;\n    let mut prime_digits_len27: usize = 0;\n    let mut prime_digits_len28:\
    \ usize = 0;\n    let mut prime_digits_len29: usize = 0;\n    let mut prime_digits_len30:\
    \ usize = 0;\n    let mut prime_digits_len31: usize = 0;\n    let mut prime_digits_len32:\
    \ usize = 0;\n    let mut prime_digits_len\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk9b_c7nt.rs:49:29\n   |\n\
    49 |     let mut prime_digits_len\n   |                             ^ help: add\
    \ `;` here\n50 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpk9b_c7nt.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpk9b_c7nt.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk9b_c7nt.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk9b_c7nt.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk9b_c7nt.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk9b_c7nt.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk9b_c7nt.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk9b_c7nt.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk9b_c7nt.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk9b_c7nt.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num_digits = num.len();\n    let mut prime_count = 0;\n    let mut\
    \ prime_digits = vec![];\n    let mut prime_digits_len = prime_digits.len();\n\
    \    let mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_digits_len as usize;\n    let\
    \ mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_digits_len as usize;\n    let\
    \ mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_digits_len as usize;\n    let\
    \ mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_digits_len as usize;\n    let\
    \ mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_digits_len as usize;\n    let\
    \ mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_digits_len as usize;\n    let\
    \ mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_\n}\n\nfn main() {\n    let\
    \ candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwko1w1qg.rs:44:38\n   |\n\
    44 |     let mut prime_digits_len = prime_\n   |                             \
    \         ^ help: add `;` here\n45 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `prime_` in this scope\n  --> /tmp/tmpwko1w1qg.rs:44:32\n\
    \   |\n44 |     let mut prime_digits_len = prime_\n   |                      \
    \          ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpwko1w1qg.rs:49:17\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpwko1w1qg.rs:49:25\n \
    \  |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwko1w1qg.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwko1w1qg.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwko1w1qg.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwko1w1qg.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwko1w1qg.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwko1w1qg.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwko1w1qg.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpruvn2_qs.rs:34:127\n   |\n\
    34 |     let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                       ^ help: add `;` here\n\
    35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpruvn2_qs.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpruvn2_qs.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpruvn2_qs.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpruvn2_qs.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpruvn2_qs.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpruvn2_qs.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpruvn2_qs.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpruvn2_qs.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpruvn2_qs.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_u8fpmr.rs:42:20\n   |\n\
    42 |     let mut num_str\n   |                    ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num_digits = num.len();\n    let mut prime_digits = vec![];\n    let\
    \ mut prime_digits_counter = 0;\n    let mut prime_digits_counter2 = 0;\n    let\
    \ mut prime_digits_counter3 = 0;\n    let mut prime_digits_counter4 = 0;\n   \
    \ let mut prime_digits_counter5 = 0;\n    let mut prime_digits_counter6 = 0;\n\
    \    let mut prime_digits_counter7 = 0;\n    let mut prime_digits_counter8 = 0;\n\
    \    let mut prime_digits_counter9 = 0;\n    let mut prime_digits_counter10 =\
    \ 0;\n    let mut prime_digits_counter11 = 0;\n    let mut prime_digits_counter12\
    \ = 0;\n    let mut prime_digits_counter13 = 0;\n    let mut prime_digits_counter14\
    \ = 0;\n    let mut prime_digits_counter15 = 0;\n    let mut prime_digits_counter16\
    \ = 0;\n    let mut prime_digits_counter17 = 0;\n    let mut prime_digits_counter18\
    \ = 0;\n    let mut prime_digits_counter19 = 0;\n    let mut prime_digits_counter20\
    \ = 0;\n    let mut prime_digits_counter21 = 0;\n    let mut prime_digits_counter22\
    \ = 0;\n    let mut prime_digits_counter23 = 0;\n    let mut prime_digits_counter24\
    \ = 0;\n    let mut prime_digits_counter25 = 0;\n    let mut prime_digits_counter26\
    \ = 0;\n    let mut prime_digits_counter27 = 0;\n    let mut prime_digits_counter28\
    \ = 0;\n    let mut prime_digits_counter29 = 0;\n    let mut prime_digits_counter30\
    \ = 0;\n    let mut prime_digits_counter31 = 0;\n    let mut prime_digits_counter32\
    \ = 0;\n    let mut prime_digits_counter33 = 0;\n    let mut prime_digits_counter34\
    \ = 0;\n    let mut prime_digits_counter35 = 0;\n    let mut prime_digits_counter36\
    \ = 0;\n    let mut prime_digits_counter37 = 0;\n    let mut prime_digits_counter38\
    \ = 0;\n    let mut prime_digits_counter39 = 0;\n    let mut prime_digits_counter40\
    \ = 0;\n    let mut prime_digits_counter41 = 0;\n    let mut prime_digits_counter42\
    \ = 0;\n    let mut prime_digits_counter43 = 0;\n    let mut prime_digits_counter44\
    \ = 0;\n    let mut prime_digits_counter45 = 0;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpa7691y9r.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa7691y9r.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa7691y9r.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa7691y9r.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa7691y9r.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa7691y9r.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpa7691y9r.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpa7691y9r.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpa7691y9r.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa7691y9r.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa7691y9r.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.to_digits().unwrap();\n    let mut prime_count: isize\
    \ = 0;\n    let mut prime_digit: isize = 2;\n    let mut prime_flag: isize = 0;\n\
    \    let mut prime_flag2: isize = 0;\n    let mut prime_flag3: isize = 0;\n  \
    \  let mut prime_flag4: isize = 0;\n    let mut prime_flag5: isize = 0;\n    let\
    \ mut prime_flag6: isize = 0;\n    let mut prime_flag7: isize = 0;\n    let mut\
    \ prime_flag8: isize = 0;\n    let mut prime_flag9: isize = 0;\n    let mut prime_flag10:\
    \ isize = 0;\n    let mut prime_flag11: isize = 0;\n    let mut prime_flag12:\
    \ isize = 0;\n    let mut prime_flag13: isize = 0;\n    let mut prime_flag14:\
    \ isize = 0;\n    let mut prime_flag15: isize = 0;\n    let mut prime_flag16:\
    \ isize = 0;\n    let mut prime_flag17: isize = 0;\n    let mut prime_flag18:\
    \ isize = 0;\n    let mut prime_flag19: isize = 0;\n    let mut prime_flag20:\
    \ isize = 0;\n    let mut prime_flag21: isize = 0;\n    let mut prime_flag22:\
    \ isize = 0;\n    let mut prime_flag23: isize = 0;\n    let mut prime_flag24:\
    \ isize = 0;\n    let mut prime_flag25: isize = 0;\n    let mut prime_flag26:\
    \ isize = 0;\n    let mut prime_flag27: isize = 0;\n    let mut prime_flag28:\
    \ isize = 0;\n    let mut prime_flag29: isize = 0;\n    let mut prime_flag30:\
    \ isize = 0;\n    let mut prime_flag31: isize = 0;\n    let mut prime_flag32:\
    \ isize = 0;\n    let mut prime_flag33: isize = 0;\n    let mut prime_flag34:\
    \ isize = 0;\n    let mut prime_flag35: isize = 0;\n    let mut prime_flag36:\
    \ isize = 0;\n    let mut prime_flag37: isize = 0;\n    let mut prime_flag38:\
    \ isize = 0;\n    let mut prime_flag39: isize = 0;\n    let mut prime_flag40:\
    \ isize = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = hex_key;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7y7zn1tf.rs:56:11\n   |\n\
    56 |     let mu\n   |           ^ help: add `;` here\n57 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7y7zn1tf.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7y7zn1tf.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7y7zn1tf.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7y7zn1tf.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7y7zn1tf.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7y7zn1tf.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7y7zn1tf.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7y7zn1tf.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7y7zn1tf.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7y7zn1tf.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf8boz6ci.rs:34:134\n   |\n\
    34 |     let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                              ^ help: add `;`\
    \ here\n35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf8boz6ci.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_u8fpmr.rs:42:20\n   |\n\
    42 |     let mut num_str\n   |                    ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<&str> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<&str> = num_str.to_vec();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvhjn7tr3.rs:40:50\n   |\n\
    40 |     let mut num_str: Vec<&str> = num_str.to_owned\n   |                 \
    \                                 ^ help: add `;` here\n41 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvhjn7tr3.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvhjn7tr3.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvhjn7tr3.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvhjn7tr3.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvhjn7tr3.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvhjn7tr3.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvhjn7tr3.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvhjn7tr3.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvhjn7tr3.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvhjn7tr3.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk6rc601j.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut digits = num.chars().collect::<Vec<_>>();\n\
    \    let mut primes = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n\
    \    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![false;\
    \ 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set = vec![\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpr44uwqia.rs:52:30\n\
    \   |\n12 | fn hex_key(num: String) -> isize {\n   |                         \
    \         - closing delimiter possibly meant for this\n...\n52 |     let mut primes_set\
    \ = vec![\n   |                              ^ unclosed delimiter\n53 | }\n  \
    \ | ^ mismatched closing delimiter\n\nerror: expected one of `.`, `;`, `?`, `else`,\
    \ or an operator, found `}`\n  --> /tmp/tmpr44uwqia.rs:53:1\n   |\n53 | }\n  \
    \ | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr44uwqia.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr44uwqia.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr44uwqia.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr44uwqia.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr44uwqia.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr44uwqia.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr44uwqia.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr44uwqia.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![];\n    let mut prime: isize = 2;\n   \
    \ let mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut\
    \ prime_found3 = false;\n    let mut prime_found4 = false;\n    let mut prime_found5\
    \ = false;\n    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n\
    \    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let\
    \ mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let mut\
    \ prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut prime_found14\
    \ = false;\n    let mut prime_found15 = false;\n    let mut prime_found16 = false;\n\
    \    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n    let\
    \ mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let mut\
    \ prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut prime_found23\
    \ = false;\n    let mut prime_found24 = false;\n    let mut prime_found25 = false;\n\
    \    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n    let\
    \ mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let mut\
    \ prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut prime_found32\
    \ = false;\n    let mut prime_found33 = false;\n    let mut prime_found34 = false;\n\
    \    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n    let\
    \ mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let mut\
    \ prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut prime_found41\
    \ = false;\n    let mut prime_found42 = false;\n    let mut prime_found43 = false;\n\
    \    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n    let\
    \ mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let mut\
    \ prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut prime_found50\
    \ = false;\n    let mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf3u7n90p.rs:67:18\n   |\n\
    67 |     let mut prime\n   |                  ^ help: add `;` here\n68 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf3u7n90p.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf3u7n90p.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf3u7n90p.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf3u7n90p.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf3u7n90p.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf3u7n90p.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf3u7n90p.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf3u7n90p.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf3u7n90p.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf3u7n90p.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_digits_count:\
    \ usize = 0;\n    let mut prime_digits_sum: usize = 0;\n    let mut prime_digits_sum2:\
    \ usize = 0;\n    let mut prime_digits_sum3: usize = 0;\n    let mut prime_digits_sum4:\
    \ usize = 0;\n    let mut prime_digits_sum5: usize = 0;\n    let mut prime_digits_sum6:\
    \ usize = 0;\n    let mut prime_digits_sum7: usize = 0;\n    let mut prime_digits_sum8:\
    \ usize = 0;\n    let mut prime_digits_sum9: usize = 0;\n    let mut prime_digits_sum10:\
    \ usize = 0;\n    let mut prime_digits_sum11: usize = 0;\n    let mut prime_digits_sum12:\
    \ usize = 0;\n    let mut prime_digits_sum13: usize = 0;\n    let mut prime_digits_sum14:\
    \ usize = 0;\n    let mut prime_digits_sum15: usize = 0;\n    let mut prime_digits_sum16:\
    \ usize = 0;\n    let mut prime_digits_sum17: usize = 0;\n    let mut prime_digits_sum18:\
    \ usize = 0;\n    let mut prime_digits_sum19: usize = 0;\n    let mut prime_digits_sum20:\
    \ usize = 0;\n    let mut prime_digits_sum21: usize = 0;\n    let mut prime_digits_sum22:\
    \ usize = 0;\n    let mut prime_digits_sum23: usize = 0;\n    let mut prime_digits_sum24:\
    \ usize = 0;\n    let mut prime_digits_sum25: usize = 0;\n    let mut prime_digits_sum26:\
    \ usize = 0;\n    let mut prime_digits_sum27: usize = 0;\n    let mut prime_digits_sum28:\
    \ usize = 0;\n    let mut prime_digits_sum29: usize = 0;\n    let mut prime_digits_sum30:\
    \ usize = 0;\n    let mut prime_digits_sum31: usize = 0;\n    let mut prime_digits_sum32:\
    \ usize = 0;\n    let mut prime_digits_sum33: u\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2vbyjrsy.rs:49:34\n   |\n\
    49 |     let mut prime_digits_sum33: u\n   |                                 \
    \ ^ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0412]: cannot\
    \ find type `u` in this scope\n  --> /tmp/tmp2vbyjrsy.rs:49:33\n   |\n49 |   \
    \  let mut prime_digits_sum33: u\n   |                                 ^ help:\
    \ a builtin type with a similar name exists: `u8`\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmp2vbyjrsy.rs:54:17\n   |\n54 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2vbyjrsy.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2vbyjrsy.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2vbyjrsy.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2vbyjrsy.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2vbyjrsy.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2vbyjrsy.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2vbyjrsy.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2vbyjrsy.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not f"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf8boz6ci.rs:34:134\n   |\n\
    34 |     let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                              ^ help: add `;`\
    \ here\n35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf8boz6ci.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf8boz6ci.rs:34:134\n   |\n\
    34 |     let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                              ^ help: add `;`\
    \ here\n35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf8boz6ci.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk6rc601j.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_u8fpmr.rs:42:20\n   |\n\
    42 |     let mut num_str\n   |                    ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![\"\".to_string()];\n    let mut prime_digits:\
    \ Vec<&str> = vec![\"\".to_string()];\n    let mut prime_digits_len: isize = 0;\n\
    \    let mut prime_digits_len2: isize = 0;\n    let mut prime_digits_len3: isize\
    \ = 0;\n    let mut prime_digits_len4: isize = 0;\n    let mut prime_digits_len5:\
    \ isize = 0;\n    let mut prime_digits_len6: isize = 0;\n    let mut prime_digits_len7:\
    \ isize = 0;\n    let mut prime_digits_len8: isize = 0;\n    let mut prime_digits_len9:\
    \ isize = 0;\n    let mut prime_digits_len10: isize = 0;\n    let mut prime_digits_len11:\
    \ isize = 0;\n    let mut prime_digits_len12: isize = 0;\n    let mut prime_digits_len13:\
    \ isize = 0;\n    let mut prime_digits_len14: isize = 0;\n    let mut prime_digits_len15:\
    \ isize = 0;\n    let mut prime_digits_len16: isize = 0;\n    let mut prime_digits_len17:\
    \ isize = 0;\n    let mut prime_digits_len18: isize = 0;\n    let mut prime_digits_len19:\
    \ isize = 0;\n    let mut prime_digits_len20: isize = 0;\n    let mut prime_digits_len21:\
    \ isize = 0;\n    let mut prime_digits_len22: isize = 0;\n    let mut prime_digits_len23:\
    \ isize = 0;\n    let mut prime_digits_len24: isize = 0;\n    let mut prime_digits_len25:\
    \ isize = 0;\n    let mut prime_digits_len26: isize = 0;\n    let mut prime_digits_len27:\
    \ isize = 0;\n    let mut prime_digits_len28: isize = 0;\n    let mut prime_digits_len29:\
    \ isize = 0;\n    let mut prime_digits_len30: isize = 0;\n    let mut prime_digits_len31:\
    \ isize = 0;\n    let mut prime_digits_len32: isize = 0;\n    let mu\n}\n\nfn\
    \ main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpe7w6oadp.rs:49:11\n   |\n\
    49 |     let mu\n   |           ^ help: add `;` here\n50 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpe7w6oadp.rs:54:17\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe7w6oadp.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe7w6oadp.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpe7w6oadp.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpe7w6oadp.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpe7w6oadp.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpe7w6oadp.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpe7w6oadp.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpe7w6oadp.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe7w6oadp.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime: isize = 2;\n    let\
    \ mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqvsni74_.rs:67:18\n   |\n\
    67 |     let mut prime\n   |                  ^ help: add `;` here\n68 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqvsni74_.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqvsni74_.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqvsni74_.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqvsni74_.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqvsni74_.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqvsni74_.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqvsni74_.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqvsni74_.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqvsni74_.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqvsni74_.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_u8fpmr.rs:42:20\n   |\n\
    42 |     let mut num_str\n   |                    ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut primes_set:\
    \ HashSet<isize> = HashSet::new();\n    let mut primes_set2: HashSet<isize> =\
    \ HashSet::new();\n    let mut primes_set3: HashSet<isize> = HashSet::new();\n\
    \    let mut primes_set4: HashSet<isize> = HashSet::new();\n    let mut primes_set5:\
    \ HashSet<isize> = HashSet::new();\n    let mut primes_set6: HashSet<isize> =\
    \ HashSet::new();\n    let mut primes_set7: HashSet<isize> = HashSet::new();\n\
    \    let mut primes_set8: HashSet<isize> = HashSet::new();\n    let mut primes_set9:\
    \ HashSet<isize> = HashSet::new();\n    let mut primes_set10: HashSet<isize> =\
    \ HashSet::new();\n    let mut primes_set11: HashSet<isize> = HashSet::new();\n\
    \    let mut primes_set12: HashSet<isize> = HashSet::new();\n    let mut primes_set13:\
    \ HashSet<isize> = HashSet::new();\n    let mut primes_set14: HashSet<isize> =\
    \ HashSet::new();\n    let mut primes_set15: HashSet<isize> = HashSet::new();\n\
    \    let mut primes_set16: HashSet<isize> = HashSet::new();\n    let mut primes_set17:\
    \ HashSet<isize> = HashSet::new();\n    let mut primes_set18: HashSet<isize> =\
    \ HashSet::new();\n    let mut primes_set19: HashSet<isize> = HashSet::new();\n\
    \    let mut primes_set20: HashSet<isize> = HashSet::new();\n    let mut primes_set21:\
    \ HashSet<isize> = HashSet::new();\n    let \n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpm7csstht.rs:38:1\n  \
    \ |\n38 | }\n   | ^ expected pattern\n\nerror[E0412]: cannot find type `HashSet`\
    \ in this scope\n  --> /tmp/tmpm7csstht.rs:16:25\n   |\n16 |     let mut primes_set:\
    \ HashSet<isize> = HashSet::new();\n   |                         ^^^^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpm7csstht.rs:16:42\n   |\n16 |     let mut primes_set: HashSet<isize>\
    \ = HashSet::new();\n   |                                          ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this struct\n   |\n1  |\
    \ use std::collections::HashSet;\n   |\n\nerror[E0412]: cannot find type `HashSet`\
    \ in this scope\n  --> /tmp/tmpm7csstht.rs:17:26\n   |\n17 |     let mut primes_set2:\
    \ HashSet<isize> = HashSet::new();\n   |                          ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this struct\n   |\n1  |\
    \ use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `HashSet`\n  --> /tmp/tmpm7csstht.rs:17:43\n   |\n17 |  \
    \   let mut primes_set2: HashSet<isize> = HashSet::new();\n   |              \
    \                             ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0412]:\
    \ cannot find type `HashSet` in this scope\n  --> /tmp/tmpm7csstht.rs:18:26\n\
    \   |\n18 |     let mut primes_set3: HashSet<isize> = HashSet::new();\n   |  \
    \                        ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpm7csstht.rs:18:43\n\
    \   |\n18 |     let mut primes_set3: HashSet<isize> = HashSet::new();\n   |  \
    \                                         ^^^^^^^ not found in this scope\n  \
    \ |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0412]: cannot find typ"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_digits_len:\
    \ usize = 0;\n    let mut prime_digits_len2: usize = 0;\n    let mut prime_digits_len3:\
    \ usize = 0;\n    let mut prime_digits_len4: usize = 0;\n    let mut prime_digits_len5:\
    \ usize = 0;\n    let mut prime_digits_len6: usize = 0;\n    let mut prime_digits_len7:\
    \ usize = 0;\n    let mut prime_digits_len8: usize = 0;\n    let mut prime_digits_len9:\
    \ usize = 0;\n    let mut prime_digits_len10: usize = 0;\n    let mut prime_digits_len11:\
    \ usize = 0;\n    let mut prime_digits_len12: usize = 0;\n    let mut prime_digits_len13:\
    \ usize = 0;\n    let mut prime_digits_len14: usize = 0;\n    let mut prime_digits_len15:\
    \ usize = 0;\n    let mut prime_digits_len16: usize = 0;\n    let mut prime_digits_len17:\
    \ usize = 0;\n    let mut prime_digits_len18: usize = 0;\n    let mut prime_digits_len19:\
    \ usize = 0;\n    let mut prime_digits_len20: usize = 0;\n    let mut prime_digits_len21:\
    \ usize = 0;\n    let mut prime_digits_len22: usize = 0;\n    let mut prime_digits_len23:\
    \ usize = 0;\n    let mut prime_digits_len24: usize = 0;\n    let mut prime_digits_len25:\
    \ usize = 0;\n    let mut prime_digits_len26: usize = 0;\n    let mut prime_digits_len27:\
    \ usize = 0;\n    let mut prime_digits_len28: usize = 0;\n    let mut prime_digits_len29:\
    \ usize = 0;\n    let mut prime_digits_len30: usize = 0;\n    let mut prime_digits_len31:\
    \ usize = 0;\n    let mut prime_digits_len32: usize = 0;\n    let mut prime_digits_len33:\
    \ usize = 0;\n    let mut prime_digits_len34: u\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_gr8hs0x.rs:49:34\n   |\n\
    49 |     let mut prime_digits_len34: u\n   |                                 \
    \ ^ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0412]: cannot\
    \ find type `u` in this scope\n  --> /tmp/tmp_gr8hs0x.rs:49:33\n   |\n49 |   \
    \  let mut prime_digits_len34: u\n   |                                 ^ help:\
    \ a builtin type with a similar name exists: `u8`\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmp_gr8hs0x.rs:54:17\n   |\n54 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_gr8hs0x.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_gr8hs0x.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_gr8hs0x.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_gr8hs0x.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_gr8hs0x.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_gr8hs0x.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_gr8hs0x.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_gr8hs0x.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not f"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime: isize\
    \ = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let \n}\n\nfn main() {\n \
    \   let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp180x13g9.rs:70:1\n  \
    \ |\n70 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp180x13g9.rs:74:17\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:74:25\n \
    \  |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp180x13g9.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:78:25\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:79:17\n   |\n79 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk6rc601j.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_lowercase().chars().collect();\n\
    \    for d in digits {\n        if d >= 'a' && d <= 'f' {\n            num = num\
    \ * 16 + d - 'a' as isize;\n        } else {\n            num = num * 16 + d as\
    \ isize;\n        }\n    }\n    return num;\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsur7_fcj.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsur7_fcj.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsur7_fcj.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsur7_fcj.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsur7_fcj.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsur7_fcj.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsur7_fcj.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsur7_fcj.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsur7_fcj.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsur7_fcj.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsur7_fcj.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime: isize = 0;\n    let\
    \ mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime_found\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxm7okjj2.rs:67:24\n   |\n\
    67 |     let mut prime_found\n   |                        ^ help: add `;` here\n\
    68 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpxm7okjj2.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxm7okjj2.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxm7okjj2.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxm7okjj2.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxm7okjj2.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxm7okjj2.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxm7okjj2.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxm7okjj2.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxm7okjj2.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxm7okjj2.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    for digit in digits {\n        if digit == 'A' || digit == 'B' || digit ==\
    \ 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n            num = num\
    \ * 16 + digit as isize;\n        }\n    }\n    return num;\n}\n\nfn main() {\n\
    \    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprfw3s61r.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprfw3s61r.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprfw3s61r.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprfw3s61r.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprfw3s61r.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprfw3s61r.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprfw3s61r.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprfw3s61r.rs:28:25\n   |\n28 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprfw3s61r.rs:29:17\n  \
    \ |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprfw3s61r.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprfw3s61r.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime_digits: Vec<&str>\
    \ = vec![];\n    let mut prime_digits_len: usize = 0;\n    let mut prime_digit_len:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count: usize = 0;\n    let mut prime_digit_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count: usize = 0;\n    let mut\
    \ prime_digit_count_count_count_len: usize = 0;\n    let mut prime_digit_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_len: usize = 0;\n\
    \    let mut prime_digit_count_count_count_count_count: usize = 0;\n    let mut\
    \ prime_digit_count_count_count_count_count_len: usize = 0;\n    let mut prime_digit_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count: usize\
    \ = 0;\n    let mut prime_digit_count_count_count_count_count_count_len: usize\
    \ = 0;\n    let mut prime_digit_count_count_count_count_count_count_count: usize\
    \ = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count_count:\
    \ usize\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl_telnnp.rs:43:97\n   |\n\
    43 |     let mut prime_digit_count_count_count_count_count_count_count_count_count_count_count:\
    \ usize\n   |                                                                \
    \                                 ^ help: add `;` here\n44 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpl_telnnp.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl_telnnp.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl_telnnp.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpl_telnnp.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl_telnnp.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl_telnnp.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl_telnnp.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl_telnnp.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl_telnnp.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl_tel"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    \n    for digit in digits {\n  \
    \      if digit == 'A' || digit == 'B' || digit == 'C' || digit == 'D' || digit\
    \ == 'E' || digit == 'F' {\n            primes.push(digit);\n        }\n    }\n\
    \    \n    for prime in primes {\n        num = num * prime + primes.iter().position(|&x|\
    \ x == prime).unwrap();\n    }\n    \n    return num;\n}\n\nfn main() {\n    let\
    \ candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9qmaf3b0.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9qmaf3b0.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9qmaf3b0.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9qmaf3b0.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9qmaf3b0.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9qmaf3b0.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9qmaf3b0.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9qmaf3b0.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9qmaf3b0.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9qmaf3b0.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9qmaf3b0.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![\"\".to_string()];\n    let mut primes_count:\
    \ usize = 0;\n    let mut primes_count_2: usize = 0;\n    let mut primes_count_3:\
    \ usize = 0;\n    let mut primes_count_4: usize = 0;\n    let mut primes_count_5:\
    \ usize = 0;\n    let mut primes_count_6: usize = 0;\n    let mut primes_count_7:\
    \ usize = 0;\n    let mut primes_count_8: usize = 0;\n    let mut primes_count_9:\
    \ usize = 0;\n    let mut primes_count_10: usize = 0;\n    let mut primes_count_11:\
    \ usize = 0;\n    let mut primes_count_12: usize = 0;\n    let mut primes_count_13:\
    \ usize = 0;\n    let mut primes_count_14: usize = 0;\n    let mut primes_count_15:\
    \ usize = 0;\n    let mut primes_count_16: usize = 0;\n    let mut primes_count_17:\
    \ usize = 0;\n    let mut primes_count_18: usize = 0;\n    let mut primes_count_19:\
    \ usize = 0;\n    let mut primes_count_20: usize = 0;\n    let mut primes_count_21:\
    \ usize = 0;\n    let mut primes_count_22: usize = 0;\n    let mut primes_count_23:\
    \ usize = 0;\n    let mut primes_count_24: usize = 0;\n    let mut primes_count_25:\
    \ usize = 0;\n    let mut primes_count_26: usize = 0;\n    let mut primes_count_27:\
    \ usize = 0;\n    let mut primes_count_28: usize = 0;\n    let mut primes_count_29:\
    \ usize = 0;\n    let mut primes_count_30: usize = 0;\n    let mut primes_count_31:\
    \ usize = 0;\n    let mut primes_count_32: usize = 0;\n    let mut primes_count_33:\
    \ usize = 0;\n    let mut primes_count_34: usize = 0;\n    let mut primes_count_35:\
    \ usize = 0;\n    let mut primes_count_36: usize = 0;\n    let mut primes_count_37:\
    \ usize = 0;\n    let mut primes_count_38: usize = 0;\n    let mut primes_count_39:\
    \ usize = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = hex_key;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp1_lc2zh2.rs:56:1\n\
    \   |\n56 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp1_lc2zh2.rs:60:17\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp1_lc2zh2.rs:60:25\n \
    \  |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1_lc2zh2.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1_lc2zh2.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1_lc2zh2.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1_lc2zh2.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1_lc2zh2.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1_lc2zh2.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1_lc2zh2.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1_lc2zh2.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1_lc2zh2.rs:65:17\n   |\n65 |     "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ];\n    let mut prime_found = false;\n    \n    for digit in digits {\n      \
    \  if prime_found {\n            break;\n        }\n        if digit == \"a\"\
    \ || digit == \"b\" || digit == \"c\" || digit == \"d\" || digit == \"e\" || digit\
    \ == \"f\" {\n            continue;\n        }\n        if digit == \"2\" || digit\
    \ == \"3\" || digit == \"5\" || digit == \"7\" || digit == \"B\" || digit == \"\
    D\" {\n            prime_found = true;\n        }\n        \n        prime[prime\
    \ - 1] += digit;\n    }\n    \n    for prime in prime {\n        if prime < 10\
    \ {\n            num += prime as isize;\n        }\n    }\n    \n    return num;\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpcyuddd3h.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcyuddd3h.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcyuddd3h.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcyuddd3h.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcyuddd3h.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcyuddd3h.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcyuddd3h.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcyuddd3h.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcyuddd3h.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcyuddd3h.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcyuddd3h.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n    let mut\
    \ num_prime: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_2: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_3: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_4: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_5: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_6: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_7: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_8: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_9: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_10: Vec<u8> = \n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpw1o8yuep.rs:24:1\n\
    \   |\n24 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpw1o8yuep.rs:28:17\n   |\n28 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpw1o8yuep.rs:28:25\n \
    \  |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw1o8yuep.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw1o8yuep.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw1o8yuep.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw1o8yuep.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw1o8yuep.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw1o8yuep.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw1o8yuep.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw1o8yuep.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw1o8yuep.rs:33:17\n   |\n33 |     "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_digit: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count_2: isize = 0;\n    let mut prime_digit_count_3:\
    \ isize = 0;\n    let mut prime_digit_count_4: isize = 0;\n    let mut prime_digit_count_5:\
    \ isize = 0;\n    let mut prime_digit_count_6: isize = 0;\n    let mut prime_digit_count_7:\
    \ isize = 0;\n    let mut prime_digit_count_8: isize = 0;\n    let mut prime_digit_count_9:\
    \ isize = 0;\n    let mut prime_digit_count_10: isize = 0;\n    let mut prime_digit_count_11:\
    \ isize = 0;\n    let mut prime_digit_count_12: isize = 0;\n    let mut prime_digit_count_13:\
    \ isize = 0;\n    let mut prime_digit_count_14: isize = 0;\n    let mut prime_digit_count_15:\
    \ isize = 0;\n    let mut prime_digit_count_16: isize = 0;\n    let mut prime_digit_count_17:\
    \ isize = 0;\n    let mut prime_digit_count_18: isize = 0;\n    let mut prime_digit_count_19:\
    \ isize = 0;\n    let mut prime_digit_count_20: isize = 0;\n    let mut prime_digit_count_21:\
    \ isize = 0;\n    let mut prime_digit_count_22: isize = 0;\n    let mut prime_digit_count_23:\
    \ isize = 0;\n    let mut prime_digit_count_24: isize = 0;\n    let mut prime_digit_count_25:\
    \ isize = 0;\n    let mut prime_digit_count_26: isize = 0;\n    let mut prime_digit_count_27:\
    \ isize = 0;\n    let mut prime_digit_count_28: isize = 0;\n    let mut prime_digit_count_29:\
    \ isize = 0;\n    let mut prime_digit_count_30: isize = 0;\n    let mut prime_digit_count_31:\
    \ isize = 0;\n    let mut prime_digit_count_32: isize = 0;\n    let mut prime_digit_count_33:\
    \ isize = 0;\n    let mut prime_digit_count_34: isize = 0;\n    let mut prime_digit_count_35:\
    \ isize = 0;\n    let mut prime_digit_count_36: isize = 0;\n    let mut prime_digit_count_37:\
    \ isize = 0;\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbiu8x2o0.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbiu8x2o0.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbiu8x2o0.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbiu8x2o0.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbiu8x2o0.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbiu8x2o0.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbiu8x2o0.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbiu8x2o0.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbiu8x2o0.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbiu8x2o0.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbiu8x2o0.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_counter: isize\
    \ = 0;\n    let mut prime_counter2: isize = 0;\n    let mut prime_counter3: isize\
    \ = 0;\n    let mut prime_counter4: isize = 0;\n    let mut prime_counter5: isize\
    \ = 0;\n    let mut prime_counter6: isize = 0;\n    let mut prime_counter7: isize\
    \ = 0;\n    let mut prime_counter8: isize = 0;\n    let mut prime_counter9: isize\
    \ = 0;\n    let mut prime_counter10: isize = 0;\n    let mut prime_counter11:\
    \ isize = 0;\n    let mut prime_counter12: isize = 0;\n    let mut prime_counter13:\
    \ isize = 0;\n    let mut prime_counter14: isize = 0;\n    let mut prime_counter15:\
    \ isize = 0;\n    let mut prime_counter16: isize = 0;\n    let mut prime_counter17:\
    \ isize = 0;\n    let mut prime_counter18: isize = 0;\n    let mut prime_counter19:\
    \ isize = 0;\n    let mut prime_counter20: isize = 0;\n    let mut prime_counter21:\
    \ isize = 0;\n    let mut prime_counter22: isize = 0;\n    let mut prime_counter23:\
    \ isize = 0;\n    let mut prime_counter24: isize = 0;\n    let mut prime_counter25:\
    \ isize = 0;\n    let mut prime_counter26: isize = 0;\n    let mut prime_counter27:\
    \ isize = 0;\n    let mut prime_counter28: isize = 0;\n    let mut prime_counter29:\
    \ isize = 0;\n    let mut prime_counter30: isize = 0;\n    let mut prime_counter31:\
    \ isize = 0;\n    let mut prime_counter32: isize = 0;\n    let mut prime_counter33:\
    \ isize = 0;\n    let mut prime_counter34: isize = 0;\n    let mut prime_counter35:\
    \ isize = 0;\n    let mut prime_counter36: isize = 0;\n    let mut prime_counter37:\
    \ isize = 0;\n    let mut prime_counter38: isize = 0;\n    let mut prime_counter39:\
    \ isize = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = hex_key;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp54frybj4.rs:56:1\n\
    \   |\n56 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp54frybj4.rs:60:17\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp54frybj4.rs:60:25\n \
    \  |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp54frybj4.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp54frybj4.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp54frybj4.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp54frybj4.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp54frybj4.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp54frybj4.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp54frybj4.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp54frybj4.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp54frybj4.rs:65:17\n   |\n65 |     "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num_digits = num.len();\n    let mut prime_count = 0;\n    let mut\
    \ prime_digits = vec![2,3,5,7,11,13,17,19];\n    let mut prime_digits_len = prime_digits.len();\n\
    \    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let\
    \ mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len\
    \ = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len\
    \ + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n\
    \    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let\
    \ mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len\
    \ = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len\
    \ + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n\
    \    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let\
    \ mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len\
    \ = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len\
    \ + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n\
    \    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let\
    \ mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len\
    \ = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len\
    \ + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n\
    \    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n}\n\n\
    fn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7vamitln.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7vamitln.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7vamitln.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7vamitln.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7vamitln.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7vamitln.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7vamitln.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7vamitln.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7vamitln.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7vamitln.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7vamitln.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num_digits = num.len();\n    let mut prime_count = 0;\n    let mut\
    \ prime_digits = vec![];\n    let mut prime_digits_count = vec![];\n    let mut\
    \ prime_digits_count_max = vec![];\n    let mut prime_digits_count_min = vec![];\n\
    \    let mut prime_digits_count_max_prime = vec![];\n    let mut prime_digits_count_min_prime\
    \ = vec![];\n    let mut prime_digits_count_max_prime_prime = vec![];\n    let\
    \ mut prime_digits_count_min_prime_prime = vec![];\n    let mut prime_digits_count_max_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime_prime_prime = vec![];\n\
    \    let mut prime_digits_count_max_prime_prime_prime_prime = vec![];\n    let\
    \ mut prime_digits_count_min_prime_prime_prime_prime = vec![];\n    let mut prime_digits_count_max_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_max_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime\n}\n\nfn main() {\n    let\
    \ candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkv5oyoq1.rs:38:41\n   |\n\
    38 |     let mut prime_digits_count_min_prime\n   |                          \
    \               ^ help: add `;` here\n39 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkv5oyoq1.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkv5oyoq1.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkv5oyoq1.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkv5oyoq1.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkv5oyoq1.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkv5oyoq1.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkv5oyoq1.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkv5oyoq1.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkv5oyoq1.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkv5oyoq1.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this sco"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n    let mut\
    \ prime_count: isize = 0;\n    let mut prime_digit: u8 = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_sum: isize = 0;\n    let mut prime_digit_product:\
    \ isize = 1;\n    let mut prime_digit_sum2: isize = 1;\n    let mut prime_digit_product2:\
    \ isize = 1;\n    let mut prime_digit_sum3: isize = 1;\n    let mut prime_digit_product3:\
    \ isize = 1;\n    let mut prime_digit_sum4: isize = 1;\n    let mut prime_digit_product4:\
    \ isize = 1;\n    let mut prime_digit_sum5: isize = 1;\n    let mut prime_digit_product5:\
    \ isize = 1;\n    let mut prime_digit_sum6: isize = 1;\n    let mut prime_digit_product6:\
    \ isize = 1;\n    let mut prime_digit_sum7: isize = 1;\n    let mut prime_digit_product7:\
    \ isize = 1;\n    let mut prime_digit_sum8: isize = 1;\n    let mut prime_digit_product8:\
    \ isize = 1;\n    let mut prime_digit_sum9: isize = 1;\n    let mut prime_digit_product9:\
    \ isize = 1;\n    let mut prime_digit_sum10: isize = 1;\n    let mut prime_digit_product10:\
    \ isize = 1;\n    let mut prime_digit_sum11: isize = 1;\n    let mut prime_digit_product11:\
    \ isize = 1;\n    let mut prime_digit_sum12: isize = 1;\n    let mut prime_digit_product12:\
    \ isize = 1;\n    let mut prime_digit_sum13: isize = 1;\n    let mut prime_digit_product13:\
    \ isize = 1;\n    let mut prime_digit_sum14: isize = 1;\n    let mut prime_digit_product14:\
    \ isize = 1;\n    let mut prime_digit_sum15: isize = 1;\n    let mut prime_digit_product15:\
    \ isize = 1;\n    let mut prime_digit_sum16: isize = 1;\n    let mut prime_digit_product16:\
    \ isize = 1;\n    let mut prime_digit_sum17: isize = 1;\n    let mut prime_digit_product17:\
    \ isize = 1;\n    let mut prime_digit_sum18: isize = 1;\n    let mut prime_digit_product18:\
    \ isize = 1;\n    let mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo3_74d_7.rs:53:18\n   |\n\
    53 |     let mut prime\n   |                  ^ help: add `;` here\n54 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo3_74d_7.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo3_74d_7.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo3_74d_7.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo3_74d_7.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo3_74d_7.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo3_74d_7.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo3_74d_7.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo3_74d_7.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo3_74d_7.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo3_74d_7.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut prime_digits = vec![];\n    let mut\
    \ prime_digit_counts = vec![];\n    let mut prime_digit_counts_len = vec![];\n\
    \    let mut prime_digit_counts_len_len = vec![];\n    let mut prime_digit_counts_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len = vec![];\n    let\
    \ mut prime_digit_counts_len_len_len_len_len = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len = vec![];\n\
    \    let mut prime_digit_counts_len_len_len_len_len_len_len_len = vec![];\n  \
    \  let mut prime_digit_counts_len_len_len_len_len_len_len_len_len = vec![];\n\
    \    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len =\
    \ vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_\n}\n\nfn main() {\n    let\
    \ candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphr_jdehq.rs:36:40\n   |\n\
    36 |     let mut prime_digit_counts_len_len_\n   |                           \
    \             ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphr_jdehq.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphr_jdehq.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphr_jdehq.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphr_jdehq.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphr_jdehq.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphr_jdehq.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphr_jdehq.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphr_jdehq.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphr_jdehq.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphr_jdehq.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf8boz6ci.rs:34:134\n   |\n\
    34 |     let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                              ^ help: add `;`\
    \ here\n35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf8boz6ci.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ digits = num.chars().collect::<Vec<_>>();\n    let mut primes = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ \n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpyhuozmvi.rs:52:30\n\
    \   |\n12 | fn hex_key(num: String) -> isize {\n   |                         \
    \         - closing delimiter possibly meant for this\n...\n52 |     let mut primes_set\
    \ = vec![false; \n   |                              ^ unclosed delimiter\n53 |\
    \ }\n   | ^ mismatched closing delimiter\n\nerror: expected one of `.`, `;`, `?`,\
    \ `else`, or an operator, found `}`\n  --> /tmp/tmpyhuozmvi.rs:53:1\n   |\n53\
    \ | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyhuozmvi.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyhuozmvi.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyhuozmvi.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyhuozmvi.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyhuozmvi.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyhuozmvi.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyhuozmvi.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyhuozmvi.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut prime_digits = vec![];\n    let mut\
    \ digits = num.chars().collect::<Vec<_>>();\n    let mut hex = String::new();\n\
    \    let mut hexdigits = String::new();\n    let mut hexdigits_prime = String::new();\n\
    \    let mut hexdigits_prime_prime = String::new();\n    let mut hexdigits_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime = String::new();\n\
    \    let mut hexdigits_prime_prime_prime_prime_prime = String::new();\n    let\
    \ mut hexdigits_prime_prime_prime_prime_prime_prime_prime = String::new();\n \
    \   let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime =\
    \ String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hex\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvri9a_qj.rs:34:16\n   |\n\
    34 |     let mut hex\n   |                ^ help: add `;` here\n35 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmpvri9a_qj.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvri9a_qj.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvri9a_qj.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvri9a_qj.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvri9a_qj.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvri9a_qj.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvri9a_qj.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvri9a_qj.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvri9a_qj.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvri9a_qj.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n    let mut\
    \ prime_digits = vec![];\n    let mut prime_digit_count: usize = 0;\n    let mut\
    \ prime_digit_index: usize = 0;\n    let mut prime_digit_value: u8 = 0;\n    let\
    \ mut prime_digit_found = false;\n    let mut prime_digit_prime = false;\n   \
    \ let mut prime_digit_prime_found = false;\n    let mut prime_digit_prime_prime\
    \ = false;\n    let mut prime_digit_prime_prime_found = false;\n    let mut prime_digit_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_found = false;\n    let\
    \ mut prime_digit_prime_prime_prime_prime_found = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_\n}\n\nfn main() {\n   \
    \ let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpp8ezn0ba.rs:38:43\n   |\n\
    38 |     let mut prime_digit_prime_prime_prime_\n   |                        \
    \                   ^ help: add `;` here\n39 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpp8ezn0ba.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp8ezn0ba.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp8ezn0ba.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpp8ezn0ba.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpp8ezn0ba.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpp8ezn0ba.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpp8ezn0ba.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpp8ezn0ba.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpp8ezn0ba.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp8ezn0ba.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut\
    \ digit: isize = 0;\n    let mut prime_found = false;\n    let mut digit_found\
    \ = false;\n    let mut prime_found2 = false;\n    let mut digit_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut digit_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut digit_found4 = false;\n    let mut prime_found5\
    \ = false;\n    let mut digit_found5 = false;\n    let mut prime_found6 = false;\n\
    \    let mut digit_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut digit_found7 = false;\n    let mut prime_found8 = false;\n    let mut digit_found8\
    \ = false;\n    let mut prime_found9 = false;\n    let mut digit_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut digit_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut digit_found11 = false;\n    let mut\
    \ prime_found12 = false;\n    let mut digit_found12 = false;\n    let mut prime_found13\
    \ = false;\n    let mut digit_found13 = false;\n    let mut prime_found14 = false;\n\
    \    let mut digit_found14 = false;\n    let mut prime_found15 = false;\n    let\
    \ mut digit_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ digit_found16 = false;\n    let mut prime_found17 = false;\n    let mut digit_found17\
    \ = false;\n    let mut prime_found18 = false;\n    let mut digit_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut digit_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut digit_found20 = false;\n    let mut\
    \ prime_found21 = false;\n    let mut digit_found21 = false;\n    let mut prime_found22\
    \ = false;\n    let mut digit_found22 = false;\n    let mut prime_found23 = false;\n\
    \    let mut digit_found23 = false;\n    let mut prime_found24 = false;\n    let\
    \ mut digit_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ digit_found25 = false;\n    let mut prime_found26 = false;\n    let mut digit_found26\
    \ = false;\n    let mut prime_found27 = false;\n    let mut digit_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut digit_found28 = false;\n    let\
    \ mut prime_found\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptuexz37q.rs:72:24\n   |\n\
    72 |     let mut prime_found\n   |                        ^ help: add `;` here\n\
    73 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmptuexz37q.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptuexz37q.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptuexz37q.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptuexz37q.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptuexz37q.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptuexz37q.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptuexz37q.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptuexz37q.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptuexz37q.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptuexz37q.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_chars().collect();\n\
    \    for digit in digits {\n        if digit == 'A' || digit == 'B' || digit ==\
    \ 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n            num = num\
    \ * 16 + digit as isize;\n        } else {\n            num = num * 10 + digit\
    \ as isize;\n        }\n    }\n    return num;\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmn_szu9t.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmn_szu9t.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmn_szu9t.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmn_szu9t.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmn_szu9t.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmn_szu9t.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmn_szu9t.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmn_szu9t.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmn_szu9t.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmn_szu9t.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmn_szu9t.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut prime: Vec<&str> = Vec::new();\n    let mut prime_found = false;\n\
    \    let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut prime_found51\
    \ = false;\n    let mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzm_zr76x.rs:67:18\n   |\n\
    67 |     let mut prime\n   |                  ^ help: add `;` here\n68 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzm_zr76x.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzm_zr76x.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzm_zr76x.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzm_zr76x.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzm_zr76x.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzm_zr76x.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzm_zr76x.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzm_zr76x.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzm_zr76x.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzm_zr76x.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    for digit in digits {\n        if digit == 'a' || digit == 'b' || digit ==\
    \ 'c' || digit == 'd' || digit == 'e' || digit == 'f' {\n            num = num\
    \ * 16 + digit as isize;\n        } else {\n            num = num * 10 + digit\
    \ as isize;\n        }\n    }\n    return num;\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplc9uhf9b.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplc9uhf9b.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplc9uhf9b.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplc9uhf9b.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplc9uhf9b.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplc9uhf9b.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplc9uhf9b.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplc9uhf9b.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplc9uhf9b.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplc9uhf9b.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplc9uhf9b.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.chars().collect();\n\
    \    let mut prime: isize = 2;\n    let mut prime_found = false;\n    let mut\
    \ prime_found2 = false;\n    let mut prime_found3 = false;\n    let mut prime_found4\
    \ = false;\n    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n\
    \    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let\
    \ mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let mut prime_found11\
    \ = false;\n    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n\
    \    let mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let\
    \ mut prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut\
    \ prime_found18 = false;\n    let mut prime_found19 = false;\n    let mut prime_found20\
    \ = false;\n    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n\
    \    let mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let\
    \ mut prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut\
    \ prime_found27 = false;\n    let mut prime_found28 = false;\n    let mut prime_found29\
    \ = false;\n    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n\
    \    let mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let\
    \ mut prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut\
    \ prime_found36 = false;\n    let mut prime_found37 = false;\n    let mut prime_found38\
    \ = false;\n    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n\
    \    let mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let\
    \ mut prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut\
    \ prime_found45 = false;\n    let mut prime_found46 = false;\n    let mut prime_found47\
    \ = false;\n    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n\
    \    let mut prime_found50 = false;\n    let mut prime_found51 = false;\n    let\
    \ mut prime_found52 = false;\n    let \n}\n\nfn main() {\n    let candidate =\
    \ hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpdsv2ih0b.rs:69:1\n  \
    \ |\n69 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpdsv2ih0b.rs:73:17\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpdsv2ih0b.rs:73:25\n \
    \  |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdsv2ih0b.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdsv2ih0b.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdsv2ih0b.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdsv2ih0b.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdsv2ih0b.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdsv2ih0b.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdsv2ih0b.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdsv2ih0b.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdsv2ih0b.rs:78:17\n   |\n78 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut prime_digits = vec![0; 16];\n    let\
    \ mut prime_digits_count = vec![0; 16];\n    let mut prime_digits_count_in_hex\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_decimal = vec![0; 16];\n \
    \   let mut prime_digits_count_in_octal = vec![0; 16];\n    let mut prime_digits_count_in_binary\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_binary = vec![0; 16];\n\
    \    let mut prime_digits_count_in_decimal_binary = vec![0; 16];\n    let mut\
    \ prime_digits_count_in_octal_binary = vec![0; 16];\n    let mut prime_digits_count_in_binary_hex\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal = vec![0; 16];\n\
    \    let mut prime_digits_count_in_decimal_octal = vec![0; 16];\n    let mut prime_digits_count_in_octal_hex\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_binary = vec![0;\
    \ 16];\n    let mut prime_digits_count_in_decimal_octal_binary = vec![0; 16];\n\
    \    let mut prime_digits_count_in_octal_hex_binary = vec![0; 16];\n    let mut\
    \ prime_digits_count_in_hex_decimal_decimal = vec![0; 16];\n    let mut prime_digits_count_in_decimal_octal_hex\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_decimal_binary\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_decimal_octal_hex_binary =\
    \ vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_decimal_octal =\
    \ vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_decimal_octal_binary\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_decimal_octal_hex_binary\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_decimal_octal_hex\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_decimal_octal_hex_binary\
    \ = vec![0; 16];\n    let mut prime_digits_count_\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbo10hl1j.rs:39:32\n   |\n\
    39 |     let mut prime_digits_count_\n   |                                ^ help:\
    \ add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpbo10hl1j.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpbo10hl1j.rs:44:25\n \
    \  |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbo10hl1j.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbo10hl1j.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbo10hl1j.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbo10hl1j.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbo10hl1j.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbo10hl1j.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbo10hl1j.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbo10hl1j.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut\
    \ prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut\
    \ prime_found53 = false;\n    let mut prime_found\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppsqrc043.rs:68:24\n   |\n\
    68 |     let mut prime_found\n   |                        ^ help: add `;` here\n\
    69 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmppsqrc043.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppsqrc043.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppsqrc043.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppsqrc043.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppsqrc043.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppsqrc043.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppsqrc043.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppsqrc043.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppsqrc043.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppsqrc043.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime = 0;\n    let mut num_primes_digits_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime = 0;\n    let mut\
    \ num_primes_digits_prime_prime_prime_prime_prime = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpww1e7d8v.rs:36:78\n   |\n\
    36 |     let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\n\
    \   |                                                                        \
    \      ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpww1e7d8v.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpww1e7d8v.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpww1e7d8v.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpww1e7d8v.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpww1e7d8v.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpww1e7d8v.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpww1e7d8v.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpww1e7d8v.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpww1e7d8v.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpww1e7d8v.rs:45:25\n   |\n45 |     assert_eq!("
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_u8fpmr.rs:42:20\n   |\n\
    42 |     let mut num_str\n   |                    ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf8boz6ci.rs:34:134\n   |\n\
    34 |     let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                              ^ help: add `;`\
    \ here\n35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf8boz6ci.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    \n    for digit in digits {\n  \
    \      primes.push(digit as &str);\n    }\n    \n    for prime in primes {\n \
    \       if primes.iter().any(|&x| x == prime) {\n            continue;\n     \
    \   }\n        let mut prime_digits: Vec<&str> = prime.chars().collect();\n  \
    \      \n        for digit in prime_digits {\n            prime_digits.remove(digit);\n\
    \        }\n        \n        let mut prime_digits_iter = prime_digits.iter();\n\
    \        \n        while prime_digits_iter.any(|&x| x == prime_digits[0]) {\n\
    \            prime_digits_iter.next();\n        }\n        \n        let mut prime_digits_iter\
    \ = prime_digits.iter();\n        \n        while prime_digits_iter.any(|&x| x\
    \ == prime_digits[1]) {\n            prime_digits_iter.next();\n        }\n  \
    \      \n        let mut prime_digits_iter = prime_digits.iter();\n        \n\
    \        while prime_digits_iter.any(|&x| x == prime_digits[2]) {\n          \
    \  prime_digits_iter.next();\n        }\n        \n        let mut prime_digits_iter\
    \ = prime_digits.iter();\n        \n        while prime_digits_iter.any(|&x| x\
    \ == prime_digits[3]) {\n            prime_digits_iter.next();\n        }\n  \
    \      \n        let mut prime_digits_iter = prime_digits.iter();\n        \n\
    \        while prime_digits_iter.any(|&x| x == prime_digits[4]) {\n          \
    \  prime_digits_iter.next();\n        }\n        \n        let mut prime_digits_iter\
    \ = prime_digits.iter();\n        \n        while prime_digits_iter.any(|&x| x\
    \ == prime_digits[5]) {\n            prime_digits_iter.next();\n        }\n  \
    \      \n        let mut prime_digits_iter = prime_digits.iter();\n        \n\
    \        while prime_digits_iter.any(|&x| x == prime_digits[6]) {\n          \
    \  prime_digits_iter.next();\n        }\n        \n        let mut prime_digits_iter\
    \ = prime_digits.iter();\n        \n        while prime_digits_iter.any(|&x| x\
    \ == prime_digits[7]) {\n            prime_digits_iter.next();\n        }\n  \
    \      \n        let mut prime_digits_iter = \n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpbddm5vy9.rs:90:3\n\
    \   |\n12 | fn hex_key(num: String) -> isize {\n   |                         \
    \         - unclosed delimiter\n...\n21 |     for prime in primes {\n   |    \
    \                     - this delimiter might not be properly closed...\n...\n\
    80 | }\n   | - ...as it matches this but it has different indentation\n...\n90\
    \ | }\n   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmpbddm5vy9.rs:80:1\n\
    \   |\n80 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpbddm5vy9.rs:84:17\n   |\n84 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpbddm5vy9.rs:84:25\n \
    \  |\n84 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbddm5vy9.rs:85:17\n   |\n85 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbddm5vy9.rs:85:25\n   |\n85 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbddm5vy9.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbddm5vy9.rs:86:25\n   |\n86 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbddm5vy9.rs:87:17\n  \
    \ |\n87 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbddm5vy9.rs:87:25\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbddm5vy9.r"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut digit_count = 1;\n    let mut digits\
    \ = num.to_string();\n    while digit_count < hex_num::CHARACTERS {\n        if\
    \ digits[digit_count] == 'A' {\n            digit_count++;\n            continue;\n\
    \        }\n        if digits[digit_count] == 'B' {\n            digit_count++;\n\
    \            continue;\n        }\n        if digits[digit_count] == 'C' {\n \
    \           digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == 'D' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == 'E' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == 'F' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == '0' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == '1' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == '2' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == '3' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == '4' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == '5' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == '6' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == '7' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == '8' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == '9' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == 'A' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == 'B' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == 'C' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == 'D' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == 'E' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == 'F' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == '0' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == '1' {\n           \
    \ digit_count++;\n            continue;\n        }\n\n}\n\nfn main() {\n    let\
    \ candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpds9scnmh.rs:124:3\n\
    \    |\n12  | fn hex_key(num: String) -> isize {\n    |                      \
    \            - unclosed delimiter\n...\n16  |     while digit_count < hex_num::CHARACTERS\
    \ {\n    |                                             - this delimiter might\
    \ not be properly closed...\n...\n114 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n124 | }\n    |   ^\n\nerror: Rust has no postfix\
    \ increment operator\n  --> /tmp/tmpds9scnmh.rs:18:24\n   |\n18 |            \
    \ digit_count++;\n   |                        ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n18 |             { let tmp = digit_count;\
    \ digit_count += 1; tmp };\n   |             +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    18 -             digit_count++;\n18 +             digit_count += 1;\n   | \n\n\
    error: Rust has no postfix increment operator\n  --> /tmp/tmpds9scnmh.rs:22:24\n\
    \   |\n22 |             digit_count++;\n   |                        ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n22 |             { let\
    \ tmp = digit_count; digit_count += 1; tmp };\n   |             +++++++++++  \
    \          ~~~~~~~~~~~~~~~~~~~~~~~~~\n22 -             digit_count++;\n22 +  \
    \           digit_count += 1;\n   | \n\nerror: Rust has no postfix increment operator\n\
    \  --> /tmp/tmpds9scnmh.rs:26:24\n   |\n26 |             digit_count++;\n   |\
    \                        ^^ not a valid postfix operator\n   |\nhelp: use `+=\
    \ 1` instead\n   |\n26 |             { let tmp = digit_count; digit_count += 1;\
    \ tmp };\n   |             +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    26 -             digit_count++;\n26 +             digit_count += 1;\n   | \n\n\
    error: Rust has no postfix increment operator\n  --> /tmp/tmpds9scnmh.rs:30:24\n\
    \   |\n30 |             digit_count++;\n   |                        ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n30 |             { let\
    \ tmp = digit_count; digit_count += 1; tmp };\n   |             +++++++++++  \
    \          ~~~~~~~~~~~~~~~~~~~~~~~~~\n30 -         "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ prime_digits = false;\n    let mut prime_digit_count = 0;\n    let mut prime_digit_count_max\
    \ = 10;\n    let mut prime_digit_count_min = 2;\n    let mut prime_digit_count_step\
    \ = 2;\n    let mut prime_digit_count_max2 = 10;\n    let mut prime_digit_count_min2\
    \ = 2;\n    let mut prime_digit_count_step2 = 2;\n    let mut prime_digit_count_max3\
    \ = 10;\n    let mut prime_digit_count_min3 = 2;\n    let mut prime_digit_count_step3\
    \ = 2;\n    let mut prime_digit_count_max4 = 10;\n    let mut prime_digit_count_min4\
    \ = 2;\n    let mut prime_digit_count_step4 = 2;\n    let mut prime_digit_count_max5\
    \ = 10;\n    let mut prime_digit_count_min5 = 2;\n    let mut prime_digit_count_step5\
    \ = 2;\n    let mut prime_digit_count_max6 = 10;\n    let mut prime_digit_count_min6\
    \ = 3;\n    let mut prime_digit_count_step6 = 3;\n    let mut prime_digit_count_max7\
    \ = 10;\n    let mut prime_digit_count_min7 = 2;\n    let mut prime_digit_count_step7\
    \ = 2;\n    let mut prime_digit_count_max8 = 10;\n    let mut prime_digit_count_min8\
    \ = 2;\n    let mut prime_digit_count_step8 = 2;\n    let mut prime_digit_count_max9\
    \ = 10;\n    let mut prime_digit_count_min9 = 2;\n    let mut prime_digit_count_step9\
    \ = 2;\n    let mut prime_digit_count_max10 = 10;\n    let mut prime_digit_count_min10\
    \ = 2;\n    let mut prime_digit_count_step10 = 2;\n    let mut prime_digit_count_max11\
    \ = 10;\n    let mut prime_digit_count_min11 = 2;\n    let mut prime_digit_count_step11\
    \ = 2;\n    let mut prime_digit_count_max12 = 10;\n    let mut prime_digit_count_min12\
    \ = 2;\n    let mut prime_digit_count_step12 = 2;\n    let mut prime_digit_count_max13\
    \ = 10;\n    let mut prime_digit_count_min13 = 2;\n    let mut prime_digit_count_step13\
    \ = 2;\n    let mut prime_digit_count_max14 = 10;\n    let mut prime_digit_count_min14\
    \ = 2;\n    let mut prime_digit_count_step14 = 2;\n    let mut prime_digit_count_max15\
    \ = 10;\n    let mut prime_digit_count_min15\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0tq_f7t8.rs:60:36\n   |\n\
    60 |     let mut prime_digit_count_min15\n   |                               \
    \     ^ help: add `;` here\n61 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0tq_f7t8.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0tq_f7t8.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0tq_f7t8.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0tq_f7t8.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0tq_f7t8.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0tq_f7t8.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0tq_f7t8.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0tq_f7t8.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0tq_f7t8.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0tq_f7t8.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut\
    \ prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut\
    \ prime_found53 = false;\n    let mut prime_found\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppsqrc043.rs:68:24\n   |\n\
    68 |     let mut prime_found\n   |                        ^ help: add `;` here\n\
    69 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmppsqrc043.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppsqrc043.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppsqrc043.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppsqrc043.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppsqrc043.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppsqrc043.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppsqrc043.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppsqrc043.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppsqrc043.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppsqrc043.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime_digits: Vec<&str>\
    \ = vec![];\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count_2:\
    \ isize = 0;\n    let mut prime_digit_count_3: isize = 0;\n    let mut prime_digit_count_4:\
    \ isize = 0;\n    let mut prime_digit_count_5: isize = 0;\n    let mut prime_digit_count_6:\
    \ isize = 0;\n    let mut prime_digit_count_7: isize = 0;\n    let mut prime_digit_count_8:\
    \ isize = 0;\n    let mut prime_digit_count_9: isize = 0;\n    let mut prime_digit_count_10:\
    \ isize = 0;\n    let mut prime_digit_count_11: isize = 0;\n    let mut prime_digit_count_12:\
    \ isize = 0;\n    let mut prime_digit_count_13: isize = 0;\n    let mut prime_digit_count_14:\
    \ isize = 0;\n    let mut prime_digit_count_15: isize = 0;\n    let mut prime_digit_count_16:\
    \ isize = 0;\n    let mut prime_digit_count_17: isize = 0;\n    let mut prime_digit_count_18:\
    \ isize = 0;\n    let mut prime_digit_count_19: isize = 0;\n    let mut prime_digit_count_20:\
    \ isize = 0;\n    let mut prime_digit_count_21: isize = 0;\n    let mut prime_digit_count_22:\
    \ isize = 0;\n    let mut prime_digit_count_23: isize = 0;\n    let mut prime_digit_count_24:\
    \ isize = 0;\n    let mut prime_digit_count_25: isize = 0;\n    let mut prime_digit_count_26:\
    \ isize = 0;\n    let mut prime_digit_count_27: isize = 0;\n    let mut prime_digit_count_28:\
    \ isize = 0;\n    let mut prime_digit_count_29: isize = 0;\n    let mut prime_digit_count_30:\
    \ isize = 0;\n    let mut prime_digit_count_31: isize = 0;\n    let mut prime_digit_count_32:\
    \ isize = 0;\n    let mut prime_digit_count_33: isize = 0;\n    let mut prime_digit_count_34:\
    \ isize = 0;\n    let mut prime_digit_count_35: isize = 0;\n    let mut prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6ehw5td5.rs:52:18\n   |\n\
    52 |     let mut prime\n   |                  ^ help: add `;` here\n53 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6ehw5td5.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6ehw5td5.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6ehw5td5.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6ehw5td5.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6ehw5td5.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6ehw5td5.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6ehw5td5.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6ehw5td5.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6ehw5td5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6ehw5td5.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk6rc601j.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut digits = num.chars().collect::<Vec<_>>();\n\
    \    let mut digits_len = digits.length;\n    let mut prime_digits = vec![false;\
    \ digits_len];\n    let mut prime_digits_len = prime_digits.length;\n    let mut\
    \ prime_digits_count = prime_digits_len;\n    let mut prime_digits_count_index\
    \ = 0;\n    let mut prime_digits_count_index2 = 0;\n    let mut prime_digits_count_index3\
    \ = 0;\n    let mut prime_digits_count_index4 = 0;\n    let mut prime_digits_count_index5\
    \ = 0;\n    let mut prime_digits_count_index6 = 0;\n    let mut prime_digits_count_index7\
    \ = 0;\n    let mut prime_digits_count_index8 = 0;\n    let mut prime_digits_count_index9\
    \ = 0;\n    let mut prime_digits_count_index10 = 0;\n    let mut prime_digits_count_index11\
    \ = 0;\n    let mut prime_digits_count_index12 = 0;\n    let mut prime_digits_count_index13\
    \ = 0;\n    let mut prime_digits_count_index14 = 0;\n    let mut prime_digits_count_index15\
    \ = 0;\n    let mut prime_digits_count_index16 = 0;\n    let mut prime_digits_count_index17\
    \ = 0;\n    let mut prime_digits_count_index18 = 0;\n    let mut prime_digits_count_index19\
    \ = 0;\n    let mut prime_digits_count_index20 = 0;\n    let mut prime_digits_count_index21\
    \ = 0;\n    let mut prime_digits_count_index22 = 0;\n    let mut prime_digits_count_index23\
    \ = 0;\n    let mut prime_digits_count_index24 = 0;\n    let mut prime_digits_count_index25\
    \ = 0;\n    let mut prime_digits_count_index26 = 0;\n    let mut prime_digits_count_index27\
    \ = 0;\n    let mut prime_digits_count_index28 = 0;\n    let mut prime_digits_count_index29\
    \ = 0;\n    let mut prime_digits_count_index30 = 0;\n    let mut prime_digits_count_index31\
    \ = 0;\n    let mut prime_digits_count_index32 = 0;\n    let mut prime_digits_count_index33\
    \ = 0;\n    let mut prime_digits_count_index34 = 0;\n    let mut prime_digits_count_index35\
    \ = 0;\n    let mut prime_digits_count_index36 = 0;\n    let mut prime_digits_count_index\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpn_p2cof2.rs:55:37\n   |\n\
    55 |     let mut prime_digits_count_index\n   |                              \
    \       ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn_p2cof2.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn_p2cof2.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn_p2cof2.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn_p2cof2.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn_p2cof2.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn_p2cof2.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpn_p2cof2.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpn_p2cof2.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn_p2cof2.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn_p2cof2.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerro"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_digits_count:\
    \ isize = 0;\n    let mut prime_digits_sum: isize = 0;\n    let mut prime_digits_product:\
    \ isize = 1;\n    let mut prime_digits_product2: isize = 1;\n    let mut prime_digits_product3:\
    \ isize = 1;\n    let mut prime_digits_product4: isize = 1;\n    let mut prime_digits_product5:\
    \ isize = 1;\n    let mut prime_digits_product6: isize = 1;\n    let mut prime_digits_product7:\
    \ isize = 1;\n    let mut prime_digits_product8: isize = 1;\n    let mut prime_digits_product9:\
    \ isize = 1;\n    let mut prime_digits_product10: isize = 1;\n    let mut prime_digits_product11:\
    \ isize = 1;\n    let mut prime_digits_product12: isize = 1;\n    let mut prime_digits_product13:\
    \ isize = 1;\n    let mut prime_digits_product14: isize = 1;\n    let mut prime_digits_product15:\
    \ isize = 1;\n    let mut prime_digits_product16: isize = 1;\n    let mut prime_digits_product17:\
    \ isize = 1;\n    let mut prime_digits_product18: isize = 1;\n    let mut prime_digits_product19:\
    \ isize = 1;\n    let mut prime_digits_product20: isize = 1;\n    let mut prime_digits_product21:\
    \ isize = 1;\n    let mut prime_digits_product22: isize = 1;\n    let mut prime_digits_product23:\
    \ isize = 1;\n    let mut prime_digits_product24: isize = 1;\n    let mut prime_digits_product25:\
    \ isize = 1;\n    let mut prime_digits_product26: isize = 1;\n    let mut prime_digits_product27:\
    \ isize = 1;\n    let mut prime_digits_product28: isize = 1;\n    let mut prime_digits_product29:\
    \ isize = 1;\n    let mut prime_digits_product30: isize = 1;\n    let mut prime_digits_product31:\
    \ isize = 1;\n    let mut prime_digits_product32: isize\n}\n\nfn main() {\n  \
    \  let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpn7anafaz.rs:49:42\n   |\n\
    49 |     let mut prime_digits_product32: isize\n   |                         \
    \                 ^ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn7anafaz.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn7anafaz.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn7anafaz.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn7anafaz.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn7anafaz.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn7anafaz.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpn7anafaz.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpn7anafaz.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn7anafaz.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn7anafaz.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this s"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ prime_digits = false;\n    let mut prime_digits_counter = 0;\n    let mut prime_digits_counter2\
    \ = 0;\n    let mut prime_digits_counter3 = 0;\n    let mut prime_digits_counter4\
    \ = 0;\n    let mut prime_digits_counter5 = 0;\n    let mut prime_digits_counter6\
    \ = 0;\n    let mut prime_digits_counter7 = 0;\n    let mut prime_digits_counter8\
    \ = 0;\n    let mut prime_digits_counter9 = 0;\n    let mut prime_digits_counter10\
    \ = 0;\n    let mut prime_digits_counter11 = 0;\n    let mut prime_digits_counter12\
    \ = 0;\n    let mut prime_digits_counter13 = 0;\n    let mut prime_digits_counter14\
    \ = 0;\n    let mut prime_digits_counter15 = 0;\n    let mut prime_digits_counter16\
    \ = 0;\n    let mut prime_digits_counter17 = 0;\n    let mut prime_digits_counter18\
    \ = 0;\n    let mut prime_digits_counter19 = 0;\n    let mut prime_digits_counter20\
    \ = 0;\n    let mut prime_digits_counter21 = 0;\n    let mut prime_digits_counter22\
    \ = 0;\n    let mut prime_digits_counter23 = 0;\n    let mut prime_digits_counter24\
    \ = 0;\n    let mut prime_digits_counter25 = 0;\n    let mut prime_digits_counter26\
    \ = 0;\n    let mut prime_digits_counter27 = 0;\n    let mut prime_digits_counter28\
    \ = 0;\n    let mut prime_digits_counter29 = 0;\n    let mut prime_digits_counter30\
    \ = 0;\n    let mut prime_digits_counter31 = 0;\n    let mut prime_digits_counter32\
    \ = 0;\n    let mut prime_digits_counter33 = 0;\n    let mut prime_digits_counter34\
    \ = 0;\n    let mut prime_digits_counter35 = 0;\n    let mut prime_digits_counter36\
    \ = 0;\n    let mut prime_digits_counter37 = 0;\n    let mut prime_digits_counter38\
    \ = 0;\n    let mut prime_digits_counter39 = 0;\n    let mut prime_digits_counter40\
    \ = 0;\n    let mut prime_digits_counter41 = 0;\n    let mut prime_digits_counter42\
    \ = 0;\n    let mut prime_digits_counter43 = 0;\n    let mut prime_digits_counter44\
    \ = 0;\n    let mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2c3v4ax.rs:60:18\n   |\n\
    60 |     let mut prime\n   |                  ^ help: add `;` here\n61 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_2c3v4ax.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_2c3v4ax.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_2c3v4ax.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_2c3v4ax.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_2c3v4ax.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf8boz6ci.rs:34:134\n   |\n\
    34 |     let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                              ^ help: add `;`\
    \ here\n35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf8boz6ci.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.to_string().parse().unwrap();\n    let mut counter:\
    \ isize = 0;\n    let mut prime: isize = 2;\n    while prime <= num {\n      \
    \  if num % prime == 0 {\n            counter += 1;\n        }\n        prime\
    \ += 2;\n    }\n    counter\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp09u3trq5.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp09u3trq5.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp09u3trq5.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp09u3trq5.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp09u3trq5.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp09u3trq5.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp09u3trq5.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp09u3trq5.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp09u3trq5.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp09u3trq5.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp09u3trq5.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_chars().collect();\n\
    \    let mut prime: Vec<isize> = vec![2, 3];\n    let mut prime_found = false;\n\
    \    let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut prime_found51\
    \ = false;\n    let mut \n}\n\nfn main() {\n    let candidate = hex_key;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpuz9vq8wj.rs:68:1\n\
    \   |\n68 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpuz9vq8wj.rs:72:17\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpuz9vq8wj.rs:72:25\n \
    \  |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuz9vq8wj.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuz9vq8wj.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuz9vq8wj.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuz9vq8wj.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuz9vq8wj.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuz9vq8wj.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuz9vq8wj.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuz9vq8wj.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuz9vq8wj.rs:77:17\n   |\n77 |     "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_chars().collect();\n\
    \    for digit in digits {\n        if digit == 'A' || digit == 'B' || digit ==\
    \ 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n            num = num\
    \ * 16 + digit as isize;\n        }\n    }\n    return num;\n}\n\nfn main() {\n\
    \    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3s4n_8pi.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3s4n_8pi.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3s4n_8pi.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3s4n_8pi.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3s4n_8pi.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3s4n_8pi.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3s4n_8pi.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3s4n_8pi.rs:28:25\n   |\n28 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3s4n_8pi.rs:29:17\n  \
    \ |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3s4n_8pi.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3s4n_8pi.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found: isize = 0;\n    let mut prime_found2: isize\
    \ = 0;\n    let mut prime_found3: isize = 0;\n    let mut prime_found4: isize\
    \ = 0;\n    let mut prime_found5: isize = 0;\n    let mut prime_found6: isize\
    \ = 0;\n    let mut prime_found7: isize = 0;\n    let mut prime_found8: isize\
    \ = 0;\n    let mut prime_found9: isize = 0;\n    let mut prime_found10: isize\
    \ = 0;\n    let mut prime_found11: isize = 0;\n    let mut prime_found12: isize\
    \ = 0;\n    let mut prime_found13: isize = 0;\n    let mut prime_found14: isize\
    \ = 0;\n    let mut prime_found15: isize = 0;\n    let mut prime_found16: isize\
    \ = 0;\n    let mut prime_found17: isize = 0;\n    let mut prime_found18: isize\
    \ = 0;\n    let mut prime_found19: isize = 0;\n    let mut prime_found20: isize\
    \ = 0;\n    let mut prime_found21: isize = 0;\n    let mut prime_found22: isize\
    \ = 0;\n    let mut prime_found23: isize = 0;\n    let mut prime_found24: isize\
    \ = 0;\n    let mut prime_found25: isize = 0;\n    let mut prime_found26: isize\
    \ = 0;\n    let mut prime_found27: isize = 0;\n    let mut prime_found28: isize\
    \ = 0;\n    let mut prime_found29: isize = 0;\n    let mut prime_found30: isize\
    \ = 0;\n    let mut prime_found31: isize = 0;\n    let mut prime_found32: isize\
    \ = 0;\n    let mut prime_found33: isize = 0;\n    let mut prime_found34: isize\
    \ = 0;\n    let mut prime_found35: isize = 0;\n    let mut prime_found36: isize\
    \ = 0;\n    let mut prime_found37: isize = 0;\n    let mut prime_found38: isize\
    \ = 0;\n    let mut prime_found39: isize = 0;\n    let mut prime_found40: isize\
    \ = 0;\n    let mut prime_found41: isize\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9u1rends.rs:56:33\n   |\n\
    56 |     let mut prime_found41: isize\n   |                                 ^\
    \ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9u1rends.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9u1rends.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9u1rends.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9u1rends.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9u1rends.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9u1rends.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9u1rends.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9u1rends.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9u1rends.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9u1rends.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk6rc601j.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime = 0;\n    let mut num_primes_digits_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime = 0;\n    let mut\
    \ num_primes_digits_prime_prime_prime_prime_prime = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpww1e7d8v.rs:36:78\n   |\n\
    36 |     let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\n\
    \   |                                                                        \
    \      ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpww1e7d8v.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpww1e7d8v.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpww1e7d8v.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpww1e7d8v.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpww1e7d8v.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpww1e7d8v.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpww1e7d8v.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpww1e7d8v.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpww1e7d8v.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpww1e7d8v.rs:45:25\n   |\n45 |     assert_eq!("
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n    let mut\
    \ num_prime: Vec<u8> = vec![];\n    let mut num_prime_2: Vec<u8> = vec![];\n \
    \   let mut num_prime_3: Vec<u8> = vec![];\n    let mut num_prime_4: Vec<u8> =\
    \ vec![];\n    let mut num_prime_5: Vec<u8> = vec![];\n    let mut num_prime_6:\
    \ Vec<u8> = vec![];\n    let mut num_prime_7: Vec<u8> = vec![];\n    let mut num_prime_8:\
    \ Vec<u8> = vec![];\n    let mut num_prime_9: Vec<u8> = vec![];\n    let mut num_prime_10:\
    \ Vec<u8> = vec![];\n    let mut num_prime_11: Vec<u8> = vec![];\n    let mut\
    \ num_prime_12: Vec<u8> = vec![];\n    let mut num_prime_13: Vec<u8> = vec![];\n\
    \    let mut num_prime_14: Vec<u8> = vec![];\n    let mut num_prime_15: Vec<u8>\
    \ = vec![];\n    let mut num_prime_16: Vec<u8> = vec![];\n    let mut num_prime_17:\
    \ Vec<u8> = vec![];\n    let mut num_prime_18: Vec<u8> = vec![];\n    let mut\
    \ num_prime_19: Vec<u8> = vec![];\n    let mut num_prime_20: Vec<u8> = vec![];\n\
    \    let mut num_prime_21: Vec<u8> = vec![];\n    let mut num_prime_22: Vec<u8>\
    \ = vec![];\n    let mut num_prime_23: Vec<u8> = vec![];\n    let mut num_prime_24:\
    \ Vec<u8> = vec![];\n    let mut num_prime_25: Vec<u8> = vec![];\n    let mut\
    \ num_prime_26: Vec<u8> = vec![];\n    let mut num_prime_27: Vec<u8> = vec![];\n\
    \    let mut num_prime_28: Vec<u8> = vec![];\n    let mut num_prime_29: Vec<u8>\
    \ = vec![];\n    let mut num_prime_\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7azopnq_.rs:43:23\n   |\n\
    43 |     let mut num_prime_\n   |                       ^ help: add `;` here\n\
    44 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp7azopnq_.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7azopnq_.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7azopnq_.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7azopnq_.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7azopnq_.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7azopnq_.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7azopnq_.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7azopnq_.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7azopnq_.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7azopnq_.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut remainder: isize = 0;\n    let mut i: isize = 0;\n \
    \   let mut j: isize = 0;\n    let mut k: isize = 0;\n    let mut l: isize = 0;\n\
    \    let mut m: isize = 0;\n    let mut n: isize = 0;\n    let mut o: isize =\
    \ 0;\n    let mut p: isize = 0;\n    let mut q: isize = 0;\n    let mut r: isize\
    \ = 0;\n    let mut s: isize = 0;\n    let mut t: isize = 0;\n    let mut u: isize\
    \ = 0;\n    let mut v: isize = 0;\n    let mut w: isize = 0;\n    let mut x: isize\
    \ = 0;\n    let mut y: isize = 0;\n    let mut z: isize = 0;\n    let mut a: isize\
    \ = 0;\n    let mut b: isize = 0;\n    let mut c: isize = 0;\n    let mut d: isize\
    \ = 0;\n    let mut e: isize = 0;\n    let mut f: isize = 0;\n    let mut g: isize\
    \ = 0;\n    let mut h: isize = 0;\n    let mut i: isize = 0;\n    let mut j: isize\
    \ = 0;\n    let mut k: isize = 0;\n    let mut l: isize = 0;\n    let mut m: isize\
    \ = 0;\n    let mut n: isize = 0;\n    let mut o: isize = 0;\n    let mut p: isize\
    \ = 0;\n    let mut q: isize = 0;\n    let mut r: isize = 0;\n    let mut s: isize\
    \ = 0;\n    let mut t: isize = 0;\n    let mut u: isize = 0;\n    let mut v: isize\
    \ = 0;\n    let mut w: isize = 0;\n    let mut x: isize = 0;\n    let mut y: isize\
    \ = 0;\n    let mut z: isize = 0;\n    let mut a: isize = 0;\n    let mut b: isize\
    \ = 0;\n    let mut c: isize = 0;\n    let mut d: isize = 0;\n    let mut e: isize\
    \ = 0;\n    let mut f: isize = 0;\n    let mut g: isize = 0;\n    let mut h: isize\
    \ = 0;\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut k: isize\
    \ = 0;\n    let mut l: isize = 0;\n    let mut m: isize = 0;\n    let mut \n}\n\
    \nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpgfoqnda7.rs:75:1\n\
    \   |\n75 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpgfoqnda7.rs:79:17\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpgfoqnda7.rs:79:25\n \
    \  |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgfoqnda7.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgfoqnda7.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgfoqnda7.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgfoqnda7.rs:81:25\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgfoqnda7.rs:82:17\n  \
    \ |\n82 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgfoqnda7.rs:82:25\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgfoqnda7.rs:83:17\n   |\n83 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgfoqnda7.rs:83:25\n\
    \   |\n83 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgfoqnda7.rs:84:17\n   |\n84 |     "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 2;\n    let mut num_primes_digits_pow\
    \ = 1;\n    let mut num_primes_digits_pow_2 = 1;\n    let mut num_primes_digits_pow_3\
    \ = 1;\n    let mut num_primes_digits_pow_4 = 1;\n    let mut num_primes_digits_pow_5\
    \ = 1;\n    let mut num_primes_digits_pow_6 = 1;\n    let mut num_primes_digits_pow_7\
    \ = 1;\n    let mut num_primes_digits_pow_8 = 1;\n    let mut num_primes_digits_pow_9\
    \ = 1;\n    let mut num_primes_digits_pow_10 = 1;\n    let mut num_primes_digits_pow_11\
    \ = 1;\n    let mut num_primes_digits_pow_12 = 1;\n    let mut num_primes_digits_pow_13\
    \ = 1;\n    let mut num_primes_digits_pow_14 = 1;\n    let mut num_primes_digits_pow_15\
    \ = 1;\n    let mut num_primes_digits_pow_16 = 1;\n    let mut num_primes_digits_pow_17\
    \ = 1;\n    let mut num_primes_digits_pow_18 = 1;\n    let mut num_primes_digits_pow_19\
    \ = 1;\n    let mut num_primes_digits_pow_20 = 1;\n    let mut num_primes_digits_pow_21\
    \ = 1;\n    let mut num_primes_digits_pow_22 = 1;\n    let mut num_primes_digits_pow_23\
    \ = 1;\n    let mut num_primes_digits_pow_24 = 1;\n    let mut num_primes_digits_pow_25\
    \ = 1;\n    let mut num_primes_digits_pow_26 = 1;\n    let mut num_primes_digits_pow_27\
    \ = 1;\n    let mut num_primes_digits_pow_28 = 1;\n    let mut num_primes_digits_pow_29\
    \ = 1;\n    let mut num_primes_digits_pow_30 = 1;\n    let mut num_primes_digits_pow_31\
    \ = 1;\n    let mut num_primes_digits_pow_32 = 1;\n    let mut num_primes_digits_pow_33\
    \ = 1;\n    let mut num_primes_digits_pow_34 = 1;\n    let mut num_primes_digits_pow_35\
    \ = 1;\n    let mut num_primes_digits_pow_36 = 1;\n    let mut num_primes_digits_pow_37\
    \ = 1;\n    let mut num_primes_digits_pow_38 = 1;\n    let mut num_primes_digits_pow_39\
    \ = 1;\n    let mut num_primes_digits_\n}\n\nfn main() {\n    let candidate =\
    \ hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmlwm4t3z.rs:56:31\n   |\n\
    56 |     let mut num_primes_digits_\n   |                               ^ help:\
    \ add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:61:17\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:61:25\n \
    \  |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmlwm4t3z.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmlwm4t3z.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmlwm4t3z.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: ca"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.to_digits().parse().unwrap();\n    let mut prime_digits:\
    \ Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19];\n    let mut prime_digits_count:\
    \ isize = 0;\n    let mut prime_digits_sum: isize = 0;\n    let mut prime_digits_product:\
    \ isize = 1;\n    let mut prime_digits_product2: isize = 1;\n    let mut prime_digits_product3:\
    \ isize = 1;\n    let mut prime_digits_product4: isize = 1;\n    let mut prime_digits_product5:\
    \ isize = 1;\n    let mut prime_digits_product6: isize = 1;\n    let mut prime_digits_product7:\
    \ isize = 1;\n    let mut prime_digits_product8: isize = 1;\n    let mut prime_digits_product9:\
    \ isize = 1;\n    let mut prime_digits_product10: isize = 1;\n    let mut prime_digits_product11:\
    \ isize = 1;\n    let mut prime_digits_product12: isize = 1;\n    let mut prime_digits_product13:\
    \ isize = 1;\n    let mut prime_digits_product14: isize = 1;\n    let mut prime_digits_product15:\
    \ isize = 1;\n    let mut prime_digits_product16: isize = 1;\n    let mut prime_digits_product17:\
    \ isize = 1;\n    let mut prime_digits_product18: isize = 1;\n    let mut prime_digits_product19:\
    \ isize = 1;\n    let mut prime_digits_product20: isize = 1;\n    let mut prime_digits_product21:\
    \ isize = 1;\n    let mut prime_digits_product22: isize = 1;\n    let mut prime_digits_product23:\
    \ isize = 1;\n    let mut prime_digits_product24: isize = 1;\n    let mut prime_digits_product25:\
    \ isize = 1;\n    let mut prime_digits_product26: isize = 1;\n    let mut prime_digits_product27:\
    \ isize = 1;\n    let mut prime_digits_product28: isize = 1;\n    let mut prime_digits_product29:\
    \ isize = 1;\n    let mut prime_digits_product30: isize = 1;\n    let mut prime_digits_product31:\
    \ isize = 1;\n    let mut prime_digits_product32: isize = 1;\n    let mut prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7g6fnbc.rs:49:18\n   |\n\
    49 |     let mut prime\n   |                  ^ help: add `;` here\n50 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7g6fnbc.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7g6fnbc.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7g6fnbc.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7g6fnbc.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7g6fnbc.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7g6fnbc.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7g6fnbc.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7g6fnbc.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7g6fnbc.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7g6fnbc.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut prime_digits = vec![];\n    let mut\
    \ digits = num.chars().collect::<Vec<_>>();\n    let mut digits_len = digits.length;\n\
    \    let mut digits_index = 0;\n    let mut prime_digits_index = 0;\n    let mut\
    \ prime_digits_len = prime_digits.length;\n    let mut prime_digits_index = 0;\n\
    \    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n\n}\n\nfn main()\
    \ {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdoapx8y4.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdoapx8y4.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdoapx8y4.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdoapx8y4.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdoapx8y4.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdoapx8y4.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdoapx8y4.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdoapx8y4.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdoapx8y4.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdoapx8y4.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdoapx8y4.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_digits_div: isize = 0;\n    let mut num_digits_div_2: isize = 0;\n    let\
    \ mut num_digits_div_3: isize = 0;\n    let mut num_digits_div_4: isize = 0;\n\
    \    let mut num_digits_div_5: isize = 0;\n    let mut num_digits_div_6: isize\
    \ = 0;\n    let mut num_digits_div_7: isize = 0;\n    let mut num_digits_div_8:\
    \ isize = 0;\n    let mut num_digits_div_9: isize = 0;\n    let mut num_digits_div_10:\
    \ isize = 0;\n    let mut num_digits_div_11: isize = 0;\n    let mut num_digits_div_12:\
    \ isize = 0;\n    let mut num_digits_div_13: isize = 0;\n    let mut num_digits_div_14:\
    \ isize = 0;\n    let mut num_digits_div_15: isize = 0;\n    let mut num_digits_div_16:\
    \ isize = 0;\n    let mut num_digits_div_17: isize = 0;\n    let mut num_digits_div_18:\
    \ isize = 0;\n    let mut num_digits_div_19: isize = 0;\n    let mut num_digits_div_20:\
    \ isize = 0;\n    let mut num_digits_div_21: isize = 0;\n    let mut num_digits_div_22:\
    \ isize = 0;\n    let mut num_digits_div_23: isize = 0;\n    let mut num_digits_div_24:\
    \ isize = 0;\n    let mut num_digits_div_25: isize = 0;\n    let mut num_digits_div_26:\
    \ isize = 0;\n    let mut num_digits_div_27: isize = 0;\n    let mut num_digits_div_28:\
    \ isize = 0;\n    let mut num_digits_div_29: isize = 0;\n    let mut num_digits_div_30:\
    \ isize = 0;\n    let mut num_digits_div_31: isize = 0;\n    let mut num_digits_div_32:\
    \ isize = 0;\n    let mut num_digits_div_33: isize = 0;\n    let mut num_digits_div_34:\
    \ isize = 0;\n    let mut num_digits_div_35: isize = 0;\n    let mut num_digits_div_36:\
    \ isize = 0;\n    let mut num_digits_div_37: isize = 0;\n    let mut num_digits_div_38:\
    \ isize = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = hex_key;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpdaa60f3_.rs:54:1\n\
    \   |\n54 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpdaa60f3_.rs:58:17\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpdaa60f3_.rs:58:25\n \
    \  |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdaa60f3_.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdaa60f3_.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdaa60f3_.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdaa60f3_.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdaa60f3_.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdaa60f3_.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdaa60f3_.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdaa60f3_.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdaa60f3_.rs:63:17\n   |\n63 |     "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_u8fpmr.rs:42:20\n   |\n\
    42 |     let mut num_str\n   |                    ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut\
    \ primes_count: usize = 0;\n    let mut primes_count_2: usize = 0;\n    let mut\
    \ primes_count_3: usize = 0;\n    let mut primes_count_4: usize = 0;\n    let\
    \ mut primes_count_5: usize = 0;\n    let mut primes_count_6: usize = 0;\n   \
    \ let mut primes_count_7: usize = 0;\n    let mut primes_count_8: usize = 0;\n\
    \    let mut primes_count_9: usize = 0;\n    let mut primes_count_10: usize =\
    \ 0;\n    let mut primes_count_11: usize = 0;\n    let mut primes_count_12: usize\
    \ = 0;\n    let mut primes_count_13: usize = 0;\n    let mut primes_count_14:\
    \ usize = 0;\n    let mut primes_count_15: usize = 0;\n    let mut primes_count_16:\
    \ usize = 0;\n    let mut primes_count_17: usize = 0;\n    let mut primes_count_18:\
    \ usize = 0;\n    let mut primes_count_19: usize = 0;\n    let mut primes_count_20:\
    \ usize = 0;\n    let mut primes_count_21: usize = 0;\n    let mut primes_count_22:\
    \ usize = 0;\n    let mut primes_count_23: usize = 0;\n    let mut primes_count_24:\
    \ usize = 0;\n    let mut primes_count_25: usize = 0;\n    let mut primes_count_26:\
    \ usize = 0;\n    let mut primes_count_27: usize = 0;\n    let mut primes_count_28:\
    \ usize = 0;\n    let mut primes_count_29: usize = 0;\n    let mut primes_count_30:\
    \ usize = 0;\n    let mut primes_count_31: usize = 0;\n    let mut primes_count_32:\
    \ usize = 0;\n    let mut primes_count_33: usize = 0;\n    let mut primes_count_34:\
    \ usize = 0;\n    let mut primes_count_35: usize = 0;\n    let mut primes_count_36:\
    \ usize = 0;\n    let mut primes_count_37: usize = 0;\n    let mut primes_count_38:\
    \ usize = 0;\n    let mut primes_count_39: usize = 0;\n\n}\n\nfn main() {\n  \
    \  let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpucubtj1u.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpucubtj1u.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpucubtj1u.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpucubtj1u.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpucubtj1u.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpucubtj1u.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpucubtj1u.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpucubtj1u.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpucubtj1u.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpucubtj1u.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpucubtj1u.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![];\n    let mut prime_digits: Vec<&str> =\
    \ vec![];\n    let mut prime_digits_count: usize = 0;\n    let mut prime_digits_count_max:\
    \ usize = 10;\n    let mut prime_digits_count_min: usize = 2;\n    let mut prime_digits_count_step:\
    \ usize = 2;\n    let mut prime_digits_count_max2: usize = 10;\n    let mut prime_digits_count_min2:\
    \ usize = 2;\n    let mut prime_digits_count_step2: usize = 2;\n    let mut prime_digits_count_max3:\
    \ usize = 10;\n    let mut prime_digits_count_min3: usize = 2;\n    let mut prime_digits_count_step3:\
    \ usize = 2;\n    let mut prime_digits_count_max4: usize = 10;\n    let mut prime_digits_count_min4:\
    \ usize = 2;\n    let mut prime_digits_count_step4: usize = 2;\n    let mut prime_digits_count_max5:\
    \ usize = 10;\n    let mut prime_digits_count_min5: usize = 2;\n    let mut prime_digits_count_step5:\
    \ usize = 2;\n    let mut prime_digits_count_max6: usize = 10;\n    let mut prime_digits_count_min6:\
    \ usize = 2;\n    let mut prime_digits_count_step6: usize = 2;\n    let mut prime_digits_count_max7:\
    \ usize = 10;\n    let mut prime_digits_count_min7: usize = 2;\n    let mut prime_digits_count_step7:\
    \ usize = 2;\n    let mut prime_digits_count_max8: usize = 10;\n    let mut prime_digits_count_min8:\
    \ usize = 2;\n    let mut prime_digits_count_step8: usize = 2;\n    let mut prime_digits_count_max9:\
    \ usize = 10;\n    let mut prime_digits_count_min9: usize = 2;\n    let mut prime_digits_count_step9:\
    \ usize = 2;\n    let mut prime_digits_count_max10: usize = 10;\n    let mut prime_digits_count_min10:\
    \ usize = 2;\n    let mut prime_digits_count_step10: usize = 2;\n    let mut prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpv82pbugy.rs:48:18\n   |\n\
    48 |     let mut prime\n   |                  ^ help: add `;` here\n49 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv82pbugy.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv82pbugy.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpv82pbugy.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpv82pbugy.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv82pbugy.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv82pbugy.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv82pbugy.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv82pbugy.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv82pbugy.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv82pbugy.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut digits = num.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut prime_digits = vec![false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, \n}\n\nfn main() {\n\
    \    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpjhh9585a.rs:15:32\n\
    \   |\n12 | fn hex_key(num: String) -> isize {\n   |                         \
    \         - closing delimiter possibly meant for this\n...\n15 |     let mut prime_digits\
    \ = vec![false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, ...\n   |                               \
    \ ^ unclosed delimiter\n16 | }\n   | ^ mismatched closing delimiter\n\nerror:\
    \ expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpjhh9585a.rs:16:1\n\
    \   |\n16 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjhh9585a.rs:20:17\n\
    \   |\n20 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjhh9585a.rs:20:25\n   |\n20 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjhh9585a.rs:21:17\n   |\n21 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjhh9585a.rs:21:25\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjhh9585a.rs:22:17\n   |\n22 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjhh9585a.rs:22:25\n   |\n22 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjhh9585a.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjhh9585a.rs:23:25\n   |\n23 |     assert_eq!({left},\
    \ {right});\n   |    "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_u8fpmr.rs:42:20\n   |\n\
    42 |     let mut num_str\n   |                    ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime: isize = 0;\n    let\
    \ mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8lbyn7_q.rs:67:18\n   |\n\
    67 |     let mut prime\n   |                  ^ help: add `;` here\n68 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8lbyn7_q.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8lbyn7_q.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8lbyn7_q.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8lbyn7_q.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8lbyn7_q.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8lbyn7_q.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8lbyn7_q.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8lbyn7_q.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8lbyn7_q.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8lbyn7_q.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ prime_digits = 2;\n    let mut prime_digits_counter = 1;\n    let mut prime_digits_counter_2\
    \ = 0;\n    let mut prime_digits_counter_3 = 0;\n    let mut prime_digits_counter_4\
    \ = 0;\n    let mut prime_digits_counter_5 = 0;\n    let mut prime_digits_counter_6\
    \ = 0;\n    let mut prime_digits_counter_7 = 0;\n    let mut prime_digits_counter_8\
    \ = 0;\n    let mut prime_digits_counter_9 = 0;\n    let mut prime_digits_counter_10\
    \ = 0;\n    let mut prime_digits_counter_11 = 0;\n    let mut prime_digits_counter_12\
    \ = 0;\n    let mut prime_digits_counter_13 = 0;\n    let mut prime_digits_counter_14\
    \ = 0;\n    let mut prime_digits_counter_15 = 0;\n    let mut prime_digits_counter_16\
    \ = 0;\n    let mut prime_digits_counter_17 = 0;\n    let mut prime_digits_counter_18\
    \ = 0;\n    let mut prime_digits_counter_19 = 0;\n    let mut prime_digits_counter_20\
    \ = 0;\n    let mut prime_digits_counter_21 = 0;\n    let mut prime_digits_counter_22\
    \ = 0;\n    let mut prime_digits_counter_23 = 0;\n    let mut prime_digits_counter_24\
    \ = 0;\n    let mut prime_digits_counter_25 = 0;\n    let mut prime_digits_counter_26\
    \ = 0;\n    let mut prime_digits_counter_27 = 0;\n    let mut prime_digits_counter_28\
    \ = 0;\n    let mut prime_digits_counter_29 = 0;\n    let mut prime_digits_counter_30\
    \ = 0;\n    let mut prime_digits_counter_31 = 0;\n    let mut prime_digits_counter_32\
    \ = 0;\n    let mut prime_digits_counter_33 = 0;\n    let mut prime_digits_counter_34\
    \ = 0;\n    let mut prime_digits_counter_35 = 0;\n    let mut prime_digits_counter_36\
    \ = 0;\n    let mut prime_digits_counter_37 = 0;\n    let mut prime_digits_counter_38\
    \ = 0;\n    let mut prime_digits_counter_39 = 0;\n    let mut prime_digits_counter_40\
    \ = 0;\n    let mut prime_digits_counter_41 = 0;\n    let mut prime_digits_counter_42\
    \ = 0;\n    let mut prime_digits_counter_43 = 0;\n    let mut prime_digits_counter_44\
    \ = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpavrdim_g.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpavrdim_g.rs:65:17\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpavrdim_g.rs:65:25\n \
    \  |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpavrdim_g.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpavrdim_g.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpavrdim_g.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpavrdim_g.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpavrdim_g.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpavrdim_g.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpavrdim_g.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpavrdim_g.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpavrdim_g.rs:70:17\n   |\n70 |     "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![\"\".to_string()];\n    let mut prime_digits:\
    \ Vec<&str> = vec![\"\".to_string()];\n    let mut prime_digits_count: usize =\
    \ 0;\n    let mut prime_digits_count_max: usize = 0;\n    let mut prime_digits_count_min:\
    \ usize = 0;\n    let mut prime_digits_count_max_min: usize = 0;\n    let mut\
    \ prime_digits_count_min_max: usize = 0;\n    let mut prime_digits_count_min_max_min:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max: usize = 0;\n   \
    \ let mut prime_digits_count_min_max_min_max_min: usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min: usize\
    \ = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max: usize\
    \ = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min: usize\
    \ = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max_min:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min:\
    \ usize = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = hex_key;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpowp30z7y.rs:38:11\n   |\n\
    38 |     let mu\n   |           ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpowp30z7y.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpowp30z7y.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpowp30z7y.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpowp30z7y.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpowp30z7y.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpowp30z7y.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpowp30z7y.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpowp30z7y.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpowp30z7y.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpowp30z7y.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.to_digits().unwrap();\n    let mut prime_count: isize\
    \ = 0;\n    let mut prime_digit: isize = 2;\n    let mut prime_digit_count: isize\
    \ = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpn9z3544j.rs:59:18\n   |\n\
    59 |     let mut prime\n   |                  ^ help: add `;` here\n60 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn9z3544j.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn9z3544j.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpn9z3544j.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpn9z3544j.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn9z3544j.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn9z3544j.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn9z3544j.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn9z3544j.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn9z3544j.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn9z3544j.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut\
    \ prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut\
    \ prime_found53 = false;\n    let mut prime_found\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppsqrc043.rs:68:24\n   |\n\
    68 |     let mut prime_found\n   |                        ^ help: add `;` here\n\
    69 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmppsqrc043.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppsqrc043.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppsqrc043.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppsqrc043.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppsqrc043.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppsqrc043.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppsqrc043.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppsqrc043.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppsqrc043.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppsqrc043.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk6rc601j.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf8boz6ci.rs:34:134\n   |\n\
    34 |     let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                              ^ help: add `;`\
    \ here\n35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf8boz6ci.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![\"\".to_string()];\n    let mut prime_digits:\
    \ Vec<&str> = vec![\"\".to_string()];\n    let mut prime_digits_count: Vec<isize>\
    \ = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n\
    \    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut\
    \ prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index:\
    \ Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize>\
    \ = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n\
    \    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut\
    \ prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index:\
    \ Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize>\
    \ = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n\
    \    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut\
    \ prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index:\
    \ Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize>\
    \ = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n\
    \    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut\
    \ prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index:\
    \ Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize>\
    \ = vec![0; 10];\n    let mut prime_\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpr5vbz2ev.rs:38:19\n   |\n\
    38 |     let mut prime_\n   |                   ^ help: add `;` here\n39 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr5vbz2ev.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr5vbz2ev.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr5vbz2ev.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr5vbz2ev.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr5vbz2ev.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr5vbz2ev.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr5vbz2ev.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr5vbz2ev.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr5vbz2ev.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr5vbz2ev.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` i"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ];\n    let mut primes_count: isize = 0;\n    \n    for digit in digits {\n  \
    \      if primes.contains(&digit) {\n            primes_count += 1;\n        }\n\
    \    }\n    \n    return primes_count;\n}\n\nfn main() {\n    let candidate =\
    \ hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpo2km_wr7.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo2km_wr7.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo2km_wr7.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo2km_wr7.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo2km_wr7.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo2km_wr7.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo2km_wr7.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo2km_wr7.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo2km_wr7.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo2km_wr7.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo2km_wr7.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf8boz6ci.rs:34:134\n   |\n\
    34 |     let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                              ^ help: add `;`\
    \ here\n35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf8boz6ci.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.to_string().parse().unwrap();\n    let mut prime_count:\
    \ isize = 0;\n    let mut prime_digit: isize = 2;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = hex_key;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpyob5rxfe.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyob5rxfe.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyob5rxfe.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyob5rxfe.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyob5rxfe.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyob5rxfe.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyob5rxfe.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyob5rxfe.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyob5rxfe.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyob5rxfe.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyob5rxfe.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_u8fpmr.rs:42:20\n   |\n\
    42 |     let mut num_str\n   |                    ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n    let mut\
    \ prime_count: isize = 0;\n    let mut prime_digit: u8 = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ u8 = 0;\n    let mut prime_digit_value_count: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_68_2xw.rs:54:18\n   |\n\
    54 |     let mut prime\n   |                  ^ help: add `;` here\n55 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_68_2xw.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_68_2xw.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_68_2xw.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_68_2xw.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_68_2xw.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_68_2xw.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_68_2xw.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_68_2xw.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_68_2xw.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_68_2xw.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = vec![false; 26];\n    let mut prime_digits = vec![0;\
    \ 26];\n    let mut prime_digits_count = vec![0; 26];\n    let mut prime_digits_count_in_hex\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_decimal = vec![0; 26];\n \
    \   let mut prime_digits_count_in_octal = vec![0; 26];\n    let mut prime_digits_count_in_binary\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_hex_string = vec![0; 26];\n\
    \    let mut prime_digits_count_in_decimal_string = vec![0; 26];\n    let mut\
    \ prime_digits_count_in_octal_string = vec![0; 26];\n    let mut prime_digits_count_in_binary_string\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_hex_string_2 = vec![0; 26];\n\
    \    let mut prime_digits_count_in_decimal_string_2 = vec![0; 26];\n    let mut\
    \ prime_digits_count_in_octal_string_2 = vec![0; 26];\n    let mut prime_digits_count_in_binary_string_2\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_hex_string_3 = vec![0; 26];\n\
    \    let mut prime_digits_count_in_decimal_string_3 = vec![0; 26];\n    let mut\
    \ prime_digits_count_in_octal_string_3 = vec![0; 26];\n    let mut prime_digits_count_in_binary_string_3\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_hex_string_4 = vec![0; 26];\n\
    \    let mut prime_digits_count_in_decimal_string_4 = vec![0; 26];\n    let mut\
    \ prime_digits_count_in_octal_string_4 = vec![0; 26];\n    let mut prime_digits_count_in_binary_string_4\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_hex_string_5 = vec![0; 26];\n\
    \    let mut prime_digits_count_in_decimal_string_5 = vec![0; 26];\n    let mut\
    \ prime_digits_count_in_octal_string_5 = vec![0; 26];\n    let mut prime_digits_count_in_binary_string_5\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_hex_string_6 = vec![0; 26];\n\
    \    let mut prime_digits_count_in_decimal_string_6 = vec![0; 26];\n    let mut\
    \ prime_digit\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2indd6rm.rs:42:24\n   |\n\
    42 |     let mut prime_digit\n   |                        ^ help: add `;` here\n\
    43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp2indd6rm.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2indd6rm.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2indd6rm.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2indd6rm.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2indd6rm.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2indd6rm.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2indd6rm.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2indd6rm.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2indd6rm.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2indd6rm.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.to_digits().parse().unwrap();\n    let mut prime_digits\
    \ = vec![];\n    let mut prime_digits_count = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max\
    \ = vec![];\n    let mut prime_digits_count_min = vec![];\n    let mut prime_\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp20kjk7pj.rs:52:19\n   |\n\
    52 |     let mut prime_\n   |                   ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp20kjk7pj.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp20kjk7pj.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp20kjk7pj.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp20kjk7pj.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp20kjk7pj.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp20kjk7pj.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp20kjk7pj.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp20kjk7pj.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp20kjk7pj.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp20kjk7pj.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` i"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n    let mut\
    \ prime_count = 0;\n    let mut prime_digits = vec![2, 3];\n    let mut prime_digits_counter\
    \ = vec![2, 3];\n    let mut prime_digits_counter2 = vec![2, 3];\n    let mut\
    \ prime_digits_counter3 = vec![2, 3];\n    let mut prime_digits_counter4 = vec![2,\
    \ 3];\n    let mut prime_digits_counter5 = vec![2, 3];\n    let mut prime_digits_counter6\
    \ = vec![2, 3];\n    let mut prime_digits_counter7 = vec![2, 3];\n    let mut\
    \ prime_digits_counter8 = vec![2, 3];\n    let mut prime_digits_counter9 = vec![2,\
    \ 3];\n    let mut prime_digits_counter10 = vec![2, 3];\n    let mut prime_digits_counter11\
    \ = vec![2, 3];\n    let mut prime_digits_counter12 = vec![2, 3];\n    let mut\
    \ prime_digits_counter13 = vec![2, 3];\n    let mut prime_digits_counter14 = vec![2,\
    \ 3];\n    let mut prime_digits_counter15 = vec![2, 3];\n    let mut prime_digits_counter16\
    \ = vec![2, 3];\n    let mut prime_digits_counter17 = vec![2, 3];\n    let mut\
    \ prime_digits_counter18 = vec![2, 3];\n    let mut prime_digits_counter19 = vec![2,\
    \ 3];\n    let mut prime_digits_counter20 = vec![2, 3];\n    let mut prime_digits_counter21\
    \ = vec![2, 3];\n    let mut prime_digits_counter22 = vec![2, 3];\n    let mut\
    \ prime_digits_counter23 = vec![2, 3];\n    let mut prime_digits_counter24 = vec![2,\
    \ 3];\n    let mut prime_digits_counter25 = vec![2, 3];\n    let mut prime_digits_counter26\
    \ = vec![2, 3];\n    let mut prime_digits_counter27 = vec![2, 3];\n    let mut\
    \ prime_digits_counter28 = vec![2, 3];\n    let mut prime_digits_counter29 = vec![2,\
    \ 3];\n    let mut prime_digits_counter30 = vec![2, 3];\n    let mut prime_\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpj8apyebb.rs:46:19\n   |\n\
    46 |     let mut prime_\n   |                   ^ help: add `;` here\n47 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj8apyebb.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj8apyebb.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj8apyebb.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj8apyebb.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj8apyebb.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj8apyebb.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj8apyebb.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj8apyebb.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj8apyebb.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj8apyebb.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` i"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut\
    \ prime_digit: isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let\
    \ mut prime_digit_count_2: isize = 0;\n    let mut prime_digit_count_3: isize\
    \ = 0;\n    let mut prime_digit_count_4: isize = 0;\n    let mut prime_digit_count_5:\
    \ isize = 0;\n    let mut prime_digit_count_6: isize = 0;\n    let mut prime_digit_count_7:\
    \ isize = 0;\n    let mut prime_digit_count_8: isize = 0;\n    let mut prime_digit_count_9:\
    \ isize = 0;\n    let mut prime_digit_count_10: isize = 0;\n    let mut prime_digit_count_11:\
    \ isize = 0;\n    let mut prime_digit_count_12: isize = 0;\n    let mut prime_digit_count_13:\
    \ isize = 0;\n    let mut prime_digit_count_14: isize = 0;\n    let mut prime_digit_count_15:\
    \ isize = 0;\n    let mut prime_digit_count_16: isize = 0;\n    let mut prime_digit_count_17:\
    \ isize = 0;\n    let mut prime_digit_count_18: isize = 0;\n    let mut prime_digit_count_19:\
    \ isize = 0;\n    let mut prime_digit_count_20: isize = 0;\n    let mut prime_digit_count_21:\
    \ isize = 0;\n    let mut prime_digit_count_22: isize = 0;\n    let mut prime_digit_count_23:\
    \ isize = 0;\n    let mut prime_digit_count_24: isize = 0;\n    let mut prime_digit_count_25:\
    \ isize = 0;\n    let mut prime_digit_count_26: isize = 0;\n    let mut prime_digit_count_27:\
    \ isize = 0;\n    let mut prime_digit_count_28: isize = 0;\n    let mut prime_digit_count_29:\
    \ isize = 0;\n    let mut prime_digit_count_30: isize = 0;\n    let mut prime_digit_count_31:\
    \ isize = 0;\n    let mut prime_digit_count_32: isize = 0;\n    let mut prime_digit_count_33:\
    \ isize = 0;\n    let mut prime_digit_count_34: isize = 0;\n    let mut prime_digit_count_35:\
    \ isize = 0;\n    let mut prime_digit_count_36: isize = 0;\n    let mut prime_digit_count_37:\
    \ isize = 0;\n    let mut prime_\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwrivnf32.rs:53:19\n   |\n\
    53 |     let mut prime_\n   |                   ^ help: add `;` here\n54 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwrivnf32.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwrivnf32.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwrivnf32.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwrivnf32.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwrivnf32.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwrivnf32.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwrivnf32.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwrivnf32.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwrivnf32.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwrivnf32.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` i"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut prime_digits = vec![2, 3, 4, 5, 7, 11,\
    \ 13, 17, 19];\n    let mut digits = num.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut digits_len = digits.length;\n    let mut prime_digits_len = prime_digits.length;\n\
    \    let mut prime_digit_index = 0;\n    let mut prime_digit_index2 = 0;\n   \
    \ let mut prime_digit_index3 = 0;\n    let mut prime_digit_index4 = 0;\n    let\
    \ mut prime_digit_index5 = 0;\n    let mut prime_digit_index6 = 0;\n    let mut\
    \ prime_digit_index7 = 0;\n    let mut prime_digit_index8 = 0;\n    let mut prime_digit_index9\
    \ = 0;\n    let mut prime_digit_index10 = 0;\n    let mut prime_digit_index11\
    \ = 0;\n    let mut prime_digit_index12 = 0;\n    let mut prime_digit_index13\
    \ = 0;\n    let mut prime_digit_index14 = 0;\n    let mut prime_digit_index15\
    \ = 0;\n    let mut prime_digit_index16 = 0;\n    let mut prime_digit_index17\
    \ = 0;\n    let mut prime_digit_index18 = 0;\n    let mut prime_digit_index19\
    \ = 0;\n    let mut prime_digit_index20 = 0;\n    let mut prime_digit_index21\
    \ = 0;\n    let mut prime_digit_index22 = 0;\n    let mut prime_digit_index23\
    \ = 0;\n    let mut prime_digit_index24 = 0;\n    let mut prime_digit_index25\
    \ = 0;\n    let mut prime_digit_index26 = 0;\n    let mut prime_digit_index27\
    \ = 0;\n    let mut prime_digit_index28 = 0;\n    let mut prime_digit_index29\
    \ = 0;\n    let mut prime_digit_index30 = 0;\n    let mut prime_digit_index31\
    \ = 0;\n    let mut prime_digit_index32 = 0;\n    let mut prime_digit_index33\
    \ = 0;\n    let mut prime_digit_index34 = 0;\n    let mut prime_digit_index35\
    \ = 0;\n    let mut prime_digit_index36 = 0;\n    let mut prime_digit_index37\
    \ = 0;\n    let mut prime_digit_index38 = 0;\n    let mut prime_digit_index39\
    \ = 0;\n    let mut prime_digit_index40 = 0;\n    let mut prime_digit_index41\
    \ = 0;\n    let mut prime_digit_index42 = 0;\n    let mut prime_digit_index43\
    \ = 0;\n    let mut prime_digit_index44 = 0;\n    let mut prime_digit_index45\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpbwpbiazp.rs:64:1\n  \
    \ |\n64 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpbwpbiazp.rs:68:17\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpbwpbiazp.rs:68:25\n \
    \  |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbwpbiazp.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbwpbiazp.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbwpbiazp.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbwpbiazp.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbwpbiazp.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbwpbiazp.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbwpbiazp.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbwpbiazp.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbwpbiazp.rs:73:17\n   |\n73 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut\
    \ primes_count: isize = 0;\n    let mut primes_count_2: isize = 0;\n    let mut\
    \ primes_count_3: isize = 0;\n    let mut primes_count_4: isize = 0;\n    let\
    \ mut primes_count_5: isize = 0;\n    let mut primes_count_6: isize = 0;\n   \
    \ let mut primes_count_7: isize = 0;\n    let mut primes_count_8: isize = 0;\n\
    \    let mut primes_count_9: isize = 0;\n    let mut primes_count_10: isize =\
    \ 0;\n    let mut primes_count_11: isize = 0;\n    let mut primes_count_12: isize\
    \ = 0;\n    let mut primes_count_13: isize = 0;\n    let mut primes_count_14:\
    \ isize = 0;\n    let mut primes_count_15: isize = 0;\n    let mut primes_count_16:\
    \ isize = 0;\n    let mut primes_count_17: isize = 0;\n    let mut primes_count_18:\
    \ isize = 0;\n    let mut primes_count_19: isize = 0;\n    let mut primes_count_20:\
    \ isize = 0;\n    let mut primes_count_21: isize = 0;\n    let mut primes_count_22:\
    \ isize = 0;\n    let mut primes_count_23: isize = 0;\n    let mut primes_count_24:\
    \ isize = 0;\n    let mut primes_count_25: isize = 0;\n    let mut primes_count_26:\
    \ isize = 0;\n    let mut primes_count_27: isize = 0;\n    let mut primes_count_28:\
    \ isize = 0;\n    let mut primes_count_29: isize = 0;\n    let mut primes_count_30:\
    \ isize = 0;\n    let mut primes_count_31: isize = 0;\n    let mut primes_count_32:\
    \ isize = 0;\n    let mut primes_count_33: isize = 0;\n    let mut primes_count_34:\
    \ isize = 0;\n    let mut primes_count_35: isize = 0;\n    let mut primes_count_36:\
    \ isize = 0;\n    let mut primes_count_37: isize = 0;\n    let mut primes_count_38:\
    \ isize = 0;\n    let mut primes_count_39: isize = 0;\n\n}\n\nfn main() {\n  \
    \  let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpexfeaydu.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpexfeaydu.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpexfeaydu.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpexfeaydu.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpexfeaydu.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpexfeaydu.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpexfeaydu.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpexfeaydu.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpexfeaydu.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpexfeaydu.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpexfeaydu.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut digit_count = 1;\n    let mut digit\
    \ = num[0];\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let mut prime_\n}\n\nfn main()\
    \ {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp55ve68e3.rs:69:19\n   |\n\
    69 |     let mut prime_\n   |                   ^ help: add `;` here\n70 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp55ve68e3.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp55ve68e3.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp55ve68e3.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp55ve68e3.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp55ve68e3.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp55ve68e3.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp55ve68e3.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp55ve68e3.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp55ve68e3.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp55ve68e3.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` i"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut digits = num.to_string();\n    while\
    \ digits.len() > 0 {\n        let mut digit = digits.chars().nth(digits.len()\
    \ - 1);\n        if digit == 'A' || digit == 'B' || digit == 'C' || digit == 'D'\
    \ || digit == 'E' || digit == 'F' {\n            prime_count = prime_count + 1;\n\
    \        }\n        digits = digits.chars().skip_while(|&c| c != 'A' && c != 'B'\
    \ && c != 'C' && c != 'D' && c != 'E' && c != 'F').collect();\n    }\n    prime_count\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq7z38k_4.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq7z38k_4.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq7z38k_4.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq7z38k_4.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq7z38k_4.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq7z38k_4.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq7z38k_4.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq7z38k_4.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq7z38k_4.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq7z38k_4.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq7z38k_4.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_digits_div2 = 0;\n    let mut num_digits_div3 = 0;\n    let mut num_digits_div4\
    \ = 0;\n    let mut num_digits_div5 = 0;\n    let mut num_digits_div6 = 0;\n \
    \   let mut num_digits_div7 = 0;\n    let mut num_digits_div8 = 0;\n    let mut\
    \ num_digits_div9 = 0;\n    let mut num_digits_div10 = 0;\n    let mut num_digits_div11\
    \ = 0;\n    let mut num_digits_div12 = 0;\n    let mut num_digits_div13 = 0;\n\
    \    let mut num_digits_div14 = 0;\n    let mut num_digits_div15 = 0;\n    let\
    \ mut num_digits_div16 = 0;\n    let mut num_digits_div17 = 0;\n    let mut num_digits_div18\
    \ = 0;\n    let mut num_digits_div19 = 0;\n    let mut num_digits_div20 = 0;\n\
    \    let mut num_digits_div21 = 0;\n    let mut num_digits_div22 = 0;\n    let\
    \ mut num_digits_div23 = 0;\n    let mut num_digits_div24 = 0;\n    let mut num_digits_div25\
    \ = 0;\n    let mut num_digits_div26 = 0;\n    let mut num_digits_div27 = 0;\n\
    \    let mut num_digits_div28 = 0;\n    let mut num_digits_div29 = 0;\n    let\
    \ mut num_digits_div30 = 0;\n    let mut num_digits_div31 = 0;\n    let mut num_digits_div32\
    \ = 0;\n    let mut num_digits_div33 = 0;\n    let mut num_digits_div34 = 0;\n\
    \    let mut num_digits_div35 = 0;\n    let mut num_digits_div36 = 0;\n    let\
    \ mut num_digits_div37 = 0;\n    let mut num_digits_div38 = 0;\n    let mut num_digits_div39\
    \ = 0;\n    let mut num_digits_div40 = 0;\n    let mut num_digits_div41 = 0;\n\
    \    let mut num_digits_div42 = 0;\n    let mut num_digits_div43 = 0;\n    let\
    \ mut num_digits_div44 = 0;\n    let mut num_digits_div45 = 0;\n    let mut num_digits_div46\
    \ = 0;\n    let mut num_digits_div47 = 0;\n    let mut num_digits_div48 = 0;\n\
    \    let mut num_digits_div49 = 0;\n    let mut num_digits_div50 = 0;\n    let\
    \ mut num_digits_div51\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1iq_rv6a.rs:64:29\n   |\n\
    64 |     let mut num_digits_div51\n   |                             ^ help: add\
    \ `;` here\n65 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp1iq_rv6a.rs:69:17\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp1iq_rv6a.rs:69:25\n \
    \  |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1iq_rv6a.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1iq_rv6a.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1iq_rv6a.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1iq_rv6a.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1iq_rv6a.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1iq_rv6a.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1iq_rv6a.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1iq_rv6a.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime: isize\
    \ = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let \n}\n\nfn main() {\n \
    \   let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp180x13g9.rs:70:1\n  \
    \ |\n70 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp180x13g9.rs:74:17\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:74:25\n \
    \  |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp180x13g9.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:78:25\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:79:17\n   |\n79 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 2;\n    let mut num_primes_digits_pow\
    \ = 1;\n    let mut num_primes_digits_pow_2 = 1;\n    let mut num_primes_digits_pow_3\
    \ = 1;\n    let mut num_primes_digits_pow_4 = 1;\n    let mut num_primes_digits_pow_5\
    \ = 1;\n    let mut num_primes_digits_pow_6 = 1;\n    let mut num_primes_digits_pow_7\
    \ = 1;\n    let mut num_primes_digits_pow_8 = 1;\n    let mut num_primes_digits_pow_9\
    \ = 1;\n    let mut num_primes_digits_pow_10 = 1;\n    let mut num_primes_digits_pow_11\
    \ = 1;\n    let mut num_primes_digits_pow_12 = 1;\n    let mut num_primes_digits_pow_13\
    \ = 1;\n    let mut num_primes_digits_pow_14 = 1;\n    let mut num_primes_digits_pow_15\
    \ = 1;\n    let mut num_primes_digits_pow_16 = 1;\n    let mut num_primes_digits_pow_17\
    \ = 1;\n    let mut num_primes_digits_pow_18 = 1;\n    let mut num_primes_digits_pow_19\
    \ = 1;\n    let mut num_primes_digits_pow_20 = 1;\n    let mut num_primes_digits_pow_21\
    \ = 1;\n    let mut num_primes_digits_pow_22 = 1;\n    let mut num_primes_digits_pow_23\
    \ = 1;\n    let mut num_primes_digits_pow_24 = 1;\n    let mut num_primes_digits_pow_25\
    \ = 1;\n    let mut num_primes_digits_pow_26 = 1;\n    let mut num_primes_digits_pow_27\
    \ = 1;\n    let mut num_primes_digits_pow_28 = 1;\n    let mut num_primes_digits_pow_29\
    \ = 1;\n    let mut num_primes_digits_pow_30 = 1;\n    let mut num_primes_digits_pow_31\
    \ = 1;\n    let mut num_primes_digits_pow_32 = 1;\n    let mut num_primes_digits_pow_33\
    \ = 1;\n    let mut num_primes_digits_pow_34 = 1;\n    let mut num_primes_digits_pow_35\
    \ = 1;\n    let mut num_primes_digits_pow_36 = 1;\n    let mut num_primes_digits_pow_37\
    \ = 1;\n    let mut num_primes_digits_pow_38 = 1;\n    let mut num_primes_digits_pow_39\
    \ = 1;\n    let mut num_primes_digits_\n}\n\nfn main() {\n    let candidate =\
    \ hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmlwm4t3z.rs:56:31\n   |\n\
    56 |     let mut num_primes_digits_\n   |                               ^ help:\
    \ add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:61:17\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:61:25\n \
    \  |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmlwm4t3z.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmlwm4t3z.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmlwm4t3z.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmlwm4t3z.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: ca"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_string().chars().collect();\n\
    \    for digit in digits {\n        if digit == 'A' || digit == 'B' || digit ==\
    \ 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n            num = num\
    \ * 16 + digit as isize;\n        } else {\n            num = num * 10 + digit\
    \ as isize;\n        }\n    }\n    return num;\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9wxhpir6.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9wxhpir6.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9wxhpir6.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9wxhpir6.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9wxhpir6.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9wxhpir6.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9wxhpir6.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9wxhpir6.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9wxhpir6.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9wxhpir6.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9wxhpir6.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19];\n    let mut\
    \ prime_digit: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19];\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: i\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx0r8g2g5.rs:56:33\n   |\n\
    56 |     let mut prime_digit_index: i\n   |                                 ^\
    \ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0412]: cannot\
    \ find type `i` in this scope\n  --> /tmp/tmpx0r8g2g5.rs:56:32\n   |\n56 |   \
    \  let mut prime_digit_index: i\n   |                                ^ help: a\
    \ builtin type with a similar name exists: `i8`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpx0r8g2g5.rs:61:17\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpx0r8g2g5.rs:61:25\n \
    \  |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx0r8g2g5.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx0r8g2g5.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx0r8g2g5.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx0r8g2g5.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx0r8g2g5.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx0r8g2g5.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx0r8g2g5.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    for digit in digits {\n        if digit == 'a' || digit == 'b' || digit ==\
    \ 'c' || digit == 'd' || digit == 'e' || digit == 'f' {\n            num += digit\
    \ as isize;\n        }\n    }\n    return num;\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzpqmljhz.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzpqmljhz.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzpqmljhz.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzpqmljhz.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzpqmljhz.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzpqmljhz.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzpqmljhz.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzpqmljhz.rs:28:25\n   |\n28 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzpqmljhz.rs:29:17\n  \
    \ |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzpqmljhz.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzpqmljhz.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime_digits: Vec<&str>\
    \ = vec![];\n    let mut prime_digits_count: usize = 0;\n    let mut prime_digits_count_2:\
    \ usize = 0;\n    let mut prime_digits_count_3: usize = 0;\n    let mut prime_digits_count_4:\
    \ usize = 0;\n    let mut prime_digits_count_5: usize = 0;\n    let mut prime_digits_count_6:\
    \ usize = 0;\n    let mut prime_digits_count_7: usize = 0;\n    let mut prime_digits_count_8:\
    \ usize = 0;\n    let mut prime_digits_count_9: usize = 0;\n    let mut prime_digits_count_10:\
    \ usize = 0;\n    let mut prime_digits_count_11: usize = 0;\n    let mut prime_digits_count_12:\
    \ usize = 0;\n    let mut prime_digits_count_13: usize = 0;\n    let mut prime_digits_count_14:\
    \ usize = 0;\n    let mut prime_digits_count_15: usize = 0;\n    let mut prime_digits_count_16:\
    \ usize = 0;\n    let mut prime_digits_count_17: usize = 0;\n    let mut prime_digits_count_18:\
    \ usize = 0;\n    let mut prime_digits_count_19: usize = 0;\n    let mut prime_digits_count_20:\
    \ usize = 0;\n    let mut prime_digits_count_21: usize = 0;\n    let mut prime_digits_count_22:\
    \ usize = 0;\n    let mut prime_digits_count_23: usize = 0;\n    let mut prime_digits_count_24:\
    \ usize = 0;\n    let mut prime_digits_count_25: usize = 0;\n    let mut prime_digits_count_26:\
    \ usize = 0;\n    let mut prime_digits_count_27: usize = 0;\n    let mut prime_digits_count_28:\
    \ usize = 0;\n    let mut prime_digits_count_29: usize = 0;\n    let mut prime_digits_count_30:\
    \ usize = 0;\n    let mut prime_digits_count_31: usize = 0;\n    let mut prime_digits_count_32:\
    \ usize = 0;\n    let mut prime_digits_count_33\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1mmx9msg.rs:49:34\n   |\n\
    49 |     let mut prime_digits_count_33\n   |                                 \
    \ ^ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1mmx9msg.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1mmx9msg.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1mmx9msg.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1mmx9msg.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1mmx9msg.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1mmx9msg.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1mmx9msg.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1mmx9msg.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1mmx9msg.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1mmx9msg.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E042"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf8boz6ci.rs:34:134\n   |\n\
    34 |     let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                              ^ help: add `;`\
    \ here\n35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf8boz6ci.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf8boz6ci.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf8boz6ci.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf8boz6ci.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime: isize\
    \ = 2;\n    let mut prime_found = false;\n    for digit in num {\n        if digit\
    \ == 'A' || digit == 'B' || digit == 'C' || digit == 'D' || digit == 'E' || digit\
    \ == 'F' {\n            prime = prime * 2;\n        }\n        if digit == '0'\
    \ {\n            prime = prime + 1;\n        }\n        if prime > 100 {\n   \
    \         break;\n        }\n        if digit == '2' || digit == '3' || digit\
    \ == '5' || digit == '7' || digit == 'B' || digit == 'D' {\n            prime_found\
    \ = true;\n        }\n        num = num.chars().filter(|c| c != 'A' && c != 'B'\
    \ && c != 'C' && c != 'D' && c != 'E' && c != 'F').collect::<String>().to_owned();\n\
    \    }\n    if prime_found {\n        return prime;\n    }\n    return num.chars().filter(|c|\
    \ c != 'A' && c != 'B' && c != 'C' && c != 'D' && c != 'E' && c != 'F').collect::<String>().to_owned();\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmps6jk19xe.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps6jk19xe.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps6jk19xe.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps6jk19xe.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps6jk19xe.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps6jk19xe.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps6jk19xe.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps6jk19xe.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps6jk19xe.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps6jk19xe.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps6jk19xe.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut\
    \ hex: isize = 0;\n    let mut hex2: isize = 0;\n    let mut hex3: isize = 0;\n\
    \    let mut hex4: isize = 0;\n    let mut hex5: isize = 0;\n    let mut hex6:\
    \ isize = 0;\n    let mut hex7: isize = 0;\n    let mut hex8: isize = 0;\n   \
    \ let mut hex9: isize = 0;\n    let mut hex10: isize = 0;\n    let mut hex11:\
    \ isize = 0;\n    let mut hex12: isize = 0;\n    let mut hex13: isize = 0;\n \
    \   let mut hex14: isize = 0;\n    let mut hex15: isize = 0;\n    let mut hex16:\
    \ isize = 0;\n    let mut hex17: isize = 0;\n    let mut hex18: isize = 0;\n \
    \   let mut hex19: isize = 0;\n    let mut hex20: isize = 0;\n    let mut hex21:\
    \ isize = 0;\n    let mut hex22: isize = 0;\n    let mut hex23: isize = 0;\n \
    \   let mut hex24: isize = 0;\n    let mut hex25: isize = 0;\n    let mut hex26:\
    \ isize = 0;\n    let mut hex27: isize = 0;\n    let mut hex28: isize = 0;\n \
    \   let mut hex29: isize = 0;\n    let mut hex30: isize = 0;\n    let mut hex31:\
    \ isize = 0;\n    let mut hex32: isize = 0;\n    let mut hex33: isize = 0;\n \
    \   let mut hex34: isize = 0;\n    let mut hex35: isize = 0;\n    let mut hex36:\
    \ isize = 0;\n    let mut hex37: isize = 0;\n    let mut hex38: isize = 0;\n \
    \   let mut hex39: isize = 0;\n    let mut hex40: isize = 0;\n    let mut hex41:\
    \ isize = 0;\n    let mut hex42: isize = 0;\n    let mut hex43: isize = 0;\n \
    \   let mut hex44: isize = 0;\n    let mut hex45: isize = 0;\n    let mut hex46:\
    \ isize = 0;\n    let mut hex47: isize = 0;\n    let mut hex48: isize = 0;\n \
    \   let mut hex49: isize = 0;\n    let mut hex50: \n}\n\nfn main() {\n    let\
    \ candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `}`\n  --> /tmp/tmpq2az3jye.rs:65:1\n   |\n\
    64 |     let mut hex50: \n   |         --------- while parsing the type for `mut\
    \ hex50`\n65 | }\n   | ^ expected type\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpq2az3jye.rs:69:17\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpq2az3jye.rs:69:25\n \
    \  |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq2az3jye.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq2az3jye.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq2az3jye.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq2az3jye.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq2az3jye.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq2az3jye.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq2az3jye.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq2az3jye.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot fin"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n    let mut\
    \ prime_digits = vec![];\n    let mut prime_digits_counter: usize = 0;\n    let\
    \ mut prime_digits_counter2: usize = 0;\n    let mut prime_digits_counter3: usize\
    \ = 0;\n    let mut prime_digits_counter4: usize = 0;\n    let mut prime_digits_counter5:\
    \ usize = 0;\n    let mut prime_digits_counter6: usize = 0;\n    let mut prime_digits_counter7:\
    \ usize = 0;\n    let mut prime_digits_counter8: usize = 0;\n    let mut prime_digits_counter9:\
    \ usize = 0;\n    let mut prime_digits_counter10: usize = 0;\n    let mut prime_digits_counter11:\
    \ usize = 0;\n    let mut prime_digits_counter12: usize = 0;\n    let mut prime_digits_counter13:\
    \ usize = 0;\n    let mut prime_digits_counter14: usize = 0;\n    let mut prime_digits_counter15:\
    \ usize = 0;\n    let mut prime_digits_counter16: usize = 0;\n    let mut prime_digits_counter17:\
    \ usize = 0;\n    let mut prime_digits_counter18: usize = 0;\n    let mut prime_digits_counter19:\
    \ usize = 0;\n    let mut prime_digits_counter20: usize = 0;\n    let mut prime_digits_counter21:\
    \ usize = 0;\n    let mut prime_digits_counter22: usize = 0;\n    let mut prime_digits_counter23:\
    \ usize = 0;\n    let mut prime_digits_counter24: usize = 0;\n    let mut prime_digits_counter25:\
    \ usize = 0;\n    let mut prime_digits_counter26: usize = 0;\n    let mut prime_digits_counter27:\
    \ usize = 0;\n    let mut prime_digits_counter28: usize = 0;\n    let mut prime_digits_counter29:\
    \ usize = 0;\n    let mut prime_digits_counter30: usize = 0;\n    let mut prime_digits_counter31:\
    \ usize = 0;\n    let mut prime_digits_counter32: usize = 0;\n    let mut prime_digits_counter33:\
    \ usize = 0;\n    let mut prime_digits_counter34: usize = 0;\n    let mut prime_digits_counter35:\
    \ u\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo64d5wua.rs:49:38\n   |\n\
    49 |     let mut prime_digits_counter35: u\n   |                             \
    \         ^ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0412]:\
    \ cannot find type `u` in this scope\n  --> /tmp/tmpo64d5wua.rs:49:37\n   |\n\
    49 |     let mut prime_digits_counter35: u\n   |                             \
    \        ^ help: a builtin type with a similar name exists: `u8`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo64d5wua.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo64d5wua.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo64d5wua.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo64d5wua.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo64d5wua.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo64d5wua.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo64d5wua.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo64d5wua.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo64d5wua.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |           "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_digits_prime = 0;\n    let mut num_digits_not_prime = 0;\n    let mut num_digits_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime = 0;\n    let mut num_digits_prime_prime\
    \ = 0;\n    let mut num_digits_prime_not_prime_prime = 0;\n    let mut num_digits_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_digits_prime_prime_prime = 0;\n    let mut num_digits_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_not_prime_prime = 0;\n    let mut\
    \ num_digits_prime_prime_prime_prime = 0;\n    let mut num_digits_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime = 0;\n    let\
    \ mut num_digits_prime_prime_not_prime_not_prime_not_prime_prime = 0;\n    let\
    \ mut num_digits_not_prime_prime_prime_prime_prime_prime = 0;\n    let mut num_digits_prime_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_digits_prime_prime\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3fq9fvq0.rs:39:35\n   |\n\
    39 |     let mut num_digits_prime_prime\n   |                                \
    \   ^ help: add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3fq9fvq0.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3fq9fvq0.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3fq9fvq0.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3fq9fvq0.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3fq9fvq0.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3fq9fvq0.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3fq9fvq0.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3fq9fvq0.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3fq9fvq0.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3fq9fvq0.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk6rc601j.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19];\n    let mut\
    \ prime: isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2\
    \ = false;\n    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n\
    \    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let\
    \ mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let mut prime_found9\
    \ = false;\n    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n\
    \    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let\
    \ mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut\
    \ prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut prime_found18\
    \ = false;\n    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n\
    \    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let\
    \ mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut\
    \ prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut prime_found27\
    \ = false;\n    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n\
    \    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let\
    \ mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut\
    \ prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut prime_found36\
    \ = false;\n    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n\
    \    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let\
    \ mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut\
    \ prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut prime_found45\
    \ = false;\n    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n\
    \    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let\
    \ mut prime_found\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpskj8pj4q.rs:66:24\n   |\n\
    66 |     let mut prime_found\n   |                        ^ help: add `;` here\n\
    67 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpskj8pj4q.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpskj8pj4q.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpskj8pj4q.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpskj8pj4q.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpskj8pj4q.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpskj8pj4q.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpskj8pj4q.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpskj8pj4q.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpskj8pj4q.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpskj8pj4q.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut digit_count = 1;\n    let mut digits\
    \ = num.to_string();\n    while digit_count < hexadecimal::DIGITS.len() {\n  \
    \      let mut prime = true;\n        for digit in &digits[digit_count..] {\n\
    \            if hexadecimal::DIGITS[digit] == hexadecimal::DIGITS[digit_count]\
    \ {\n                prime = false;\n                break;\n            }\n \
    \       }\n        if prime {\n            prime_count++;\n        }\n       \
    \ digit_count++;\n    }\n    prime_count\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp8j6gltsw.rs:25:24\n\
    \   |\n25 |             prime_count++;\n   |                        ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n25 |             { let\
    \ tmp = prime_count; prime_count += 1; tmp };\n   |             +++++++++++  \
    \          ~~~~~~~~~~~~~~~~~~~~~~~~~\n25 -             prime_count++;\n25 +  \
    \           prime_count += 1;\n   | \n\nerror: Rust has no postfix increment operator\n\
    \  --> /tmp/tmp8j6gltsw.rs:27:20\n   |\n27 |         digit_count++;\n   |    \
    \                ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n27 |         { let tmp = digit_count; digit_count += 1; tmp };\n   |  \
    \       +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n27 -         digit_count++;\n\
    27 +         digit_count += 1;\n   | \n\nerror[E0433]: failed to resolve: use\
    \ of undeclared crate or module `hexadecimal`\n  --> /tmp/tmp8j6gltsw.rs:16:25\n\
    \   |\n16 |     while digit_count < hexadecimal::DIGITS.len() {\n   |        \
    \                 ^^^^^^^^^^^ use of undeclared crate or module `hexadecimal`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `hexadecimal`\n\
    \  --> /tmp/tmp8j6gltsw.rs:19:16\n   |\n19 |             if hexadecimal::DIGITS[digit]\
    \ == hexadecimal::DIGITS[digit_count] {\n   |                ^^^^^^^^^^^ use of\
    \ undeclared crate or module `hexadecimal`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared crate or module `hexadecimal`\n  --> /tmp/tmp8j6gltsw.rs:19:46\n\
    \   |\n19 |             if hexadecimal::DIGITS[digit] == hexadecimal::DIGITS[digit_count]\
    \ {\n   |                                              ^^^^^^^^^^^ use of undeclared\
    \ crate or module `hexadecimal`\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp8j6gltsw.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8j6gltsw.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_string().chars().collect();\n\
    \    let mut prime: Vec<isize> = vec![2, 3];\n    let mut prime_found = false;\n\
    \    let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut prime_found51\
    \ = false;\n    let \n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp7zvixop4.rs:68:1\n  \
    \ |\n68 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp7zvixop4.rs:72:17\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp7zvixop4.rs:72:25\n \
    \  |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7zvixop4.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7zvixop4.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7zvixop4.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7zvixop4.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7zvixop4.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7zvixop4.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7zvixop4.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7zvixop4.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7zvixop4.rs:77:17\n   |\n77 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime: isize\
    \ = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let \n}\n\nfn main() {\n \
    \   let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp180x13g9.rs:70:1\n  \
    \ |\n70 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp180x13g9.rs:74:17\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:74:25\n \
    \  |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp180x13g9.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:78:25\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:79:17\n   |\n79 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<isize> = vec![2,3,5,7,11,13,17,19];\n    let mut prime_found\
    \ = false;\n    \n    for digit in digits {\n        if prime == prime_found {\n\
    \            break;\n        }\n        \n        if digit == 'a' || digit ==\
    \ 'b' || digit == 'c' || digit == 'd' || digit == 'e' || digit == 'f' {\n    \
    \        continue;\n        }\n        \n        let mut prime_found = false;\n\
    \        \n        for prime in prime {\n            if digit % prime == 0 {\n\
    \                prime_found = true;\n                break;\n            }\n\
    \        }\n        \n        if prime_found {\n            prime = vec![2,3,5,7,11,13,17,19];\n\
    \        }\n        \n        prime = prime_found ? prime : vec![2,3,5,7,11,13,17,19];\n\
    \        \n        prime_found = false;\n        \n        for prime in prime\
    \ {\n            if digit % prime == 0 {\n                prime_found = true;\n\
    \                break;\n            }\n        }\n        \n        if prime_found\
    \ {\n            prime = vec![2,3,5,7,11,13,17,19];\n        }\n        \n   \
    \     prime = prime_found ? prime : vec![2,3,5,7,11,13,17,19];\n        \n   \
    \     prime_found = false;\n        \n        for prime in prime {\n         \
    \   if digit % prime == 0 {\n                prime_found = true;\n           \
    \     break;\n            }\n        }\n        \n        if prime_found {\n \
    \           prime = vec![2,3,5,7,11,13,17,19];\n        }\n        \n        prime\
    \ = prime_found ? prime : vec![2,3,5,7,11,13,17,19];\n        \n        prime_found\
    \ = false;\n        \n        for prime in prime {\n            if digit % prime\
    \ == 0 {\n                prime_found = true;\n                break;\n      \
    \      }\n        }\n        \n        if prime_found {\n            prime = vec![2,3,5,7,11,13,17,19];\n\
    \        }\n        \n        prime = prime_found ? prime : vec![2,3,5,7,11,13,17,19];\n\
    \        \n        prime_found = false;\n        \n        for prime in prime\
    \ {\n            if digit % prime == 0 {\n                prime_found = true;\n\
    \                break;\n            }\n        }\n        \n        if prime_found\
    \ {\n            prime = vec![2,3,5,7,11,13,17,19];\n        }\n        \n   \
    \     prime\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpn7mzr3ns.rs:111:3\n\
    \    |\n12  | fn hex_key(num: String) -> isize {\n    |                      \
    \            - unclosed delimiter\n...\n18  |     for digit in digits {\n    |\
    \                         - this delimiter might not be properly closed...\n...\n\
    101 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    111 | }\n    |   ^\n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator,\
    \ found `prime`\n  --> /tmp/tmpn7mzr3ns.rs:12:34\n   |\n12 | fn hex_key(num: String)\
    \ -> isize {\n   |                                  ^ unclosed delimiter\n...\n\
    40 |         prime = prime_found ? prime : vec![2,3,5,7,11,13,17,19];\n   |  \
    \                            -^^^^^ expected one of `.`, `;`, `?`, `}`, or an\
    \ operator\n   |                              |\n   |                        \
    \      help: `}` may belong here\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n   --> /tmp/tmpn7mzr3ns.rs:105:17\n    |\n105 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpn7mzr3ns.rs:105:25\n\
    \    |\n105 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpn7mzr3ns.rs:106:17\n    |\n106 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpn7mzr3ns.rs:106:25\n\
    \    |\n106 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpn7mzr3ns.rs:107:17\n    |\n107 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpn7mzr3ns.rs:107:25\n\
    \    |\n107 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime: isize = 0;\n    let\
    \ mut prime_found = false;\n    \n    for digit in digits {\n        prime_found\
    \ = false;\n        for prime in primes {\n            if prime == digit {\n \
    \               prime_found = true;\n                break;\n            }\n \
    \       }\n        if prime_found == false {\n            primes.push(digit);\n\
    \        }\n    }\n    \n    for prime in primes {\n        num = num.chars().filter(|&x|\
    \ x == prime).count();\n    }\n    \n    return num;\n}\n\nfn main() {\n    let\
    \ candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpeuglxp4z.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpeuglxp4z.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpeuglxp4z.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpeuglxp4z.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpeuglxp4z.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpeuglxp4z.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpeuglxp4z.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpeuglxp4z.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpeuglxp4z.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpeuglxp4z.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpeuglxp4z.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_u8fpmr.rs:42:20\n   |\n\
    42 |     let mut num_str\n   |                    ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    for digit in digits {\n        if digit == 'A' || digit == 'B' || digit ==\
    \ 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n            num = num\
    \ * 16 + digit as isize;\n        }\n    }\n    return num;\n}\n\nfn main() {\n\
    \    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprfw3s61r.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprfw3s61r.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprfw3s61r.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprfw3s61r.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprfw3s61r.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprfw3s61r.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprfw3s61r.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprfw3s61r.rs:28:25\n   |\n28 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprfw3s61r.rs:29:17\n  \
    \ |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprfw3s61r.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprfw3s61r.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_chars().collect();\n\
    \    let mut prime: Vec<isize> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut prime_digits: Vec<isize> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut prime_digits_count: isize = 0;\n    let mut prime_digits_count_2:\
    \ isize = 0;\n    let mut prime_digits_count_3: isize = 0;\n    let mut prime_digits_count_4:\
    \ isize = 0;\n    let mut prime_digits_count_5: isize = 0;\n    let mut prime_digits_count_6:\
    \ isize = 0;\n    let mut prime_digits_count_7: isize = 0;\n    let mut prime_digits_count_8:\
    \ isize = 0;\n    let mut prime_digits_count_9: isize = 0;\n    let mut prime_digits_count_10:\
    \ isize = 0;\n    let mut prime_digits_count_11: isize = 0;\n    let mut prime_digits_count_12:\
    \ isize = 0;\n    let mut prime_digits_count_13: isize = 0;\n    let mut prime_digits_count_14:\
    \ isize = 0;\n    let mut prime_digits_count_15: isize = 0;\n    let mut prime_digits_count_16:\
    \ isize = 0;\n    let mut prime_digits_count_17: isize = 0;\n    let mut prime_digits_count_18:\
    \ isize = 0;\n    let mut prime_digits_count_19: isize = 0;\n    let mut prime_digits_count_20:\
    \ isize = 0;\n    let mut prime_digits_count_21: isize = 0;\n    let mut prime_digits_count_22:\
    \ isize = 0;\n    let mut prime_digits_count_23: isize = 0;\n    let mut prime_digits_count_24:\
    \ isize = 0;\n    let mut prime_digits_count_25: isize = 0;\n    let mut prime_digits_count_26:\
    \ isize = 0;\n    let mut prime_digits_count_27: isize = 0;\n    let mut prime_digits_\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqapeeath.rs:44:26\n   |\n\
    44 |     let mut prime_digits_\n   |                          ^ help: add `;`\
    \ here\n45 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpqapeeath.rs:49:17\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqapeeath.rs:49:25\n \
    \  |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqapeeath.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqapeeath.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqapeeath.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqapeeath.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqapeeath.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqapeeath.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqapeeath.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqapeeath.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut\
    \ prime_digit: isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let\
    \ mut prime_digit_count_2: isize = 0;\n    let mut prime_digit_count_3: isize\
    \ = 0;\n    let mut prime_digit_count_4: isize = 0;\n    let mut prime_digit_count_5:\
    \ isize = 0;\n    let mut prime_digit_count_6: isize = 0;\n    let mut prime_digit_count_7:\
    \ isize = 0;\n    let mut prime_digit_count_8: isize = 0;\n    let mut prime_digit_count_9:\
    \ isize = 0;\n    let mut prime_digit_count_10: isize = 0;\n    let mut prime_digit_count_11:\
    \ isize = 0;\n    let mut prime_digit_count_12: isize = 0;\n    let mut prime_digit_count_13:\
    \ isize = 0;\n    let mut prime_digit_count_14: isize = 0;\n    let mut prime_digit_count_15:\
    \ isize = 0;\n    let mut prime_digit_count_16: isize = 0;\n    let mut prime_digit_count_17:\
    \ isize = 0;\n    let mut prime_digit_count_18: isize = 0;\n    let mut prime_digit_count_19:\
    \ isize = 0;\n    let mut prime_digit_count_20: isize = 0;\n    let mut prime_digit_count_21:\
    \ isize = 0;\n    let mut prime_digit_count_22: isize = 0;\n    let mut prime_digit_count_23:\
    \ isize = 0;\n    let mut prime_digit_count_24: isize = 0;\n    let mut prime_digit_count_25:\
    \ isize = 0;\n    let mut prime_digit_count_26: isize = 0;\n    let mut prime_digit_count_27:\
    \ isize = 0;\n    let mut prime_digit_count_28: isize = 0;\n    let mut prime_digit_count_29:\
    \ isize = 0;\n    let mut prime_digit_count_30: isize = 0;\n    let mut prime_digit_count_31:\
    \ isize = 0;\n    let mut prime_digit_count_32: isize = 0;\n    let mut prime_digit_count_33:\
    \ isize = 0;\n    let mut prime_digit_count_34: isize = 0;\n    let mut prime_digit_count_35:\
    \ isize = 0;\n    let mut prime_digit_count_36: isize = 0;\n    let mut prime_digit_count_37:\
    \ isize = 0;\n    let mut prime_\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwrivnf32.rs:53:19\n   |\n\
    53 |     let mut prime_\n   |                   ^ help: add `;` here\n54 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwrivnf32.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwrivnf32.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwrivnf32.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwrivnf32.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwrivnf32.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwrivnf32.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwrivnf32.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwrivnf32.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwrivnf32.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwrivnf32.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` i"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime: isize = 0;\n    let\
    \ mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut k: isize = 0;\n  \
    \  let mut l: isize = 0;\n    let mut m: isize = 0;\n    let mut n: isize = 0;\n\
    \    let mut o: isize = 0;\n    let mut p: isize = 0;\n    let mut q: isize =\
    \ 0;\n    let mut r: isize = 0;\n    let mut s: isize = 0;\n    let mut t: isize\
    \ = 0;\n    let mut u: isize = 0;\n    let mut v: isize = 0;\n    let mut w: isize\
    \ = 0;\n    let mut x: isize = 0;\n    let mut y: isize = 0;\n    let mut z: isize\
    \ = 0;\n    let mut a: isize = 0;\n    let mut b: isize = 0;\n    let mut c: isize\
    \ = 0;\n    let mut d: isize = 0;\n    let mut e: isize = 0;\n    let mut f: isize\
    \ = 0;\n    let mut g: isize = 0;\n    let mut h: isize = 0;\n    let mut i: isize\
    \ = 0;\n    let mut j: isize = 0;\n    let mut k: isize = 0;\n    let mut l: isize\
    \ = 0;\n    let mut m: isize = 0;\n    let mut n: isize = 0;\n    let mut o: isize\
    \ = 0;\n    let mut p: isize = 0;\n    let mut q: isize = 0;\n    let mut r: isize\
    \ = 0;\n    let mut s: isize = 0;\n    let mut t: isize = 0;\n    let mut u: isize\
    \ = 0;\n    let mut v: isize = 0;\n    let mut w: isize = 0;\n    let mut x: isize\
    \ = 0;\n    let mut y: isize = 0;\n    let mut z: isize = 0;\n    let mut a: isize\
    \ = 0;\n    let mut b: isize = 0;\n    let mut c: isize = 0;\n    let mut d: isize\
    \ = 0;\n    let mut e: isize = 0;\n    let mut f: isize = 0;\n    let mut g: isize\
    \ = 0;\n    let mut h: isize = 0;\n    let mut i: isize = 0;\n    let mut j: isize\
    \ = 0;\n    let mut k: isize = 0;\n    let mut l\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnxb5w5a8.rs:72:14\n   |\n\
    72 |     let mut l\n   |              ^ help: add `;` here\n73 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnxb5w5a8.rs:77:17\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnxb5w5a8.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnxb5w5a8.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnxb5w5a8.rs:78:25\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnxb5w5a8.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnxb5w5a8.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnxb5w5a8.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnxb5w5a8.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnxb5w5a8.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnxb5w5a8.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this sco"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: char;\n    for digit in num {\n\
    \        if digit == 'A' || digit == 'B' || digit == 'C' || digit == 'D' || digit\
    \ == 'E' || digit == 'F' {\n            num = num.chars().filter(|c| c != 'A'\
    \ && c != 'B' && c != 'C' && c != 'D' && c != 'E' && c != 'F').count();\n    \
    \    }\n        else {\n            num = num.chars().filter(|c| c != '0').count();\n\
    \        }\n    }\n    return num;\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9olxw1g7.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9olxw1g7.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9olxw1g7.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9olxw1g7.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9olxw1g7.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9olxw1g7.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9olxw1g7.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9olxw1g7.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9olxw1g7.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9olxw1g7.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9olxw1g7.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_prime_digits = 0;\n    let mut num_primes = 0;\n    let mut num_prime_digits_2\
    \ = num_digits / 2;\n    let mut num_primes_2 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_3 = num_digits - num_prime_digits_2;\n    let mut num_primes_4\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_5 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_6 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_7 = num_digits - num_prime_digits_2;\n    let mut num_primes_8\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_9 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_10 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_11 = num_digits - num_prime_digits_2;\n    let mut num_primes_12\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_13 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_14 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_15 = num_digits - num_prime_digits_2;\n    let mut num_primes_16\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_17 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_18 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_19 = num_digits - num_prime_digits_2;\n    let mut num_primes_20\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_21 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_22 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_23 = num_digits - num_prime_digits_2;\n    let mut num_primes_24\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_25 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_26 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_27 = num_digits - num_prime_digits_2;\n    let mut num_primes_28\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqqdfjq_p.rs:44:26\n   |\n\
    44 |     let mut num_primes_28\n   |                          ^ help: add `;`\
    \ here\n45 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpqqdfjq_p.rs:49:17\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqqdfjq_p.rs:49:25\n \
    \  |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqqdfjq_p.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqqdfjq_p.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqqdfjq_p.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqqdfjq_p.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqqdfjq_p.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqqdfjq_p.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqqdfjq_p.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqqdfjq_p.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut primes_count: usize = 0;\n\
    \    let mut primes_count_2: usize = 0;\n    let mut primes_count_3: usize = 0;\n\
    \    let mut primes_count_4: usize = 0;\n    let mut primes_count_5: usize = 0;\n\
    \    let mut primes_count_6: usize = 0;\n    let mut primes_count_7: usize = 0;\n\
    \    let mut primes_count_8: usize = 0;\n    let mut primes_count_9: usize = 0;\n\
    \    let mut primes_count_10: usize = 0;\n    let mut primes_count_11: usize =\
    \ 0;\n    let mut primes_count_12: usize = 0;\n    let mut primes_count_13: usize\
    \ = 0;\n    let mut primes_count_14: usize = 0;\n    let mut primes_count_15:\
    \ usize = 0;\n    let mut primes_count_16: usize = 0;\n    let mut primes_count_17:\
    \ usize = 0;\n    let mut primes_count_18: usize = 0;\n    let mut primes_count_19:\
    \ usize = 0;\n    let mut primes_count_20: usize = 0;\n    let mut primes_count_21:\
    \ usize = 0;\n    let mut primes_count_22: usize = 0;\n    let mut primes_count_23:\
    \ usize = 0;\n    let mut primes_count_24: usize = 0;\n    let mut primes_count_25:\
    \ usize = 0;\n    let mut primes_count_26: usize = 0;\n    let mut primes_count_27:\
    \ usize = 0;\n    let mut primes_count_28: usize = 0;\n    let mut primes_count_29:\
    \ usize = 0;\n    let mut primes_count_30: usize = 0;\n    let mut primes_count_31:\
    \ usize = 0;\n    let mut primes_count_32: usize = 0;\n    let mut primes_count_33:\
    \ usize = 0;\n    let mut primes_count_34: usize = 0;\n    let mut primes_count_35:\
    \ usize = 0;\n    let mut primes_count_36: usize = 0;\n    let mut primes_count_37:\
    \ usize = 0;\n    let mut primes_count_38: usize = 0;\n    let mut primes_count_39:\
    \ usize = 0;\n    let mut primes_count_\n}\n\nfn main() {\n    let candidate =\
    \ hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp38ead26n.rs:55:26\n   |\n\
    55 |     let mut primes_count_\n   |                          ^ help: add `;`\
    \ here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp38ead26n.rs:60:17\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp38ead26n.rs:60:25\n \
    \  |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp38ead26n.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp38ead26n.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp38ead26n.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp38ead26n.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp38ead26n.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp38ead26n.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp38ead26n.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp38ead26n.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ prime_digits = 2;\n    let mut prime_digits_counter = 0;\n    let mut prime_digits_counter2\
    \ = 0;\n    let mut prime_digits_counter3 = 0;\n    let mut prime_digits_counter4\
    \ = 0;\n    let mut prime_digits_counter5 = 0;\n    let mut prime_digits_counter6\
    \ = 0;\n    let mut prime_digits_counter7 = 0;\n    let mut prime_digits_counter8\
    \ = 0;\n    let mut prime_digits_counter9 = 0;\n    let mut prime_digits_counter10\
    \ = 0;\n    let mut prime_digits_counter11 = 0;\n    let mut prime_digits_counter12\
    \ = 0;\n    let mut prime_digits_counter13 = 0;\n    let mut prime_digits_counter14\
    \ = 0;\n    let mut prime_digits_counter15 = 0;\n    let mut prime_digits_counter16\
    \ = 0;\n    let mut prime_digits_counter17 = 0;\n    let mut prime_digits_counter18\
    \ = 0;\n    let mut prime_digits_counter19 = 0;\n    let mut prime_digits_counter20\
    \ = 0;\n    let mut prime_digits_counter21 = 0;\n    let mut prime_digits_counter22\
    \ = 0;\n    let mut prime_digits_counter23 = 0;\n    let mut prime_digits_counter24\
    \ = 0;\n    let mut prime_digits_counter25 = 0;\n    let mut prime_digits_counter26\
    \ = 0;\n    let mut prime_digits_counter27 = 0;\n    let mut prime_digits_counter28\
    \ = 0;\n    let mut prime_digits_counter29 = 0;\n    let mut prime_digits_counter30\
    \ = 0;\n    let mut prime_digits_counter31 = 0;\n    let mut prime_digits_counter32\
    \ = 0;\n    let mut prime_digits_counter33 = 0;\n    let mut prime_digits_counter34\
    \ = 0;\n    let mut prime_digits_counter35 = 0;\n    let mut prime_digits_counter36\
    \ = 0;\n    let mut prime_digits_counter37 = 0;\n    let mut prime_digits_counter38\
    \ = 0;\n    let mut prime_digits_counter39 = 0;\n    let mut prime_digits_counter40\
    \ = 0;\n    let mut prime_digits_counter41 = 0;\n    let mut prime_digits_counter42\
    \ = 0;\n    let mut prime_digits_counter43 = 0;\n    let mut prime_digits_counter44\
    \ = 0;\n    let mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbaipvyr0.rs:60:18\n   |\n\
    60 |     let mut prime\n   |                  ^ help: add `;` here\n61 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbaipvyr0.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbaipvyr0.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbaipvyr0.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbaipvyr0.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbaipvyr0.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbaipvyr0.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbaipvyr0.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbaipvyr0.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbaipvyr0.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbaipvyr0.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.chars().collect();\n\
    \    let mut prime: Vec<isize> = vec![];\n    let mut prime_found = false;\n \
    \   let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut prime_found51\
    \ = false;\n    let mut prime_\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7x_5qkq4.rs:67:19\n   |\n\
    67 |     let mut prime_\n   |                   ^ help: add `;` here\n68 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7x_5qkq4.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7x_5qkq4.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7x_5qkq4.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7x_5qkq4.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7x_5qkq4.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7x_5qkq4.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7x_5qkq4.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7x_5qkq4.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7x_5qkq4.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7x_5qkq4.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` i"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_u8fpmr.rs:42:20\n   |\n\
    42 |     let mut num_str\n   |                    ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq_u8fpmr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq_u8fpmr.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq_u8fpmr.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.chars().collect();\n\
    \    let mut prime: isize = 0;\n    let mut prime_found = false;\n    let mut\
    \ prime_found2 = false;\n    let mut prime_found3 = false;\n    let mut prime_found4\
    \ = false;\n    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n\
    \    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let\
    \ mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let mut prime_found11\
    \ = false;\n    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n\
    \    let mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let\
    \ mut prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut\
    \ prime_found18 = false;\n    let mut prime_found19 = false;\n    let mut prime_found20\
    \ = false;\n    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n\
    \    let mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let\
    \ mut prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut\
    \ prime_found27 = false;\n    let mut prime_found28 = false;\n    let mut prime_found29\
    \ = false;\n    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n\
    \    let mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let\
    \ mut prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut\
    \ prime_found36 = false;\n    let mut prime_found37 = false;\n    let mut prime_found38\
    \ = false;\n    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n\
    \    let mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let\
    \ mut prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut\
    \ prime_found45 = false;\n    let mut prime_found46 = false;\n    let mut prime_found47\
    \ = false;\n    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n\
    \    let mut prime_found50 = false;\n    let mut prime_found51 = false;\n    let\
    \ mut prime_found52 = false;\n    let \n}\n\nfn main() {\n    let candidate =\
    \ hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpv825kyb9.rs:69:1\n  \
    \ |\n69 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpv825kyb9.rs:73:17\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpv825kyb9.rs:73:25\n \
    \  |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv825kyb9.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv825kyb9.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpv825kyb9.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpv825kyb9.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv825kyb9.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv825kyb9.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv825kyb9.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv825kyb9.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv825kyb9.rs:78:17\n   |\n78 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.chars().collect();\n\
    \    digits.sort_unstable();\n    for i in 0..digits.len() {\n        if digits[i]\
    \ >= 'A' && digits[i] <= 'F' {\n            num = num * 16 + digits[i] - 'A' +\
    \ 1;\n        } else {\n            num = num * 16 + digits[i] - '0';\n      \
    \  }\n    }\n    return num;\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp47myzuh2.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp47myzuh2.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp47myzuh2.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp47myzuh2.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp47myzuh2.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp47myzuh2.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp47myzuh2.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp47myzuh2.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp47myzuh2.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp47myzuh2.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp47myzuh2.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime: isize\
    \ = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let \n}\n\nfn main() {\n \
    \   let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp180x13g9.rs:70:1\n  \
    \ |\n70 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp180x13g9.rs:74:17\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:74:25\n \
    \  |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp180x13g9.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:78:25\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:79:17\n   |\n79 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n    let mut\
    \ prime_count: isize = 0;\n    let mut prime_digit: u8 = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_sum: isize = 0;\n    let mut prime_digit_product:\
    \ isize = 1;\n    let mut prime_digit_sum2: isize = 1;\n    let mut prime_digit_product2:\
    \ isize = 1;\n    let mut prime_digit_sum3: isize = 1;\n    let mut prime_digit_product3:\
    \ isize = 1;\n    let mut prime_digit_sum4: isize = 1;\n    let mut prime_digit_product4:\
    \ isize = 1;\n    let mut prime_digit_sum5: isize = 1;\n    let mut prime_digit_product5:\
    \ isize = 1;\n    let mut prime_digit_sum6: isize = 1;\n    let mut prime_digit_product6:\
    \ isize = 1;\n    let mut prime_digit_sum7: isize = 1;\n    let mut prime_digit_product7:\
    \ isize = 1;\n    let mut prime_digit_sum8: isize = 1;\n    let mut prime_digit_product8:\
    \ isize = 1;\n    let mut prime_digit_sum9: isize = 1;\n    let mut prime_digit_product9:\
    \ isize = 1;\n    let mut prime_digit_sum10: isize = 1;\n    let mut prime_digit_product10:\
    \ isize = 1;\n    let mut prime_digit_sum11: isize = 1;\n    let mut prime_digit_product11:\
    \ isize = 1;\n    let mut prime_digit_sum12: isize = 1;\n    let mut prime_digit_product12:\
    \ isize = 1;\n    let mut prime_digit_sum13: isize = 1;\n    let mut prime_digit_product13:\
    \ isize = 1;\n    let mut prime_digit_sum14: isize = 1;\n    let mut prime_digit_product14:\
    \ isize = 1;\n    let mut prime_digit_sum15: isize = 1;\n    let mut prime_digit_product15:\
    \ isize = 1;\n    let mut prime_digit_sum16: isize = 1;\n    let mut prime_digit_product16:\
    \ isize = 1;\n    let mut prime_digit_sum17: isize = 1;\n    let mut prime_digit_product17:\
    \ isize = 1;\n    let mut prime_digit_sum18: isize = 1;\n    let mut prime_digit_product18:\
    \ isize = 1;\n    let mut prime\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo3_74d_7.rs:53:18\n   |\n\
    53 |     let mut prime\n   |                  ^ help: add `;` here\n54 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo3_74d_7.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo3_74d_7.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo3_74d_7.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo3_74d_7.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo3_74d_7.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo3_74d_7.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo3_74d_7.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo3_74d_7.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo3_74d_7.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo3_74d_7.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.to_vec();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: \n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `}`\n  --> /tmp/tmp8r3nzicc.rs:43:1\n   |\n\
    42 |     let mut num_str: \n   |         ----------- while parsing the type for\
    \ `mut num_str`\n43 | }\n   | ^ expected type\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp8r3nzicc.rs:47:17\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp8r3nzicc.rs:47:25\n \
    \  |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8r3nzicc.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8r3nzicc.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8r3nzicc.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8r3nzicc.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8r3nzicc.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8r3nzicc.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8r3nzicc.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8r3nzicc.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cann"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    for d in digits {\n        if d == 'A' || d == 'B' || d == 'C' || d == 'D'\
    \ || d == 'E' || d == 'F' {\n            num += 1;\n        }\n    }\n    return\
    \ num;\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpy6p_9xjl.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy6p_9xjl.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy6p_9xjl.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy6p_9xjl.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy6p_9xjl.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy6p_9xjl.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy6p_9xjl.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy6p_9xjl.rs:28:25\n   |\n28 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy6p_9xjl.rs:29:17\n  \
    \ |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy6p_9xjl.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy6p_9xjl.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.to_string().parse().unwrap();\n    let mut prime_digits\
    \ = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut prime_digits_count = prime_digits.len();\n    let mut prime_digits_count_2\
    \ = prime_digits_count - 1;\n    let mut prime_digits_count_3 = prime_digits_count\
    \ - 2;\n    let mut prime_digits_count_4 = prime_digits_count - 3;\n    let mut\
    \ prime_digits_count_5 = prime_digits_count - 4;\n    let mut prime_digits_count_6\
    \ = prime_digits_count - 5;\n    let mut prime_digits_count_7 = prime_digits_count\
    \ - 6;\n    let mut prime_digits_count_8 = prime_digits_count - 7;\n    let mut\
    \ prime_digits_count_9 = prime_digits_count - 8;\n    let mut prime_digits_count_10\
    \ = prime_digits_count - 9;\n    let mut prime_digits_count_11 = prime_digits_count\
    \ - 10;\n    let mut prime_digits_count_12 = prime_digits_count - 11;\n    let\
    \ mut prime_digits_count_13 = prime_digits_count - 12;\n    let mut prime_digits_count_14\
    \ = prime_digits_count - 13;\n    let mut prime_digits_count_15 = prime_digits_count\
    \ - 14;\n    let mut prime_digits_count_16 = prime_digits_count - 15;\n    let\
    \ mut prime_digits_count_17 = prime_digits_count - 16;\n    let mut prime_digits_count_18\
    \ = prime_digits_count - 17;\n    let mut prime_digits_count_19 = prime_digits_count\
    \ - 18;\n    let mut prime_digits_count_20 = prime_digits_count - 19;\n    let\
    \ mut prime_digits_count_21 = prime_digits_count - 20;\n    let mut prime_digits_count_22\
    \ = prime_digits_count - 21;\n    let mut prime_digits_count_23 = prime_digits_count\
    \ - 22;\n    let mut prime_digits_count_24 = prime_digits_count - 23;\n    let\
    \ mut prime_digits_count_25 = prime_digits_count - 24;\n    let mut prime_digit\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppnjlut3j.rs:40:24\n   |\n\
    40 |     let mut prime_digit\n   |                        ^ help: add `;` here\n\
    41 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmppnjlut3j.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppnjlut3j.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppnjlut3j.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppnjlut3j.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppnjlut3j.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppnjlut3j.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppnjlut3j.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppnjlut3j.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppnjlut3j.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppnjlut3j.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n\n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk6rc601j.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk6rc601j.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk6rc601j.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk6rc601j.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = num.to_digits().parse().unwrap();\n    let mut prime:\
    \ isize = 2;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let mu\n}\n\nfn main() {\n\
    \    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpho7i_21f.rs:68:11\n   |\n\
    68 |     let mu\n   |           ^ help: add `;` here\n69 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpho7i_21f.rs:73:17\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpho7i_21f.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpho7i_21f.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpho7i_21f.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpho7i_21f.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpho7i_21f.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpho7i_21f.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpho7i_21f.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpho7i_21f.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpho7i_21f.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_digits = vec![false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, \n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmp_wcmugjf.rs:14:1\n   |\n14 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmp_wcmugjf.rs:13:32\n   |\n12 | fn hex_key(num: String) -> isize {\n \
    \  |                                  - closing delimiter possibly meant for this\n\
    13 |     let mut prime_digits = vec![false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, ...\n   |   \
    \                             ^ unclosed delimiter\n14 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_wcmugjf.rs:18:17\n   |\n18 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_wcmugjf.rs:18:25\n   |\n18 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_wcmugjf.rs:19:17\n   |\n19 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_wcmugjf.rs:19:25\n   |\n19 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_wcmugjf.rs:20:17\n  \
    \ |\n20 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_wcmugjf.rs:20:25\n   |\n20 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_wcmugjf.rs:21:17\n   |\n21 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_wcmugjf.rs:21:25\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |        "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ];\n    let mut primes_count: usize = 0;\n    let mut primes_count_2: usize =\
    \ 0;\n    let mut primes_count_3: usize = 0;\n    let mut primes_count_4: usize\
    \ = 0;\n    let mut primes_count_5: usize = 0;\n    let mut primes_count_6: usize\
    \ = 0;\n    let mut primes_count_7: usize = 0;\n    let mut primes_count_8: usize\
    \ = 0;\n    let mut primes_count_9: usize = 0;\n    let mut primes_count_10: usize\
    \ = 0;\n    let mut primes_count_11: usize = 0;\n    let mut primes_count_12:\
    \ usize = 0;\n    let mut primes_count_13: usize = 0;\n    let mut primes_count_14:\
    \ usize = 0;\n    let mut primes_count_15: usize = 0;\n    let mut primes_count_16:\
    \ usize = 0;\n    let mut primes_count_17: usize = 0;\n    let mut primes_count_18:\
    \ usize = 0;\n    let mut primes_count_19: usize = 0;\n    let mut primes_count_20:\
    \ usize = 0;\n    let mut primes_count_21: usize = 0;\n    let mut primes_count_22:\
    \ usize = 0;\n    let mut primes_count_23: usize = 0;\n    let mut primes_count_24:\
    \ usize = 0;\n    let mut primes_count_25: usize = 0;\n    let mut primes_count_26:\
    \ usize = 0;\n    let mut primes_count_27: usize = 0;\n    let mut primes_count_28:\
    \ usize = 0;\n    let mut primes_count_29: usize = 0;\n    let mut primes_count_30:\
    \ usize = 0;\n    let mut primes_count_31: usize = 0;\n    let mut primes_count_32:\
    \ usize = 0;\n    let mut primes_count_33: usize = 0;\n    let mut primes_count_34:\
    \ usize = 0;\n    let mut primes_count_35: usize = 0;\n    let mut primes_count_36:\
    \ usize = 0;\n    let mut primes_count_37: usize = 0;\n    let mut primes_count_38:\
    \ usize = 0;\n    let mut primes_count_39: \n}\n\nfn main() {\n    let candidate\
    \ = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `}`\n  --> /tmp/tmpbhmv24sh.rs:55:1\n   |\n\
    54 |     let mut primes_count_39: \n   |         ------------------- while parsing\
    \ the type for `mut primes_count_39`\n55 | }\n   | ^ expected type\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbhmv24sh.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbhmv24sh.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbhmv24sh.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbhmv24sh.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbhmv24sh.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbhmv24sh.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbhmv24sh.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbhmv24sh.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbhmv24sh.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbhmv24sh.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this s"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime: isize\
    \ = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let \n}\n\nfn main() {\n \
    \   let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp180x13g9.rs:70:1\n  \
    \ |\n70 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp180x13g9.rs:74:17\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:74:25\n \
    \  |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp180x13g9.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp180x13g9.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp180x13g9.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp180x13g9.rs:78:25\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp180x13g9.rs:79:17\n   |\n79 |     assert"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut prime_count = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_digits_prime = 0;\n    let mut num_digits_not_prime = 0;\n    let mut num_digits_not_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_not_prime = 0;\n    let mut num_digits_not_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_not_prime = 0;\n    let mut num_digits_not_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_not_prime = 0;\n    let mut\
    \ num_digits_not_prime_prime_prime_prime_prime = 0;\n    let mut num_digits_not_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime = 0;\n\
    \    let mut num_digits_not_prime_prime_prime_prime_prime_not_prime = 0;\n   \
    \ let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime = 0;\n    let\
    \ mut num_digits_not_prime_prime_prime_prime_prime_prime_not_prime = 0;\n    let\
    \ mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  \
    \  let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpma3ye1y9.rs:38:70\n   |\n\
    38 |     let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_\n \
    \  |                                                                      ^ help:\
    \ add `;` here\n39 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpma3ye1y9.rs:43:17\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpma3ye1y9.rs:43:25\n \
    \  |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpma3ye1y9.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpma3ye1y9.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpma3ye1y9.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpma3ye1y9.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpma3ye1y9.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpma3ye1y9.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpma3ye1y9.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpma3ye1y9.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right})"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![];\n    let mut prime_found = false;\n  \
    \  loop {\n        if digits.len() == 0 {\n            break;\n        }\n   \
    \     let digit = digits.remove(0).unwrap();\n        if digit == 'A' || digit\
    \ == 'B' || digit == 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n \
    \           prime_found = true;\n        }\n        if digit == '2' || digit ==\
    \ '3' || digit == '5' || digit == '7' || digit == 'B' || digit == 'D' {\n    \
    \        prime_found = true;\n        }\n        if digit == '2' || digit == '3'\
    \ || digit == '5' || digit == '7' || digit == 'B' || digit == 'D' || digit ==\
    \ 'E' || digit == 'F' {\n            prime_found = true;\n        }\n        if\
    \ digit == '2' || digit == '3' || digit == '5' || digit == '7' || digit == 'B'\
    \ || digit == 'D' || digit == 'E' || digit == 'F' || digit == 'A' || digit ==\
    \ 'C' || digit == 'F' {\n            prime_found = true;\n        }\n        if\
    \ digit == '2' || digit == '3' || digit == '5' || digit == '7' || digit == 'B'\
    \ || digit == 'D' || digit == 'E' || digit == 'F' || digit == 'A' || digit ==\
    \ 'C' || digit == 'F' || digit == 'A' || digit == 'C' || digit == 'F' {\n    \
    \        prime_found = true;\n        }\n        if digit == '2' || digit == '3'\
    \ || digit == '5' || digit == '7' || digit == 'B' || digit == 'D' || digit ==\
    \ 'E' || digit == 'F' || digit == 'A' || digit == 'C' || digit == 'F' || digit\
    \ == 'A' || digit == 'C' || digit == 'F' || digit == 'A' || digit == 'C' || digit\
    \ == 'F' {\n            prime_found = true;\n        }\n        if digit == '2'\
    \ || digit == '3' || digit == '5' || digit == '7' || digit == 'B' || digit ==\
    \ 'D' || digit == 'E' || digit == 'F' || digit == 'A' || digit == 'C' || digit\
    \ == 'F' || digit == 'A' || digit == 'C' || digit == 'F' || digit == 'A' || digit\
    \ == 'C' || digit == 'F' || digit == 'A' || digit == 'C' || digit == 'F' {\n \
    \           prime_found = true;\n        }\n        if digit == '2' || digit ==\
    \ '3' || digit == '5' || digit == '7' || digit == 'B' || digit == 'D' || digit\
    \ == 'E' || digit == 'F' || digit \n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpyzl_dy2d.rs:54:3\n\
    \   |\n12 | fn hex_key(num: String) -> isize {\n   |                         \
    \         - unclosed delimiter\n...\n17 |     loop {\n   |          - this delimiter\
    \ might not be properly closed...\n...\n44 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n54 | }\n   |   ^\n\nerror: expected `{`,\
    \ found `}`\n  --> /tmp/tmpyzl_dy2d.rs:44:1\n   |\n43 |         if digit == '2'\
    \ || digit == '3' || digit == '5' || digit == '7' || digit == 'B' || digit ==\
    \ 'D' || digit == 'E' || digit == 'F' |...\n   |         -- this `if` expression\
    \ has a condition, but no block\n44 | }\n   | ^ expected `{`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyzl_dy2d.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyzl_dy2d.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyzl_dy2d.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyzl_dy2d.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyzl_dy2d.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyzl_dy2d.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyzl_dy2d.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyzl_dy2d.rs:51:25\n   |\n51 |  "
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![2, 3];\n    let mut primes_found: Vec<isize>\
    \ = vec![2, 3];\n    let mut primes_found2: Vec<isize> = vec![2, 3];\n    let\
    \ mut primes_found3: Vec<isize> = vec![2, 3];\n    let mut primes_found4: Vec<isize>\
    \ = vec![2, 3];\n    let mut primes_found5: Vec<isize> = vec![2, 3];\n    let\
    \ mut primes_found6: Vec<isize> = vec![2, 3];\n    let mut primes_found7: Vec<isize>\
    \ = vec![2, 3];\n    let mut primes_found8: Vec<isize> = vec![2, 3];\n    let\
    \ mut primes_found9: Vec<isize> = vec![2, 3];\n    let mut primes_found10: Vec<isize>\
    \ = vec![2, 3];\n    let mut primes_found11: Vec<isize> = vec![2, 3];\n    let\
    \ mut primes_found12: Vec<isize> = vec![2, 3];\n    let mut primes_found13: Vec<isize>\
    \ = vec![2, 3];\n    let mut primes_found14: Vec<isize> = vec![2, 3];\n    let\
    \ mut primes_found15: Vec<isize> = vec![2, 3];\n    let mut primes_found16: Vec<isize>\
    \ = vec![2, 3];\n    let mut primes_found17: Vec<isize> = vec![2, 3];\n    let\
    \ mut primes_found18: Vec<isize> = vec![2, 3];\n    let mut primes_found19: Vec<isize>\
    \ = vec![2, 3];\n    let mut primes_found20: Vec<isize> = vec![2, 3];\n    let\
    \ mut primes_found21: Vec<isize> = vec![2, 3];\n    let mut primes_found22: Vec<isize>\
    \ = vec![2, 3];\n    let mut primes_found23: Vec<isize> = vec![2, 3];\n    let\
    \ mut primes_found24: Vec<i\n}\n\nfn main() {\n    let candidate = hex_key;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmpdq18l6vs.rs:40:1\n   |\n39 |     let mut primes_found24:\
    \ Vec<i\n   |         ------------------       - expected one of 9 possible tokens\n\
    \   |         |\n   |         while parsing the type for `mut primes_found24`\n\
    40 | }\n   | ^ unexpected token\n   |\nhelp: you might have meant to end the type\
    \ parameters here\n   |\n39 |     let mut primes_found24: Vec<i>\n   |       \
    \                           +\nhelp: use `=` if you meant to assign\n   |\n39\
    \ |     let mut primes_found24 = Vec<i\n   |                            ~\n\n\
    error: expected `;`, found `}`\n  --> /tmp/tmpdq18l6vs.rs:39:34\n   |\n39 |  \
    \   let mut primes_found24: Vec<i\n   |                                  ^ help:\
    \ add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0423]: expected value,\
    \ found struct `Vec`\n   --> /tmp/tmpdq18l6vs.rs:39:29\n    |\n39  |       let\
    \ mut primes_found24: Vec<i\n    |                               ^^^ help: use\
    \ struct literal syntax instead: `Vec { buf: val, len: val }`\n\nerror[E0425]:\
    \ cannot find value `i` in this scope\n  --> /tmp/tmpdq18l6vs.rs:39:33\n   |\n\
    39 |     let mut primes_found24: Vec<i\n   |                                 ^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdq18l6vs.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdq18l6vs.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdq18l6vs.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdq18l6vs.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdq18l6vs.rs:"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num_digits = num.len();\n    let mut num_primes = 0;\n    let mut\
    \ num_primes_found = 0;\n    let mut num_primes_found2 = 0;\n    let mut num_primes_found3\
    \ = 0;\n    let mut num_primes_found4 = 0;\n    let mut num_primes_found5 = 0;\n\
    \    let mut num_primes_found6 = 0;\n    let mut num_primes_found7 = 0;\n    let\
    \ mut num_primes_found8 = 0;\n    let mut num_primes_found9 = 0;\n    let mut\
    \ num_primes_found10 = 0;\n    let mut num_primes_found11 = 0;\n    let mut num_primes_found12\
    \ = 0;\n    let mut num_primes_found13 = 0;\n    let mut num_primes_found14 =\
    \ 0;\n    let mut num_primes_found15 = 0;\n    let mut num_primes_found16 = 0;\n\
    \    let mut num_primes_found17 = 0;\n    let mut num_primes_found18 = 0;\n  \
    \  let mut num_primes_found19 = 0;\n    let mut num_primes_found20 = 0;\n    let\
    \ mut num_primes_found21 = 0;\n    let mut num_primes_found22 = 0;\n    let mut\
    \ num_primes_found23 = 0;\n    let mut num_primes_found24 = 0;\n    let mut num_primes_found25\
    \ = 0;\n    let mut num_primes_found26 = 0;\n    let mut num_primes_found27 =\
    \ 0;\n    let mut num_primes_found28 = 0;\n    let mut num_primes_found29 = 0;\n\
    \    let mut num_primes_found30 = 0;\n    let mut num_primes_found31 = 0;\n  \
    \  let mut num_primes_found32 = 0;\n    let mut num_primes_found33 = 0;\n    let\
    \ mut num_primes_found34 = 0;\n    let mut num_primes_found35 = 0;\n    let mut\
    \ num_primes_found36 = 0;\n    let mut num_primes_found37 = 0;\n    let mut num_primes_found38\
    \ = 0;\n    let mut num_primes_found39 = 0;\n    let mut num_primes_found40 =\
    \ 0;\n    let mut num_primes_found41 = 0;\n    let mut num_primes_found42 = 0;\n\
    \    let mut num_primes_found43 = 0;\n    let mut num_primes_found44 = 0;\n  \
    \  let mut num_primes_found45 = 0;\n    let mut num_primes_found46 = 0;\n    let\
    \ mut num_primes_found47 = 0;\n    let mut num_primes_found48 = 0;\n    let mut\
    \ num_primes_found49 = 0;\n    let mut num_primes_found50 = 0;\n}\n\nfn main()\
    \ {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:69:17\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_mp6lv3w.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_mp6lv3w.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_mp6lv3w.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_mp6lv3w.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_mp6lv3w.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime: isize = 2;\n    let\
    \ mut i: usize = 0;\n    while i < digits.len() {\n        let digit = digits[i];\n\
    \        if digit == '0' {\n            primes.push(digit);\n        }\n     \
    \   if digit == 'A' || digit == 'B' || digit == 'C' || digit == 'D' || digit ==\
    \ 'E' || digit == 'F' {\n            primes.push(digit);\n        }\n        i\
    \ += 1;\n    }\n    for prime in primes {\n        if prime < 10 {\n         \
    \   num += prime;\n        } else {\n            num += prime - 10;\n        }\n\
    \    }\n    return num;\n}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpji6m3rzi.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpji6m3rzi.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpji6m3rzi.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpji6m3rzi.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpji6m3rzi.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpji6m3rzi.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpji6m3rzi.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpji6m3rzi.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpji6m3rzi.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpji6m3rzi.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpji6m3rzi.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    for d in digits {\n        let mut digit: isize = 0;\n        let mut is_prime:\
    \ isize = 0;\n        let mut is_odd: isize = 0;\n        let mut is_even: isize\
    \ = 0;\n        let mut is_prime_odd: isize = 0;\n        let mut is_prime_even:\
    \ isize = 0;\n        let mut is_odd_even: isize = 0;\n        let mut is_odd_odd:\
    \ isize = 0;\n        let mut is_even_even: isize = 0;\n        let mut is_even_odd:\
    \ isize = 0;\n        let mut is_odd_even_even: isize = 0;\n        let mut is_odd_even_odd:\
    \ isize = 0;\n        let mut is_even_odd_even: isize = 0;\n        let mut is_even_odd_odd:\
    \ isize = 0;\n        let mut is_odd_even_odd_even: isize = 0;\n        let mut\
    \ is_odd_even_odd_odd: isize = 0;\n        let mut is_even_odd_odd_even: isize\
    \ = 0;\n        let mut is_even_odd_odd_odd: isize = 0;\n        let mut is_odd_even_odd_odd_even:\
    \ isize = 0;\n        let mut is_odd_even_odd_odd_odd: isize = 0;\n        let\
    \ mut is_even_odd_odd_odd_even: isize = 0;\n        let mut is_even_odd_odd_odd_odd:\
    \ isize = 0;\n        let mut is_odd_even_odd_odd_odd_even: isize = 0;\n     \
    \   let mut is_odd_even_odd_odd_odd_odd: isize = 0;\n        let mut is_even_odd_odd_odd_odd_even:\
    \ isize = 0;\n        let mut is_even_odd_odd_odd_odd_odd: isize = 0;\n      \
    \  let mut is_odd_even_odd_odd_odd_odd_even: isize = 0;\n        let mut is_odd_even_odd_odd_odd_odd_odd:\
    \ isize = 0;\n        let mut is_even_odd_odd_odd_odd_odd_even: isize = 0;\n \
    \       let mut is_even_odd_odd_odd_odd_odd_odd: isize = 0;\n        let mut is_odd_even_od\n\
    }\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpn62nf81e.rs:57:3\n\
    \   |\n12 | fn hex_key(num: String) -> isize {\n   |                         \
    \         - unclosed delimiter\n...\n15 |     for d in digits {\n   |        \
    \             - this delimiter might not be properly closed...\n...\n47 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n57 | }\n\
    \   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpn62nf81e.rs:46:31\n\
    \   |\n46 |         let mut is_odd_even_od\n   |                             \
    \  ^ help: add `;` here\n47 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn62nf81e.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn62nf81e.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn62nf81e.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn62nf81e.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpn62nf81e.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpn62nf81e.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn62nf81e.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn62nf81e.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\ner"
  stdout: ''
  timestamp: 1660010752
- exit_code: 1
  program: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n/// digits that are\
    \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may\
    \ assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n \
    \   let mut num_digits = num.len();\n    let mut prime_count = 0;\n    let mut\
    \ prime_digits = vec![0; 8];\n    let mut prime_digits_index = 0;\n    let mut\
    \ prime_digits_index2 = 0;\n    let mut prime_digits_index3 = 0;\n    let mut\
    \ prime_digits_index4 = 0;\n    let mut prime_digits_index5 = 0;\n    let mut\
    \ prime_digits_index6 = 0;\n    let mut prime_digits_index7 = 0;\n    let mut\
    \ prime_digits_index8 = 0;\n    let mut prime_digits_index9 = 0;\n    let mut\
    \ prime_digits_index10 = 0;\n    let mut prime_digits_index11 = 0;\n    let mut\
    \ prime_digits_index12 = 0;\n    let mut prime_digits_index13 = 0;\n    let mut\
    \ prime_digits_index14 = 0;\n    let mut prime_digits_index15 = 0;\n    let mut\
    \ prime_digits_index16 = 0;\n    let mut prime_digits_index17 = 0;\n    let mut\
    \ prime_digits_index18 = 0;\n    let mut prime_digits_index19 = 0;\n    let mut\
    \ prime_digits_index20 = 0;\n    let mut prime_digits_index21 = 0;\n    let mut\
    \ prime_digits_index22 = 0;\n    let mut prime_digits_index23 = 0;\n    let mut\
    \ prime_digits_index24 = 0;\n    let mut prime_digits_index25 = 0;\n    let mut\
    \ prime_digits_index26 = 0;\n    let mut prime_digits_index27 = 0;\n    let mut\
    \ prime_digits_index28 = 0;\n    let mut prime_digits_index29 = 0;\n    let mut\
    \ prime_digits_index30 = 0;\n    let mut prime_digits_index31 = 0;\n    let mut\
    \ prime_digits_index32 = 0;\n    let mut prime_digits_index33 = 0;\n    let mut\
    \ prime_digits_index34 = 0;\n    let mut prime_digits_index35 = 0;\n    let mut\
    \ prime_digits_index36 = 0;\n    let mut prime_digits_index37 = 0;\n    let mut\
    \ prime_digits_index38 = 0;\n    let mut prime_digits_index39 = 0;\n    let mut\
    \ prime_digits_index40 = 0;\n    let mut prime_digits_index41 = 0;\n    let mut\
    \ prime_digits_index42 = 0;\n    let mut prime_digits_index43 = 0;\n    let mut\
    \ prime_digits_index44 = 0;\n    let mu\n}\n\nfn main() {\n    let candidate =\
    \ hex_key;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0looojrb.rs:60:11\n   |\n\
    60 |     let mu\n   |           ^ help: add `;` here\n61 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0looojrb.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0looojrb.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0looojrb.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0looojrb.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0looojrb.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0looojrb.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0looojrb.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0looojrb.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0looojrb.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0looojrb.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1660010752
