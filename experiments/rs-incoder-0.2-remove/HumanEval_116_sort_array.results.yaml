language: rs
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter() {\n        let mut count = 0;\n     \
    \   for j in 0..i {\n            if j % 2 == 0 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_by_key(|x| {\n        let mut count = 0;\n\
    \        for j in 0..x {\n            if j % 2 == 0 {\n                count +=\
    \ 1;\n            }\n        }\n        count / 2\n    });\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdo2_j4ek.rs:9:21\n  |\n9 |\
    \         for j in 0..i {\n  |                     ^ expected integer, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |         for j in 0..*i\
    \ {\n  |                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdo2_j4ek.rs:20:21\n\
    \   |\n20 |         for j in 0..x {\n   |                     ^ expected integer,\
    \ found `&&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdo2_j4ek.rs:27:5\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n27 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for &i in arr {\n       \
    \ if i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    let mut i = 0;\n    for &i\
    \ in ones {\n        result.push(i + (*ones)[i as usize]);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7qqltbdy.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7qqltbdy.rs:17:9\n   |\n17 |     for &i in ones {\n   |\
    \         ^^    ---- this expression has type `isize`\n   |         |\n   |  \
    \       expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747890
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    for i in ones {\n       \
    \ result.push(i);\n    }\n    for i in result {\n        result.push(i);\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `result`\n   --> /tmp/tmp13ygzimb.rs:20:9\n\
    \    |\n6   |     let mut result = vec![];\n    |         ---------- move occurs\
    \ because `result` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n19  |     for i in result {\n    |              ------\n    |  \
    \            |\n    |              `result` moved due to this implicit call to\
    \ `.into_iter()`\n    |              help: consider borrowing to avoid moving\
    \ into the for loop: `&result`\n20  |         result.push(i);\n    |         ^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `result`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for x in arr {\n        if x == 0\
    \ {\n            ones.push(x);\n        } else {\n            let mut i = 0;\n\
    \            while i < ones.size() && ones[i] != x {\n                i += 1;\n\
    \            }\n            result.push(i);\n            ones.push(x);\n     \
    \   }\n    }\n    result.sort_by(|a, b| {\n        let mut i = 0;\n        while\
    \ i < ones.size() && ones[i] != a {\n            i += 1;\n        }\n        i\
    \ - ones[i]\n    });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<isize>` in the\
    \ current scope\n  --> /tmp/tmp1eoe83zg.rs:13:28\n   |\n13 |             while\
    \ i < ones.size() && ones[i] != x {\n   |                            ^^^^ method\
    \ not found in `Vec<isize>`\n\nerror[E0599]: no method named `size` found for\
    \ struct `Vec<isize>` in the current scope\n  --> /tmp/tmp1eoe83zg.rs:22:24\n\
    \   |\n22 |         while i < ones.size() && ones[i] != a {\n   |            \
    \            ^^^^ method not found in `Vec<isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1eoe83zg.rs:22:45\n   |\n22 |         while i < ones.size()\
    \ && ones[i] != a {\n   |                                             ^ expected\
    \ `isize`, found `&usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1eoe83zg.rs:25:13\n\
    \   |\n25 |         i - ones[i]\n   |             ^^^^^^^ expected `usize`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1eoe83zg.rs:25:9\n\
    \   |\n25 |         i - ones[i]\n   |         ^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `usize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp1eoe83zg.rs:25:11\n\
    \   |\n25 |         i - ones[i]\n   |           ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1eoe83zg.rs:27:5\n   |\n5  | fn\
    \ sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                          \
    \         ---------- expected `Vec<isize>` because of return type\n...\n27 | \
    \    result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    });\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk1ci49i0.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk1ci49i0.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n --> /tmp/tmpk1ci49i0.rs:5:35\n \
    \ |\n5 | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n  |    ----------   \
    \                  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        if x == 0 {\n    \
    \        0\n        } else {\n            binary_to_decimal(x)\n        }\n  \
    \  });\n    sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n  \
    \  assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `binary_to_decimal` in this scope\n\
    \  --> /tmp/tmpow7c9u_x.rs:11:13\n   |\n11 |             binary_to_decimal(x)\n\
    \   |             ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n --> /tmp/tmpow7c9u_x.rs:8:14\n  |\n8 | \
    \        if x == 0 {\n  |              ^^ no implementation for `&isize == {integer}`\n\
    \  |\n  = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut i = 0;\n    while i < arr.len() {\n        let mut\
    \ j = i;\n        while j < arr.len() && arr[j] == 0 {\n            j = j + 1;\n\
    \        }\n        if j - i > 1 {\n            result.push(i + arr[j] - arr[i]);\n\
    \            i = j;\n        } else {\n            result.push(i);\n         \
    \   i = i + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3bjad0w8.rs:14:29\n   |\n\
    14 |             result.push(i + arr[j] - arr[i]);\n   |                     \
    \        ^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize`\
    \ to `usize`\n  --> /tmp/tmp3bjad0w8.rs:14:27\n   |\n14 |             result.push(i\
    \ + arr[j] - arr[i]);\n   |                           ^ no implementation for\
    \ `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3bjad0w8.rs:14:38\n\
    \   |\n14 |             result.push(i + arr[j] - arr[i]);\n   |              \
    \                        ^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp3bjad0w8.rs:14:36\n   |\n\
    14 |             result.push(i + arr[j] - arr[i]);\n   |                     \
    \               ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3bjad0w8.rs:21:5\n   |\n5  | fn sort_array(arr: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                   ---------- expected\
    \ `Vec<isize>` because of return type\n...\n21 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut zeros = Vec::new();\n\
    \    let mut max_ones = Vec::new();\n    let mut max_zeros = Vec::new();\n   \
    \ for &i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n      \
    \  } else {\n            zeros.push(i);\n        }\n    }\n    for i in ones {\n\
    \        if zeros.len() > 0 {\n            max_ones.push(i);\n            max_zeros.push(zeros.pop());\n\
    \        } else {\n            max_ones.push(i);\n        }\n    }\n    for i\
    \ in max_ones {\n        result.push(i);\n    }\n    for i in max_zeros {\n  \
    \      result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzckwilrm.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzckwilrm.rs:30:21\n   |\n30 |         result.push(i);\n\
    \   |                     ^ cyclic type of infinite size\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut res\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            res.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    res.sort_by(|a, b| {\n  \
    \      ones[a].cmp(&ones[b])\n    });\n    res\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpe2hfzpe8.rs:17:9\n\
    \   |\n17 |         ones[a].cmp(&ones[b])\n   |         ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `&isize`\n  --> /tmp/tmpe2hfzpe8.rs:17:22\n   |\n17 | \
    \        ones[a].cmp(&ones[b])\n   |                      ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in i {\n            if j == 1 {\n                count += 1;\n           \
    \ }\n        }\n        result.push(count);\n    }\n    result.sort_by_key(|x|\
    \ x.to_dec());\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n   --> /tmp/tmp80w_8i4q.rs:9:18\n\
    \    |\n9   |         for j in i {\n    |                  ^ `&isize` is not an\
    \ iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&isize`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\nnote: required by `into_iter`\n\nerror[E0599]: no method named\
    \ `to_dec` found for reference `&{integer}` in the current scope\n  --> /tmp/tmp80w_8i4q.rs:16:30\n\
    \   |\n16 |     result.sort_by_key(|x| x.to_dec());\n   |                    \
    \          ^^^^^^ method not found in `&{integer}`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in 0..i {\n            if j % 2 == 0 {\n                count += 1;\n    \
    \        }\n        }\n        result.push(count);\n    }\n    result.sort_by_key(|x|\
    \ x.to_dec());\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkrtdqwrh.rs:9:21\n  |\n9 |\
    \         for j in 0..i {\n  |                     ^ expected integer, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |         for j in 0..*i\
    \ {\n  |                     +\n\nerror[E0599]: no method named `to_dec` found\
    \ for reference `&{integer}` in the current scope\n  --> /tmp/tmpkrtdqwrh.rs:16:30\n\
    \   |\n16 |     result.sort_by_key(|x| x.to_dec());\n   |                    \
    \          ^^^^^^ method not found in `&{integer}`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n     \
    \       1\n        } else {\n            -1\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsqsgjbhd.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsqsgjbhd.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        let mut count = 0;\n\
    \        for i in 0..32 {\n            if x & (1 << i) != 0 {\n              \
    \  count += 1;\n            }\n        }\n        count\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp4_z_iocy.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter() {\n        let mut count = 0;\n     \
    \   for j in i {\n            if j == 1 {\n                count += 1;\n     \
    \       }\n        }\n        result.push((count as isize).cmp(&i));\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n   --> /tmp/tmprf_zqz1u.rs:9:18\n\
    \    |\n9   |         for j in i {\n    |                  ^ `&isize` is not an\
    \ iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&isize`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\nnote: required by `into_iter`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprf_zqz1u.rs:16:5\n   |\n5  | fn sort_array(arr: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                   ---------- expected `Vec<isize>`\
    \ because of return type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found enum `std::cmp::Ordering`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<std::cmp::Ordering>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for &i in arr {\n       \
    \ if i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    result = sort_array(result);\n\
    \    result.extend(ones);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplttxercd.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747890
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    });\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk1ci49i0.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk1ci49i0.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n --> /tmp/tmpk1ci49i0.rs:5:35\n \
    \ |\n5 | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n  |    ----------   \
    \                  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        let mut i = x;\n \
    \       let mut j = x;\n        while i > 0 && j > 0 {\n            if i & 1 ==\
    \ 1 {\n                i >>= 1;\n            } else {\n                j >>= 1;\n\
    \            }\n        }\n        j\n    });\n    sorted_arr\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75jrcii1.rs:10:19\n   |\n\
    10 |         while i > 0 && j > 0 {\n   |                   ^\n   |          \
    \         |\n   |                   expected `&isize`, found integer\n   |   \
    \                help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp75jrcii1.rs:10:28\n   |\n10 |         while i > 0 && j\
    \ > 0 {\n   |                            ^\n   |                            |\n\
    \   |                            expected `&isize`, found integer\n   |      \
    \                      help: consider borrowing here: `&0`\n\nerror[E0368]: binary\
    \ assignment operation `>>=` cannot be applied to type `&isize`\n  --> /tmp/tmp75jrcii1.rs:12:17\n\
    \   |\n12 |                 i >>= 1;\n   |                 -^^^^^^\n   |     \
    \            |\n   |                 cannot use `>>=` on type `&isize`\n   |\n\
    help: `>>=` can be used on `isize`, you can dereference `i`\n   |\n12 |      \
    \           *i >>= 1;\n   |                 +\n\nerror[E0368]: binary assignment\
    \ operation `>>=` cannot be applied to type `&isize`\n  --> /tmp/tmp75jrcii1.rs:14:17\n\
    \   |\n14 |                 j >>= 1;\n   |                 -^^^^^^\n   |     \
    \            |\n   |                 cannot use `>>=` on type `&isize`\n   |\n\
    help: `>>=` can be used on `isize`, you can dereference `j`\n   |\n14 |      \
    \           *j >>= 1;\n   |                 +\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j\
    \ = i;\n        while j < arr.len() && arr[j] == 1 {\n            j += 1\n   \
    \     }\n        if j == i {\n            result.push(i);\n            i += 1;\n\
    \        } else {\n            let mut k = i;\n            while k > 0 && arr[k]\
    \ == 0 {\n                k -= 1\n            }\n            result.push(k);\n\
    \            i = k + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9stzbqcx.rs:25:5\n   |\n\
    5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    25 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for &i in arr {\n       \
    \ if i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    let mut i = 0;\n    for &i\
    \ in ones {\n        result.push(i);\n    }\n    for &i in result {\n        i\
    \ += i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2noercu2.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2noercu2.rs:17:9\n   |\n17 |     for &i in ones {\n   |\
    \         ^^    ---- this expression has type `isize`\n   |         |\n   |  \
    \       expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2noercu2.rs:20:9\n\
    \   |\n20 |     for &i in result {\n   |         ^^    ------ this expression\
    \ has type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort();\n    sorted_arr\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmplvyndfgh.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut decimal = Vec::new();\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut ones_cnt = 0;\n\
    \        let mut decimal_cnt = 0;\n        for j in 0..i {\n            if arr[j]\
    \ == 1 {\n                ones_cnt += 1;\n            }\n            if arr[j]\
    \ == 0 {\n                decimal_cnt += 1;\n            }\n        }\n      \
    \  if ones_cnt > decimal_cnt {\n            result.push(arr[i]);\n           \
    \ i += 1;\n        } else {\n            result.push(decimal[decimal_cnt]);\n\
    \            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `Vec<T>`\n --> /tmp/tmp2kg_1gpk.rs:7:20\n\
    \  |\n7 |     let mut ones = Vec::new();\n  |         --------   ^^^^^^^^ cannot\
    \ infer type for type parameter `T`\n  |         |\n  |         consider giving\
    \ `ones` the explicit type `Vec<T>`, where the type parameter `T` is specified\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut zeros = Vec::new();\n\
    \    for &i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n   \
    \     } else {\n            zeros.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    zeros = sort_array(zeros);\n    for &i in ones {\n        result.push(i);\n\
    \    }\n    for &i in zeros {\n        result.push(i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4qix0ju6.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4qix0ju6.rs:18:9\n   |\n18 |     for &i in ones {\n   |       \
    \  ^^    ---- this expression has type `Option<isize>`\n   |         |\n   | \
    \        expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4qix0ju6.rs:21:9\n\
    \   |\n21 |     for &i in zeros {\n   |         ^^    ----- this expression has\
    \ type `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `i`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut decimal = Vec::new();\n\
    \    for &i in arr {\n        if i == 1 {\n            ones.push(i);\n       \
    \ } else {\n            decimal.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    decimal = sort_array(decimal);\n    for i in 0..decimal.len() {\n       \
    \ result.push(decimal[i]);\n    }\n    for i in 0..ones.len() {\n        result.push(ones[i]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx1djki5r.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n     \
    \       1\n        } else if a < b {\n            -1\n        } else {\n     \
    \       0\n        }\n    });\n    sorted_arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx57v9r1e.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx57v9r1e.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx57v9r1e.rs:13:13\n\
    \   |\n13 |             0\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        while\
    \ i & 1 == 1 {\n            i >>= 1;\n            count += 1;\n        }\n   \
    \     result.push((count as isize).cmp(&i));\n    }\n    result.sort_by_key(|x|\
    \ x.cmp(&x.to_dec()));\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `>>=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmpxgdt77r1.rs:10:13\n   |\n10 |             i >>= 1;\n\
    \   |             -^^^^^^\n   |             |\n   |             cannot use `>>=`\
    \ on type `&isize`\n   |\nhelp: `>>=` can be used on `isize`, you can dereference\
    \ `i`\n   |\n10 |             *i >>= 1;\n   |             +\n\nerror[E0599]: no\
    \ method named `to_dec` found for reference `&std::cmp::Ordering` in the current\
    \ scope\n  --> /tmp/tmpxgdt77r1.rs:15:37\n   |\n15 |     result.sort_by_key(|x|\
    \ x.cmp(&x.to_dec()));\n   |                                     ^^^^^^ method\
    \ not found in `&std::cmp::Ordering`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxgdt77r1.rs:16:5\n   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                   ---------- expected `Vec<isize>` because\
    \ of return type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ enum `std::cmp::Ordering`\n   |\n   = note: expected struct `Vec<isize>`\n \
    \             found struct `Vec<std::cmp::Ordering>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0368, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n      \
    \      1\n        } else {\n            -1\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9t1a_6kd.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9t1a_6kd.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr {\n        let mut count = 0;\n        while i &\
    \ 1 != 0 {\n            i >>= 1;\n            count += 1;\n        }\n       \
    \ result.push(count);\n    }\n    result.sort_by_key(|x| x.cmp(&x.to_dec()));\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_dec` found for reference `&{integer}`\
    \ in the current scope\n  --> /tmp/tmpu_0z2xmh.rs:15:37\n   |\n15 |     result.sort_by_key(|x|\
    \ x.cmp(&x.to_dec()));\n   |                                     ^^^^^^ method\
    \ not found in `&{integer}`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter() {\n        let mut count = 0;\n     \
    \   while i & 1 == 1 {\n            i >>= 1;\n            count += 1;\n      \
    \  }\n        result.push(count);\n    }\n    result.sort_by_key(|x| x.to_dec());\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `>>=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmpnt1sk09r.rs:10:13\n   |\n10 |             i >>= 1;\n\
    \   |             -^^^^^^\n   |             |\n   |             cannot use `>>=`\
    \ on type `&isize`\n   |\nhelp: `>>=` can be used on `isize`, you can dereference\
    \ `i`\n   |\n10 |             *i >>= 1;\n   |             +\n\nerror[E0599]: no\
    \ method named `to_dec` found for reference `&{integer}` in the current scope\n\
    \  --> /tmp/tmpnt1sk09r.rs:15:30\n   |\n15 |     result.sort_by_key(|x| x.to_dec());\n\
    \   |                              ^^^^^^ method not found in `&{integer}`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0368, E0599.\nFor more information about an error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut decimal = Vec::new();\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let one = arr[i] & 1;\n\
    \        ones.push(one);\n        decimal += one;\n        i += 1;\n    }\n  \
    \  decimal.sort();\n    ones.sort(|a, b| a.cmp(b));\n    for i in 0..decimal.len()\
    \ {\n        let mut j = i;\n        while j > 0 && decimal[j - 1] == 0 {\n  \
    \          j -= 1;\n        }\n        result.push(ones[j]);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n  --> /tmp/tmpso8pnh5w.rs:13:9\n   |\n13 |         decimal += one;\n\
    \   |         -------^^^^^^^\n   |         |\n   |         cannot use `+=` on\
    \ type `Vec<_>`\n\nerror[E0061]: this function takes 0 arguments but 1 argument\
    \ was supplied\n   --> /tmp/tmpso8pnh5w.rs:17:10\n    |\n17  |     ones.sort(|a,\
    \ b| a.cmp(b));\n    |          ^^^^ --------------- supplied 1 argument\n   \
    \ |          |\n    |          expected 0 arguments\n    |\nnote: associated function\
    \ defined here\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0061, E0368.\nFor more information about an error, try\
    \ `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpeossukga.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n     \
    \       1\n        } else {\n            -1\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsqsgjbhd.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsqsgjbhd.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in i {\n            if j == 1 {\n                count += 1;\n           \
    \ }\n        }\n        result.push((count as isize).cmp(&i));\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n --> /tmp/tmpmvb7l4ce.rs:9:18\n\
    \  |\n9 |         for j in i {\n  |                  ^ `&isize` is not an iterator\n\
    \  |\n  = help: the trait `Iterator` is not implemented for `&isize`\n  = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmvb7l4ce.rs:16:5\n   |\n5  | fn\
    \ sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                          \
    \         ---------- expected `Vec<isize>` because of return type\n...\n16 | \
    \    result\n   |     ^^^^^^ expected `isize`, found enum `std::cmp::Ordering`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<std::cmp::Ordering>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut counter = vec![];\n    for i in arr {\n        if counter.len()\
    \ == 0 {\n            counter.push(i);\n        } else {\n            if counter[counter.len()\
    \ - 1] == i {\n                counter[counter.len() - 1] += 1;\n            }\
    \ else {\n                result.push(counter.len());\n                counter.push(i);\n\
    \            }\n        }\n    }\n    result.push(counter.len());\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplmjb_bwa.rs:21:5\n   |\n\
    5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        while\
    \ i & 1 == 0 {\n            i >>= 1;\n            count += 1;\n        }\n   \
    \     result.push((count as isize).cmp(&i));\n    }\n    result.sort_by_key(|x|\
    \ x.cmp(&0));\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `>>=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmpq9py3b95.rs:10:13\n   |\n10 |             i >>= 1;\n\
    \   |             -^^^^^^\n   |             |\n   |             cannot use `>>=`\
    \ on type `&isize`\n   |\nhelp: `>>=` can be used on `isize`, you can dereference\
    \ `i`\n   |\n10 |             *i >>= 1;\n   |             +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpq9py3b95.rs:15:34\n   |\n15 |     result.sort_by_key(|x|\
    \ x.cmp(&0));\n   |                                  ^^ expected enum `std::cmp::Ordering`,\
    \ found integer\n   |\n   = note: expected reference `&std::cmp::Ordering`\n \
    \             found reference `&{integer}`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpq9py3b95.rs:16:5\n   |\n5  | fn sort_array(arr: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                   ---------- expected `Vec<isize>`\
    \ because of return type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found enum `std::cmp::Ordering`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<std::cmp::Ordering>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < arr.len()\
    \ {\n        while j < arr.len() && arr[j] == i {\n            j += 1\n      \
    \  }\n        if j == arr.len() {\n            result.push(i);\n            i\
    \ += 1;\n        } else {\n            let mut k = j;\n            while k > 0\
    \ && arr[k - 1] > i {\n                k -= 1\n            }\n            result.push(i);\n\
    \            result.push(arr[k]);\n            i += 1;\n            j = k + 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaqqcphqv.rs:10:42\n   |\n\
    10 |         while j < arr.len() && arr[j] == i {\n   |                      \
    \                    ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    10 |         while j < arr.len() && arr[j] == i.try_into().unwrap() {\n   |  \
    \                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaqqcphqv.rs:18:41\n   |\n18 |             while\
    \ k > 0 && arr[k - 1] > i {\n   |                                         ^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |             while k\
    \ > 0 && arr[k - 1] > i.try_into().unwrap() {\n   |                          \
    \                ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpaqqcphqv.rs:22:25\n   |\n22 |             result.push(arr[k]);\n   |\
    \                         ^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n22 |             result.push(arr[k].try_into().unwrap());\n   | \
    \                              ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpaqqcphqv.rs:27:5\n   |\n5  | fn sort_array(arr: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                   ---------- expected\
    \ `Vec<isize>` because of return type\n...\n27 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = 0;\n    let mut decimal = 0;\n    for &i in\
    \ arr {\n        if i & 1 == 1 {\n            ones += 1;\n        } else {\n \
    \           decimal += i;\n        }\n    }\n    if ones > 0 {\n        result.sort_by(|a,\
    \ b| {\n            a.cmp(b)\n        });\n    } else {\n        result.sort_by(|a,\
    \ b| {\n            a.cmp(&b)\n        });\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5kofd4g9.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    let mut sorted_ones = ones;\n    let mut sorted_result\
    \ = result;\n    for i in sorted_ones {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.check_bits(i));\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.check_bits(i));\n    }\n    for i in sorted_result\
    \ {\n        sorted_result = sorted_result.sort_by_key(|x| x.check_bits(i));\n\
    \    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.check_bits(i));\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.check_bits(i));\n    }\n    for i in sorted_result\
    \ {\n        sorted_result = sorted_result.sort_by_key(|x| x.check_bits(i));\n\
    \    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.check_bits(i));\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.check_bits(i));\n    }\n    for i in sorted_result\
    \ {\n        sorted_result = sorted_result.sort_by_key(|x| x.check_bits(i));\n\
    \    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.check_bits(i));\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.check_bits(i));\n    }\n    for i in sorted_result\
    \ {\n        sorted_result = sorted_result.sort_by_key(|x| x.check_bits(i));\n\
    \    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.check_bits(i));\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.check_bits(i));\n    }\n    for i in sorted_result\
    \ {\n        sorted_result = sorted_result.sort_by_key(|x| x.check_bits(i));\n\
    \    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.check_bits(i));\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.check_bits(i));\n    }\n    for i in sorted_result\
    \ {\n        sorted_result = sorted_result.sort_by_key(|x| x.check_bits(i));\n\
    \    }\n    for i in sorted_result {\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpby56tjaq.rs:84:3\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                                 - unclosed delimiter\n...\n71 |     for i in\
    \ sorted_result {\n   |                            - this delimiter might not\
    \ be properly closed...\n72 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n84 | }\n   |   ^\n\nerror[E0599]: no method named `check_bits`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmpby56tjaq.rs:18:57\n\
    \   |\n18 |         sorted_result = sorted_result.sort_by_key(|x| x.check_bits(i));\n\
    \   |                                                         ^^^^^^^^^^ method\
    \ not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpby56tjaq.rs:18:25\n\
    \   |\n16 |     let mut sorted_result = result;\n   |                        \
    \     ------ expected due to this value\n17 |     for i in sorted_ones {\n18 |\
    \         sorted_result = sorted_result.sort_by_key(|x| x.check_bits(i));\n  \
    \ |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n  \
    \         found unit type `()`\n\nerror[E0599]: no method named `check_bits` found\
    \ for reference `&isize` in the current scope\n  --> /tmp/tmpby56tjaq.rs:21:57\n\
    \   |\n21 |         sorted_result = sorted_result.sort_by_key(|x| x.check_bits(i));\n\
    \   |                                                         ^^^^^^^^^^ method\
    \ not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpby56tjaq.rs:21:25\n\
    \   |\n16 |     let mut sorted_result = result;\n   |                        \
    \     ------ expected due to this value\n...\n21 |         sorted_result = sorted_result.sort_by_key(|x|\
    \ x.check_bits(i));\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror[E0599]: no method named `check_bits`\
    \ found for reference `&isize` in the current scope\n  -"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in i {\n            if j == 1 {\n                count += 1;\n           \
    \ }\n        }\n        result.push(count);\n    }\n    result.sort_by_key(|x|\
    \ x.to_dec());\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n   --> /tmp/tmp80w_8i4q.rs:9:18\n\
    \    |\n9   |         for j in i {\n    |                  ^ `&isize` is not an\
    \ iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&isize`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\nnote: required by `into_iter`\n\nerror[E0599]: no method named\
    \ `to_dec` found for reference `&{integer}` in the current scope\n  --> /tmp/tmp80w_8i4q.rs:16:30\n\
    \   |\n16 |     result.sort_by_key(|x| x.to_dec());\n   |                    \
    \          ^^^^^^ method not found in `&{integer}`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter() {\n        if i & 1 == 1 {\n        \
    \    result.push(i);\n        }\n    }\n    result.sort_by(|a, b| a.cmp(b));\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7khbdt3d.rs:13:5\n   |\n\
    5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j\
    \ = i;\n        while j < arr.len() && arr[j] == 1 {\n            j = j + 1;\n\
    \        }\n        if j - i > 1 {\n            result.push(i);\n            result.push(j);\n\
    \            i = j;\n        } else {\n            i = j;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvogodij9.rs:21:5\n   |\n\
    5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        if x == 0 {\n    \
    \        0\n        } else {\n            binary_ones_count(&x).cmp(&binary_ones_count(&sorted_arr[0]))\n\
    \        }\n    });\n    sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `binary_ones_count` in this scope\n\
    \  --> /tmp/tmp1u4xpeah.rs:11:13\n   |\n11 |             binary_ones_count(&x).cmp(&binary_ones_count(&sorted_arr[0]))\n\
    \   |             ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `binary_ones_count` in this scope\n  --> /tmp/tmp1u4xpeah.rs:11:40\n\
    \   |\n11 |             binary_ones_count(&x).cmp(&binary_ones_count(&sorted_arr[0]))\n\
    \   |                                        ^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n --> /tmp/tmp1u4xpeah.rs:8:14\n\
    \  |\n8 |         if x == 0 {\n  |              ^^ no implementation for `&isize\
    \ == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ != 0 {\n            ones.push(i);\n        } else {\n            result.push(ones[ones.len()\
    \ - 1]);\n            ones.pop();\n        }\n    }\n    result.push(ones[ones.len()\
    \ - 1]);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 1]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpp_yn33y6.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n     \
    \       1\n        } else {\n            -1\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsqsgjbhd.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsqsgjbhd.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n      \
    \      1\n        } else if a < b {\n            -1\n        } else {\n      \
    \      0\n        }\n    });\n    sorted_arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8j8z7a8w.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8j8z7a8w.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8j8z7a8w.rs:13:13\n\
    \   |\n13 |             0\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for x in arr {\n        if x == 0\
    \ {\n            ones.push(x);\n        } else {\n            let mut i = 0;\n\
    \            while i < ones.len() && ones[i] > x {\n                i += 1;\n\
    \            }\n            result.push(x);\n            result.push(ones[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp_z6fjmko.rs:17:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpeossukga.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a < b {\n            -1\n        } else {\n            if a\
    \ > b {\n                1\n            } else {\n                0\n        \
    \    }\n        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_brmi7m4.rs:8:13\n  |\n8 |\
    \             -1\n  |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_brmi7m4.rs:11:17\n\
    \   |\n11 |                 1\n   |                 ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_brmi7m4.rs:13:17\n\
    \   |\n13 |                 0\n   |                 ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_brmi7m4.rs:6:5\n\
    \   |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |           \
    \                          ---------- expected `Vec<isize>` because of return\
    \ type\n6  | /     arr.sort_by(|a, b| {\n7  | |         if a < b {\n8  | |   \
    \          -1\n9  | |         } else {\n...  |\n15 | |         }\n16 | |     })\n\
    \   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in i {\n            if j == 1 {\n                count += 1;\n           \
    \ }\n        }\n        result.push(count);\n    }\n    result.sort_by_key(|x|\
    \ x.to_dec());\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n   --> /tmp/tmp80w_8i4q.rs:9:18\n\
    \    |\n9   |         for j in i {\n    |                  ^ `&isize` is not an\
    \ iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&isize`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\nnote: required by `into_iter`\n\nerror[E0599]: no method named\
    \ `to_dec` found for reference `&{integer}` in the current scope\n  --> /tmp/tmp80w_8i4q.rs:16:30\n\
    \   |\n16 |     result.sort_by_key(|x| x.to_dec());\n   |                    \
    \          ^^^^^^ method not found in `&{integer}`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        let mut bin = String::new();\n\
    \        bin.push_str(&format!(\"{:b}\", x));\n        bin.chars().filter(|c|\
    \ c == '1').count()\n    });\n    sorted_arr.sort_by_key(|x| {\n        let mut\
    \ dec = String::new();\n        dec.push_str(&format!(\"{:d}\", x));\n       \
    \ dec.chars().filter(|c| c == '1').count()\n    });\n    sorted_arr\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error: unknown format trait `d`\n  --> /tmp/tmpr85vnqdm.rs:14:34\n   |\n\
    14 |         dec.push_str(&format!(\"{:d}\", x));\n   |                      \
    \            ^\n   |\n   = note: the only appropriate formatting traits are:\n\
    \           - ``, which uses the `Display` trait\n           - `?`, which uses\
    \ the `Debug` trait\n           - `e`, which uses the `LowerExp` trait\n     \
    \      - `E`, which uses the `UpperExp` trait\n           - `o`, which uses the\
    \ `Octal` trait\n           - `p`, which uses the `Pointer` trait\n          \
    \ - `b`, which uses the `Binary` trait\n           - `x`, which uses the `LowerHex`\
    \ trait\n           - `X`, which uses the `UpperHex` trait\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpr85vnqdm.rs:10:34\n   |\n10 |   \
    \      bin.chars().filter(|c| c == '1').count()\n   |                        \
    \          ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpr85vnqdm.rs:15:34\n   |\n15 |         dec.chars().filter(|c| c\
    \ == '1').count()\n   |                                  ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpeossukga.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter() {\n        let mut count = 0;\n     \
    \   for j in 0..i {\n            if j % 2 == 0 {\n                count += 1;\n\
    \            }\n        }\n        result.push((count as isize).cmp(&i));\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1vt1b0_a.rs:9:21\n  |\n9 |\
    \         for j in 0..i {\n  |                     ^ expected integer, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |         for j in 0..*i\
    \ {\n  |                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1vt1b0_a.rs:16:5\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found enum `std::cmp::Ordering`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<std::cmp::Ordering>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut counter = vec![];\n    for i in arr {\n        if i.is_one()\
    \ {\n            counter.push(i);\n        } else {\n            counter.push(counter.last().unwrap()\
    \ + i);\n        }\n    }\n    for i in counter.iter().rev() {\n        result.push(i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_one` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpjh3eptqv.rs:9:14\n  |\n9 |         if i.is_one() {\n  |\
    \              ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjh3eptqv.rs:18:5\n   |\n5  | fn sort_array(arr: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                   ---------- expected\
    \ `Vec<isize>` because of return type\n...\n18 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = 0;\n    for x in arr {\n        if x % 2 == 0\
    \ {\n            ones += 1;\n        } else {\n            result.push((ones,\
    \ x));\n            ones = 0;\n        }\n    }\n    result.sort_by_key(|(_, x)|\
    \ x.0);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `0` on type `&isize`\n  --> /tmp/tmp_tsouo82.rs:16:35\n\
    \   |\n16 |     result.sort_by_key(|(_, x)| x.0);\n   |                      \
    \             ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_tsouo82.rs:17:5\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n17 |     result\n   |     ^^^^^^ expected `isize`, found tuple\n   |\n  \
    \ = note: expected struct `Vec<isize>`\n              found struct `Vec<({integer},\
    \ isize)>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0609.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        match a {\n            0 => 1,\n            1 => 2,\n        \
    \    2 => 3,\n            3 => 4,\n            4 => 5,\n            5 => 6,\n\
    \            6 => 7,\n            7 => 8,\n            8 => 9,\n            9\
    \ => 10,\n            10 => 11,\n            11 => 12,\n            12 => 13,\n\
    \            13 => 14,\n            14 => 15,\n            15 => 16,\n       \
    \     16 => 17,\n            17 => 18,\n            18 => 19,\n            19\
    \ => 20,\n            20 => 21,\n            21 => 22,\n            22 => 23,\n\
    \            23 => 24,\n            24 => 25,\n            25 => 26,\n       \
    \     26 => 27,\n            27 => 28,\n            28 => 29,\n            29\
    \ => 30,\n            30 => 31,\n            31 => 32,\n            32 => 33,\n\
    \            33 => 34,\n            34 => 35,\n            35 => 36,\n       \
    \     36 => 37,\n            37 => 38,\n            38 => 39,\n            39\
    \ => 40,\n            40 => 41,\n            41 => 42,\n            42 => 43,\n\
    \            43 => 44,\n            44 => 45,\n            45 => 46,\n       \
    \     46 => 47,\n            47 => 48,\n            48 => 49,\n            49\
    \ => 50,\n            50 => 51,\n            51 => 52,\n            52 => 53,\n\
    \            53 => 54,\n            54 => 55,\n            55 => 56,\n       \
    \     56 => 57,\n            57 => 58,\n            58 => 59,\n            59\
    \ => 60,\n            60 => 61,\n            61 => 62,\n            62 => 63,\n\
    \            63 => 64,\n            64 => 65,\n            65 => 66,\n       \
    \     66 => 67,\n            67 => 68,\n            68 => 69,\n            69\
    \ => 70,\n            70 => 71,\n            71 => 72,\n            72 => 73,\n\
    \            73 => 74,\n            74 => 75,\n            75 => 76,\n       \
    \     76 => 77,\n            77 => 78,\n            78 => 79,\n            79\
    \ => 80,\n            80 => 81,\n            81 => 82,\n            82 => 83,\n\
    \            83 => 84,\n}\n\nfn main() {\n    let candidate = sort_array;\n  \
    \  assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp4rq8xmof.rs:104:3\n\
    \    |\n5   | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    |          \
    \                                    - unclosed delimiter\n6   |     arr.sort_by(|a,\
    \ b| {\n    |                -       - unclosed delimiter\n    |             \
    \   |\n    |                unclosed delimiter\n7   |         match a {\n    |\
    \                 - this delimiter might not be properly closed...\n...\n92  |\
    \ }\n    | - ...as it matches this but it has different indentation\n...\n104\
    \ | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4rq8xmof.rs:7:9\n\
    \   |\n7  | /         match a {\n8  | |             0 => 1,\n9  | |          \
    \   1 => 2,\n10 | |             2 => 3,\n...  |\n91 | |             83 => 84,\n\
    92 | | }\n   | | ^- help: consider using a semicolon here\n   | |_|\n   |   expected\
    \ `()`, found integer\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp4rq8xmof.rs:6:24\n\
    \    |\n6   |       arr.sort_by(|a, b| {\n    |  ________________________^\n7\
    \   | |         match a {\n8   | |             0 => 1,\n9   | |             1\
    \ => 2,\n...   |\n103 | |     assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2,\
    \ 4, 8, 16, 32]);\n104 | | }\n    | |__^ expected enum `std::cmp::Ordering`, found\
    \ `()`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp4rq8xmof.rs:6:5\n   \
    \ |\n5   |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    |           \
    \                          ---------- expected `Vec<isize>` because of return\
    \ type\n6   | /     arr.sort_by(|a, b| {\n7   | |         match a {\n8   | | \
    \            0 => 1,\n9   | |             1 => 2,\n...   |\n103 | |     assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n104 | | }\n    | |__^ expected struct\
    \ `Vec`, found `()`\n    |\n    = note: expected struct `Vec<isize>`\n       \
    \     found unit type `()`\n\nerror: aborting due to 4 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n      \
    \      1\n        } else if a < b {\n            -1\n        } else {\n      \
    \      0\n        }\n    });\n    sorted_arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8j8z7a8w.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8j8z7a8w.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8j8z7a8w.rs:13:13\n\
    \   |\n13 |             0\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: -1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut decimal = Vec::new();\n\
    \    for i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n    \
    \    } else {\n            decimal.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    decimal = sort_array(decimal);\n    for i in 0..ones.len() {\n        result.push(ones[i]);\n\
    \    }\n    for i in 0..decimal.len() {\n        result.push(decimal[i]);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n      \
    \      1\n        } else {\n            -1\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9t1a_6kd.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9t1a_6kd.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpeossukga.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr {\n        if i & 1 == 1 {\n            result.push(i);\n\
    \        }\n    }\n    let mut i = 0;\n    while i < result.len() {\n        let\
    \ mut j = i;\n        while j < result.len() {\n            if result[j] & 1 ==\
    \ 1 {\n                let tmp = result[j];\n                result[j] = result[i];\n\
    \                result[i] = tmp;\n            }\n            j += 1\n       \
    \ }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3,\
    \ 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6, -5,\
    \ -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 1]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpaeqfgi70.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        let mut counter =\
    \ 0;\n        for &i in &mut sorted_arr {\n            if i & 1 == 1 {\n     \
    \           counter += 1;\n            }\n        }\n        counter\n    });\n\
    \    sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjfeo29ls.rs:9:13\n  |\n9 |\
    \         for &i in &mut sorted_arr {\n  |             ^^    --------------- this\
    \ expression has type `Option<&mut isize>`\n  |             |\n  |           \
    \  types differ in mutability\n  |             help: you can probably remove the\
    \ explicit borrow: `i`\n  |\n  = note: expected mutable reference `&mut isize`\n\
    \                     found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i % 2\
    \ == 0 {\n            ones.push(i);\n        } else {\n            let mut j =\
    \ i;\n            while j > 0 {\n                if j % 2 == 0 {\n           \
    \         ones.push(j);\n                    break;\n                }\n     \
    \           j -= 2;\n            }\n        }\n    }\n    for i in ones {\n  \
    \      result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in \n}\n\nfn main() {\n    let candidate = sort_array;\n   \
    \ assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmphgqj9vp4.rs:155:1\n\
    \    |\n155 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut res\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            res.push(i);\n\
    \        }\n    }\n    for i in ones {\n        res.push(i);\n    }\n    res.sort_by(|a,\
    \ b| a.cmp(b));\n    return res;\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpcdzim7mj.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        let mut counter =\
    \ 0;\n        let mut bin_str = String::new();\n        for &i in &x {\n     \
    \       if i == 1 {\n                counter += 1;\n            } else {\n   \
    \             counter += 0;\n            }\n            bin_str.push_str(&format!(\"\
    {:b}\", i));\n        }\n        counter\n    });\n    sorted_arr\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&&isize` is not an iterator\n  --> /tmp/tmpbig3yf9g.rs:10:19\n\
    \   |\n10 |         for &i in &x {\n   |                   ^^ `&&isize` is not\
    \ an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `&&isize`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        let mut count = 0;\n\
    \        for &b in &x {\n            if b == 1 {\n                count += 1;\n\
    \            }\n        }\n        count as isize\n    });\n    sorted_arr\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&&isize` is not an iterator\n --> /tmp/tmpbwhdyf05.rs:9:19\n\
    \  |\n9 |         for &b in &x {\n  |                   ^^ `&&isize` is not an\
    \ iterator\n  |\n  = help: the trait `Iterator` is not implemented for `&&isize`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpeossukga.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n      \
    \      1\n        } else if a < b {\n            -1\n        } else {\n      \
    \      0\n        }\n    });\n    sorted_arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8j8z7a8w.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8j8z7a8w.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8j8z7a8w.rs:13:13\n\
    \   |\n13 |             0\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j\
    \ = 0;\n        while j < arr.len() {\n            if arr[j] & 1 == 1 {\n    \
    \            result.push(arr[j]);\n                j += 1;\n            } else\
    \ {\n                j += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`',\
    \ /tmp/tmpw_33jq77.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut decimal = Vec::new();\n\
    \    for i in arr.iter() {\n        if i & 1 == 1 {\n            ones.push(i);\n\
    \        } else {\n            decimal.push(i);\n        }\n    }\n    ones =\
    \ sort_array(ones);\n    decimal = sort_array(decimal);\n    for i in 0..ones.len()\
    \ {\n        result.push(ones[i]);\n        result.push(decimal[i]);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_7g4llzq.rs:16:23\n   |\n\
    16 |     ones = sort_array(ones);\n   |                       ^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_7g4llzq.rs:16:12\n\
    \   |\n7  |     let mut ones = Vec::new();\n   |                    ----------\
    \ expected due to this value\n...\n16 |     ones = sort_array(ones);\n   |   \
    \         ^^^^^^^^^^^^^^^^ expected `&isize`, found `isize`\n   |\n   = note:\
    \ expected struct `Vec<&isize>`\n              found struct `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_7g4llzq.rs:17:26\n   |\n17 |     decimal =\
    \ sort_array(decimal);\n   |                          ^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_7g4llzq.rs:17:15\n\
    \   |\n8  |     let mut decimal = Vec::new();\n   |                       ----------\
    \ expected due to this value\n...\n17 |     decimal = sort_array(decimal);\n \
    \  |               ^^^^^^^^^^^^^^^^^^^ expected `&isize`, found `isize`\n   |\n\
    \   = note: expected struct `Vec<&isize>`\n              found struct `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_7g4llzq.rs:22:5\n   |\n5  | fn\
    \ sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                          \
    \         ---------- expected `Vec<isize>` because of return type\n...\n22 | \
    \    result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut res\
    \ = vec![];\n    let mut ones = 0;\n    for &i in arr {\n        if i & 1 == 1\
    \ {\n            ones += 1;\n        } else {\n            res.push(i);\n    \
    \    }\n    }\n    if ones == 0 {\n        res.sort();\n    } else {\n       \
    \ res.sort_by(|a, b| {\n            let mut a_ones = a.to_bits();\n          \
    \  let mut b_ones = b.to_bits();\n            a_ones.ones_count() - b_ones.ones_count();\n\
    \        });\n    }\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnar4vq3b.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnar4vq3b.rs:18:28\n   |\n18 |           res.sort_by(|a, b| {\n\
    \   |  ____________________________^\n19 | |             let mut a_ones = a.to_bits();\n\
    20 | |             let mut b_ones = b.to_bits();\n21 | |             a_ones.ones_count()\
    \ - b_ones.ones_count();\n22 | |         });\n   | |_________^ expected enum `std::cmp::Ordering`,\
    \ found `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a < b {\n            1\n        } else {\n            0\n \
    \       }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7fm2tt2s.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7fm2tt2s.rs:10:13\n   |\n10 |\
    \             0\n   |             ^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7fm2tt2s.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a < b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             0\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in i {\n            if j == 1 {\n                count += 1;\n           \
    \ }\n        }\n        result.push(count);\n    }\n    result.sort_by_key(|x|\
    \ x.to_dec());\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n   --> /tmp/tmp80w_8i4q.rs:9:18\n\
    \    |\n9   |         for j in i {\n    |                  ^ `&isize` is not an\
    \ iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&isize`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\nnote: required by `into_iter`\n\nerror[E0599]: no method named\
    \ `to_dec` found for reference `&{integer}` in the current scope\n  --> /tmp/tmp80w_8i4q.rs:16:30\n\
    \   |\n16 |     result.sort_by_key(|x| x.to_dec());\n   |                    \
    \          ^^^^^^ method not found in `&{integer}`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpeossukga.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr {\n        let mut count = 0;\n        while i &\
    \ 1 == 1 {\n            i >>= 1;\n            count += 1;\n        }\n       \
    \ result.push(count as isize);\n    }\n    result.sort_by_key(|x| x.to_dec());\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_dec` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp70p0bsun.rs:15:30\n   |\n15 |     result.sort_by_key(|x|\
    \ x.to_dec());\n   |                              ^^^^^^ help: there is an associated\
    \ function with a similar name: `to_be`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut zeros = Vec::new();\n\
    \    for x in arr {\n        if x % 2 == 0 {\n            zeros.push(x);\n   \
    \     } else {\n            ones.push(x);\n        }\n    }\n    zeros.sort_unstable();\n\
    \    ones.sort_unstable();\n    for x in zeros.iter() {\n        result.push(x);\n\
    \    }\n    for x in ones.iter() {\n        result.push(x);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm4gtv86h.rs:24:5\n   |\n\
    5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    24 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut res\
    \ = vec![];\n    for i in arr {\n        if i & 1 == 1 {\n            res.push(i);\n\
    \        }\n    }\n    res.sort_by_key(|x| x.to_dec());\n    res\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_dec` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpyciv6art.rs:12:27\n   |\n12 |     res.sort_by_key(|x|\
    \ x.to_dec());\n   |                           ^^^^^^ help: there is an associated\
    \ function with a similar name: `to_be`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        while\
    \ i & 1 != 0 {\n            i >>= 1;\n            count += 1;\n        }\n   \
    \     result.push(count);\n    }\n    result.sort_by_key(|x| x.to_dec());\n  \
    \  result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `>>=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmpih6iqvlx.rs:10:13\n   |\n10 |             i >>= 1;\n\
    \   |             -^^^^^^\n   |             |\n   |             cannot use `>>=`\
    \ on type `&isize`\n   |\nhelp: `>>=` can be used on `isize`, you can dereference\
    \ `i`\n   |\n10 |             *i >>= 1;\n   |             +\n\nerror[E0599]: no\
    \ method named `to_dec` found for reference `&{integer}` in the current scope\n\
    \  --> /tmp/tmpih6iqvlx.rs:15:30\n   |\n15 |     result.sort_by_key(|x| x.to_dec());\n\
    \   |                              ^^^^^^ method not found in `&{integer}`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0368, E0599.\nFor more information about an error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        let mut count = 0;\n\
    \        for i in 0..32 {\n            if x & (1 << i) != 0 {\n              \
    \  count += 1;\n            }\n        }\n        count as isize\n    });\n  \
    \  sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp6s4qwk2w.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr {\n        let mut count = 0;\n        while i &\
    \ 1 == 1 {\n            i >>= 1;\n            count += 1;\n        }\n       \
    \ result.push(count);\n    }\n    result.sort_by_key(|x| x.to_dec());\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_dec` found for reference `&{integer}`\
    \ in the current scope\n  --> /tmp/tmpdg0q7bd7.rs:15:30\n   |\n15 |     result.sort_by_key(|x|\
    \ x.to_dec());\n   |                              ^^^^^^ method not found in `&{integer}`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpeossukga.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter() {\n        let mut count = 0;\n     \
    \   for j in i {\n            if j == 1 {\n                count += 1;\n     \
    \       }\n        }\n        result.push((count as isize).cmp(&*i));\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n --> /tmp/tmpzc0o5qdn.rs:9:18\n\
    \  |\n9 |         for j in i {\n  |                  ^ `&isize` is not an iterator\n\
    \  |\n  = help: the trait `Iterator` is not implemented for `&isize`\n  = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzc0o5qdn.rs:16:5\n   |\n5  | fn\
    \ sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                          \
    \         ---------- expected `Vec<isize>` because of return type\n...\n16 | \
    \    result\n   |     ^^^^^^ expected `isize`, found enum `std::cmp::Ordering`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<std::cmp::Ordering>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    let mut sorted_ones = ones;\n    let mut sorted_result\
    \ = result;\n    for i in sorted_ones {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n    }\n    for i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwrs8dab7.rs:88:3\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                                 - unclosed delimiter\n...\n74 |     for i in\
    \ sorted_result {\n   |                            - this delimiter might not\
    \ be properly closed...\n75 |         sorted_result = sorted_result.sort_by_key(|x|\
    \ x.\n76 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n88 | }\n   |   ^\n\nerror: unexpected token: `)`\n  --> /tmp/tmpwrs8dab7.rs:76:1\n\
    \   |\n76 | }\n   | ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpwrs8dab7.rs:75:50\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                                 - closing delimiter possibly meant for this\n\
    ...\n75 |         sorted_result = sorted_result.sort_by_key(|x| x.\n   |     \
    \                                             ^ unclosed delimiter\n76 | }\n \
    \  | ^ mismatched closing delimiter\n\nerror[E0599]: no method named `to_dec`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmpwrs8dab7.rs:18:57\n\
    \   |\n18 |         sorted_result = sorted_result.sort_by_key(|x| x.to_dec());\n\
    \   |                                                         ^^^^^^ help: there\
    \ is an associated function with a similar name: `to_be`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwrs8dab7.rs:18:25\n   |\n16 |     let mut sorted_result\
    \ = result;\n   |                             ------ expected due to this value\n\
    17 |     for i in sorted_ones {\n18 |         sorted_result = sorted_result.sort_by_key(|x|\
    \ x.to_dec());\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror[E0599]: no method named `to_dec` found\
    \ for reference `&isize` in the current scope\n  --> /tmp/tmpwrs8dab7.rs:21:57\n\
    \   |\n21 |         sorted_result = sorted_result.sort_by_key(|x| x.to_dec());\n\
    \   |                                                         ^^^^^^ help: there\
    \ is an "
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for &i in arr {\n       \
    \ if i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    let mut sorted_ones = Vec::new();\n    let mut sorted_result\
    \ = Vec::new();\n    for &i in ones {\n        sorted_ones.push(i);\n    }\n \
    \   for &i in result {\n        sorted_result.push(i);\n    }\n    sorted_result.sort_by(|a,\
    \ b| {\n        if a > b {\n            -1\n        } else {\n            1\n\
    \        }\n    });\n    sorted_result.sort_by(|a, b| {\n        if a > b {\n\
    \            -1\n        } else {\n            a.cmp(b)\n        }\n    });\n\
    \    sorted_result.extend(sorted_ones);\n    sorted_result\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa2al_bac.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpa2al_bac.rs:25:13\n   |\n25 |             -1\n   |            \
    \ ^^ expected enum `std::cmp::Ordering`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpa2al_bac.rs:27:13\n   |\n27 |             1\n   |     \
    \        ^ expected enum `std::cmp::Ordering`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa2al_bac.rs:32:13\n   |\n32 |             -1\n\
    \   |             ^^ expected enum `std::cmp::Ordering`, found integer\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n      \
    \      -1\n        } else {\n            if a < b {\n                1\n     \
    \       } else {\n                0\n            }\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjzy_4sd0.rs:9:13\n  |\n9 |\
    \             -1\n  |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjzy_4sd0.rs:12:17\n\
    \   |\n12 |                 1\n   |                 ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjzy_4sd0.rs:14:17\n\
    \   |\n14 |                 0\n   |                 ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in i {\n            if j == 1 {\n                count += 1;\n           \
    \ }\n        }\n        result.push(count);\n    }\n    result.sort_by_key(|x|\
    \ x.to_dec());\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n   --> /tmp/tmp80w_8i4q.rs:9:18\n\
    \    |\n9   |         for j in i {\n    |                  ^ `&isize` is not an\
    \ iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&isize`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\nnote: required by `into_iter`\n\nerror[E0599]: no method named\
    \ `to_dec` found for reference `&{integer}` in the current scope\n  --> /tmp/tmp80w_8i4q.rs:16:30\n\
    \   |\n16 |     result.sort_by_key(|x| x.to_dec());\n   |                    \
    \          ^^^^^^ method not found in `&{integer}`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for &i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            result.push(ones[ones.len()\
    \ - 1]);\n            ones.pop();\n        }\n    }\n    result.push(ones[ones.len()\
    \ - 1]);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnl11pg86.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for x in arr {\n        if\
    \ x == 1 {\n            ones.push(x);\n        } else {\n            result.push(x);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    let mut i = 0;\n    while\
    \ i < ones.size() {\n        let mut j = 0;\n        while j < ones.size() &&\
    \ ones[j] == ones[i] {\n            j += 1\n        }\n        if j == ones.size()\
    \ {\n            result.push(ones[i]);\n            i += 1;\n        } else {\n\
    \            result.push(ones[i]);\n            i += 1;\n            result.push(ones[j]);\n\
    \            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<isize>` in the\
    \ current scope\n  --> /tmp/tmpfleti482.rs:17:20\n   |\n17 |     while i < ones.size()\
    \ {\n   |                    ^^^^ help: there is an associated function with a\
    \ similar name: `resize`\n\nerror[E0599]: no method named `size` found for struct\
    \ `Vec<isize>` in the current scope\n  --> /tmp/tmpfleti482.rs:19:24\n   |\n19\
    \ |         while j < ones.size() && ones[j] == ones[i] {\n   |              \
    \          ^^^^ help: there is an associated function with a similar name: `resize`\n\
    \nerror[E0599]: no method named `size` found for struct `Vec<isize>` in the current\
    \ scope\n  --> /tmp/tmpfleti482.rs:22:22\n   |\n22 |         if j == ones.size()\
    \ {\n   |                      ^^^^ help: there is an associated function with\
    \ a similar name: `resize`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut counter = Vec::new();\n    for x in arr {\n     \
    \   if x == 0 {\n            counter.push(x);\n        } else {\n            counter.push(counter.last()\
    \ + 1);\n        }\n    }\n    let mut i = 0;\n    while i < counter.len() {\n\
    \        let mut j = 0;\n        while j < counter.len() {\n            if counter[j]\
    \ > counter[j + 1] {\n                let tmp = counter[j];\n                counter[j]\
    \ = counter[j + 1];\n                counter[j + 1] = tmp;\n            }\n  \
    \          j += 1\n        }\n        result.push(counter[i]);\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `Option<&isize>`\n  --> /tmp/tmp0ogk03q7.rs:12:41\n\
    \   |\n12 |             counter.push(counter.last() + 1);\n   |              \
    \            -------------- ^ - {integer}\n   |                          |\n \
    \  |                          Option<&isize>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut res\
    \ = vec![];\n    for i in arr {\n        if i & 1 == 1 {\n            res.push(i);\n\
    \        }\n    }\n    res.sort_by(|a, b| a.cmp(b));\n    res\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp2dfnguel.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        match a {\n            0 => 1,\n            _ => 0,\n        }\n\
    \        .cmp(&b)\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkfxnk_ww.rs:6:5\n   |\n5\
    \  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                  \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         match a {\n8  | |            \
    \ 0 => 1,\n9  | |             _ => 0,\n10 | |         }\n11 | |         .cmp(&b)\n\
    12 | |     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut counter = vec![];\n    for i in arr.iter() {\n      \
    \  if counter.contains(&i) {\n            result.push(i);\n            counter.push(0);\n\
    \        } else {\n            counter.push(*i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfbw4ss_k.rs:11:26\n   |\n\
    11 |             counter.push(0);\n   |                          ^\n   |     \
    \                     |\n   |                          expected `&isize`, found\
    \ integer\n   |                          help: consider borrowing here: `&0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfbw4ss_k.rs:13:26\n   |\n13 |\
    \             counter.push(*i);\n   |                          ^^\n   |      \
    \                    |\n   |                          expected `&isize`, found\
    \ `isize`\n   |                          help: consider borrowing here: `&*i`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfbw4ss_k.rs:17:5\n   |\n5  | fn\
    \ sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                          \
    \         ---------- expected `Vec<isize>` because of return type\n...\n17 | \
    \    result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr {\n        if i & 1 == 1 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_by(|a, b| a.cmp(b));\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpqs5ey_de.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        while\
    \ i & 1 == 0 {\n            i >>= 1;\n            count += 1;\n        }\n   \
    \     result.push(count as isize);\n    }\n    result.sort_unstable();\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `>>=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmpmlsijdce.rs:10:13\n   |\n10 |             i >>= 1;\n\
    \   |             -^^^^^^\n   |             |\n   |             cannot use `>>=`\
    \ on type `&isize`\n   |\nhelp: `>>=` can be used on `isize`, you can dereference\
    \ `i`\n   |\n10 |             *i >>= 1;\n   |             +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0368`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: -1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j\
    \ = i;\n        while j < arr.len() && arr[j] == 1 {\n            j = j + 1;\n\
    \        }\n        result.push(arr[i]);\n        result.push(arr[j]);\n     \
    \   i = j;\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter() {\n        let mut count = 0;\n     \
    \   for j in 0..i {\n            if arr[j] == 1 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    for i in 0..result.len() {\n        result.swap(i, result.iter().filter(|&x|\
    \ x == i).count());\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3,\
    \ 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6, -5,\
    \ -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_zmclscf.rs:9:21\n  |\n9 |\
    \         for j in 0..i {\n  |                     ^ expected integer, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |         for j in 0..*i\
    \ {\n  |                     +\n\nerror[E0277]: can't compare `&&isize` with `usize`\n\
    \  --> /tmp/tmp_zmclscf.rs:19:52\n   |\n19 |         result.swap(i, result.iter().filter(|&x|\
    \ x == i).count());\n   |                                                    ^^\
    \ no implementation for `&&isize == usize`\n   |\n   = help: the trait `PartialEq<usize>`\
    \ is not implemented for `&&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp_zmclscf.rs:21:5\n   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                   ---------- expected `Vec<isize>` because\
    \ of return type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr {\n        let mut count = 0;\n        while i &\
    \ 1 != 0 {\n            i >>= 1;\n            count += 1;\n        }\n       \
    \ result.push(count);\n    }\n    result.sort_by_key(|x| x.to_dec());\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_dec` found for reference `&{integer}`\
    \ in the current scope\n  --> /tmp/tmpfqwewjla.rs:15:30\n   |\n15 |     result.sort_by_key(|x|\
    \ x.to_dec());\n   |                              ^^^^^^ method not found in `&{integer}`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        while\
    \ i & 1 != 0 {\n            i >>= 1;\n            count += 1;\n        }\n   \
    \     result.push(count);\n    }\n    result.sort_by_key(|x| x.to_dec());\n  \
    \  result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `>>=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmpih6iqvlx.rs:10:13\n   |\n10 |             i >>= 1;\n\
    \   |             -^^^^^^\n   |             |\n   |             cannot use `>>=`\
    \ on type `&isize`\n   |\nhelp: `>>=` can be used on `isize`, you can dereference\
    \ `i`\n   |\n10 |             *i >>= 1;\n   |             +\n\nerror[E0599]: no\
    \ method named `to_dec` found for reference `&{integer}` in the current scope\n\
    \  --> /tmp/tmpih6iqvlx.rs:15:30\n   |\n15 |     result.sort_by_key(|x| x.to_dec());\n\
    \   |                              ^^^^^^ method not found in `&{integer}`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0368, E0599.\nFor more information about an error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n      \
    \      1\n        } else {\n            -1\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9t1a_6kd.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9t1a_6kd.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr {\n        if i & 1 == 1 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_by(|a, b| {\n        if a > b {\n         \
    \   1\n        } else {\n            a\n        }\n    });\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxytmjmj9.rs:14:13\n   |\n\
    14 |             1\n   |             ^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxytmjmj9.rs:16:13\n\
    \   |\n16 |             a\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for &i in arr {\n       \
    \ if i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(ones[ones.len()\
    \ - 1]);\n            ones.pop();\n        }\n    }\n    result.push(ones[ones.len()\
    \ - 1]);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaaocqjjd.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut decimal = Vec::new();\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            ones.push(i);\n   \
    \     } else {\n            decimal.push(i);\n        }\n    }\n    let mut ones_count\
    \ = ones.len();\n    let mut decimal_count = decimal.len();\n    let mut i = 0;\n\
    \    while i < ones_count {\n        if ones_count > decimal_count {\n       \
    \     result.push(decimal.swap_remove(decimal_count));\n            decimal_count\
    \ -= 1;\n        } else {\n            result.push(ones);\n            ones_count\
    \ -= 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpffqw3i9n.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpffqw3i9n.rs:24:25\n   |\n24 |             result.push(ones);\n\
    \   |                         ^^^^- help: try using a conversion method: `.to_vec()`\n\
    \   |                         |\n   |                         cyclic type of infinite\
    \ size\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut zeros = Vec::new();\n\
    \    for &i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n   \
    \     } else {\n            zeros.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    zeros = sort_array(zeros);\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in zeros {\n        result.push(i);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9s_i7t2b.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut i = 0;\n    while i < arr.len() {\n        let mut\
    \ j = 0;\n        while j < arr.len() {\n            if arr[j] == 1 {\n      \
    \          result.push(i);\n                break;\n            }\n          \
    \  j += 1\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqcysa1f0.rs:19:5\n   |\n\
    5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    19 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr.iter() {\n        if\
    \ i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(ones[ones.len()\
    \ - 1]);\n            ones.pop();\n        }\n    }\n    result.push(ones[ones.len()\
    \ - 1]);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfjcjwqsx.rs:17:5\n   |\n\
    5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    17 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        while\
    \ i & 1 == 0 {\n            i >>= 1;\n            count += 1;\n        }\n   \
    \     result.push(count);\n    }\n    result.sort_by_key(|x| x.to_dec());\n  \
    \  result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `>>=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmpd6sp02rn.rs:10:13\n   |\n10 |             i >>= 1;\n\
    \   |             -^^^^^^\n   |             |\n   |             cannot use `>>=`\
    \ on type `&isize`\n   |\nhelp: `>>=` can be used on `isize`, you can dereference\
    \ `i`\n   |\n10 |             *i >>= 1;\n   |             +\n\nerror[E0599]: no\
    \ method named `to_dec` found for reference `&{integer}` in the current scope\n\
    \  --> /tmp/tmpd6sp02rn.rs:15:30\n   |\n15 |     result.sort_by_key(|x| x.to_dec());\n\
    \   |                              ^^^^^^ method not found in `&{integer}`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0368, E0599.\nFor more information about an error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    });\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk1ci49i0.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk1ci49i0.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n --> /tmp/tmpk1ci49i0.rs:5:35\n \
    \ |\n5 | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n  |    ----------   \
    \                  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: -1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut decimal = Vec::new();\n\
    \    for i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n    \
    \    } else {\n            decimal.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    decimal = sort_array(decimal);\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in decimal {\n        result.push(i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    let mut sorted_ones = ones;\n    let mut sorted_result\
    \ = result;\n    for i in sorted_ones {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.checked_mul(10).unwrap());\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.checked_mul(10).unwrap());\n    }\n    for\
    \ i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.checked_mul(10).unwrap());\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.checked_mul(10).unwrap());\n    }\n    for\
    \ i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.checked_mul(10).unwrap());\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.checked_mul(10).unwrap());\n    }\n    for\
    \ i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.checked_mul(10).unwrap());\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.checked_mul(10).unwrap());\n    }\n    for\
    \ i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.checked_mul(10).unwrap());\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.checked_mul(10).unwrap());\n    }\n    for\
    \ i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.checked_mul(10).unwrap());\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.checked_mul(10).unwrap());\n    }\n    for\
    \ i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.checked_mul(10).unwrap());\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.checked_mul(10).unwrap());\n    }\n    for\
    \ i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.checked_mul(10).unwrap());\n    }\n    for i in sorted_result {\n        sorted_result\
    \ = sorted_result.sort_by_key(|x| x.checked_mul(10).unwrap());\n    }\n    for\
    \ i in sorted_result {\n        sorted_result = sorted_result.sort_by_key(|x|\
    \ x.checked_mul(10).\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpv2g3ukqz.rs:79:3\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                                 - unclosed delimiter\n...\n65 |     for i in\
    \ sorted_result {\n   |                            - this delimiter might not\
    \ be properly closed...\n66 |         sorted_result = sorted_result.sort_by_key(|x|\
    \ x.checked_mul(10).\n67 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n79 | }\n   |   ^\n\nerror: unexpected token: `)`\n  --> /tmp/tmpv2g3ukqz.rs:67:1\n\
    \   |\n67 | }\n   | ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpv2g3ukqz.rs:66:50\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                                 - closing delimiter possibly meant for this\n\
    ...\n66 |         sorted_result = sorted_result.sort_by_key(|x| x.checked_mul(10).\n\
    \   |                                                  ^ unclosed delimiter\n\
    67 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpv2g3ukqz.rs:18:25\n   |\n16 |     let mut sorted_result = result;\n\
    \   |                             ------ expected due to this value\n17 |    \
    \ for i in sorted_ones {\n18 |         sorted_result = sorted_result.sort_by_key(|x|\
    \ x.checked_mul(10).unwrap());\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv2g3ukqz.rs:21:25\n\
    \   |\n16 |     let mut sorted_result = result;\n   |                        \
    \     ------ expected due to this value\n...\n21 |         sorted_result = sorted_result.sort_by_key(|x|\
    \ x.checked_mul(10).unwrap());\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv2g3ukqz.rs:24:25\n\
    \   |\n16 |     let mut so"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6r4kl1tr.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6r4kl1tr.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut zeros = Vec::new();\n\
    \    for &i in arr {\n        if i & 1 != 0 {\n            zeros.push(i);\n  \
    \      } else {\n            ones.push(i);\n        }\n    }\n    zeros.sort_by_key(|&i|\
    \ i as isize);\n    ones.sort_by_key(|&i| i as isize);\n    for i in zeros.iter().chain(ones.iter())\
    \ {\n        result.push(*i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuf4qbi10.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in i {\n            if j == 1 {\n                count += 1;\n           \
    \ }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    for i in result.iter() {\n        let mut count = 0;\n\
    \        for j in i {\n            if j == 1 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    for i in result.iter() {\n        let mut count = 0;\n\
    \        for j in i {\n            if j == 1 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    for i in result.iter() {\n        let mut count = 0;\n\
    \        for j in i {\n            if j == 1 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    for i in result.iter() {\n        let mut count = 0;\n\
    \        for j in i {\n            if j == 1 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    for i in result.iter() {\n        let mut count = 0;\n\
    \        for j in i {\n            if j == 1 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    for i in result.iter() {\n        let mut count = 0;\n\
    \        for j in i {\n            if j == 1 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    for i in result.iter() {\n        let mut count = 0;\n\
    \        for j in i {\n            if j == 1 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    for i in result.iter() {\n        let mut count = 0;\n\
    \        for j in i {\n            if j == 1 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    for i in result.iter() {\n        let mut count = 0;\n\
    \        for j in i {\n            if j == 1 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    for i in result.iter() {\n        let mut count = 0;\n\
    \        for j in i {\n            if j == 1 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    for i in result.iter() {\n        let mut count = 0;\n\
    \        for j in i {\n            if j == 1 {\n\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjx2sijfj.rs:145:3\n\
    \    |\n5   | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    |          \
    \                                    - unclosed delimiter\n...\n128 |     for\
    \ i in result.iter() {\n    |                            - unclosed delimiter\n\
    129 |         let mut count = 0;\n130 |         for j in i {\n    |          \
    \          - unclosed delimiter\n131 |             if j == 1 {\n    |        \
    \               - this delimiter might not be properly closed...\n132 | \n133\
    \ | }\n    | - ...as it matches this but it has different indentation\n...\n145\
    \ | }\n    |   ^\n\nerror[E0277]: `&isize` is not an iterator\n --> /tmp/tmpjx2sijfj.rs:9:18\n\
    \  |\n9 |         for j in i {\n  |                  ^ `&isize` is not an iterator\n\
    \  |\n  = help: the trait `Iterator` is not implemented for `&isize`\n  = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `&isize`\n\
    \nerror[E0277]: `&&isize` is not an iterator\n  --> /tmp/tmpjx2sijfj.rs:20:18\n\
    \   |\n20 |         for j in i {\n   |                  ^ `&&isize` is not an\
    \ iterator\n   |\n   = help: the trait `Iterator` is not implemented for `&&isize`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&&isize`\n\nerror[E0277]: `&&isize` is not an iterator\n  --> /tmp/tmpjx2sijfj.rs:31:18\n\
    \   |\n31 |         for j in i {\n   |                  ^ `&&isize` is not an\
    \ iterator\n   |\n   = help: the trait `Iterator` is not implemented for `&&isize`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&&isize`\n\nerror[E0277]: `&&isize` is not an iterator\n  --> /tmp/tmpjx2sijfj.rs:42:18\n\
    \   |\n42 |         for j in i {\n   |                  ^ `&&isize` is not an\
    \ iterator\n   |\n   = help: the trait `Iterator` is not implemented for `&&isize`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&&isize`\n\nerror[E0277]: `&&isize` is not an iterator\n  --> /tmp/tmpjx2sijfj.rs:53:18\n\
    \   |\n53 |         for j in i {\n   |                  ^ `&&isize` is not an\
    \ ite"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for &i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            result.push(ones[ones.len()\
    \ - 1]);\n            ones.pop();\n        }\n    }\n    result.push(ones[ones.len()\
    \ - 1]);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnl11pg86.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        let mut a_ones = a;\n        let mut b_ones = b;\n        while\
    \ a_ones > b_ones {\n            a_ones -= 1;\n            b_ones -= 1;\n    \
    \    }\n        if a_ones == b_ones {\n            a_ones\n        } else {\n\
    \            a_ones - b_ones\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `-=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmput6r5qmv.rs:10:13\n   |\n10 |             a_ones -=\
    \ 1;\n   |             ------^^^^^\n   |             |\n   |             cannot\
    \ use `-=` on type `&isize`\n   |\nhelp: `-=` can be used on `isize`, you can\
    \ dereference `a_ones`\n   |\n10 |             *a_ones -= 1;\n   |           \
    \  +\n\nerror[E0368]: binary assignment operation `-=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmput6r5qmv.rs:11:13\n   |\n11 |             b_ones -=\
    \ 1;\n   |             ------^^^^^\n   |             |\n   |             cannot\
    \ use `-=` on type `&isize`\n   |\nhelp: `-=` can be used on `isize`, you can\
    \ dereference `b_ones`\n   |\n11 |             *b_ones -= 1;\n   |           \
    \  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmput6r5qmv.rs:14:13\n   |\n\
    14 |             a_ones\n   |             ^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmput6r5qmv.rs:16:13\n\
    \   |\n16 |             a_ones - b_ones\n   |             ^^^^^^^^^^^^^^^ expected\
    \ enum `std::cmp::Ordering`, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmput6r5qmv.rs:6:5\n   |\n5  |   fn sort_array(arr: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                     ---------- expected `Vec<isize>`\
    \ because of return type\n6  | /     arr.sort_by(|a, b| {\n7  | |         let\
    \ mut a_ones = a;\n8  | |         let mut b_ones = b;\n9  | |         while a_ones\
    \ > b_ones {\n...  |\n17 | |         }\n18 | |     })\n   | |______^ expected\
    \ struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n  \
    \         found unit type `()`\n\nerror: aborting due to 5 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        if x == 1 {\n   \
    \         0\n        } else {\n            1\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n --> /tmp/tmpa5aoyadd.rs:8:14\n\
    \  |\n8 |         if x == 1 {\n  |              ^^ no implementation for `&isize\
    \ == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n      \
    \      -1\n        } else if a < b {\n            1\n        } else {\n      \
    \      0\n        }\n    });\n    sorted_arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2x3gc501.rs:9:13\n  |\n9 |\
    \             -1\n  |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2x3gc501.rs:11:13\n\
    \   |\n11 |             1\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2x3gc501.rs:13:13\n\
    \   |\n13 |             0\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            0\n \
    \       }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuhikaz8b.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuhikaz8b.rs:10:13\n   |\n10 |\
    \             0\n   |             ^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        while\
    \ i & 1 != 0 {\n            i >>= 1;\n            count += 1;\n        }\n   \
    \     result.push((count as f64).floor() as isize);\n    }\n    result.sort_by_key(|x|\
    \ x.to_dec());\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `>>=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmpl7z04eb_.rs:10:13\n   |\n10 |             i >>= 1;\n\
    \   |             -^^^^^^\n   |             |\n   |             cannot use `>>=`\
    \ on type `&isize`\n   |\nhelp: `>>=` can be used on `isize`, you can dereference\
    \ `i`\n   |\n10 |             *i >>= 1;\n   |             +\n\nerror[E0599]: no\
    \ method named `to_dec` found for reference `&isize` in the current scope\n  -->\
    \ /tmp/tmpl7z04eb_.rs:15:30\n   |\n15 |     result.sort_by_key(|x| x.to_dec());\n\
    \   |                              ^^^^^^ help: there is an associated function\
    \ with a similar name: `to_be`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0368, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        if x % 2 == 0 {\n\
    \            x.checked_mul(2).ok()\n        } else {\n            x.checked_mul(10).ok()\n\
    \        }\n    });\n    sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ok` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmpq7ntt467.rs:9:30\n  |\n9 |             x.checked_mul(2).ok()\n\
    \  |                              ^^ help: there is an associated function with\
    \ a similar name: `or`\n\nerror[E0599]: no method named `ok` found for enum `Option`\
    \ in the current scope\n  --> /tmp/tmpq7ntt467.rs:11:31\n   |\n11 |          \
    \   x.checked_mul(10).ok()\n   |                               ^^ help: there\
    \ is an associated function with a similar name: `or`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for &i in arr {\n       \
    \ if i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    let mut i = 0;\n    for &i\
    \ in ones {\n        result.push(i);\n    }\n    for &i in result {\n        i\
    \ += i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2noercu2.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2noercu2.rs:17:9\n   |\n17 |     for &i in ones {\n   |\
    \         ^^    ---- this expression has type `isize`\n   |         |\n   |  \
    \       expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2noercu2.rs:20:9\n\
    \   |\n20 |     for &i in result {\n   |         ^^    ------ this expression\
    \ has type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            0\n \
    \       }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6emtt1dk.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6emtt1dk.rs:10:13\n   |\n10 |\
    \             0\n   |             ^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6emtt1dk.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             0\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i % 2\
    \ == 0 {\n            ones.push(i);\n        } else {\n            result.push(ones[ones.len()\
    \ - 1] + i);\n            ones.pop();\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpa_5o7m23.rs:12:30

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        if i.is_zero() {\n           \
    \ continue;\n        }\n        let mut count = 0;\n        let mut pos = i;\n\
    \        while pos > 0 {\n            count += pos & 1;\n            pos >>= 1;\n\
    \        }\n        result.push(count);\n    }\n    result.sort_by_key(|x| x.to_dec());\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_zero` found for reference `&isize` in\
    \ the current scope\n --> /tmp/tmpv8h9ztfl.rs:8:14\n  |\n8 |         if i.is_zero()\
    \ {\n  |              ^^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv8h9ztfl.rs:13:21\n   |\n13 |         while pos > 0 {\n\
    \   |                     ^\n   |                     |\n   |                \
    \     expected `&isize`, found integer\n   |                     help: consider\
    \ borrowing here: `&0`\n\nerror[E0368]: binary assignment operation `>>=` cannot\
    \ be applied to type `&isize`\n  --> /tmp/tmpv8h9ztfl.rs:15:13\n   |\n15 |   \
    \          pos >>= 1;\n   |             ---^^^^^^\n   |             |\n   |  \
    \           cannot use `>>=` on type `&isize`\n   |\nhelp: `>>=` can be used on\
    \ `isize`, you can dereference `pos`\n   |\n15 |             *pos >>= 1;\n   |\
    \             +\n\nerror[E0599]: no method named `to_dec` found for reference\
    \ `&isize` in the current scope\n  --> /tmp/tmpv8h9ztfl.rs:19:30\n   |\n19 | \
    \    result.sort_by_key(|x| x.to_dec());\n   |                              ^^^^^^\
    \ help: there is an associated function with a similar name: `to_be`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        if x == 1 {\n   \
    \         0\n        } else {\n            1\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n --> /tmp/tmpa5aoyadd.rs:8:14\n\
    \  |\n8 |         if x == 1 {\n  |              ^^ no implementation for `&isize\
    \ == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for x in arr {\n        if x == 0\
    \ {\n            ones.push(x);\n        } else {\n            result.push(x);\n\
    \        }\n    }\n    let mut i = 0;\n    while i < ones.len() {\n        let\
    \ mut j = 0;\n        while j < result.len() {\n            if ones[i] == result[j]\
    \ {\n                result.swap(j, j + 1);\n                i += 1;\n       \
    \         break;\n            }\n            j += 1\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 5, 2, 3, 4]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp7dr1zgnm.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter() {\n        let mut count = 0;\n     \
    \   for j in i {\n            if j == 1 {\n                count += 1;\n     \
    \       }\n        }\n        result.push((count as isize).cmp(&i));\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n   --> /tmp/tmprf_zqz1u.rs:9:18\n\
    \    |\n9   |         for j in i {\n    |                  ^ `&isize` is not an\
    \ iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&isize`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\nnote: required by `into_iter`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprf_zqz1u.rs:16:5\n   |\n5  | fn sort_array(arr: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                   ---------- expected `Vec<isize>`\
    \ because of return type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found enum `std::cmp::Ordering`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<std::cmp::Ordering>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        let mut count = 0;\n\
    \        for i in 0..32 {\n            if x & (1 << i) != 0 {\n              \
    \  count += 1;\n            }\n        }\n        count as isize\n    });\n  \
    \  sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp6s4qwk2w.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        if i & 1 == 1 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_by_key(|x| x.to_dec());\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_dec` found for reference `&&isize` in\
    \ the current scope\n  --> /tmp/tmpqh70wmwn.rs:12:30\n   |\n12 |     result.sort_by_key(|x|\
    \ x.to_dec());\n   |                              ^^^^^^ help: there is an associated\
    \ function with a similar name: `to_be`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpqh70wmwn.rs:13:5\n   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                   ---------- expected `Vec<isize>` because\
    \ of return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] == 1 {\n            result.push(j);\n            i += 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    while j < arr.len()\
    \ {\n        if arr[j] == 1 {\n            result.push(j);\n            j += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxr4nvgjd.rs:25:5\n   |\n\
    5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    25 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            result.push(ones[ones.len()\
    \ - 1]);\n            ones.pop();\n        }\n    }\n    result.push(ones[ones.len()\
    \ - 1]);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 1]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpq07x2vyx.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut zeros = Vec::new();\n\
    \    for &i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n   \
    \     } else {\n            zeros.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    zeros = sort_array(zeros);\n    for i in ones {\n        result.push(i);\n\
    \    }\n    for i in zeros {\n        result.push(i);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9s_i7t2b.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut decimal = Vec::new();\n\
    \    for &i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n   \
    \     } else {\n            decimal.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    decimal = sort_array(decimal);\n    for &i in ones {\n        result.push(i);\n\
    \    }\n    for &i in decimal {\n        result.push(i);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpir3qblfs.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpir3qblfs.rs:18:9\n   |\n18 |     for &i in ones {\n   |       \
    \  ^^    ---- this expression has type `Option<isize>`\n   |         |\n   | \
    \        expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpir3qblfs.rs:21:9\n\
    \   |\n21 |     for &i in decimal {\n   |         ^^    ------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `i`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut counter = vec![];\n    for i in arr {\n        if i.is_zero()\
    \ {\n            continue;\n        }\n        let mut counter = counter.clone();\n\
    \        counter.push(i);\n        let mut max_counter = counter.iter().max().unwrap();\n\
    \        let mut max_counter_index = counter.iter().position(|x| *x == max_counter).unwrap();\n\
    \        if max_counter_index == 0 {\n            result.push(i);\n        } else\
    \ {\n            let mut max_counter = counter[max_counter_index - 1];\n     \
    \       for i in 0..max_counter_index {\n                let mut counter = counter.clone();\n\
    \                counter.push(max_counter);\n                max_counter -= 1;\n\
    \                let mut max_counter_index = counter.iter().position(|x| *x ==\
    \ max_counter).unwrap();\n                if max_counter_index == 0 {\n      \
    \              result.push(i);\n                    break;\n                }\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_zero` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpm3xqbahq.rs:9:14\n  |\n9 |         if i.is_zero() {\n  |\
    \              ^^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm3xqbahq.rs:15:71\n   |\n15 |         let mut max_counter_index\
    \ = counter.iter().position(|x| *x == max_counter).unwrap();\n   |           \
    \                                                            ^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    15 |         let mut max_counter_index = counter.iter().position(|x| *x == *max_counter).unwrap();\n\
    \   |                                                                       +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpm3xqbahq.rs:26:33\n   |\n26 |\
    \                     result.push(i);\n   |                                 ^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n26 |           \
    \          result.push(i.try_into().unwrap());\n   |                         \
    \         ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter() {\n        if i & 1 == 1 {\n        \
    \    result.push(i);\n        }\n    }\n    result.sort_by_key(|x| {\n       \
    \ match x {\n            0 => 0,\n            1 => 1,\n            _ => match\
    \ x.to_string() {\n                \"0\" => 0,\n                \"1\" => 1,\n\
    \                _ => -1,\n            },\n        }\n    });\n    result\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6nop8g9r.rs:17:17\n   |\n\
    16 |             _ => match x.to_string() {\n   |                        -------------\
    \ this expression has type `String`\n17 |                 \"0\" => 0,\n   |  \
    \               ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6nop8g9r.rs:18:17\n   |\n16 |             _ => match x.to_string()\
    \ {\n   |                        ------------- this expression has type `String`\n\
    17 |                 \"0\" => 0,\n18 |                 \"1\" => 1,\n   |     \
    \            ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6nop8g9r.rs:23:5\n   |\n5  | fn sort_array(arr: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                   ---------- expected\
    \ `Vec<isize>` because of return type\n...\n23 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i % 2\
    \ == 0 {\n            ones.push(i);\n        } else {\n            result.push(ones[ones.len()\
    \ - 1] + i);\n            ones.pop();\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpa_5o7m23.rs:12:30

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut num_ones = 0;\n    for el in arr {\n        if el ==\
    \ 1 {\n            num_ones += 1;\n        } else {\n            result.push((num_ones,\
    \ el));\n            num_ones = 0;\n        }\n    }\n    result.sort_by_key(|(_,\
    \ el)| el);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n \
    \   assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5uu4vsli.rs:17:5\n   |\n\
    5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    17 |     result\n   |     ^^^^^^ expected `isize`, found tuple\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<({integer}, isize)>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpeossukga.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        if x == 0 {\n    \
    \        0\n        } else {\n            binary_ones_count(&x)\n        }\n \
    \   });\n    sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n \
    \   assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `binary_ones_count` in this scope\n\
    \  --> /tmp/tmp279rj6yd.rs:11:13\n   |\n11 |             binary_ones_count(&x)\n\
    \   |             ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n --> /tmp/tmp279rj6yd.rs:8:14\n  |\n8 | \
    \        if x == 0 {\n  |              ^^ no implementation for `&isize == {integer}`\n\
    \  |\n  = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \  = help: the following other types implement trait `PartialEq<Rhs>`:\n     \
    \       f32\n            f64\n            i128\n            i16\n            i32\n\
    \            i64\n            i8\n            isize\n          and 6 others\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in 0..i {\n            if arr[j] == 1 {\n                count += 1;\n   \
    \         }\n        }\n        result.push(count);\n    }\n    result.sort_by_key(|x|\
    \ x.to_dec());\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0565sdb1.rs:9:21\n  |\n9 |\
    \         for j in 0..i {\n  |                     ^ expected integer, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |         for j in 0..*i\
    \ {\n  |                     +\n\nerror[E0599]: no method named `to_dec` found\
    \ for reference `&{integer}` in the current scope\n  --> /tmp/tmp0565sdb1.rs:16:30\n\
    \   |\n16 |     result.sort_by_key(|x| x.to_dec());\n   |                    \
    \          ^^^^^^ method not found in `&{integer}`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut decimal = Vec::new();\n\
    \    for &i in arr {\n        if i == 0 {\n            ones.push(i);\n       \
    \ } else {\n            decimal.push(i / 2);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    decimal = sort_array(decimal);\n    for i in 0..ones.len() {\n        result.push(ones[i]);\n\
    \        result.push(decimal[i]);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvox99k2l.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        while\
    \ i & 1 == 1 {\n            i >>= 1;\n            count += 1;\n        }\n   \
    \     result.push(count);\n    }\n    result.sort_by_key(|x| x.to_dec());\n  \
    \  result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `>>=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmp649kyo99.rs:10:13\n   |\n10 |             i >>= 1;\n\
    \   |             -^^^^^^\n   |             |\n   |             cannot use `>>=`\
    \ on type `&isize`\n   |\nhelp: `>>=` can be used on `isize`, you can dereference\
    \ `i`\n   |\n10 |             *i >>= 1;\n   |             +\n\nerror[E0599]: no\
    \ method named `to_dec` found for reference `&{integer}` in the current scope\n\
    \  --> /tmp/tmp649kyo99.rs:15:30\n   |\n15 |     result.sort_by_key(|x| x.to_dec());\n\
    \   |                              ^^^^^^ method not found in `&{integer}`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0368, E0599.\nFor more information about an error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut res\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            res.push(i);\n\
    \        }\n    }\n    for i in ones {\n        res.push(i);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 1, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpg8524fkj.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n      \
    \      1\n        } else if a < b {\n            -1\n        } else {\n      \
    \      0\n        }\n    });\n    sorted_arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8j8z7a8w.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8j8z7a8w.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8j8z7a8w.rs:13:13\n\
    \   |\n13 |             0\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter() {\n        let mut count = 0;\n     \
    \   while i & 1 == 1 {\n            i += 1;\n            count += 1;\n       \
    \ }\n        result.push(count);\n    }\n    result.sort_by_key(|x| x.to_dec());\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmpsvq706iv.rs:10:13\n   |\n10 |             i += 1;\n\
    \   |             -^^^^^\n   |             |\n   |             cannot use `+=`\
    \ on type `&isize`\n   |\nhelp: `+=` can be used on `isize`, you can dereference\
    \ `i`\n   |\n10 |             *i += 1;\n   |             +\n\nerror[E0599]: no\
    \ method named `to_dec` found for reference `&{integer}` in the current scope\n\
    \  --> /tmp/tmpsvq706iv.rs:15:30\n   |\n15 |     result.sort_by_key(|x| x.to_dec());\n\
    \   |                              ^^^^^^ method not found in `&{integer}`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0368, E0599.\nFor more information about an error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = 0;\n    for &i in arr {\n        if i & 1 == 1\
    \ {\n            ones += 1;\n        } else {\n            result.push((ones,\
    \ i));\n            ones = 0;\n        }\n    }\n    result.sort_by_key(|&(_,\
    \ i)| i.0);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n \
    \   assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4nnki3t_.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut zeros = Vec::new();\n\
    \    let mut max_ones = 0;\n    let mut max_zeros = 0;\n    for &i in arr {\n\
    \        if i & 1 == 1 {\n            ones.push(i);\n        } else {\n      \
    \      zeros.push(i);\n        }\n        if i > max_ones {\n            max_ones\
    \ = i;\n        }\n        if i > max_zeros {\n            max_zeros = i;\n  \
    \      }\n    }\n    let mut ones_count = max_ones;\n    let mut zeros_count =\
    \ max_zeros;\n    while ones_count > 0 && zeros_count > 0 {\n        if ones_count\
    \ == 1 {\n            result.push(zeros.pop());\n            zeros_count -= 1;\n\
    \        } else {\n            result.push(ones.pop());\n            ones_count\
    \ -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprhfafg5z.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprhfafg5z.rs:35:5\n   |\n5  | fn sort_array(arr: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                   ---------- expected `Vec<isize>`\
    \ because of return type\n...\n35 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected struct `Vec<isize>`\n       \
    \       found struct `Vec<Option<{integer}>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        match x {\n     \
    \       0 => 1,\n            1 => 1,\n            _ => 0,\n        }\n    });\n\
    \    sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 2, 3, 4, 1]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpdpbmp9d5.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut zeros = Vec::new();\n\
    \    for x in arr {\n        if x % 2 == 0 {\n            zeros.push(x);\n   \
    \     } else {\n            ones.push(x);\n        }\n    }\n    let mut ones_count\
    \ = ones.length;\n    let mut zeros_count = zeros.length;\n    while ones_count\
    \ > 0 && zeros_count > 0 {\n        if ones[ones_count - 1] == 0 {\n         \
    \   ones_count -= 1;\n        } else {\n            zeros_count -= 1;\n      \
    \  }\n    }\n    while ones_count > 0 {\n        result.push(ones[ones_count -\
    \ 1]);\n        ones_count -= 1;\n    }\n    while zeros_count > 0 {\n       \
    \ result.push(zeros[zeros_count - 1]);\n        zeros_count -= 1;\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `length` on type `Vec<isize>`\n  --> /tmp/tmpo71mhyof.rs:16:31\n\
    \   |\n16 |     let mut ones_count = ones.length;\n   |                      \
    \         ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `Vec<isize>`\n\
    \  --> /tmp/tmpo71mhyof.rs:17:33\n   |\n17 |     let mut zeros_count = zeros.length;\n\
    \   |                                 ^^^^^^ unknown field\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0609`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in i {\n            if j == 1 {\n                count += 1;\n           \
    \ }\n        }\n        result.push(count);\n    }\n    result.sort_by_key(|x|\
    \ x.to_dec());\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n   --> /tmp/tmp80w_8i4q.rs:9:18\n\
    \    |\n9   |         for j in i {\n    |                  ^ `&isize` is not an\
    \ iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&isize`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\nnote: required by `into_iter`\n\nerror[E0599]: no method named\
    \ `to_dec` found for reference `&{integer}` in the current scope\n  --> /tmp/tmp80w_8i4q.rs:16:30\n\
    \   |\n16 |     result.sort_by_key(|x| x.to_dec());\n   |                    \
    \          ^^^^^^ method not found in `&{integer}`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        if i & 1 == 1 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_by_key(|x| x.to_dec());\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_dec` found for reference `&&isize` in\
    \ the current scope\n  --> /tmp/tmpqh70wmwn.rs:12:30\n   |\n12 |     result.sort_by_key(|x|\
    \ x.to_dec());\n   |                              ^^^^^^ help: there is an associated\
    \ function with a similar name: `to_be`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpqh70wmwn.rs:13:5\n   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                   ---------- expected `Vec<isize>` because\
    \ of return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j\
    \ = i;\n        while j < arr.len() && arr[j] == 1 {\n            j += 1\n   \
    \     }\n        result.push(arr[i]);\n        result.push(arr[j]);\n        i\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 5, 5, 5, 2, 2, 3, 3, 4, 4]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpz8i_demn.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in i {\n            if j == 1 {\n                count += 1;\n           \
    \ }\n        }\n        result.push(count);\n    }\n    result.sort_by_key(|x|\
    \ x.to_dec());\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n   --> /tmp/tmp80w_8i4q.rs:9:18\n\
    \    |\n9   |         for j in i {\n    |                  ^ `&isize` is not an\
    \ iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&isize`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\nnote: required by `into_iter`\n\nerror[E0599]: no method named\
    \ `to_dec` found for reference `&{integer}` in the current scope\n  --> /tmp/tmp80w_8i4q.rs:16:30\n\
    \   |\n16 |     result.sort_by_key(|x| x.to_dec());\n   |                    \
    \          ^^^^^^ method not found in `&{integer}`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut i = 0;\n    let mut j = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > 0 {\n            result.push(arr[i]);\n            i += 1;\n\
    \        } else {\n            while j < arr.len() && arr[j] == 0 {\n        \
    \        j += 1;\n            }\n            result.push(j);\n            i +=\
    \ j - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3,\
    \ 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6, -5,\
    \ -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1vfk3npd.rs:17:25\n   |\n\
    17 |             result.push(j);\n   |                         ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n17 |             result.push(j.try_into().unwrap());\n\
    \   |                          ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut decimal = Vec::new();\n\
    \    for &i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n   \
    \     } else {\n            decimal.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    decimal = sort_array(decimal);\n    for &i in ones {\n        result.push(i);\n\
    \    }\n    for &i in decimal {\n        result.push(i);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpir3qblfs.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpir3qblfs.rs:18:9\n   |\n18 |     for &i in ones {\n   |       \
    \  ^^    ---- this expression has type `Option<isize>`\n   |         |\n   | \
    \        expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpir3qblfs.rs:21:9\n\
    \   |\n21 |     for &i in decimal {\n   |         ^^    ------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `i`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut counter = vec![];\n    for i in arr {\n        if i.is_zero()\
    \ {\n            continue;\n        }\n        let mut counter = counter.clone();\n\
    \        counter.push(i);\n        let mut max_counter = counter.iter().max().unwrap();\n\
    \        let mut max_counter_index = counter.iter().position(|&x| x == max_counter).unwrap();\n\
    \        let mut max_counter_value = counter[max_counter_index];\n        let\
    \ mut max_counter_index = max_counter_index.clone();\n        while let Some(index)\
    \ = (max_counter_index.clone() + 1).cloned() {\n            if counter[index]\
    \ == max_counter_value {\n                max_counter_index = index;\n       \
    \         max_counter_value = counter[index];\n            } else {\n        \
    \        break;\n            }\n        }\n        result.push(max_counter_index);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_zero` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp3lmr4o_7.rs:9:14\n  |\n9 |         if i.is_zero() {\n  |\
    \              ^^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3lmr4o_7.rs:15:71\n   |\n15 |         let mut max_counter_index\
    \ = counter.iter().position(|&x| x == max_counter).unwrap();\n   |           \
    \                                                            ^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    15 |         let mut max_counter_index = counter.iter().position(|&x| x == *max_counter).unwrap();\n\
    \   |                                                                       +\n\
    \nerror[E0599]: `usize` is not an iterator\n  --> /tmp/tmp3lmr4o_7.rs:18:65\n\
    \   |\n18 |         while let Some(index) = (max_counter_index.clone() + 1).cloned()\
    \ {\n   |                                                                 ^^^^^^\
    \ `usize` is not an iterator\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `usize: Iterator`\n           which is required by\
    \ `&mut usize: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3lmr4o_7.rs:28:5\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n28 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        match x {\n     \
    \       0 => 0,\n            1 => 1,\n            _ => -1,\n        }\n    });\n\
    \    sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 2, 3, 4, 1]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpljiukp_1.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = 0;\n    for x in arr {\n        if x % 2 == 1\
    \ {\n            ones += 1;\n        } else {\n            result.push((ones,\
    \ x));\n            ones = 0;\n        }\n    }\n    result.sort_by_key(|(_, x)|\
    \ x.0);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `0` on type `&isize`\n  --> /tmp/tmpdv5enp0z.rs:16:35\n\
    \   |\n16 |     result.sort_by_key(|(_, x)| x.0);\n   |                      \
    \             ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdv5enp0z.rs:17:5\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n17 |     result\n   |     ^^^^^^ expected `isize`, found tuple\n   |\n  \
    \ = note: expected struct `Vec<isize>`\n              found struct `Vec<({integer},\
    \ isize)>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0609.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut decimal = Vec::new();\n\
    \    for &i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n   \
    \     } else {\n            decimal.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    decimal = sort_array(decimal);\n    for i in 0..ones.len() {\n        result.push(ones[i]);\n\
    \    }\n    for i in 0..decimal.len() {\n        result.push(decimal[i]);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbdl0x93j.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    });\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk1ci49i0.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk1ci49i0.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n --> /tmp/tmpk1ci49i0.rs:5:35\n \
    \ |\n5 | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n  |    ----------   \
    \                  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for &i in arr {\n       \
    \ if i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    let mut i = 0;\n    for &i\
    \ in ones {\n        result.push(i);\n    }\n    for &i in result {\n        i\
    \ += i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2noercu2.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2noercu2.rs:17:9\n   |\n17 |     for &i in ones {\n   |\
    \         ^^    ---- this expression has type `isize`\n   |         |\n   |  \
    \       expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2noercu2.rs:20:9\n\
    \   |\n20 |     for &i in result {\n   |         ^^    ------ this expression\
    \ has type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        if x == 1 {\n   \
    \         0\n        } else {\n            1\n        }\n    });\n    sorted_arr.sort_by_key(|x|\
    \ {\n        if x == 1 {\n            0\n        } else {\n            x.to_dec()\n\
    \        }\n    });\n    sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n --> /tmp/tmp689v682q.rs:8:14\n\
    \  |\n8 |         if x == 1 {\n  |              ^^ no implementation for `&isize\
    \ == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp689v682q.rs:15:14\n\
    \   |\n15 |         if x == 1 {\n   |              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0599]: no method named `to_dec` found for reference\
    \ `&isize` in the current scope\n  --> /tmp/tmp689v682q.rs:18:15\n   |\n18 | \
    \            x.to_dec()\n   |               ^^^^^^ help: there is an associated\
    \ function with a similar name: `to_be`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n      \
    \      1\n        } else {\n            -1\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9t1a_6kd.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9t1a_6kd.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    for i in ones {\n       \
    \ result.push(i);\n    }\n    for i in result {\n        result.push(i);\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `result`\n   --> /tmp/tmp13ygzimb.rs:20:9\n\
    \    |\n6   |     let mut result = vec![];\n    |         ---------- move occurs\
    \ because `result` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n19  |     for i in result {\n    |              ------\n    |  \
    \            |\n    |              `result` moved due to this implicit call to\
    \ `.into_iter()`\n    |              help: consider borrowing to avoid moving\
    \ into the for loop: `&result`\n20  |         result.push(i);\n    |         ^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `result`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpeossukga.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by(|a, b| {\n        match a % 2 {\n  \
    \          0 => a.cmp(b),\n            _ => a.cmp(b).reverse(),\n        }\n \
    \   });\n    sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n \
    \   assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 1, 2, 4]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmprs__i9o5.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        if i & 1 == 1 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_by(|a, b| a.cmp(b));\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk18fqui0.rs:13:5\n   |\n\
    5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in 0..i {\n            if i & (1 << j) != 0 {\n                count += 1;\n\
    \            }\n        }\n        result.push((count as isize).cmp(&i));\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjcyl7zrh.rs:9:21\n  |\n9 |\
    \         for j in 0..i {\n  |                     ^ expected integer, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |         for j in 0..*i\
    \ {\n  |                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjcyl7zrh.rs:16:5\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found enum `std::cmp::Ordering`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<std::cmp::Ordering>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        let mut counter =\
    \ 0;\n        for &i in &x {\n            if i == 1 {\n                counter\
    \ += 1;\n            }\n        }\n        counter\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&&isize` is not an iterator\n --> /tmp/tmpmt0f63r4.rs:9:19\n\
    \  |\n9 |         for &i in &x {\n  |                   ^^ `&&isize` is not an\
    \ iterator\n  |\n  = help: the trait `Iterator` is not implemented for `&&isize`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: -1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j\
    \ = i;\n        while j < arr.len() && arr[j] == 1 {\n            j += 1\n   \
    \     }\n        let mut k = i;\n        while k < j && arr[k] == 0 {\n      \
    \      k += 1\n        }\n        if k > j {\n            result.push(arr[i]);\n\
    \            i += 1;\n        } else {\n            result.push(arr[j]);\n   \
    \         j = k;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpeossukga.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut zeros = Vec::new();\n\
    \    for &i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n   \
    \     } else {\n            zeros.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    zeros = sort_array(zeros);\n    for &i in ones {\n        result.push(i);\n\
    \    }\n    for &i in zeros {\n        result.push(i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4qix0ju6.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4qix0ju6.rs:18:9\n   |\n18 |     for &i in ones {\n   |       \
    \  ^^    ---- this expression has type `Option<isize>`\n   |         |\n   | \
    \        expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4qix0ju6.rs:21:9\n\
    \   |\n21 |     for &i in zeros {\n   |         ^^    ----- this expression has\
    \ type `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `i`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            0\n \
    \       }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuhikaz8b.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuhikaz8b.rs:10:13\n   |\n10 |\
    \             0\n   |             ^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in 0..i {\n            if arr[j] == 1 {\n                count += 1;\n   \
    \         }\n        }\n        result.push((count as isize).cmp(&i));\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpysxmkqz5.rs:9:21\n  |\n9 |\
    \         for j in 0..i {\n  |                     ^ expected integer, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |         for j in 0..*i\
    \ {\n  |                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpysxmkqz5.rs:16:5\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found enum `std::cmp::Ordering`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<std::cmp::Ordering>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut res\
    \ = vec![];\n    for i in arr {\n        if i & 1 == 1 {\n            res.push(i);\n\
    \        }\n    }\n    res.sort_by_key(|x| x.to_dec());\n    return res;\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_dec` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp2i2qkers.rs:12:27\n   |\n12 |     res.sort_by_key(|x|\
    \ x.to_dec());\n   |                           ^^^^^^ help: there is an associated\
    \ function with a similar name: `to_be`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n      \
    \      1\n        } else {\n            -1\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9t1a_6kd.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9t1a_6kd.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    if ones.len() > result.len() {\n        ones = sort_array(ones);\n\
    \    }\n    for i in ones {\n        result.push(i);\n    }\n    if result.len()\
    \ > arr.len() {\n        result = sort_array(result);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `arr`\n   --> /tmp/tmp0rgyre4q.rs:21:23\n\
    \    |\n5   | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    |          \
    \     --- move occurs because `arr` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n8   |     for i in arr {\n    |              --- `arr`\
    \ moved due to this implicit call to `.into_iter()`\n...\n21  |     if result.len()\
    \ > arr.len() {\n    |                       ^^^^^^^^^ value borrowed here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `arr`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\
    \ to avoid moving into the `for` loop\n    |\n8   |     for i in &arr {\n    |\
    \              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for &i in arr {\n       \
    \ if i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    let mut i = 0;\n    for &i\
    \ in ones {\n        result.push(i + (*arr.iter().skip(i).take(1).count() as isize));\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7mnk0t6f.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7mnk0t6f.rs:17:9\n   |\n17 |     for &i in ones {\n   |       \
    \  ^^    ---- this expression has type `Option<isize>`\n   |         |\n   | \
    \        expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0614]: type `usize` cannot be dereferenced\n\
    \  --> /tmp/tmp7mnk0t6f.rs:18:26\n   |\n18 |         result.push(i + (*arr.iter().skip(i).take(1).count()\
    \ as isize));\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        let mut count = 0;\n\
    \        for i in 0..32 {\n            if x & (1 << i) != 0 {\n              \
    \  count += 1;\n            }\n        }\n        count / 32.0\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `{integer}` by `{float}`\n  --> /tmp/tmpnzmqi3d0.rs:14:15\n\
    \   |\n14 |         count / 32.0\n   |               ^ no implementation for `{integer}\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        if x == 1 {\n   \
    \         0\n        } else {\n            1\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n --> /tmp/tmpa5aoyadd.rs:8:14\n\
    \  |\n8 |         if x == 1 {\n  |              ^^ no implementation for `&isize\
    \ == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr {\n        let mut count = 0;\n        while i >>\
    \ count != 0 {\n            count += 1;\n        }\n        result.push(i);\n\
    \    }\n    result.sort_by_key(|x| {\n        let mut count = 0;\n        let\
    \ mut i = x;\n        while i >> count != 0 {\n            count += 1;\n     \
    \   }\n        count - i\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 4, 1, 2]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpt64kb_gq.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[j] {\n            result.push(arr[j]);\n        \
    \    i += 1;\n        } else {\n            result.push(arr[i]);\n           \
    \ j += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3,\
    \ 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6, -5,\
    \ -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /tmp/tmpyh80_ucr.rs:10:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for &i in arr {\n       \
    \ if i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    for &i in ones {\n      \
    \  result.push(i);\n    }\n    result.sort_by(|a, b| a.cmp(b));\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2njezv_n.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2njezv_n.rs:16:9\n   |\n16 |     for &i in ones {\n   |       \
    \  ^^    ---- this expression has type `Option<isize>`\n   |         |\n   | \
    \        expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpeossukga.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: -1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut decimal = Vec::new();\n\
    \    for x in arr {\n        if x % 2 == 0 {\n            ones.push(x);\n    \
    \    } else {\n            decimal.push(x);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    decimal = sort_array(decimal);\n    for x in ones {\n        result.push(x);\n\
    \    }\n    for x in decimal {\n        result.push(x);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut res\
    \ = vec![];\n    for i in arr {\n        if i & 1 == 1 {\n            res.push(i);\n\
    \        }\n    }\n    res.sort_by_key(|x| x.to_dec());\n    return res;\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_dec` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp2i2qkers.rs:12:27\n   |\n12 |     res.sort_by_key(|x|\
    \ x.to_dec());\n   |                           ^^^^^^ help: there is an associated\
    \ function with a similar name: `to_be`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr {\n        if i & 1 == 1 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_by_key(|x| x.to_dec());\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_dec` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmptfzrgjav.rs:12:30\n   |\n12 |     result.sort_by_key(|x|\
    \ x.to_dec());\n   |                              ^^^^^^ help: there is an associated\
    \ function with a similar name: `to_be`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        let mut a = a.to_bin();\n        let mut b = b.to_bin();\n   \
    \     if a < b {\n            1\n        } else {\n            -1\n        }\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_bin` found for reference `&isize` in\
    \ the current scope\n --> /tmp/tmpl5nw5cwb.rs:7:23\n  |\n7 |         let mut a\
    \ = a.to_bin();\n  |                       ^^^^^^ help: there is an associated\
    \ function with a similar name: `to_be`\n\nerror[E0599]: no method named `to_bin`\
    \ found for reference `&isize` in the current scope\n --> /tmp/tmpl5nw5cwb.rs:8:23\n\
    \  |\n8 |         let mut b = b.to_bin();\n  |                       ^^^^^^ help:\
    \ there is an associated function with a similar name: `to_be`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl5nw5cwb.rs:10:13\n   |\n10 |             1\n\
    \   |             ^ expected enum `std::cmp::Ordering`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl5nw5cwb.rs:12:13\n   |\n12 |             -1\n\
    \   |             ^^ expected enum `std::cmp::Ordering`, found integer\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut zeros = Vec::new();\n\
    \    for x in arr {\n        if x % 2 == 0 {\n            zeros.push(x);\n   \
    \     } else {\n            ones.push(x);\n        }\n    }\n    while zeros.len()\
    \ > 0 {\n        let mut min_zero = zeros.iter().min().unwrap();\n        let\
    \ mut min_one = ones.iter().min().unwrap();\n        if min_zero < min_one {\n\
    \            result.push(min_zero);\n            zeros.remove(min_zero);\n   \
    \     } else {\n            result.push(min_one);\n            ones.remove(min_one);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfcf5qof5.rs:21:26\n   |\n\
    21 |             zeros.remove(min_zero);\n   |                          ^^^^^^^^\
    \ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfcf5qof5.rs:24:25\n\
    \   |\n24 |             ones.remove(min_one);\n   |                         ^^^^^^^\
    \ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfcf5qof5.rs:27:5\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n27 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        let mut count = 0;\n\
    \        for i in 0..32 {\n            if x & (1 << i) != 0 {\n              \
    \  count += 1;\n            }\n        }\n        count as isize\n    });\n  \
    \  sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpm0z26ry0.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976096
