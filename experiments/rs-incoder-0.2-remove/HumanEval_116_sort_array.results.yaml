language: rs
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter() {\n        let mut count = 0;\n     \
    \   for j in 0..i {\n            if j % 2 == 0 {\n                count += 1;\n\
    \            }\n        }\n        if count > result.len() {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_by_key(|x| {\n        let mut count = 0;\n\
    \        for j in 0..x {\n            if j % 2 == 0 {\n                count +=\
    \ 1;\n            }\n        }\n        count / 2\n    });\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdo2_j4ek.rs:9:21\n  |\n9 |\
    \         for j in 0..i {\n  |                     ^ expected integer, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |         for j in 0..*i\
    \ {\n  |                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdo2_j4ek.rs:20:21\n\
    \   |\n20 |         for j in 0..x {\n   |                     ^ expected integer,\
    \ found `&&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdo2_j4ek.rs:27:5\n\
    \   |\n5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n27 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for &i in arr {\n       \
    \ if i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    let mut i = 0;\n    for &i\
    \ in ones {\n        result.push(i + (*ones)[i as usize]);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7qqltbdy.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7qqltbdy.rs:17:9\n   |\n17 |     for &i in ones {\n   |\
    \         ^^    ---- this expression has type `isize`\n   |         |\n   |  \
    \       expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747890
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    for i in ones {\n       \
    \ result.push(i);\n    }\n    for i in result {\n        result.push(i);\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `result`\n   --> /tmp/tmp13ygzimb.rs:20:9\n\
    \    |\n6   |     let mut result = vec![];\n    |         ---------- move occurs\
    \ because `result` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n19  |     for i in result {\n    |              ------\n    |  \
    \            |\n    |              `result` moved due to this implicit call to\
    \ `.into_iter()`\n    |              help: consider borrowing to avoid moving\
    \ into the for loop: `&result`\n20  |         result.push(i);\n    |         ^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `result`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut ones = vec![];\n    for x in arr {\n        if x == 0\
    \ {\n            ones.push(x);\n        } else {\n            let mut i = 0;\n\
    \            while i < ones.size() && ones[i] != x {\n                i += 1;\n\
    \            }\n            result.push(i);\n            ones.push(x);\n     \
    \   }\n    }\n    result.sort_by(|a, b| {\n        let mut i = 0;\n        while\
    \ i < ones.size() && ones[i] != a {\n            i += 1;\n        }\n        i\
    \ - ones[i]\n    });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<isize>` in the\
    \ current scope\n  --> /tmp/tmp1eoe83zg.rs:13:28\n   |\n13 |             while\
    \ i < ones.size() && ones[i] != x {\n   |                            ^^^^ method\
    \ not found in `Vec<isize>`\n\nerror[E0599]: no method named `size` found for\
    \ struct `Vec<isize>` in the current scope\n  --> /tmp/tmp1eoe83zg.rs:22:24\n\
    \   |\n22 |         while i < ones.size() && ones[i] != a {\n   |            \
    \            ^^^^ method not found in `Vec<isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1eoe83zg.rs:22:45\n   |\n22 |         while i < ones.size()\
    \ && ones[i] != a {\n   |                                             ^ expected\
    \ `isize`, found `&usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1eoe83zg.rs:25:13\n\
    \   |\n25 |         i - ones[i]\n   |             ^^^^^^^ expected `usize`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1eoe83zg.rs:25:9\n\
    \   |\n25 |         i - ones[i]\n   |         ^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `usize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp1eoe83zg.rs:25:11\n\
    \   |\n25 |         i - ones[i]\n   |           ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1eoe83zg.rs:27:5\n   |\n5  | fn\
    \ sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                          \
    \         ---------- expected `Vec<isize>` because of return type\n...\n27 | \
    \    result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    });\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk1ci49i0.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk1ci49i0.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n --> /tmp/tmpk1ci49i0.rs:5:35\n \
    \ |\n5 | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n  |    ----------   \
    \                  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        if x == 0 {\n    \
    \        0\n        } else {\n            binary_to_decimal(x)\n        }\n  \
    \  });\n    sorted_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n  \
    \  assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `binary_to_decimal` in this scope\n\
    \  --> /tmp/tmpow7c9u_x.rs:11:13\n   |\n11 |             binary_to_decimal(x)\n\
    \   |             ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n --> /tmp/tmpow7c9u_x.rs:8:14\n  |\n8 | \
    \        if x == 0 {\n  |              ^^ no implementation for `&isize == {integer}`\n\
    \  |\n  = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut i = 0;\n    while i < arr.len() {\n        let mut\
    \ j = i;\n        while j < arr.len() && arr[j] == 0 {\n            j = j + 1;\n\
    \        }\n        if j - i > 1 {\n            result.push(i + arr[j] - arr[i]);\n\
    \            i = j;\n        } else {\n            result.push(i);\n         \
    \   i = i + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3bjad0w8.rs:14:29\n   |\n\
    14 |             result.push(i + arr[j] - arr[i]);\n   |                     \
    \        ^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize`\
    \ to `usize`\n  --> /tmp/tmp3bjad0w8.rs:14:27\n   |\n14 |             result.push(i\
    \ + arr[j] - arr[i]);\n   |                           ^ no implementation for\
    \ `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3bjad0w8.rs:14:38\n\
    \   |\n14 |             result.push(i + arr[j] - arr[i]);\n   |              \
    \                        ^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp3bjad0w8.rs:14:36\n   |\n\
    14 |             result.push(i + arr[j] - arr[i]);\n   |                     \
    \               ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3bjad0w8.rs:21:5\n   |\n5  | fn sort_array(arr: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                   ---------- expected\
    \ `Vec<isize>` because of return type\n...\n21 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    let mut zeros = Vec::new();\n\
    \    let mut max_ones = Vec::new();\n    let mut max_zeros = Vec::new();\n   \
    \ for &i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n      \
    \  } else {\n            zeros.push(i);\n        }\n    }\n    for i in ones {\n\
    \        if zeros.len() > 0 {\n            max_ones.push(i);\n            max_zeros.push(zeros.pop());\n\
    \        } else {\n            max_ones.push(i);\n        }\n    }\n    for i\
    \ in max_ones {\n        result.push(i);\n    }\n    for i in max_zeros {\n  \
    \      result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzckwilrm.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzckwilrm.rs:30:21\n   |\n30 |         result.push(i);\n\
    \   |                     ^ cyclic type of infinite size\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut res\
    \ = vec![];\n    let mut ones = vec![];\n    for i in arr {\n        if i & 1\
    \ == 1 {\n            ones.push(i);\n        } else {\n            res.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    res.sort_by(|a, b| {\n  \
    \      ones[a].cmp(&ones[b])\n    });\n    res\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpe2hfzpe8.rs:17:9\n\
    \   |\n17 |         ones[a].cmp(&ones[b])\n   |         ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `&isize`\n  --> /tmp/tmpe2hfzpe8.rs:17:22\n   |\n17 | \
    \        ones[a].cmp(&ones[b])\n   |                      ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1kcw7ad.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1kcw7ad.rs:6:5\n \
    \  |\n5  |   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |            \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    6  | /     arr.sort_by(|a, b| {\n7  | |         if a > b {\n8  | |           \
    \  1\n9  | |         } else {\n10 | |             -1\n11 | |         }\n12 | |\
    \     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in i {\n            if j == 1 {\n                count += 1;\n           \
    \ }\n        }\n        result.push(count);\n    }\n    result.sort_by_key(|x|\
    \ x.to_dec());\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n   --> /tmp/tmp80w_8i4q.rs:9:18\n\
    \    |\n9   |         for j in i {\n    |                  ^ `&isize` is not an\
    \ iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&isize`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\nnote: required by `into_iter`\n\nerror[E0599]: no method named\
    \ `to_dec` found for reference `&{integer}` in the current scope\n  --> /tmp/tmp80w_8i4q.rs:16:30\n\
    \   |\n16 |     result.sort_by_key(|x| x.to_dec());\n   |                    \
    \          ^^^^^^ method not found in `&{integer}`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        let mut count = 0;\n        for\
    \ j in 0..i {\n            if j % 2 == 0 {\n                count += 1;\n    \
    \        }\n        }\n        result.push(count);\n    }\n    result.sort_by_key(|x|\
    \ x.to_dec());\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkrtdqwrh.rs:9:21\n  |\n9 |\
    \         for j in 0..i {\n  |                     ^ expected integer, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |         for j in 0..*i\
    \ {\n  |                     +\n\nerror[E0599]: no method named `to_dec` found\
    \ for reference `&{integer}` in the current scope\n  --> /tmp/tmpkrtdqwrh.rs:16:30\n\
    \   |\n16 |     result.sort_by_key(|x| x.to_dec());\n   |                    \
    \          ^^^^^^ method not found in `&{integer}`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n     \
    \       1\n        } else {\n            -1\n        }\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsqsgjbhd.rs:9:13\n  |\n9 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsqsgjbhd.rs:11:13\n   |\n11 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n        let mut count = 0;\n\
    \        for i in 0..32 {\n            if x & (1 << i) != 0 {\n              \
    \  count += 1;\n            }\n        }\n        count\n    });\n    sorted_arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp4_z_iocy.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter() {\n        let mut count = 0;\n     \
    \   for j in i {\n            if j == 1 {\n                count += 1;\n     \
    \       }\n        }\n        result.push((count as isize).cmp(&i));\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n   --> /tmp/tmprf_zqz1u.rs:9:18\n\
    \    |\n9   |         for j in i {\n    |                  ^ `&isize` is not an\
    \ iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&isize`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\nnote: required by `into_iter`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprf_zqz1u.rs:16:5\n   |\n5  | fn sort_array(arr: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                   ---------- expected `Vec<isize>`\
    \ because of return type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found enum `std::cmp::Ordering`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<std::cmp::Ordering>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for &i in arr {\n       \
    \ if i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    result = sort_array(result);\n\
    \    result.extend(ones);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplttxercd.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747890
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    });\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk1ci49i0.rs:8:13\n  |\n8 |\
    \             1\n  |             ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk1ci49i0.rs:10:13\n   |\n10 |\
    \             -1\n   |             ^^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n --> /tmp/tmpk1ci49i0.rs:5:35\n \
    \ |\n5 | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n  |    ----------   \
    \                  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        let mut i = x;\n \
    \       let mut j = x;\n        while i > 0 && j > 0 {\n            if i & 1 ==\
    \ 1 {\n                i >>= 1;\n            } else {\n                j >>= 1;\n\
    \            }\n        }\n        j\n    });\n    sorted_arr\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75jrcii1.rs:10:19\n   |\n\
    10 |         while i > 0 && j > 0 {\n   |                   ^\n   |          \
    \         |\n   |                   expected `&isize`, found integer\n   |   \
    \                help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp75jrcii1.rs:10:28\n   |\n10 |         while i > 0 && j\
    \ > 0 {\n   |                            ^\n   |                            |\n\
    \   |                            expected `&isize`, found integer\n   |      \
    \                      help: consider borrowing here: `&0`\n\nerror[E0368]: binary\
    \ assignment operation `>>=` cannot be applied to type `&isize`\n  --> /tmp/tmp75jrcii1.rs:12:17\n\
    \   |\n12 |                 i >>= 1;\n   |                 -^^^^^^\n   |     \
    \            |\n   |                 cannot use `>>=` on type `&isize`\n   |\n\
    help: `>>=` can be used on `isize`, you can dereference `i`\n   |\n12 |      \
    \           *i >>= 1;\n   |                 +\n\nerror[E0368]: binary assignment\
    \ operation `>>=` cannot be applied to type `&isize`\n  --> /tmp/tmp75jrcii1.rs:14:17\n\
    \   |\n14 |                 j >>= 1;\n   |                 -^^^^^^\n   |     \
    \            |\n   |                 cannot use `>>=` on type `&isize`\n   |\n\
    help: `>>=` can be used on `isize`, you can dereference `j`\n   |\n14 |      \
    \           *j >>= 1;\n   |                 +\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j\
    \ = i;\n        while j < arr.len() && arr[j] == 1 {\n            j += 1\n   \
    \     }\n        if j == i {\n            result.push(i);\n            i += 1;\n\
    \        } else {\n            let mut k = i;\n            while k > 0 && arr[k]\
    \ == 0 {\n                k -= 1\n            }\n            result.push(k);\n\
    \            i = k + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9stzbqcx.rs:25:5\n   |\n\
    5  | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    25 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    let mut ones = Vec::new();\n    for &i in arr {\n       \
    \ if i & 1 == 1 {\n            ones.push(i);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    let mut i = 0;\n    for &i\
    \ in ones {\n        result.push(i);\n    }\n    for &i in result {\n        i\
    \ += i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2noercu2.rs:8:9\n  |\n8 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2noercu2.rs:17:9\n   |\n17 |     for &i in ones {\n   |\
    \         ^^    ---- this expression has type `isize`\n   |         |\n   |  \
    \       expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2noercu2.rs:20:9\n\
    \   |\n20 |     for &i in result {\n   |         ^^    ------ this expression\
    \ has type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747891
