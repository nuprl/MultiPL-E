language: rs
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b'0',\n            b'1',\n            b'2',\n       \
    \     b'3',\n            b'4',\n            b'5',\n            b'6',\n       \
    \     b'7',\n            b'8',\n            b'9',\n            b'a',\n       \
    \     b'b',\n            b'c',\n            b'd',\n            b'e',\n       \
    \     b'f',\n            b'g',\n            b'h',\n            b'i',\n       \
    \     b'j',\n            b'k',\n            b'l',\n            b'm',\n       \
    \     b'n',\n            b'o',\n            b'p',\n            b'q',\n       \
    \     b'r',\n            b's',\n            b't',\n            b'u',\n       \
    \     b'v',\n            b'w',\n            b'x',\n            b'y',\n       \
    \     b'z',\n            b'A',\n            b'B',\n            b'C',\n       \
    \     b'D',\n            b'E',\n            b'F',\n            b'G',\n       \
    \     b'H',\n            b'I',\n            b'J',\n            b'K',\n       \
    \     b'L',\n            b'M',\n            b'N',\n            b'O',\n       \
    \     b'P',\n            b'Q',\n            b'R',\n            b'S',\n       \
    \     b'T',\n            b'U',\n            b'V',\n            b'W',\n       \
    \     b'X',\n            b'Y',\n            b'Z',\n            b'0',\n       \
    \     b'1',\n            b'2',\n            b'3',\n            b'4',\n       \
    \     b'5',\n            b'6',\n            b'7',\n            b'8',\n       \
    \     b'9',\n            b'a',\n            b'b',\n            b'c',\n       \
    \     b'd',\n            b'e',\n            b'f',\n            b'g',\n       \
    \     b'h',\n            b'i',\n            b'j',\n            b'k',\n       \
    \     b'l',\n            b'm',\n            b'n',\n            b'o',\n       \
    \     b'p',\n            b'q',\n            b'r',\n            b's',\n       \
    \     b't',\n            b'u',\n            b'v',\n            b'w',\n       \
    \     b'x',\n            b'y',\n            b'z',\n            b'A',\n       \
    \     b'B',\n            b'C',\n            b'D',\n            b'E',\n       \
    \     b'F',\n            b'G',\n            b'H',\n            b'I',\n       \
    \     b'J',\n            b'K',\n            b'L',\n            b'M',\n       \
    \     \n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpns730eob.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8_lossy(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n117 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpns730eob.rs:3:5\n    |\n2   |   fn string_sequence(n:\
    \ isize) -> String {\n    |                                   ------ expected\
    \ `String` because of return type\n3   | /     String::from_utf8_lossy(\n4   |\
    \ |         &[\n5   | |             b'0',\n6   | |             b'1',\n...   |\n\
    116 | |             \n117 | | }\n    | | ^- help: try using a conversion method:\
    \ `.to_string()`\n    | |_|\n    |   expected struct `String`, found enum `Cow`\n\
    \    |\n    = note: expected struct `String`\n                 found enum `Cow<'_,\
    \ str>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{:02x}, \".format(i);\n\
    \    }\n    s.chomp()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmp6hzvuear.rs:5:25\n  |\n5 |         s += \"\
    {:02x}, \".format(i);\n  |                         ^^^^^^ method not found in\
    \ `&'static str`\n\nerror[E0599]: no method named `chomp` found for struct `String`\
    \ in the current scope\n --> /tmp/tmp6hzvuear.rs:7:7\n  |\n7 |     s.chomp()\n\
    \  |       ^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0\".to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikzqviee.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s += \" \";\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpl9zbt0j8.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0252]: the name `repeat` is defined multiple times\n --> /tmp/tmpb9thyzqc.rs:4:9\n\
    \  |\n3 |     use std::iter::repeat;\n  |         ----------------- previous import\
    \ of the value `repeat` here\n4 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^\
    \ `repeat` reimported here\n  |\n  = note: `repeat` must be defined only once\
    \ in the value namespace of this block\n\nerror[E0252]: the name `repeat` is defined\
    \ multiple times\n --> /tmp/tmpb9thyzqc.rs:5:9\n  |\n3 |     use std::iter::repeat;\n\
    \  |         ----------------- previous import of the value `repeat` here\n4 |\
    \     use std::iter::repeat;\n5 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^\
    \ `repeat` reimported here\n  |\n  = note: `repeat` must be defined only once\
    \ in the value namespace of this block\n\nerror[E0252]: the name `repeat` is defined\
    \ multiple times\n --> /tmp/tmpb9thyzqc.rs:6:9\n  |\n3 |     use std::iter::repeat;\n\
    \  |         ----------------- previous import of the value `repeat` here\n...\n\
    6 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^ `repeat` reimported\
    \ here\n  |\n  = note: `repeat` must be defined only once in the value namespace\
    \ of this block\n\nerror[E0252]: the name `repeat` is defined multiple times\n\
    \ --> /tmp/tmpb9thyzqc.rs:7:9\n  |\n3 |     use std::iter::repeat;\n  |      \
    \   ----------------- previous import of the value `repeat` here\n...\n7 |   \
    \  use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^ `repeat` reimported here\n\
    \  |\n  = note: `repeat` must be defined only once in the value namespace of this\
    \ block\n\nerror[E0252]: the name `repeat` is defined multiple times\n --> /tmp/tmpb9thyzqc.rs:8:9\n\
    \  |\n3 |     use std::iter::repeat;\n  |         ----------------- previous import\
    \ of the value `repeat` here\n...\n8 |     use std::iter::repeat;\n  |       \
    \  ^^^^^^^^^^^^^^^^^ `repeat` reimported here\n  |\n  = note: `repeat` must be\
    \ defined only once in the value namespace of this block\n\nerror[E0252]: the\
    \ name `repeat` is defined multiple times\n --> /tmp/tmpb9thyzqc.rs:9:9\n  |\n\
    3 |     use std::iter::repeat;\n  |         ----------------- previous impo"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8(\n\
    \        &[\n            b'0',\n            b'1',\n            b'2',\n       \
    \     b'3',\n            b'4',\n            b'5',\n            b'6',\n       \
    \     b'7',\n            b'8',\n            b'9',\n            b'a',\n       \
    \     b'b',\n            b'c',\n            b'd',\n            b'e',\n       \
    \     b'f',\n            b'g',\n            b'h',\n            b'i',\n       \
    \     b'j',\n            b'k',\n            b'l',\n            b'm',\n       \
    \     b'n',\n            b'o',\n            b'p',\n            b'q',\n       \
    \     b'r',\n            b's',\n            b't',\n            b'u',\n       \
    \     b'v',\n            b'w',\n            b'x',\n            b'y',\n       \
    \     b'z',\n            b'A',\n            b'B',\n            b'C',\n       \
    \     b'D',\n            b'E',\n            b'F',\n            b'G',\n       \
    \     b'H',\n            b'I',\n            b'J',\n            b'K',\n       \
    \     b'L',\n            b'M',\n            b'N',\n            b'O',\n       \
    \     b'P',\n            b'Q',\n            b'R',\n            b'S',\n       \
    \     b'T',\n            b'U',\n            b'V',\n            b'W',\n       \
    \     b'X',\n            b'Y',\n            b'Z',\n            b'0',\n       \
    \     b'1',\n            b'2',\n            b'3',\n            b'4',\n       \
    \     b'5',\n            b'6',\n            b'7',\n            b'8',\n       \
    \     b'9',\n            b'a',\n            b'b',\n            b'c',\n       \
    \     b'd',\n            b'e',\n            b'f',\n            b'g',\n       \
    \     b'h',\n            b'i',\n            b'j',\n            b'k',\n       \
    \     b'l',\n            b'm',\n            b'n',\n            b'o',\n       \
    \     b'p',\n            b'q',\n            b'r',\n            b's',\n       \
    \     b't',\n            b'u',\n            b'v',\n            b'w',\n       \
    \     b'x',\n            b'y',\n            b'z',\n            b'A',\n       \
    \     b'B',\n            b'C',\n            b'D',\n            b'E',\n       \
    \     b'F',\n            b'G',\n            b'H',\n            b'I',\n       \
    \     b'J',\n            b'K',\n            b'L',\n            b'M',\n       \
    \     b'N',\n\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpz_o49zm6.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n118 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpz_o49zm6.rs:4:9\n    |\n4   | /         &[\n5   | |  \
    \           b'0',\n6   | |             b'1',\n7   | |             b'2',\n... \
    \  |\n117 | |\n118 | | }\n    | |_^ expected struct `Vec`, found `&[u8; 112]`\n\
    \    |\n    = note: expected struct `Vec<u8>`\n            found reference `&[u8;\
    \ 112]`\nhelp: try using a conversion method\n    |\n4   ~         (&[\n5   |\
    \             b'0',\n6   |             b'1',\n7   |             b'2',\n8   | \
    \            b'3',\n9   |             b'4',\n  ...\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpz_o49zm6.rs:3:5\n    |\n2   |   fn string_sequence(n:\
    \ isize) -> String {\n    |                                   ------ expected\
    \ `String` because of return type\n3   | /     String::from_utf8(\n4   | |   \
    \      &[\n5   | |             b'0',\n6   | |             b'1',\n...   |\n117\
    \ | |\n118 | | }\n    | |_^ expected struct `String`, found enum `Result`\n  \
    \  |\n    = note: expected struct `String`\n                 found enum `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::iter::repeat;\n\
    \    use std::fmt::Write;\n    use std::str::FromStr;\n    use std::str::FromStrExt;\n\
    \    use std::str::FromStrError;\n\n    let mut s = String::new();\n    for _\
    \ in 0..n {\n        write!(&mut s, \"{}\", 0).unwrap();\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `std::str::FromStrExt`\n --> /tmp/tmp_ukyy8a6.rs:6:9\n\
    \  |\n6 |     use std::str::FromStrExt;\n  |         ^^^^^^^^^^----------\n  |\
    \         |         |\n  |         |         help: a similar name exists in the\
    \ module: `FromStr`\n  |         no `FromStrExt` in `str`\n\nerror[E0432]: unresolved\
    \ import `std::str::FromStrError`\n --> /tmp/tmp_ukyy8a6.rs:7:9\n  |\n7 |    \
    \ use std::str::FromStrError;\n  |         ^^^^^^^^^^^^^^^^^^^^^^ no `FromStrError`\
    \ in `str`\n\nwarning: unused import: `std::iter::repeat`\n --> /tmp/tmp_ukyy8a6.rs:3:9\n\
    \  |\n3 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^\n  |\n  =\
    \ note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import: `std::str::FromStr`\n\
    \ --> /tmp/tmp_ukyy8a6.rs:5:9\n  |\n5 |     use std::str::FromStr;\n  |      \
    \   ^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0432`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b\"0\",\n            b\"1\",\n            b\"2\",\n \
    \           b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"\
    6\",\n            b\"7\",\n            b\"8\",\n            b\"9\",\n        \
    \    b\"10\",\n            b\"11\",\n            b\"12\",\n            b\"13\"\
    ,\n            b\"14\",\n            b\"15\",\n            b\"16\",\n        \
    \    b\"17\",\n            b\"18\",\n            b\"19\",\n            b\"20\"\
    ,\n            b\"21\",\n            b\"22\",\n            b\"23\",\n        \
    \    b\"24\",\n            b\"25\",\n            b\"26\",\n            b\"27\"\
    ,\n            b\"28\",\n            b\"29\",\n            b\"30\",\n        \
    \    b\"31\",\n            b\"32\",\n            b\"33\",\n            b\"34\"\
    ,\n            b\"35\",\n            b\"36\",\n            b\"37\",\n        \
    \    b\"38\",\n            b\"39\",\n            b\"40\",\n            b\"41\"\
    ,\n            b\"42\",\n            b\"43\",\n            b\"44\",\n        \
    \    b\"45\",\n            b\"46\",\n            b\"47\",\n            b\"48\"\
    ,\n            b\"49\",\n            b\"50\",\n            b\"51\",\n        \
    \    b\"52\",\n            b\"53\",\n            b\"54\",\n            b\"55\"\
    ,\n            b\"56\",\n            b\"57\",\n            b\"58\",\n        \
    \    b\"59\",\n            b\"60\",\n            b\"61\",\n            b\"62\"\
    ,\n            b\"63\",\n            b\"64\",\n            b\"65\",\n        \
    \    b\"66\",\n            b\"67\",\n            b\"68\",\n            b\"69\"\
    ,\n            b\"70\",\n            b\"71\",\n            b\"72\",\n        \
    \    b\"73\",\n            b\"74\",\n            b\"75\",\n            b\"76\"\
    ,\n            b\"77\",\n            b\"78\",\n            b\"79\",\n        \
    \    b\"80\",\n            b\"81\",\n            b\"82\",\n            b\"83\"\
    ,\n            b\"84\",\n            b\"85\",\n            b\"86\",\n        \
    \    b\"87\",\n            b\"88\",\n            b\"89\",\n            b\"90\"\
    ,\n            b\"91\",\n            b\"92\",\n            b\"93\",\n        \
    \    b\"94\",\n            b\"95\",\n            b\"96\",\n            b\"97\"\
    ,\n            b\"98\",\n            b\"99\",\n            b\"100\",\n       \
    \     b\"101\",\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpt_a_s904.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8_lossy(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n107 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpt_a_s904.rs:5:13\n  |\n5 |             b\"0\",\n  |    \
    \         ^^^^ expected `u8`, found `&[u8; 1]`\n\nerror[E0308]: mismatched types\n\
    \   --> /tmp/tmpt_a_s904.rs:3:5\n    |\n2   |   fn string_sequence(n: isize) ->\
    \ String {\n    |                                   ------ expected `String` because\
    \ of return type\n3   | /     String::from_utf8_lossy(\n4   | |         &[\n5\
    \   | |             b\"0\",\n6   | |             b\"1\",\n...   |\n106 | |   \
    \          b\"101\",\n107 | | }\n    | | ^- help: try using a conversion method:\
    \ `.to_string()`\n    | |_|\n    |   expected struct `String`, found enum `Cow`\n\
    \    |\n    = note: expected struct `String`\n                 found enum `Cow<'_,\
    \ str>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s.trim_end(',');\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmpkpkogd7u.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpkpkogd7u.rs:7:7\n     |\n7    |     s.trim_end(',');\n     |\
    \       ^^^^^^^^ --- supplied 1 argument\n     |       |\n     |       expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{:03}, \".format(i);\n \
    \   }\n    s[0..s.len() - 1]\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmprtow1bl8.rs:5:24\n  |\n5 |         s += \"\
    {:03}, \".format(i);\n  |                        ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n --> /tmp/tmprtow1bl8.rs:7:5\n  |\n\
    2 | fn string_sequence(n: isize) -> String {\n  |                            \
    \     ------ expected `String` because of return type\n...\n7 |     s[0..s.len()\
    \ - 1]\n  |     ^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |     |\n  |     expected struct `String`, found `str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"0\".to_string();\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoa5cehmt.rs:5:14\n  |\n5 |\
    \         s += \"0\".to_string();\n  |              ^^^^^^^^^^^^^^^\n  |     \
    \         |\n  |              expected `&str`, found struct `String`\n  |    \
    \          help: consider borrowing here: `&\"0\".to_string()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += format!(\"{}\", i);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbpjdmiy0.rs:5:14\n  |\n5 |\
    \         s += format!(\"{}\", i);\n  |              ^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n  |\n  = note: this error originates in the macro\
    \ `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0\".to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikzqviee.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(format!(\"{}\"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpseh0e7n5.rs:5:14\n  |\n5 |\
    \         s += String::from(format!(\"{}\", i));\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(format!(\"{}\"\
    , i))`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::iter::repeat;\n\
    \    use std::fmt::Write;\n    use std::str::FromStr;\n\n    let mut s = String::new();\n\
    \    for _ in 0..n {\n        write!(&mut s, \"{}\", 0).unwrap();\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpsz72ocbi.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975660
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"0\".to_string();\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoa5cehmt.rs:5:14\n  |\n5 |\
    \         s += \"0\".to_string();\n  |              ^^^^^^^^^^^^^^^\n  |     \
    \         |\n  |              expected `&str`, found struct `String`\n  |    \
    \          help: consider borrowing here: `&\"0\".to_string()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n    )\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgcubdi2h.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&[u8]`, found struct `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgcubdi2h.rs:3:5\n\
    \  |\n2 |   fn string_sequence(n: isize) -> String {\n  |                    \
    \               ------ expected `String` because of return type\n3 | /     String::from_utf8_lossy(\n\
    4 | |         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n\
    5 | |     )\n  | |     ^- help: try using a conversion method: `.to_string()`\n\
    \  | |_____|\n  |       expected struct `String`, found enum `Cow`\n  |\n  = note:\
    \ expected struct `String`\n               found enum `Cow<'_, str>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0\".to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikzqviee.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0123456789\"\
    .to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpin8q6vha.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0123456789\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0123456789\"\
    .to_string())`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s.push('1');\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"0\"`', /tmp/tmp3vu0vv0_.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975660
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s.push('1');\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"0\"`', /tmp/tmp3vu0vv0_.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975660
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s += \" \";\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpl9zbt0j8.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0\".to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikzqviee.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0123456789\"\
    .to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpin8q6vha.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0123456789\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0123456789\"\
    .to_string())`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s[0..s.len() - 1]\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmpnk3610cu.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnk3610cu.rs:7:5\n  |\n\
    2 | fn string_sequence(n: isize) -> String {\n  |                            \
    \     ------ expected `String` because of return type\n...\n7 |     s[0..s.len()\
    \ - 1]\n  |     ^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |     |\n  |     expected struct `String`, found `str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmp1cvo6tek.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmph0xhgeip.rs:3:46\n  |\n3 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s.trim_end(',');\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmpkpkogd7u.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpkpkogd7u.rs:7:7\n     |\n7    |     s.trim_end(',');\n     |\
    \       ^^^^^^^^ --- supplied 1 argument\n     |       |\n     |       expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{:02x}, \".format(i);\n\
    \    }\n    s.trim_end(',');\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmpwun39953.rs:5:25\n  |\n5 |         s += \"\
    {:02x}, \".format(i);\n  |                         ^^^^^^ method not found in\
    \ `&'static str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument\
    \ was supplied\n    --> /tmp/tmpwun39953.rs:7:7\n     |\n7    |     s.trim_end(',');\n\
    \     |       ^^^^^^^^ --- supplied 1 argument\n     |       |\n     |       expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0123456789\"\
    .to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpin8q6vha.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0123456789\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0123456789\"\
    .to_string())`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b\"0\",\n            b\"1\",\n            b\"2\",\n \
    \           b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"\
    6\",\n            b\"7\",\n            b\"8\",\n            b\"9\",\n        \
    \    b\"10\",\n            b\"11\",\n            b\"12\",\n            b\"13\"\
    ,\n            b\"14\",\n            b\"15\",\n            b\"16\",\n        \
    \    b\"17\",\n            b\"18\",\n            b\"19\",\n            b\"20\"\
    ,\n            b\"21\",\n            b\"22\",\n            b\"23\",\n        \
    \    b\"24\",\n            b\"25\",\n            b\"26\",\n            b\"27\"\
    ,\n            b\"28\",\n            b\"29\",\n            b\"30\",\n        \
    \    b\"31\",\n            b\"32\",\n            b\"33\",\n            b\"34\"\
    ,\n            b\"35\",\n            b\"36\",\n            b\"37\",\n        \
    \    b\"38\",\n            b\"39\",\n            b\"40\",\n            b\"41\"\
    ,\n            b\"42\",\n            b\"43\",\n            b\"44\",\n        \
    \    b\"45\",\n            b\"46\",\n            b\"47\",\n            b\"48\"\
    ,\n            b\"49\",\n            b\"50\",\n            b\"51\",\n        \
    \    b\"52\",\n            b\"53\",\n            b\"54\",\n            b\"55\"\
    ,\n            b\"56\",\n            b\"57\",\n            b\"58\",\n        \
    \    b\"59\",\n            b\"60\",\n            b\"61\",\n            b\"62\"\
    ,\n            b\"63\",\n            b\"64\",\n            b\"65\",\n        \
    \    b\"66\",\n            b\"67\",\n            b\"68\",\n            b\"69\"\
    ,\n            b\"70\",\n            b\"71\",\n            b\"72\",\n        \
    \    b\"73\",\n            b\"74\",\n            b\"75\",\n            b\"76\"\
    ,\n            b\"77\",\n            b\"78\",\n            b\"79\",\n        \
    \    b\"80\",\n            b\"81\",\n            b\"82\",\n            b\"83\"\
    ,\n            b\"84\",\n            b\"85\",\n            b\"86\",\n        \
    \    b\"87\",\n            b\"88\",\n            b\"89\",\n            b\"90\"\
    ,\n            b\"91\",\n            b\"92\",\n            b\"93\",\n        \
    \    b\"94\",\n            b\"95\",\n            b\"96\",\n            b\"97\"\
    ,\n            b\"98\",\n            b\"99\",\n            b\"100\",\n       \
    \     b\"101\",\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpt_a_s904.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8_lossy(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n107 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpt_a_s904.rs:5:13\n  |\n5 |             b\"0\",\n  |    \
    \         ^^^^ expected `u8`, found `&[u8; 1]`\n\nerror[E0308]: mismatched types\n\
    \   --> /tmp/tmpt_a_s904.rs:3:5\n    |\n2   |   fn string_sequence(n: isize) ->\
    \ String {\n    |                                   ------ expected `String` because\
    \ of return type\n3   | /     String::from_utf8_lossy(\n4   | |         &[\n5\
    \   | |             b\"0\",\n6   | |             b\"1\",\n...   |\n106 | |   \
    \          b\"101\",\n107 | | }\n    | | ^- help: try using a conversion method:\
    \ `.to_string()`\n    | |_|\n    |   expected struct `String`, found enum `Cow`\n\
    \    |\n    = note: expected struct `String`\n                 found enum `Cow<'_,\
    \ str>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0\".to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikzqviee.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0\".to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikzqviee.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa8ycnbgw.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&[u8]`, found struct `Vec`\n  |\n  = note: expected reference `&[u8]`\n\
    \                found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpa8ycnbgw.rs:3:5\n  |\n2 |   fn string_sequence(n: isize) -> String\
    \ {\n  |                                   ------ expected `String` because of\
    \ return type\n3 | /     String::from_utf8_lossy(\n4 | |         (0..n).map(|i|\
    \ i.to_string()).collect::<Vec<_>>(),\n5 | |     )\n  | |     ^- help: try using\
    \ a conversion method: `.to_string()`\n  | |_____|\n  |       expected struct\
    \ `String`, found enum `Cow`\n  |\n  = note: expected struct `String`\n      \
    \         found enum `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s.push('1');\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"0\"`', /tmp/tmp3vu0vv0_.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975660
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmp1cvo6tek.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(format!(\"{}\"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpseh0e7n5.rs:5:14\n  |\n5 |\
    \         s += String::from(format!(\"{}\", i));\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(format!(\"{}\"\
    , i))`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += &format!(\"{}\", i);\n   \
    \ }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmp6d_8_qfv.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975660
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[0; n].iter()\n            .map(|x| x.to_ascii_lowercase().to_string())\n\
    \            .collect::<Vec<_>>(),\n    )\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp7xkupko1.rs:4:14\n\
    \  |\n2 | fn string_sequence(n: isize) -> String {\n  |                    - this\
    \ would need to be a `const`\n3 |     String::from_utf8_lossy(\n4 |         &[0;\
    \ n].iter()\n  |              ^\n\nerror[E0599]: no method named `to_ascii_lowercase`\
    \ found for reference `&{integer}` in the current scope\n --> /tmp/tmp7xkupko1.rs:5:24\n\
    \  |\n5 |             .map(|x| x.to_ascii_lowercase().to_string())\n  |      \
    \                  ^^^^^^^^^^^^^^^^^^ method not found in `&{integer}`\n  |\n\
    \  = help: items from traits can only be used if the trait is in scope\nhelp:\
    \ the following trait is implemented but not in scope; perhaps add a `use` for\
    \ it:\n  |\n1 | use std::ascii::AsciiExt;\n  |\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp7xkupko1.rs:3:5\n  |\n2 |   fn string_sequence(n: isize) -> String\
    \ {\n  |                                   ------ expected `String` because of\
    \ return type\n3 | /     String::from_utf8_lossy(\n4 | |         &[0; n].iter()\n\
    5 | |             .map(|x| x.to_ascii_lowercase().to_string())\n6 | |        \
    \     .collect::<Vec<_>>(),\n7 | |     )\n  | |     ^- help: try using a conversion\
    \ method: `.to_string()`\n  | |_____|\n  |       expected struct `String`, found\
    \ enum `Cow`\n  |\n  = note: expected struct `String`\n               found enum\
    \ `Cow<'_, str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0435, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmph0xhgeip.rs:3:46\n  |\n3 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp0d9waj_i.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa8ycnbgw.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&[u8]`, found struct `Vec`\n  |\n  = note: expected reference `&[u8]`\n\
    \                found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpa8ycnbgw.rs:3:5\n  |\n2 |   fn string_sequence(n: isize) -> String\
    \ {\n  |                                   ------ expected `String` because of\
    \ return type\n3 | /     String::from_utf8_lossy(\n4 | |         (0..n).map(|i|\
    \ i.to_string()).collect::<Vec<_>>(),\n5 | |     )\n  | |     ^- help: try using\
    \ a conversion method: `.to_string()`\n  | |_____|\n  |       expected struct\
    \ `String`, found enum `Cow`\n  |\n  = note: expected struct `String`\n      \
    \         found enum `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b\"0\",\n            b\"1\",\n            b\"2\",\n \
    \           b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"\
    6\",\n            b\"7\",\n            b\"8\",\n            b\"9\",\n        \
    \    b\"10\",\n            b\"11\",\n            b\"12\",\n            b\"13\"\
    ,\n            b\"14\",\n            b\"15\",\n            b\"16\",\n        \
    \    b\"17\",\n            b\"18\",\n            b\"19\",\n            b\"20\"\
    ,\n            b\"21\",\n            b\"22\",\n            b\"23\",\n        \
    \    b\"24\",\n            b\"25\",\n            b\"26\",\n            b\"27\"\
    ,\n            b\"28\",\n            b\"29\",\n            b\"30\",\n        \
    \    b\"31\",\n            b\"32\",\n            b\"33\",\n            b\"34\"\
    ,\n            b\"35\",\n            b\"36\",\n            b\"37\",\n        \
    \    b\"38\",\n            b\"39\",\n            b\"40\",\n            b\"41\"\
    ,\n            b\"42\",\n            b\"43\",\n            b\"44\",\n        \
    \    b\"45\",\n            b\"46\",\n            b\"47\",\n            b\"48\"\
    ,\n            b\"49\",\n            b\"50\",\n            b\"51\",\n        \
    \    b\"52\",\n            b\"53\",\n            b\"54\",\n            b\"55\"\
    ,\n            b\"56\",\n            b\"57\",\n            b\"58\",\n        \
    \    b\"59\",\n            b\"60\",\n            b\"61\",\n            b\"62\"\
    ,\n            b\"63\",\n            b\"64\",\n            b\"65\",\n        \
    \    b\"66\",\n            b\"67\",\n            b\"68\",\n            b\"69\"\
    ,\n            b\"70\",\n            b\"71\",\n            b\"72\",\n        \
    \    b\"73\",\n            b\"74\",\n            b\"75\",\n            b\"76\"\
    ,\n            b\"77\",\n            b\"78\",\n            b\"79\",\n        \
    \    b\"80\",\n            b\"81\",\n            b\"82\",\n            b\"83\"\
    ,\n            b\"84\",\n            b\"85\",\n            b\"86\",\n        \
    \    b\"87\",\n            b\"88\",\n            b\"89\",\n            b\"90\"\
    ,\n            b\"91\",\n            b\"92\",\n            b\"93\",\n        \
    \    b\"94\",\n            b\"95\",\n            b\"96\",\n            b\"97\"\
    ,\n            b\"98\",\n            b\"99\",\n            b\"100\",\n       \
    \     b\"101\",\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpt_a_s904.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8_lossy(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n107 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpt_a_s904.rs:5:13\n  |\n5 |             b\"0\",\n  |    \
    \         ^^^^ expected `u8`, found `&[u8; 1]`\n\nerror[E0308]: mismatched types\n\
    \   --> /tmp/tmpt_a_s904.rs:3:5\n    |\n2   |   fn string_sequence(n: isize) ->\
    \ String {\n    |                                   ------ expected `String` because\
    \ of return type\n3   | /     String::from_utf8_lossy(\n4   | |         &[\n5\
    \   | |             b\"0\",\n6   | |             b\"1\",\n...   |\n106 | |   \
    \          b\"101\",\n107 | | }\n    | | ^- help: try using a conversion method:\
    \ `.to_string()`\n    | |_|\n    |   expected struct `String`, found enum `Cow`\n\
    \    |\n    = note: expected struct `String`\n                 found enum `Cow<'_,\
    \ str>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(format!(\"{}\"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpseh0e7n5.rs:5:14\n  |\n5 |\
    \         s += String::from(format!(\"{}\", i));\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(format!(\"{}\"\
    , i))`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::iter::repeat;\n\
    \    use std::fmt::Write;\n    use std::str::FromStr;\n    use std::str::FromStrExt;\n\
    \    use std::str::FromStrError;\n\n    let mut s = String::new();\n    for _\
    \ in 0..n {\n        s.push('0');\n    }\n    s.push('1');\n    write!(&mut s,\
    \ \"{}\", s)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `std::str::FromStrExt`\n --> /tmp/tmpdldpo_83.rs:6:9\n\
    \  |\n6 |     use std::str::FromStrExt;\n  |         ^^^^^^^^^^----------\n  |\
    \         |         |\n  |         |         help: a similar name exists in the\
    \ module: `FromStr`\n  |         no `FromStrExt` in `str`\n\nerror[E0432]: unresolved\
    \ import `std::str::FromStrError`\n --> /tmp/tmpdldpo_83.rs:7:9\n  |\n7 |    \
    \ use std::str::FromStrError;\n  |         ^^^^^^^^^^^^^^^^^^^^^^ no `FromStrError`\
    \ in `str`\n\nwarning: unused import: `std::iter::repeat`\n --> /tmp/tmpdldpo_83.rs:3:9\n\
    \  |\n3 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^\n  |\n  =\
    \ note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import: `std::str::FromStr`\n\
    \ --> /tmp/tmpdldpo_83.rs:5:9\n  |\n5 |     use std::str::FromStr;\n  |      \
    \   ^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdldpo_83.rs:14:5\n\
    \   |\n2  | fn string_sequence(n: isize) -> String {\n   |                   \
    \              ------ expected `String` because of return type\n...\n14 |    \
    \ write!(&mut s, \"{}\", s)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found enum `Result`\n   |\n   = note: expected struct `String`\n \
    \               found enum `Result<(), std::fmt::Error>`\n   = note: this error\
    \ originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\
    \nSome errors have detailed explanations: E0308, E0432.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0252]: the name `repeat` is defined multiple times\n --> /tmp/tmpb9thyzqc.rs:4:9\n\
    \  |\n3 |     use std::iter::repeat;\n  |         ----------------- previous import\
    \ of the value `repeat` here\n4 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^\
    \ `repeat` reimported here\n  |\n  = note: `repeat` must be defined only once\
    \ in the value namespace of this block\n\nerror[E0252]: the name `repeat` is defined\
    \ multiple times\n --> /tmp/tmpb9thyzqc.rs:5:9\n  |\n3 |     use std::iter::repeat;\n\
    \  |         ----------------- previous import of the value `repeat` here\n4 |\
    \     use std::iter::repeat;\n5 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^\
    \ `repeat` reimported here\n  |\n  = note: `repeat` must be defined only once\
    \ in the value namespace of this block\n\nerror[E0252]: the name `repeat` is defined\
    \ multiple times\n --> /tmp/tmpb9thyzqc.rs:6:9\n  |\n3 |     use std::iter::repeat;\n\
    \  |         ----------------- previous import of the value `repeat` here\n...\n\
    6 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^ `repeat` reimported\
    \ here\n  |\n  = note: `repeat` must be defined only once in the value namespace\
    \ of this block\n\nerror[E0252]: the name `repeat` is defined multiple times\n\
    \ --> /tmp/tmpb9thyzqc.rs:7:9\n  |\n3 |     use std::iter::repeat;\n  |      \
    \   ----------------- previous import of the value `repeat` here\n...\n7 |   \
    \  use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^ `repeat` reimported here\n\
    \  |\n  = note: `repeat` must be defined only once in the value namespace of this\
    \ block\n\nerror[E0252]: the name `repeat` is defined multiple times\n --> /tmp/tmpb9thyzqc.rs:8:9\n\
    \  |\n3 |     use std::iter::repeat;\n  |         ----------------- previous import\
    \ of the value `repeat` here\n...\n8 |     use std::iter::repeat;\n  |       \
    \  ^^^^^^^^^^^^^^^^^ `repeat` reimported here\n  |\n  = note: `repeat` must be\
    \ defined only once in the value namespace of this block\n\nerror[E0252]: the\
    \ name `repeat` is defined multiple times\n --> /tmp/tmpb9thyzqc.rs:9:9\n  |\n\
    3 |     use std::iter::repeat;\n  |         ----------------- previous impo"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0252]: the name `repeat` is defined multiple times\n --> /tmp/tmpb9thyzqc.rs:4:9\n\
    \  |\n3 |     use std::iter::repeat;\n  |         ----------------- previous import\
    \ of the value `repeat` here\n4 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^\
    \ `repeat` reimported here\n  |\n  = note: `repeat` must be defined only once\
    \ in the value namespace of this block\n\nerror[E0252]: the name `repeat` is defined\
    \ multiple times\n --> /tmp/tmpb9thyzqc.rs:5:9\n  |\n3 |     use std::iter::repeat;\n\
    \  |         ----------------- previous import of the value `repeat` here\n4 |\
    \     use std::iter::repeat;\n5 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^\
    \ `repeat` reimported here\n  |\n  = note: `repeat` must be defined only once\
    \ in the value namespace of this block\n\nerror[E0252]: the name `repeat` is defined\
    \ multiple times\n --> /tmp/tmpb9thyzqc.rs:6:9\n  |\n3 |     use std::iter::repeat;\n\
    \  |         ----------------- previous import of the value `repeat` here\n...\n\
    6 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^ `repeat` reimported\
    \ here\n  |\n  = note: `repeat` must be defined only once in the value namespace\
    \ of this block\n\nerror[E0252]: the name `repeat` is defined multiple times\n\
    \ --> /tmp/tmpb9thyzqc.rs:7:9\n  |\n3 |     use std::iter::repeat;\n  |      \
    \   ----------------- previous import of the value `repeat` here\n...\n7 |   \
    \  use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^ `repeat` reimported here\n\
    \  |\n  = note: `repeat` must be defined only once in the value namespace of this\
    \ block\n\nerror[E0252]: the name `repeat` is defined multiple times\n --> /tmp/tmpb9thyzqc.rs:8:9\n\
    \  |\n3 |     use std::iter::repeat;\n  |         ----------------- previous import\
    \ of the value `repeat` here\n...\n8 |     use std::iter::repeat;\n  |       \
    \  ^^^^^^^^^^^^^^^^^ `repeat` reimported here\n  |\n  = note: `repeat` must be\
    \ defined only once in the value namespace of this block\n\nerror[E0252]: the\
    \ name `repeat` is defined multiple times\n --> /tmp/tmpb9thyzqc.rs:9:9\n  |\n\
    3 |     use std::iter::repeat;\n  |         ----------------- previous impo"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \"))\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpzkw4oknc.rs:8:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975660
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s.trim_end(',');\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmpkpkogd7u.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpkpkogd7u.rs:7:7\n     |\n7    |     s.trim_end(',');\n     |\
    \       ^^^^^^^^ --- supplied 1 argument\n     |       |\n     |       expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp0d9waj_i.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b'0',\n            b'1',\n            b'2',\n       \
    \     b'3',\n            b'4',\n            b'5',\n            b'6',\n       \
    \     b'7',\n            b'8',\n            b'9',\n            b'a',\n       \
    \     b'b',\n            b'c',\n            b'd',\n            b'e',\n       \
    \     b'f',\n            b'g',\n            b'h',\n            b'i',\n       \
    \     b'j',\n            b'k',\n            b'l',\n            b'm',\n       \
    \     b'n',\n            b'o',\n            b'p',\n            b'q',\n       \
    \     b'r',\n            b's',\n            b't',\n            b'u',\n       \
    \     b'v',\n            b'w',\n            b'x',\n            b'y',\n       \
    \     b'z',\n            b'A',\n            b'B',\n            b'C',\n       \
    \     b'D',\n            b'E',\n            b'F',\n            b'G',\n       \
    \     b'H',\n            b'I',\n            b'J',\n            b'K',\n       \
    \     b'L',\n            b'M',\n            b'N',\n            b'O',\n       \
    \     b'P',\n            b'Q',\n            b'R',\n            b'S',\n       \
    \     b'T',\n            b'U',\n            b'V',\n            b'W',\n       \
    \     b'X',\n            b'Y',\n            b'Z',\n            b'0',\n       \
    \     b'1',\n            b'2',\n            b'3',\n            b'4',\n       \
    \     b'5',\n            b'6',\n            b'7',\n            b'8',\n       \
    \     b'9',\n            b'a',\n            b'b',\n            b'c',\n       \
    \     b'd',\n            b'e',\n            b'f',\n            b'g',\n       \
    \     b'h',\n            b'i',\n            b'j',\n            b'k',\n       \
    \     b'l',\n            b'm',\n            b'n',\n            b'o',\n       \
    \     b'p',\n            b'q',\n            b'r',\n            b's',\n       \
    \     b't',\n            b'u',\n            b'v',\n            b'w',\n       \
    \     b'x',\n            b'y',\n            b'z',\n            b'A',\n       \
    \     b'B',\n            b'C',\n            b'D',\n            b'E',\n       \
    \     b'F',\n            b'G',\n            b'H',\n            b'I',\n       \
    \     b'J',\n            b'K',\n            b'L',\n            b'M',\n       \
    \     \n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpns730eob.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8_lossy(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n117 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpns730eob.rs:3:5\n    |\n2   |   fn string_sequence(n:\
    \ isize) -> String {\n    |                                   ------ expected\
    \ `String` because of return type\n3   | /     String::from_utf8_lossy(\n4   |\
    \ |         &[\n5   | |             b'0',\n6   | |             b'1',\n...   |\n\
    116 | |             \n117 | | }\n    | | ^- help: try using a conversion method:\
    \ `.to_string()`\n    | |_|\n    |   expected struct `String`, found enum `Cow`\n\
    \    |\n    = note: expected struct `String`\n                 found enum `Cow<'_,\
    \ str>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8',\
    \ b'9', b'a',\n            b'b', b'c', b'd', b'e', b'f', b'g', b'h', b'i', b'j',\
    \ b'k', b'l',\n            b'm', b'n', b'o', b'p', b'q', b'r', b's', b't', b'u',\
    \ b'v', b'w',\n            b'x', b'y', b'z',\n        ]\n        .iter()\n   \
    \     .take_while(|&b| b != b'\\0')\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp3md1id5x.rs:3:28\n\
    \   |\n2  | fn string_sequence(n: isize) -> String {\n   |                   \
    \                     - closing delimiter possibly meant for this\n3  |     String::from_utf8_lossy(\n\
    \   |                            ^ unclosed delimiter\n...\n82 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`,\
    \ `=`, or `>`, found `)`\n  --> /tmp/tmp3md1id5x.rs:82:1\n   |\n81 |         .collect::<Vec\n\
    \   |                       - expected one of 9 possible tokens\n82 | }\n   |\
    \ ^ unexpected token\n   |\nhelp: you might have meant to end the type parameters\
    \ here\n   |\n81 |         .collect::<Vec>\n   |                       +\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::iter::repeat;\n\
    \    use std::fmt::Write;\n    use std::str::FromStr;\n\n    let mut s = String::new();\n\
    \    for _ in 0..n {\n        write!(&mut s, \"{}\", 0).unwrap();\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpsz72ocbi.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975660
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmp1cvo6tek.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s[0..s.len() - 2]\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmph5_21k_a.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n --> /tmp/tmph5_21k_a.rs:7:5\n  |\n\
    2 | fn string_sequence(n: isize) -> String {\n  |                            \
    \     ------ expected `String` because of return type\n...\n7 |     s[0..s.len()\
    \ - 2]\n  |     ^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |     |\n  |     expected struct `String`, found `str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(&format!(\"{}\"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbxoc2ceg.rs:5:14\n  |\n5 |\
    \         s += String::from(&format!(\"{}\", i));\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(&format!(\"{}\"\
    , i))`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b\"0\"\n            b\"1\"\n            b\"2\"\n    \
    \        b\"3\"\n            b\"4\"\n            b\"5\"\n            b\"6\"\n\
    \            b\"7\"\n            b\"8\"\n            b\"9\"\n            b\"a\"\
    \n            b\"b\"\n            b\"c\"\n            b\"d\"\n            b\"\
    e\"\n            b\"f\"\n            b\"g\"\n            b\"h\"\n            b\"\
    i\"\n            b\"j\"\n            b\"k\"\n            b\"l\"\n            b\"\
    m\"\n            b\"n\"\n            b\"o\"\n            b\"p\"\n            b\"\
    q\"\n            b\"r\"\n            b\"s\"\n            b\"t\"\n            b\"\
    u\"\n            b\"v\"\n            b\"w\"\n            b\"x\"\n            b\"\
    y\"\n            b\"z\"\n            b\"A\"\n            b\"B\"\n            b\"\
    C\"\n            b\"D\"\n            b\"E\"\n            b\"F\"\n            b\"\
    G\"\n            b\"H\"\n            b\"I\"\n            b\"J\"\n            b\"\
    K\"\n            b\"L\"\n            b\"M\"\n            b\"N\"\n            b\"\
    O\"\n            b\"P\"\n            b\"Q\"\n            b\"R\"\n            b\"\
    S\"\n            b\"T\"\n            b\"U\"\n            b\"V\"\n            b\"\
    W\"\n            b\"X\"\n            b\"Y\"\n            b\"Z\"\n            b\"\
    0\"\n            b\"1\"\n            b\"2\"\n            b\"3\"\n            b\"\
    4\"\n            b\"5\"\n            b\"6\"\n            b\"7\"\n            b\"\
    8\"\n            b\"9\"\n            b\"a\"\n            b\"b\"\n            b\"\
    c\"\n            b\"d\"\n            b\"e\"\n            b\"f\"\n            b\"\
    g\"\n            b\"h\"\n            b\"i\"\n            b\"j\"\n            b\"\
    k\"\n            b\"l\"\n            b\"m\"\n            b\"n\"\n            b\"\
    o\"\n            b\"p\"\n            b\"q\"\n            b\"r\"\n            b\"\
    s\"\n            b\"t\"\n            b\"u\"\n            b\"v\"\n            b\"\
    w\"\n            b\"x\"\n            b\"y\"\n            b\"z\"\n            b\"\
    A\"\n            b\"B\"\n            b\"C\"\n            b\"D\"\n            b\"\
    E\"\n            b\"F\"\n            b\"G\"\n            b\"H\"\n\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `b\"1\"`\n --> /tmp/tmpc5cvs7_7.rs:5:17\n  |\n\
    5 |             b\"0\"\n  |                 ^ help: add `;` here\n6 |        \
    \     b\"1\"\n  |             ---- unexpected token\n\nerror: expected `;`, found\
    \ `b\"2\"`\n --> /tmp/tmpc5cvs7_7.rs:6:17\n  |\n6 |             b\"1\"\n  |  \
    \               ^ help: add `;` here\n7 |             b\"2\"\n  |            \
    \ ---- unexpected token\n\nerror: expected `;`, found `b\"3\"`\n --> /tmp/tmpc5cvs7_7.rs:7:17\n\
    \  |\n7 |             b\"2\"\n  |                 ^ help: add `;` here\n8 |  \
    \           b\"3\"\n  |             ---- unexpected token\n\nerror: expected `;`,\
    \ found `b\"4\"`\n --> /tmp/tmpc5cvs7_7.rs:8:17\n  |\n8 |             b\"3\"\n\
    \  |                 ^ help: add `;` here\n9 |             b\"4\"\n  |       \
    \      ---- unexpected token\n\nerror: expected `;`, found `b\"5\"`\n  --> /tmp/tmpc5cvs7_7.rs:9:17\n\
    \   |\n9  |             b\"4\"\n   |                 ^ help: add `;` here\n10\
    \ |             b\"5\"\n   |             ---- unexpected token\n\nerror: expected\
    \ `;`, found `b\"6\"`\n  --> /tmp/tmpc5cvs7_7.rs:10:17\n   |\n10 |           \
    \  b\"5\"\n   |                 ^ help: add `;` here\n11 |             b\"6\"\n\
    \   |             ---- unexpected token\n\nerror: expected `;`, found `b\"7\"\
    `\n  --> /tmp/tmpc5cvs7_7.rs:11:17\n   |\n11 |             b\"6\"\n   |      \
    \           ^ help: add `;` here\n12 |             b\"7\"\n   |             ----\
    \ unexpected token\n\nerror: expected `;`, found `b\"8\"`\n  --> /tmp/tmpc5cvs7_7.rs:12:17\n\
    \   |\n12 |             b\"7\"\n   |                 ^ help: add `;` here\n13\
    \ |             b\"8\"\n   |             ---- unexpected token\n\nerror: expected\
    \ `;`, found `b\"9\"`\n  --> /tmp/tmpc5cvs7_7.rs:13:17\n   |\n13 |           \
    \  b\"8\"\n   |                 ^ help: add `;` here\n14 |             b\"9\"\n\
    \   |             ---- unexpected token\n\nerror: expected `;`, found `b\"a\"\
    `\n  --> /tmp/tmpc5cvs7_7.rs:14:17\n   |\n14 |             b\"9\"\n   |      \
    \           ^ help: add `;` here\n15 |             b\"a\"\n   |             ----\
    \ unexpected token\n\nerror: expected `;`, found `b\"b\"`\n  --> /tmp/tmpc5cvs7_7.rs:15:17\n\
    \   |\n15 |             b\"a\"\n   |          "
  stdout: ''
  timestamp: 1659975663
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::fmt::Write;\n\
    \    let mut s = String::new();\n    for _ in 0..n {\n        s.push('0');\n \
    \   }\n    s.push('1');\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"0\"`', /tmp/tmp60zz9ce2.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975660
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n    )\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvwpjtls8.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `String`\n  |\n  = note: expected struct `Vec<u8>`\n\
    \             found struct `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvwpjtls8.rs:3:5\n\
    \  |\n2 |   fn string_sequence(n: isize) -> String {\n  |                    \
    \               ------ expected `String` because of return type\n3 | /     String::from_utf8(\n\
    4 | |         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n\
    5 | |     )\n  | |_____^ expected struct `String`, found enum `Result`\n  |\n\
    \  = note: expected struct `String`\n               found enum `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa8ycnbgw.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&[u8]`, found struct `Vec`\n  |\n  = note: expected reference `&[u8]`\n\
    \                found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpa8ycnbgw.rs:3:5\n  |\n2 |   fn string_sequence(n: isize) -> String\
    \ {\n  |                                   ------ expected `String` because of\
    \ return type\n3 | /     String::from_utf8_lossy(\n4 | |         (0..n).map(|i|\
    \ i.to_string()).collect::<Vec<_>>(),\n5 | |     )\n  | |     ^- help: try using\
    \ a conversion method: `.to_string()`\n  | |_____|\n  |       expected struct\
    \ `String`, found enum `Cow`\n  |\n  = note: expected struct `String`\n      \
    \         found enum `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \"))\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpzkw4oknc.rs:8:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975660
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::iter::repeat;\n\
    \    use std::fmt::Write;\n    use std::str::FromStr;\n    use std::str::FromStrExt;\n\
    \n    let mut s = String::new();\n    for _ in 0..n {\n        write!(&mut s,\
    \ \"{}\", 0).unwrap();\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `std::str::FromStrExt`\n --> /tmp/tmpvoc7i2b_.rs:6:9\n\
    \  |\n6 |     use std::str::FromStrExt;\n  |         ^^^^^^^^^^----------\n  |\
    \         |         |\n  |         |         help: a similar name exists in the\
    \ module: `FromStr`\n  |         no `FromStrExt` in `str`\n\nwarning: unused import:\
    \ `std::iter::repeat`\n --> /tmp/tmpvoc7i2b_.rs:3:9\n  |\n3 |     use std::iter::repeat;\n\
    \  |         ^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by\
    \ default\n\nwarning: unused import: `std::str::FromStr`\n --> /tmp/tmpvoc7i2b_.rs:5:9\n\
    \  |\n5 |     use std::str::FromStr;\n  |         ^^^^^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to previous error; 2 warnings emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0432`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b\"0\",\n            b\"1\",\n            b\"2\",\n \
    \           b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"\
    6\",\n            b\"7\",\n            b\"8\",\n            b\"9\",\n        \
    \    b\"a\",\n            b\"b\",\n            b\"c\",\n            b\"d\",\n\
    \            b\"e\",\n            b\"f\",\n            b\"g\",\n            b\"\
    h\",\n            b\"i\",\n            b\"j\",\n            b\"k\",\n        \
    \    b\"l\",\n            b\"m\",\n            b\"n\",\n            b\"o\",\n\
    \            b\"p\",\n            b\"q\",\n            b\"r\",\n            b\"\
    s\",\n            b\"t\",\n            b\"u\",\n            b\"v\",\n        \
    \    b\"w\",\n            b\"x\",\n            b\"y\",\n            b\"z\",\n\
    \            b\"A\",\n            b\"B\",\n            b\"C\",\n            b\"\
    D\",\n            b\"E\",\n            b\"F\",\n            b\"G\",\n        \
    \    b\"H\",\n            b\"I\",\n            b\"J\",\n            b\"K\",\n\
    \            b\"L\",\n            b\"M\",\n            b\"N\",\n            b\"\
    O\",\n            b\"P\",\n            b\"Q\",\n            b\"R\",\n        \
    \    b\"S\",\n            b\"T\",\n            b\"U\",\n            b\"V\",\n\
    \            b\"W\",\n            b\"X\",\n            b\"Y\",\n            b\"\
    Z\",\n            b\"0\",\n            b\"1\",\n            b\"2\",\n        \
    \    b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"6\",\n\
    \            b\"7\",\n            b\"8\",\n            b\"9\",\n            b\"\
    a\",\n            b\"b\",\n            b\"c\",\n            b\"d\",\n        \
    \    b\"e\",\n            b\"f\",\n            b\"g\",\n            b\"h\",\n\
    \            b\"i\",\n            b\"j\",\n            b\"k\",\n            b\"\
    l\",\n            b\"m\",\n            b\"n\",\n            b\"o\",\n        \
    \    b\"p\",\n            b\"q\",\n            b\"r\",\n            b\"s\",\n\
    \            b\"t\",\n            b\"u\",\n            b\"v\",\n            b\"\
    w\",\n            b\"x\",\n            b\"y\",\n            b\"z\",\n        \
    \    b\"A\",\n            b\"B\",\n            b\"C\",\n            b\"D\",\n\
    \            b\"E\",\n            b\"F\",\n            b\"G\",\n            b\"\
    H\",\n            b\"I\",\n            b\"J\",\n            b\"\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmp2s06lk9u.rs:120:67\n\
    \    |\n120 |       assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8\
    \ 9 10\"));\n    |  ___________________________________________________________________^\n\
    121 | | }\n    | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp0d9waj_i.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += format!(\"{}\", i);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbpjdmiy0.rs:5:14\n  |\n5 |\
    \         s += format!(\"{}\", i);\n  |              ^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n  |\n  = note: this error originates in the macro\
    \ `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{:02x}, \".format(i);\n\
    \    }\n    s.chomp()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmp6hzvuear.rs:5:25\n  |\n5 |         s += \"\
    {:02x}, \".format(i);\n  |                         ^^^^^^ method not found in\
    \ `&'static str`\n\nerror[E0599]: no method named `chomp` found for struct `String`\
    \ in the current scope\n --> /tmp/tmp6hzvuear.rs:7:7\n  |\n7 |     s.chomp()\n\
    \  |       ^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n    )\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgcubdi2h.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&[u8]`, found struct `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgcubdi2h.rs:3:5\n\
    \  |\n2 |   fn string_sequence(n: isize) -> String {\n  |                    \
    \               ------ expected `String` because of return type\n3 | /     String::from_utf8_lossy(\n\
    4 | |         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n\
    5 | |     )\n  | |     ^- help: try using a conversion method: `.to_string()`\n\
    \  | |_____|\n  |       expected struct `String`, found enum `Cow`\n  |\n  = note:\
    \ expected struct `String`\n               found enum `Cow<'_, str>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b\"0\",\n            b\"1\",\n            b\"2\",\n \
    \           b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"\
    6\",\n            b\"7\",\n            b\"8\",\n            b\"9\",\n        \
    \    b\"a\",\n            b\"b\",\n            b\"c\",\n            b\"d\",\n\
    \            b\"e\",\n            b\"f\",\n            b\"g\",\n            b\"\
    h\",\n            b\"i\",\n            b\"j\",\n            b\"k\",\n        \
    \    b\"l\",\n            b\"m\",\n            b\"n\",\n            b\"o\",\n\
    \            b\"p\",\n            b\"q\",\n            b\"r\",\n            b\"\
    s\",\n            b\"t\",\n            b\"u\",\n            b\"v\",\n        \
    \    b\"w\",\n            b\"x\",\n            b\"y\",\n            b\"z\",\n\
    \            b\"A\",\n            b\"B\",\n            b\"C\",\n            b\"\
    D\",\n            b\"E\",\n            b\"F\",\n            b\"G\",\n        \
    \    b\"H\",\n            b\"I\",\n            b\"J\",\n            b\"K\",\n\
    \            b\"L\",\n            b\"M\",\n            b\"N\",\n            b\"\
    O\",\n            b\"P\",\n            b\"Q\",\n            b\"R\",\n        \
    \    b\"S\",\n            b\"T\",\n            b\"U\",\n            b\"V\",\n\
    \            b\"W\",\n            b\"X\",\n            b\"Y\",\n            b\"\
    Z\",\n            b\"0\",\n            b\"1\",\n            b\"2\",\n        \
    \    b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"6\",\n\
    \            b\"7\",\n            b\"8\",\n            b\"9\",\n            b\"\
    a\",\n            b\"b\",\n            b\"c\",\n            b\"d\",\n        \
    \    b\"e\",\n            b\"f\",\n            b\"g\",\n            b\"h\",\n\
    \            b\"i\",\n            b\"j\",\n            b\"k\",\n            b\"\
    l\",\n            b\"m\",\n            b\"n\",\n            b\"o\",\n        \
    \    b\"p\",\n            b\"q\",\n            b\"r\",\n            b\"s\",\n\
    \            b\"t\",\n            b\"u\",\n            b\"v\",\n            b\"\
    w\",\n            b\"x\",\n            b\"y\",\n            b\"z\",\n        \
    \    b\"A\",\n            b\"B\",\n            b\"C\",\n            b\"D\",\n\
    \            b\"E\",\n            b\"F\",\n            b\"G\",\n            b\"\
    H\",\n            b\"I\",\n            b\"J\",\n            b\"\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmp2s06lk9u.rs:120:67\n\
    \    |\n120 |       assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8\
    \ 9 10\"));\n    |  ___________________________________________________________________^\n\
    121 | | }\n    | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8(\n\
    \        &[\n            b'0',\n            b'1',\n            b'2',\n       \
    \     b'3',\n            b'4',\n            b'5',\n            b'6',\n       \
    \     b'7',\n            b'8',\n            b'9',\n            b'a',\n       \
    \     b'b',\n            b'c',\n            b'd',\n            b'e',\n       \
    \     b'f',\n            b'g',\n            b'h',\n            b'i',\n       \
    \     b'j',\n            b'k',\n            b'l',\n            b'm',\n       \
    \     b'n',\n            b'o',\n            b'p',\n            b'q',\n       \
    \     b'r',\n            b's',\n            b't',\n            b'u',\n       \
    \     b'v',\n            b'w',\n            b'x',\n            b'y',\n       \
    \     b'z',\n            b'A',\n            b'B',\n            b'C',\n       \
    \     b'D',\n            b'E',\n            b'F',\n            b'G',\n       \
    \     b'H',\n            b'I',\n            b'J',\n            b'K',\n       \
    \     b'L',\n            b'M',\n            b'N',\n            b'O',\n       \
    \     b'P',\n            b'Q',\n            b'R',\n            b'S',\n       \
    \     b'T',\n            b'U',\n            b'V',\n            b'W',\n       \
    \     b'X',\n            b'Y',\n            b'Z',\n            b'0',\n       \
    \     b'1',\n            b'2',\n            b'3',\n            b'4',\n       \
    \     b'5',\n            b'6',\n            b'7',\n            b'8',\n       \
    \     b'9',\n            b'a',\n            b'b',\n            b'c',\n       \
    \     b'd',\n            b'e',\n            b'f',\n            b'g',\n       \
    \     b'h',\n            b'i',\n            b'j',\n            b'k',\n       \
    \     b'l',\n            b'm',\n            b'n',\n            b'o',\n       \
    \     b'p',\n            b'q',\n            b'r',\n            b's',\n       \
    \     b't',\n            b'u',\n            b'v',\n            b'w',\n       \
    \     b'x',\n            b'y',\n            b'z',\n            b'A',\n       \
    \     b'B',\n            b'C',\n            b'D',\n            b'E',\n       \
    \     b'F',\n            b'G',\n            b'H',\n            b'I',\n       \
    \     b'J',\n            b'K',\n            b'L',\n            b'M',\n       \
    \     b'N',\n\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpz_o49zm6.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n118 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpz_o49zm6.rs:4:9\n    |\n4   | /         &[\n5   | |  \
    \           b'0',\n6   | |             b'1',\n7   | |             b'2',\n... \
    \  |\n117 | |\n118 | | }\n    | |_^ expected struct `Vec`, found `&[u8; 112]`\n\
    \    |\n    = note: expected struct `Vec<u8>`\n            found reference `&[u8;\
    \ 112]`\nhelp: try using a conversion method\n    |\n4   ~         (&[\n5   |\
    \             b'0',\n6   |             b'1',\n7   |             b'2',\n8   | \
    \            b'3',\n9   |             b'4',\n  ...\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpz_o49zm6.rs:3:5\n    |\n2   |   fn string_sequence(n:\
    \ isize) -> String {\n    |                                   ------ expected\
    \ `String` because of return type\n3   | /     String::from_utf8(\n4   | |   \
    \      &[\n5   | |             b'0',\n6   | |             b'1',\n...   |\n117\
    \ | |\n118 | | }\n    | |_^ expected struct `String`, found enum `Result`\n  \
    \  |\n    = note: expected struct `String`\n                 found enum `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s.trim_end(',');\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmpkpkogd7u.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpkpkogd7u.rs:7:7\n     |\n7    |     s.trim_end(',');\n     |\
    \       ^^^^^^^^ --- supplied 1 argument\n     |       |\n     |       expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmp1cvo6tek.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8',\
    \ b'9',\n            b'A', b'B', b'C', b'D', b'E', b'F', b'G', b'H', b'I', b'J',\
    \ b'K',\n            b'L', b'M', b'N', b'O', b'P', b'Q', b'R', b'S', b'T', b'U',\
    \ b'V',\n            b'W', b'X', b'Y', b'Z',\n        ],\n    )\n    .unwrap()\n\
    \    .to_string()\n    .into_owned()\n    .chars()\n    .take_while(|c| c < b'9')\n\
    \    .collect::<Vec<_>>()\n    .join();\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for enum `Cow<'_, str>` in\
    \ the current scope\n  --> /tmp/tmpi60isdxf.rs:11:6\n   |\n11 |     .unwrap()\n\
    \   |      ^^^^^^ method not found in `Cow<'_, str>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpi60isdxf.rs:2:33\n  |\n2 | fn string_sequence(n: isize)\
    \ -> String {\n  |    ---------------              ^^^^^^ expected struct `String`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b\"0\",\n            b\"1\",\n            b\"2\",\n \
    \           b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"\
    6\",\n            b\"7\",\n            b\"8\",\n            b\"9\",\n        \
    \    b\"10\",\n            b\"11\",\n            b\"12\",\n            b\"13\"\
    ,\n            b\"14\",\n            b\"15\",\n            b\"16\",\n        \
    \    b\"17\",\n            b\"18\",\n            b\"19\",\n            b\"20\"\
    ,\n            b\"21\",\n            b\"22\",\n            b\"23\",\n        \
    \    b\"24\",\n            b\"25\",\n            b\"26\",\n            b\"27\"\
    ,\n            b\"28\",\n            b\"29\",\n            b\"30\",\n        \
    \    b\"31\",\n            b\"32\",\n            b\"33\",\n            b\"34\"\
    ,\n            b\"35\",\n            b\"36\",\n            b\"37\",\n        \
    \    b\"38\",\n            b\"39\",\n            b\"40\",\n            b\"41\"\
    ,\n            b\"42\",\n            b\"43\",\n            b\"44\",\n        \
    \    b\"45\",\n            b\"46\",\n            b\"47\",\n            b\"48\"\
    ,\n            b\"49\",\n            b\"50\",\n            b\"51\",\n        \
    \    b\"52\",\n            b\"53\",\n            b\"54\",\n            b\"55\"\
    ,\n            b\"56\",\n            b\"57\",\n            b\"58\",\n        \
    \    b\"59\",\n            b\"60\",\n            b\"61\",\n            b\"62\"\
    ,\n            b\"63\",\n            b\"64\",\n            b\"65\",\n        \
    \    b\"66\",\n            b\"67\",\n            b\"68\",\n            b\"69\"\
    ,\n            b\"70\",\n            b\"71\",\n            b\"72\",\n        \
    \    b\"73\",\n            b\"74\",\n            b\"75\",\n            b\"76\"\
    ,\n            b\"77\",\n            b\"78\",\n            b\"79\",\n        \
    \    b\"80\",\n            b\"81\",\n            b\"82\",\n            b\"83\"\
    ,\n            b\"84\",\n            b\"85\",\n            b\"86\",\n        \
    \    b\"87\",\n            b\"88\",\n            b\"89\",\n            b\"90\"\
    ,\n            b\"91\",\n            b\"92\",\n            b\"93\",\n        \
    \    b\"94\",\n            b\"95\",\n            b\"96\",\n            b\"97\"\
    ,\n            b\"98\",\n            b\"99\",\n            b\"100\",\n       \
    \     b\"101\",\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpt_a_s904.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8_lossy(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n107 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpt_a_s904.rs:5:13\n  |\n5 |             b\"0\",\n  |    \
    \         ^^^^ expected `u8`, found `&[u8; 1]`\n\nerror[E0308]: mismatched types\n\
    \   --> /tmp/tmpt_a_s904.rs:3:5\n    |\n2   |   fn string_sequence(n: isize) ->\
    \ String {\n    |                                   ------ expected `String` because\
    \ of return type\n3   | /     String::from_utf8_lossy(\n4   | |         &[\n5\
    \   | |             b\"0\",\n6   | |             b\"1\",\n...   |\n106 | |   \
    \          b\"101\",\n107 | | }\n    | | ^- help: try using a conversion method:\
    \ `.to_string()`\n    | |_|\n    |   expected struct `String`, found enum `Cow`\n\
    \    |\n    = note: expected struct `String`\n                 found enum `Cow<'_,\
    \ str>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            0u8..=n,\n            1u8..=n,\n            2u8..=n,\n\
    \            3u8..=n,\n            4u8..=n,\n            5u8..=n,\n          \
    \  6u8..=n,\n            7u8..=n,\n            8u8..=n,\n            9u8..=n,\n\
    \            10u8..=n,\n            11u8..=n,\n            12u8..=n,\n       \
    \     13u8..=n,\n            14u8..=n,\n            15u8..=n,\n            16u8..=n,\n\
    \            17u8..=n,\n            18u8..=n,\n            19u8..=n,\n       \
    \     20u8..=n,\n            21u8..=n,\n            22u8..=n,\n            23u8..=n,\n\
    \            24u8..=n,\n            25u8..=n,\n            26u8..=n,\n       \
    \     27u8..=n,\n            28u8..=n,\n            29u8..=n,\n            30u8..=n,\n\
    \            31u8..=n,\n            32u8..=n,\n            33u8..=n,\n       \
    \     34u8..=n,\n            35u8..=n,\n            36u8..=n,\n            37u8..=n,\n\
    \            38u8..=n,\n            39u8..=n,\n            40u8..=n,\n       \
    \     41u8..=n,\n            42u8..=n,\n            43u8..=n,\n            44u8..=n,\n\
    \            45u8..=n,\n            46u8..=n,\n            47u8..=n,\n       \
    \     48u8..=n,\n            49u8..=n,\n            50u8..=n,\n            51u8..=n,\n\
    \            52u8..=n,\n            53u8..=n,\n            54u8..=n,\n       \
    \     55u8..=n,\n            56u8..=n,\n            57u8..=n,\n            58u8..=n,\n\
    \            59u8..=n,\n            60u8..=n,\n            61u8..=n,\n       \
    \     62u8..=n,\n            63u8..=n,\n            64u8..=n,\n            65u8..=n,\n\
    \            66u8..=n,\n            67u8..=n,\n            68u8..=n,\n       \
    \     69u8..=n,\n            70u8..=n,\n            \n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp4bb6cldx.rs:4:10\n\
    \   |\n2  | fn string_sequence(n: isize) -> String {\n   |                   \
    \                     - closing delimiter possibly meant for this\n3  |     String::from_utf8_lossy(\n\
    4  |         &[\n   |          ^ unclosed delimiter\n...\n77 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:5:19\n\
    \  |\n5 |             0u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n5 |             0u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:5:13\n\
    \  |\n5 |             0u8..=n,\n  |             ^^^^^^^ expected `u8`, found struct\
    \ `RangeInclusive`\n  |\n  = note: expected type `u8`\n           found struct\
    \ `RangeInclusive<u8>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:6:19\n\
    \  |\n6 |             1u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n6 |             1u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:7:19\n\
    \  |\n7 |             2u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n7 |             2u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:8:19\n\
    \  |\n8 |             3u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n8 |             3u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:9:19\n\
    \  |\n9 |             4u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhel"
  stdout: ''
  timestamp: 1659975659
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s.push('1');\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"0\"`', /tmp/tmp3vu0vv0_.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975660
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n    )\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvwpjtls8.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `String`\n  |\n  = note: expected struct `Vec<u8>`\n\
    \             found struct `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvwpjtls8.rs:3:5\n\
    \  |\n2 |   fn string_sequence(n: isize) -> String {\n  |                    \
    \               ------ expected `String` because of return type\n3 | /     String::from_utf8(\n\
    4 | |         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n\
    5 | |     )\n  | |_____^ expected struct `String`, found enum `Result`\n  |\n\
    \  = note: expected struct `String`\n               found enum `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0\".to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikzqviee.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += format!(\"{}\", i);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbpjdmiy0.rs:5:14\n  |\n5 |\
    \         s += format!(\"{}\", i);\n  |              ^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n  |\n  = note: this error originates in the macro\
    \ `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n    )\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvwpjtls8.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `String`\n  |\n  = note: expected struct `Vec<u8>`\n\
    \             found struct `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvwpjtls8.rs:3:5\n\
    \  |\n2 |   fn string_sequence(n: isize) -> String {\n  |                    \
    \               ------ expected `String` because of return type\n3 | /     String::from_utf8(\n\
    4 | |         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n\
    5 | |     )\n  | |_____^ expected struct `String`, found enum `Result`\n  |\n\
    \  = note: expected struct `String`\n               found enum `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n    )\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgcubdi2h.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&[u8]`, found struct `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgcubdi2h.rs:3:5\n\
    \  |\n2 |   fn string_sequence(n: isize) -> String {\n  |                    \
    \               ------ expected `String` because of return type\n3 | /     String::from_utf8_lossy(\n\
    4 | |         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\",\"),\n\
    5 | |     )\n  | |     ^- help: try using a conversion method: `.to_string()`\n\
    \  | |_____|\n  |       expected struct `String`, found enum `Cow`\n  |\n  = note:\
    \ expected struct `String`\n               found enum `Cow<'_, str>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0123456789\"\
    .to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpin8q6vha.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0123456789\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0123456789\"\
    .to_string())`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[0; n].iter().cloned().collect::<Vec<_>>()\n    )\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp6i1le7ye.rs:4:14\n\
    \  |\n2 | fn string_sequence(n: isize) -> String {\n  |                    - this\
    \ would need to be a `const`\n3 |     String::from_utf8_lossy(\n4 |         &[0;\
    \ n].iter().cloned().collect::<Vec<_>>()\n  |              ^\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp6i1le7ye.rs:3:5\n  |\n2 |   fn string_sequence(n:\
    \ isize) -> String {\n  |                                   ------ expected `String`\
    \ because of return type\n3 | /     String::from_utf8_lossy(\n4 | |         &[0;\
    \ n].iter().cloned().collect::<Vec<_>>()\n5 | |     )\n  | |     ^- help: try\
    \ using a conversion method: `.to_string()`\n  | |_____|\n  |       expected struct\
    \ `String`, found enum `Cow`\n  |\n  = note: expected struct `String`\n      \
    \         found enum `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0435.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::iter::repeat;\n\
    \    use std::fmt::Write;\n\n    let mut s = String::new();\n    for _ in 0..n\
    \ {\n        write!(&mut s, \"{}\", repeat('0').take(n).collect::<String>()).unwrap();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpibxarl22.rs:8:47\n  |\n8 |\
    \         write!(&mut s, \"{}\", repeat('0').take(n).collect::<String>()).unwrap();\n\
    \  |                                               ^ expected `usize`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         write!(&mut s, \"{}\", repeat('0').take(n.try_into().unwrap()).collect::<String>()).unwrap();\n\
    \  |                                                ++++++++++++++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \    use std::iter::repeat;\n    use std::iter::repeat;\n    use std::iter::repeat;\n\
    \n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0252]: the name `repeat` is defined multiple times\n --> /tmp/tmpb9thyzqc.rs:4:9\n\
    \  |\n3 |     use std::iter::repeat;\n  |         ----------------- previous import\
    \ of the value `repeat` here\n4 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^\
    \ `repeat` reimported here\n  |\n  = note: `repeat` must be defined only once\
    \ in the value namespace of this block\n\nerror[E0252]: the name `repeat` is defined\
    \ multiple times\n --> /tmp/tmpb9thyzqc.rs:5:9\n  |\n3 |     use std::iter::repeat;\n\
    \  |         ----------------- previous import of the value `repeat` here\n4 |\
    \     use std::iter::repeat;\n5 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^\
    \ `repeat` reimported here\n  |\n  = note: `repeat` must be defined only once\
    \ in the value namespace of this block\n\nerror[E0252]: the name `repeat` is defined\
    \ multiple times\n --> /tmp/tmpb9thyzqc.rs:6:9\n  |\n3 |     use std::iter::repeat;\n\
    \  |         ----------------- previous import of the value `repeat` here\n...\n\
    6 |     use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^ `repeat` reimported\
    \ here\n  |\n  = note: `repeat` must be defined only once in the value namespace\
    \ of this block\n\nerror[E0252]: the name `repeat` is defined multiple times\n\
    \ --> /tmp/tmpb9thyzqc.rs:7:9\n  |\n3 |     use std::iter::repeat;\n  |      \
    \   ----------------- previous import of the value `repeat` here\n...\n7 |   \
    \  use std::iter::repeat;\n  |         ^^^^^^^^^^^^^^^^^ `repeat` reimported here\n\
    \  |\n  = note: `repeat` must be defined only once in the value namespace of this\
    \ block\n\nerror[E0252]: the name `repeat` is defined multiple times\n --> /tmp/tmpb9thyzqc.rs:8:9\n\
    \  |\n3 |     use std::iter::repeat;\n  |         ----------------- previous import\
    \ of the value `repeat` here\n...\n8 |     use std::iter::repeat;\n  |       \
    \  ^^^^^^^^^^^^^^^^^ `repeat` reimported here\n  |\n  = note: `repeat` must be\
    \ defined only once in the value namespace of this block\n\nerror[E0252]: the\
    \ name `repeat` is defined multiple times\n --> /tmp/tmpb9thyzqc.rs:9:9\n  |\n\
    3 |     use std::iter::repeat;\n  |         ----------------- previous impo"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa8ycnbgw.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&[u8]`, found struct `Vec`\n  |\n  = note: expected reference `&[u8]`\n\
    \                found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpa8ycnbgw.rs:3:5\n  |\n2 |   fn string_sequence(n: isize) -> String\
    \ {\n  |                                   ------ expected `String` because of\
    \ return type\n3 | /     String::from_utf8_lossy(\n4 | |         (0..n).map(|i|\
    \ i.to_string()).collect::<Vec<_>>(),\n5 | |     )\n  | |     ^- help: try using\
    \ a conversion method: `.to_string()`\n  | |_____|\n  |       expected struct\
    \ `String`, found enum `Cow`\n  |\n  = note: expected struct `String`\n      \
    \         found enum `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s.trim_end(',');\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmpkpkogd7u.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpkpkogd7u.rs:7:7\n     |\n7    |     s.trim_end(',');\n     |\
    \       ^^^^^^^^ --- supplied 1 argument\n     |       |\n     |       expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa8ycnbgw.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&[u8]`, found struct `Vec`\n  |\n  = note: expected reference `&[u8]`\n\
    \                found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpa8ycnbgw.rs:3:5\n  |\n2 |   fn string_sequence(n: isize) -> String\
    \ {\n  |                                   ------ expected `String` because of\
    \ return type\n3 | /     String::from_utf8_lossy(\n4 | |         (0..n).map(|i|\
    \ i.to_string()).collect::<Vec<_>>(),\n5 | |     )\n  | |     ^- help: try using\
    \ a conversion method: `.to_string()`\n  | |_____|\n  |       expected struct\
    \ `String`, found enum `Cow`\n  |\n  = note: expected struct `String`\n      \
    \         found enum `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp0d9waj_i.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmph0xhgeip.rs:3:46\n  |\n3 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(&format!(\"{}\"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbxoc2ceg.rs:5:14\n  |\n5 |\
    \         s += String::from(&format!(\"{}\", i));\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(&format!(\"{}\"\
    , i))`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            0u8; n\n        ]\n    )\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmprx2lwn0_.rs:5:18\n\
    \  |\n2 | fn string_sequence(n: isize) -> String {\n  |                    - this\
    \ would need to be a `const`\n...\n5 |             0u8; n\n  |               \
    \   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmprx2lwn0_.rs:3:5\n  |\n2\
    \ |   fn string_sequence(n: isize) -> String {\n  |                          \
    \         ------ expected `String` because of return type\n3 | /     String::from_utf8_lossy(\n\
    4 | |         &[\n5 | |             0u8; n\n6 | |         ]\n7 | |     )\n  |\
    \ |     ^- help: try using a conversion method: `.to_string()`\n  | |_____|\n\
    \  |       expected struct `String`, found enum `Cow`\n  |\n  = note: expected\
    \ struct `String`\n               found enum `Cow<'_, str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0435.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            0u8..=n,\n            1u8..=n,\n            2u8..=n,\n\
    \            3u8..=n,\n            4u8..=n,\n            5u8..=n,\n          \
    \  6u8..=n,\n            7u8..=n,\n            8u8..=n,\n            9u8..=n,\n\
    \            10u8..=n,\n            11u8..=n,\n            12u8..=n,\n       \
    \     13u8..=n,\n            14u8..=n,\n            15u8..=n,\n            16u8..=n,\n\
    \            17u8..=n,\n            18u8..=n,\n            19u8..=n,\n       \
    \     20u8..=n,\n            21u8..=n,\n            22u8..=n,\n            23u8..=n,\n\
    \            24u8..=n,\n            25u8..=n,\n            26u8..=n,\n       \
    \     27u8..=n,\n            28u8..=n,\n            29u8..=n,\n            30u8..=n,\n\
    \            31u8..=n,\n            32u8..=n,\n            33u8..=n,\n       \
    \     34u8..=n,\n            35u8..=n,\n            36u8..=n,\n            37u8..=n,\n\
    \            38u8..=n,\n            39u8..=n,\n            40u8..=n,\n       \
    \     41u8..=n,\n            42u8..=n,\n            43u8..=n,\n            44u8..=n,\n\
    \            45u8..=n,\n            46u8..=n,\n            47u8..=n,\n       \
    \     48u8..=n,\n            49u8..=n,\n            50u8..=n,\n            51u8..=n,\n\
    \            52u8..=n,\n            53u8..=n,\n            54u8..=n,\n       \
    \     55u8..=n,\n            56u8..=n,\n            57u8..=n,\n            58u8..=n,\n\
    \            59u8..=n,\n            60u8..=n,\n            61u8..=n,\n       \
    \     62u8..=n,\n            63u8..=n,\n            64u8..=n,\n            65u8..=n,\n\
    \            66u8..=n,\n            67u8..=n,\n            68u8..=n,\n       \
    \     69u8..=n,\n            70u8..=n,\n            \n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp4bb6cldx.rs:4:10\n\
    \   |\n2  | fn string_sequence(n: isize) -> String {\n   |                   \
    \                     - closing delimiter possibly meant for this\n3  |     String::from_utf8_lossy(\n\
    4  |         &[\n   |          ^ unclosed delimiter\n...\n77 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:5:19\n\
    \  |\n5 |             0u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n5 |             0u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:5:13\n\
    \  |\n5 |             0u8..=n,\n  |             ^^^^^^^ expected `u8`, found struct\
    \ `RangeInclusive`\n  |\n  = note: expected type `u8`\n           found struct\
    \ `RangeInclusive<u8>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:6:19\n\
    \  |\n6 |             1u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n6 |             1u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:7:19\n\
    \  |\n7 |             2u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n7 |             2u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:8:19\n\
    \  |\n8 |             3u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n8 |             3u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:9:19\n\
    \  |\n9 |             4u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhel"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s[0..s.len() - 2]\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmph5_21k_a.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n --> /tmp/tmph5_21k_a.rs:7:5\n  |\n\
    2 | fn string_sequence(n: isize) -> String {\n  |                            \
    \     ------ expected `String` because of return type\n...\n7 |     s[0..s.len()\
    \ - 2]\n  |     ^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |     |\n  |     expected struct `String`, found `str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(format!(\"{}\"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpseh0e7n5.rs:5:14\n  |\n5 |\
    \         s += String::from(format!(\"{}\", i));\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(format!(\"{}\"\
    , i))`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa8ycnbgw.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&[u8]`, found struct `Vec`\n  |\n  = note: expected reference `&[u8]`\n\
    \                found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpa8ycnbgw.rs:3:5\n  |\n2 |   fn string_sequence(n: isize) -> String\
    \ {\n  |                                   ------ expected `String` because of\
    \ return type\n3 | /     String::from_utf8_lossy(\n4 | |         (0..n).map(|i|\
    \ i.to_string()).collect::<Vec<_>>(),\n5 | |     )\n  | |     ^- help: try using\
    \ a conversion method: `.to_string()`\n  | |_____|\n  |       expected struct\
    \ `String`, found enum `Cow`\n  |\n  = note: expected struct `String`\n      \
    \         found enum `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa8ycnbgw.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&[u8]`, found struct `Vec`\n  |\n  = note: expected reference `&[u8]`\n\
    \                found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpa8ycnbgw.rs:3:5\n  |\n2 |   fn string_sequence(n: isize) -> String\
    \ {\n  |                                   ------ expected `String` because of\
    \ return type\n3 | /     String::from_utf8_lossy(\n4 | |         (0..n).map(|i|\
    \ i.to_string()).collect::<Vec<_>>(),\n5 | |     )\n  | |     ^- help: try using\
    \ a conversion method: `.to_string()`\n  | |_____|\n  |       expected struct\
    \ `String`, found enum `Cow`\n  |\n  = note: expected struct `String`\n      \
    \         found enum `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8(\n\
    \        &[\n            b'0',\n            b'1',\n            b'2',\n       \
    \     b'3',\n            b'4',\n            b'5',\n            b'6',\n       \
    \     b'7',\n            b'8',\n            b'9',\n            b'a',\n       \
    \     b'b',\n            b'c',\n            b'd',\n            b'e',\n       \
    \     b'f',\n            b'g',\n            b'h',\n            b'i',\n       \
    \     b'j',\n            b'k',\n            b'l',\n            b'm',\n       \
    \     b'n',\n            b'o',\n            b'p',\n            b'q',\n       \
    \     b'r',\n            b's',\n            b't',\n            b'u',\n       \
    \     b'v',\n            b'w',\n            b'x',\n            b'y',\n       \
    \     b'z',\n            b'A',\n            b'B',\n            b'C',\n       \
    \     b'D',\n            b'E',\n            b'F',\n            b'G',\n       \
    \     b'H',\n            b'I',\n            b'J',\n            b'K',\n       \
    \     b'L',\n            b'M',\n            b'N',\n            b'O',\n       \
    \     b'P',\n            b'Q',\n            b'R',\n            b'S',\n       \
    \     b'T',\n            b'U',\n            b'V',\n            b'W',\n       \
    \     b'X',\n            b'Y',\n            b'Z',\n            b'0',\n       \
    \     b'1',\n            b'2',\n            b'3',\n            b'4',\n       \
    \     b'5',\n            b'6',\n            b'7',\n            b'8',\n       \
    \     b'9',\n            b'a',\n            b'b',\n            b'c',\n       \
    \     b'd',\n            b'e',\n            b'f',\n            b'g',\n       \
    \     b'h',\n            b'i',\n            b'j',\n            b'k',\n       \
    \     b'l',\n            b'm',\n            b'n',\n            b'o',\n       \
    \     b'p',\n            b'q',\n            b'r',\n            b's',\n       \
    \     b't',\n            b'u',\n            b'v',\n            b'w',\n       \
    \     b'x',\n            b'y',\n            b'z',\n            b'A',\n       \
    \     b'B',\n            b'C',\n            b'D',\n            b'E',\n       \
    \     b'F',\n            b'G',\n            b'H',\n            b'I',\n       \
    \     b'J',\n            b'K',\n            b'L',\n            b'M',\n       \
    \     b'N',\n\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpz_o49zm6.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n118 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpz_o49zm6.rs:4:9\n    |\n4   | /         &[\n5   | |  \
    \           b'0',\n6   | |             b'1',\n7   | |             b'2',\n... \
    \  |\n117 | |\n118 | | }\n    | |_^ expected struct `Vec`, found `&[u8; 112]`\n\
    \    |\n    = note: expected struct `Vec<u8>`\n            found reference `&[u8;\
    \ 112]`\nhelp: try using a conversion method\n    |\n4   ~         (&[\n5   |\
    \             b'0',\n6   |             b'1',\n7   |             b'2',\n8   | \
    \            b'3',\n9   |             b'4',\n  ...\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpz_o49zm6.rs:3:5\n    |\n2   |   fn string_sequence(n:\
    \ isize) -> String {\n    |                                   ------ expected\
    \ `String` because of return type\n3   | /     String::from_utf8(\n4   | |   \
    \      &[\n5   | |             b'0',\n6   | |             b'1',\n...   |\n117\
    \ | |\n118 | | }\n    | |_^ expected struct `String`, found enum `Result`\n  \
    \  |\n    = note: expected struct `String`\n                 found enum `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b'0',\n            b'1',\n            b'2',\n       \
    \     b'3',\n            b'4',\n            b'5',\n            b'6',\n       \
    \     b'7',\n            b'8',\n            b'9',\n            b'a',\n       \
    \     b'b',\n            b'c',\n            b'd',\n            b'e',\n       \
    \     b'f',\n            b'g',\n            b'h',\n            b'i',\n       \
    \     b'j',\n            b'k',\n            b'l',\n            b'm',\n       \
    \     b'n',\n            b'o',\n            b'p',\n            b'q',\n       \
    \     b'r',\n            b's',\n            b't',\n            b'u',\n       \
    \     b'v',\n            b'w',\n            b'x',\n            b'y',\n       \
    \     b'z',\n            b'A',\n            b'B',\n            b'C',\n       \
    \     b'D',\n            b'E',\n            b'F',\n            b'G',\n       \
    \     b'H',\n            b'I',\n            b'J',\n            b'K',\n       \
    \     b'L',\n            b'M',\n            b'N',\n            b'O',\n       \
    \     b'P',\n            b'Q',\n            b'R',\n            b'S',\n       \
    \     b'T',\n            b'U',\n            b'V',\n            b'W',\n       \
    \     b'X',\n            b'Y',\n            b'Z',\n            b'0',\n       \
    \     b'1',\n            b'2',\n            b'3',\n            b'4',\n       \
    \     b'5',\n            b'6',\n            b'7',\n            b'8',\n       \
    \     b'9',\n            b'a',\n            b'b',\n            b'c',\n       \
    \     b'd',\n            b'e',\n            b'f',\n            b'g',\n       \
    \     b'h',\n            b'i',\n            b'j',\n            b'k',\n       \
    \     b'l',\n            b'm',\n            b'n',\n            b'o',\n       \
    \     b'p',\n            b'q',\n            b'r',\n            b's',\n       \
    \     b't',\n            b'u',\n            b'v',\n            b'w',\n       \
    \     b'x',\n            b'y',\n            b'z',\n            b'A',\n       \
    \     b'B',\n            b'C',\n            b'D',\n            b'E',\n       \
    \     b'F',\n            b'G',\n            b'H',\n            b'I',\n       \
    \     b'J',\n            b'K',\n            b'L',\n            b'M',\n       \
    \     \n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpns730eob.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8_lossy(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n117 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpns730eob.rs:3:5\n    |\n2   |   fn string_sequence(n:\
    \ isize) -> String {\n    |                                   ------ expected\
    \ `String` because of return type\n3   | /     String::from_utf8_lossy(\n4   |\
    \ |         &[\n5   | |             b'0',\n6   | |             b'1',\n...   |\n\
    116 | |             \n117 | | }\n    | | ^- help: try using a conversion method:\
    \ `.to_string()`\n    | |_|\n    |   expected struct `String`, found enum `Cow`\n\
    \    |\n    = note: expected struct `String`\n                 found enum `Cow<'_,\
    \ str>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b'0',\n            b'1',\n            b'2',\n       \
    \     b'3',\n            b'4',\n            b'5',\n            b'6',\n       \
    \     b'7',\n            b'8',\n            b'9',\n            b'a',\n       \
    \     b'b',\n            b'c',\n            b'd',\n            b'e',\n       \
    \     b'f',\n            b'g',\n            b'h',\n            b'i',\n       \
    \     b'j',\n            b'k',\n            b'l',\n            b'm',\n       \
    \     b'n',\n            b'o',\n            b'p',\n            b'q',\n       \
    \     b'r',\n            b's',\n            b't',\n            b'u',\n       \
    \     b'v',\n            b'w',\n            b'x',\n            b'y',\n       \
    \     b'z',\n            b'A',\n            b'B',\n            b'C',\n       \
    \     b'D',\n            b'E',\n            b'F',\n            b'G',\n       \
    \     b'H',\n            b'I',\n            b'J',\n            b'K',\n       \
    \     b'L',\n            b'M',\n            b'N',\n            b'O',\n       \
    \     b'P',\n            b'Q',\n            b'R',\n            b'S',\n       \
    \     b'T',\n            b'U',\n            b'V',\n            b'W',\n       \
    \     b'X',\n            b'Y',\n            b'Z',\n            b'0',\n       \
    \     b'1',\n            b'2',\n            b'3',\n            b'4',\n       \
    \     b'5',\n            b'6',\n            b'7',\n            b'8',\n       \
    \     b'9',\n            b'a',\n            b'b',\n            b'c',\n       \
    \     b'd',\n            b'e',\n            b'f',\n            b'g',\n       \
    \     b'h',\n            b'i',\n            b'j',\n            b'k',\n       \
    \     b'l',\n            b'm',\n            b'n',\n            b'o',\n       \
    \     b'p',\n            b'q',\n            b'r',\n            b's',\n       \
    \     b't',\n            b'u',\n            b'v',\n            b'w',\n       \
    \     b'x',\n            b'y',\n            b'z',\n            b'A',\n       \
    \     b'B',\n            b'C',\n            b'D',\n            b'E',\n       \
    \     b'F',\n            b'G',\n            b'H',\n            b'I',\n       \
    \     b'J',\n            b'K',\n            b'L',\n            b'M',\n       \
    \     \n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpns730eob.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8_lossy(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n117 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpns730eob.rs:3:5\n    |\n2   |   fn string_sequence(n:\
    \ isize) -> String {\n    |                                   ------ expected\
    \ `String` because of return type\n3   | /     String::from_utf8_lossy(\n4   |\
    \ |         &[\n5   | |             b'0',\n6   | |             b'1',\n...   |\n\
    116 | |             \n117 | | }\n    | | ^- help: try using a conversion method:\
    \ `.to_string()`\n    | |_|\n    |   expected struct `String`, found enum `Cow`\n\
    \    |\n    = note: expected struct `String`\n                 found enum `Cow<'_,\
    \ str>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s.trim_end(',');\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmpkpkogd7u.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpkpkogd7u.rs:7:7\n     |\n7    |     s.trim_end(',');\n     |\
    \       ^^^^^^^^ --- supplied 1 argument\n     |       |\n     |       expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b\"0\",\n            b\"1\",\n            b\"2\",\n \
    \           b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"\
    6\",\n            b\"7\",\n            b\"8\",\n            b\"9\",\n        \
    \    b\"a\",\n            b\"b\",\n            b\"c\",\n            b\"d\",\n\
    \            b\"e\",\n            b\"f\",\n            b\"g\",\n            b\"\
    h\",\n            b\"i\",\n            b\"j\",\n            b\"k\",\n        \
    \    b\"l\",\n            b\"m\",\n            b\"n\",\n            b\"o\",\n\
    \            b\"p\",\n            b\"q\",\n            b\"r\",\n            b\"\
    s\",\n            b\"t\",\n            b\"u\",\n            b\"v\",\n        \
    \    b\"w\",\n            b\"x\",\n            b\"y\",\n            b\"z\",\n\
    \            b\"A\",\n            b\"B\",\n            b\"C\",\n            b\"\
    D\",\n            b\"E\",\n            b\"F\",\n            b\"G\",\n        \
    \    b\"H\",\n            b\"I\",\n            b\"J\",\n            b\"K\",\n\
    \            b\"L\",\n            b\"M\",\n            b\"N\",\n            b\"\
    O\",\n            b\"P\",\n            b\"Q\",\n            b\"R\",\n        \
    \    b\"S\",\n            b\"T\",\n            b\"U\",\n            b\"V\",\n\
    \            b\"W\",\n            b\"X\",\n            b\"Y\",\n            b\"\
    Z\",\n            b\"0\",\n            b\"1\",\n            b\"2\",\n        \
    \    b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"6\",\n\
    \            b\"7\",\n            b\"8\",\n            b\"9\",\n            b\"\
    a\",\n            b\"b\",\n            b\"c\",\n            b\"d\",\n        \
    \    b\"e\",\n            b\"f\",\n            b\"g\",\n            b\"h\",\n\
    \            b\"i\",\n            b\"j\",\n            b\"k\",\n            b\"\
    l\",\n            b\"m\",\n            b\"n\",\n            b\"o\",\n        \
    \    b\"p\",\n            b\"q\",\n            b\"r\",\n            b\"s\",\n\
    \            b\"t\",\n            b\"u\",\n            b\"v\",\n            b\"\
    w\",\n            b\"x\",\n            b\"y\",\n            b\"z\",\n        \
    \    b\"A\",\n            b\"B\",\n            b\"C\",\n            b\"D\",\n\
    \            b\"E\",\n            b\"F\",\n            b\"G\",\n            b\"\
    H\",\n            b\"I\",\n            b\"J\",\n            b\"\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmp2s06lk9u.rs:120:67\n\
    \    |\n120 |       assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8\
    \ 9 10\"));\n    |  ___________________________________________________________________^\n\
    121 | | }\n    | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(format!(\"{}\"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpseh0e7n5.rs:5:14\n  |\n5 |\
    \         s += String::from(format!(\"{}\", i));\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(format!(\"{}\"\
    , i))`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"0\".to_string();\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoa5cehmt.rs:5:14\n  |\n5 |\
    \         s += \"0\".to_string();\n  |              ^^^^^^^^^^^^^^^\n  |     \
    \         |\n  |              expected `&str`, found struct `String`\n  |    \
    \          help: consider borrowing here: `&\"0\".to_string()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::iter::repeat;\n\
    \    use std::fmt::Write;\n    use std::str::FromStr;\n    use std::str::FromStrExt;\n\
    \n    let mut s = String::new();\n    for _ in 0..n {\n        write!(&mut s,\
    \ \"{}\", 0).unwrap();\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `std::str::FromStrExt`\n --> /tmp/tmpvoc7i2b_.rs:6:9\n\
    \  |\n6 |     use std::str::FromStrExt;\n  |         ^^^^^^^^^^----------\n  |\
    \         |         |\n  |         |         help: a similar name exists in the\
    \ module: `FromStr`\n  |         no `FromStrExt` in `str`\n\nwarning: unused import:\
    \ `std::iter::repeat`\n --> /tmp/tmpvoc7i2b_.rs:3:9\n  |\n3 |     use std::iter::repeat;\n\
    \  |         ^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by\
    \ default\n\nwarning: unused import: `std::str::FromStr`\n --> /tmp/tmpvoc7i2b_.rs:5:9\n\
    \  |\n5 |     use std::str::FromStr;\n  |         ^^^^^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to previous error; 2 warnings emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0432`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \"),\n    )\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpei2j7s41.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \"),\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&[u8]`, found struct `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpei2j7s41.rs:3:5\n\
    \  |\n2 |   fn string_sequence(n: isize) -> String {\n  |                    \
    \               ------ expected `String` because of return type\n3 | /     String::from_utf8_lossy(\n\
    4 | |         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \"),\n\
    5 | |     )\n  | |     ^- help: try using a conversion method: `.to_string()`\n\
    \  | |_____|\n  |       expected struct `String`, found enum `Cow`\n  |\n  = note:\
    \ expected struct `String`\n               found enum `Cow<'_, str>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmph0xhgeip.rs:3:46\n  |\n3 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0\".to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikzqviee.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0\".to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikzqviee.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b\"0\",\n            b\"1\",\n            b\"2\",\n \
    \           b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"\
    6\",\n            b\"7\",\n            b\"8\",\n            b\"9\",\n        \
    \    b\"10\",\n            b\"11\",\n            b\"12\",\n            b\"13\"\
    ,\n            b\"14\",\n            b\"15\",\n            b\"16\",\n        \
    \    b\"17\",\n            b\"18\",\n            b\"19\",\n            b\"20\"\
    ,\n            b\"21\",\n            b\"22\",\n            b\"23\",\n        \
    \    b\"24\",\n            b\"25\",\n            b\"26\",\n            b\"27\"\
    ,\n            b\"28\",\n            b\"29\",\n            b\"30\",\n        \
    \    b\"31\",\n            b\"32\",\n            b\"33\",\n            b\"34\"\
    ,\n            b\"35\",\n            b\"36\",\n            b\"37\",\n        \
    \    b\"38\",\n            b\"39\",\n            b\"40\",\n            b\"41\"\
    ,\n            b\"42\",\n            b\"43\",\n            b\"44\",\n        \
    \    b\"45\",\n            b\"46\",\n            b\"47\",\n            b\"48\"\
    ,\n            b\"49\",\n            b\"50\",\n            b\"51\",\n        \
    \    b\"52\",\n            b\"53\",\n            b\"54\",\n            b\"55\"\
    ,\n            b\"56\",\n            b\"57\",\n            b\"58\",\n        \
    \    b\"59\",\n            b\"60\",\n            b\"61\",\n            b\"62\"\
    ,\n            b\"63\",\n            b\"64\",\n            b\"65\",\n        \
    \    b\"66\",\n            b\"67\",\n            b\"68\",\n            b\"69\"\
    ,\n            b\"70\",\n            b\"71\",\n            b\"72\",\n        \
    \    b\"73\",\n            b\"74\",\n            b\"75\",\n            b\"76\"\
    ,\n            b\"77\",\n            b\"78\",\n            b\"79\",\n        \
    \    b\"80\",\n            b\"81\",\n            b\"82\",\n            b\"83\"\
    ,\n            b\"84\",\n            b\"85\",\n            b\"86\",\n        \
    \    b\"87\",\n            b\"88\",\n            b\"89\",\n            b\"90\"\
    ,\n            b\"91\",\n            b\"92\",\n            b\"93\",\n        \
    \    b\"94\",\n            b\"95\",\n            b\"96\",\n            b\"97\"\
    ,\n            b\"98\",\n            b\"99\",\n            b\"100\",\n       \
    \     b\"101\",\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpt_a_s904.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8_lossy(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n107 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpt_a_s904.rs:5:13\n  |\n5 |             b\"0\",\n  |    \
    \         ^^^^ expected `u8`, found `&[u8; 1]`\n\nerror[E0308]: mismatched types\n\
    \   --> /tmp/tmpt_a_s904.rs:3:5\n    |\n2   |   fn string_sequence(n: isize) ->\
    \ String {\n    |                                   ------ expected `String` because\
    \ of return type\n3   | /     String::from_utf8_lossy(\n4   | |         &[\n5\
    \   | |             b\"0\",\n6   | |             b\"1\",\n...   |\n106 | |   \
    \          b\"101\",\n107 | | }\n    | | ^- help: try using a conversion method:\
    \ `.to_string()`\n    | |_|\n    |   expected struct `String`, found enum `Cow`\n\
    \    |\n    = note: expected struct `String`\n                 found enum `Cow<'_,\
    \ str>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \"))\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpzkw4oknc.rs:8:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975660
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b\"0\",\n            b\"1\",\n            b\"2\",\n \
    \           b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"\
    6\",\n            b\"7\",\n            b\"8\",\n            b\"9\",\n        \
    \    b\"a\",\n            b\"b\",\n            b\"c\",\n            b\"d\",\n\
    \            b\"e\",\n            b\"f\",\n            b\"g\",\n            b\"\
    h\",\n            b\"i\",\n            b\"j\",\n            b\"k\",\n        \
    \    b\"l\",\n            b\"m\",\n            b\"n\",\n            b\"o\",\n\
    \            b\"p\",\n            b\"q\",\n            b\"r\",\n            b\"\
    s\",\n            b\"t\",\n            b\"u\",\n            b\"v\",\n        \
    \    b\"w\",\n            b\"x\",\n            b\"y\",\n            b\"z\",\n\
    \            b\"A\",\n            b\"B\",\n            b\"C\",\n            b\"\
    D\",\n            b\"E\",\n            b\"F\",\n            b\"G\",\n        \
    \    b\"H\",\n            b\"I\",\n            b\"J\",\n            b\"K\",\n\
    \            b\"L\",\n            b\"M\",\n            b\"N\",\n            b\"\
    O\",\n            b\"P\",\n            b\"Q\",\n            b\"R\",\n        \
    \    b\"S\",\n            b\"T\",\n            b\"U\",\n            b\"V\",\n\
    \            b\"W\",\n            b\"X\",\n            b\"Y\",\n            b\"\
    Z\",\n            b\"0\",\n            b\"1\",\n            b\"2\",\n        \
    \    b\"3\",\n            b\"4\",\n            b\"5\",\n            b\"6\",\n\
    \            b\"7\",\n            b\"8\",\n            b\"9\",\n            b\"\
    a\",\n            b\"b\",\n            b\"c\",\n            b\"d\",\n        \
    \    b\"e\",\n            b\"f\",\n            b\"g\",\n            b\"h\",\n\
    \            b\"i\",\n            b\"j\",\n            b\"k\",\n            b\"\
    l\",\n            b\"m\",\n            b\"n\",\n            b\"o\",\n        \
    \    b\"p\",\n            b\"q\",\n            b\"r\",\n            b\"s\",\n\
    \            b\"t\",\n            b\"u\",\n            b\"v\",\n            b\"\
    w\",\n            b\"x\",\n            b\"y\",\n            b\"z\",\n        \
    \    b\"A\",\n            b\"B\",\n            b\"C\",\n            b\"D\",\n\
    \            b\"E\",\n            b\"F\",\n            b\"G\",\n            b\"\
    H\",\n            b\"I\",\n            b\"J\",\n            b\"\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmp2s06lk9u.rs:120:67\n\
    \    |\n120 |       assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8\
    \ 9 10\"));\n    |  ___________________________________________________________________^\n\
    121 | | }\n    | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[0; n].iter().cloned().collect::<Vec<_>>().join(\", \"),\n    )\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmpj5zq4z4d.rs:4:14\n\
    \  |\n2 | fn string_sequence(n: isize) -> String {\n  |                    - this\
    \ would need to be a `const`\n3 |     String::from_utf8_lossy(\n4 |         &[0;\
    \ n].iter().cloned().collect::<Vec<_>>().join(\", \"),\n  |              ^\n\n\
    error[E0599]: the method `join` exists for struct `Vec<{integer}>`, but its trait\
    \ bounds were not satisfied\n --> /tmp/tmpj5zq4z4d.rs:4:53\n  |\n4 |         &[0;\
    \ n].iter().cloned().collect::<Vec<_>>().join(\", \"),\n  |                  \
    \                                   ^^^^ method cannot be called on `Vec<{integer}>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[{integer}]: Join<_>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpj5zq4z4d.rs:3:5\n  |\n2 |   fn string_sequence(n: isize)\
    \ -> String {\n  |                                   ------ expected `String`\
    \ because of return type\n3 | /     String::from_utf8_lossy(\n4 | |         &[0;\
    \ n].iter().cloned().collect::<Vec<_>>().join(\", \"),\n5 | |     )\n  | |   \
    \  ^- help: try using a conversion method: `.to_string()`\n  | |_____|\n  |  \
    \     expected struct `String`, found enum `Cow`\n  |\n  = note: expected struct\
    \ `String`\n               found enum `Cow<'_, str>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0435, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += format!(\"{}\", i);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbpjdmiy0.rs:5:14\n  |\n5 |\
    \         s += format!(\"{}\", i);\n  |              ^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n  |\n  = note: this error originates in the macro\
    \ `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(format!(\"{}\"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpseh0e7n5.rs:5:14\n  |\n5 |\
    \         s += String::from(format!(\"{}\", i));\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(format!(\"{}\"\
    , i))`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            0u8..=n,\n            1u8..=n,\n            2u8..=n,\n\
    \            3u8..=n,\n            4u8..=n,\n            5u8..=n,\n          \
    \  6u8..=n,\n            7u8..=n,\n            8u8..=n,\n            9u8..=n,\n\
    \            10u8..=n,\n            11u8..=n,\n            12u8..=n,\n       \
    \     13u8..=n,\n            14u8..=n,\n            15u8..=n,\n            16u8..=n,\n\
    \            17u8..=n,\n            18u8..=n,\n            19u8..=n,\n       \
    \     20u8..=n,\n            21u8..=n,\n            22u8..=n,\n            23u8..=n,\n\
    \            24u8..=n,\n            25u8..=n,\n            26u8..=n,\n       \
    \     27u8..=n,\n            28u8..=n,\n            29u8..=n,\n            30u8..=n,\n\
    \            31u8..=n,\n            32u8..=n,\n            33u8..=n,\n       \
    \     34u8..=n,\n            35u8..=n,\n            36u8..=n,\n            37u8..=n,\n\
    \            38u8..=n,\n            39u8..=n,\n            40u8..=n,\n       \
    \     41u8..=n,\n            42u8..=n,\n            43u8..=n,\n            44u8..=n,\n\
    \            45u8..=n,\n            46u8..=n,\n            47u8..=n,\n       \
    \     48u8..=n,\n            49u8..=n,\n            50u8..=n,\n            51u8..=n,\n\
    \            52u8..=n,\n            53u8..=n,\n            54u8..=n,\n       \
    \     55u8..=n,\n            56u8..=n,\n            57u8..=n,\n            58u8..=n,\n\
    \            59u8..=n,\n            60u8..=n,\n            61u8..=n,\n       \
    \     62u8..=n,\n            63u8..=n,\n            64u8..=n,\n            65u8..=n,\n\
    \            66u8..=n,\n            67u8..=n,\n            68u8..=n,\n       \
    \     69u8..=n,\n            70u8..=n,\n            \n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp4bb6cldx.rs:4:10\n\
    \   |\n2  | fn string_sequence(n: isize) -> String {\n   |                   \
    \                     - closing delimiter possibly meant for this\n3  |     String::from_utf8_lossy(\n\
    4  |         &[\n   |          ^ unclosed delimiter\n...\n77 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:5:19\n\
    \  |\n5 |             0u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n5 |             0u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:5:13\n\
    \  |\n5 |             0u8..=n,\n  |             ^^^^^^^ expected `u8`, found struct\
    \ `RangeInclusive`\n  |\n  = note: expected type `u8`\n           found struct\
    \ `RangeInclusive<u8>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:6:19\n\
    \  |\n6 |             1u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n6 |             1u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:7:19\n\
    \  |\n7 |             2u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n7 |             2u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:8:19\n\
    \  |\n8 |             3u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n8 |             3u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:9:19\n\
    \  |\n9 |             4u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhel"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(&format!(\"{}\"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbxoc2ceg.rs:5:14\n  |\n5 |\
    \         s += String::from(&format!(\"{}\", i));\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(&format!(\"{}\"\
    , i))`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b'0', b'1',\n            b'2', b'3',\n            b'4',\
    \ b'5',\n            b'6', b'7',\n            b'8', b'9',\n            b'a', b'b',\n\
    \            b'c', b'd',\n            b'e', b'f',\n            b'g', b'h',\n \
    \           b'i', b'j',\n            b'k', b'l',\n            b'm', b'n',\n  \
    \          b'o', b'p',\n            b'q', b'r',\n            b's', b't',\n   \
    \         b'u', b'v',\n            b'w', b'x',\n            b'y', b'z',\n    \
    \        b'A', b'B',\n            b'C', b'D',\n            b'E', b'F',\n     \
    \       b'G', b'H',\n            b'I', b'J',\n            b'K', b'L',\n      \
    \      b'M', b'N',\n            b'O', b'P',\n            b'Q', b'R',\n       \
    \     b'S', b'T',\n            b'U', b'V',\n            b'W', b'X',\n        \
    \    b'Y', b'Z',\n            b'0', b'1',\n            b'2', b'3',\n         \
    \   b'4', b'5',\n            b'6', b'7',\n            b'8', b'9',\n          \
    \  b'a', b'b',\n            b'c', b'd',\n            b'e', b'f',\n           \
    \ b'g', b'h',\n            b'i', b'j',\n            b'k', b'l',\n            b'm',\
    \ b'n',\n            b'o', b'p',\n            b'q', b'r',\n            b's', b't',\n\
    \            b'u', b'v',\n            b'w', b'x',\n            b'y', b'z',\n \
    \           b'A', b'B',\n            b'C', b'D',\n            b'E', b'F',\n  \
    \          b'G', b'H',\n            b'I', b'J',\n            b'K', b'L',\n   \
    \         b'M', b'N',\n            b'O', b'P',\n            b'Q', b'R',\n    \
    \        b'S', b'T',\n            b'U', b'V',\n            b'W', b'X',\n     \
    \       b'Y', b'Z',\n            b'0', b'1',\n            b'2', b'3',\n      \
    \      b'4', b'5',\n            b'6', b'7',\n            b'8', b'9',\n       \
    \     b'a', b'b',\n            b'c', b'd',\n            b'e', b'f',\n        \
    \    b'g', b'h',\n            b'i', b'j',\n            b'k', b'l',\n         \
    \   b'm', b'n',\n            b'o', b'p',\n            b'q', b'r',\n          \
    \  b'\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0763]: unterminated byte constant\n  --> /tmp/tmpia1rqzgw.rs:81:14\n\
    \   |\n81 |             b'\n   |              ^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0763`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s[0..n]\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmppmsa85e_.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \ --> /tmp/tmppmsa85e_.rs:7:5\n  |\n7 |     s[0..n]\n  |     ^^^^^^^ `String`\
    \ cannot be indexed by `std::ops::Range<isize>`\n  |\n  = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s.push('1');\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"0\"`', /tmp/tmp3vu0vv0_.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975660
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmph0xhgeip.rs:3:46\n  |\n3 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"0\".to_string();\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoa5cehmt.rs:5:14\n  |\n5 |\
    \         s += \"0\".to_string();\n  |              ^^^^^^^^^^^^^^^\n  |     \
    \         |\n  |              expected `&str`, found struct `String`\n  |    \
    \          help: consider borrowing here: `&\"0\".to_string()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(&format!(\"{}\"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbxoc2ceg.rs:5:14\n  |\n5 |\
    \         s += String::from(&format!(\"{}\", i));\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(&format!(\"{}\"\
    , i))`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0\".to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikzqviee.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            0u8..=n,\n            1u8..=n,\n            2u8..=n,\n\
    \            3u8..=n,\n            4u8..=n,\n            5u8..=n,\n          \
    \  6u8..=n,\n            7u8..=n,\n            8u8..=n,\n            9u8..=n,\n\
    \            10u8..=n,\n            11u8..=n,\n            12u8..=n,\n       \
    \     13u8..=n,\n            14u8..=n,\n            15u8..=n,\n            16u8..=n,\n\
    \            17u8..=n,\n            18u8..=n,\n            19u8..=n,\n       \
    \     20u8..=n,\n            21u8..=n,\n            22u8..=n,\n            23u8..=n,\n\
    \            24u8..=n,\n            25u8..=n,\n            26u8..=n,\n       \
    \     27u8..=n,\n            28u8..=n,\n            29u8..=n,\n            30u8..=n,\n\
    \            31u8..=n,\n            32u8..=n,\n            33u8..=n,\n       \
    \     34u8..=n,\n            35u8..=n,\n            36u8..=n,\n            37u8..=n,\n\
    \            38u8..=n,\n            39u8..=n,\n            40u8..=n,\n       \
    \     41u8..=n,\n            42u8..=n,\n            43u8..=n,\n            44u8..=n,\n\
    \            45u8..=n,\n            46u8..=n,\n            47u8..=n,\n       \
    \     48u8..=n,\n            49u8..=n,\n            50u8..=n,\n            51u8..=n,\n\
    \            52u8..=n,\n            53u8..=n,\n            54u8..=n,\n       \
    \     55u8..=n,\n            56u8..=n,\n            57u8..=n,\n            58u8..=n,\n\
    \            59u8..=n,\n            60u8..=n,\n            61u8..=n,\n       \
    \     62u8..=n,\n            63u8..=n,\n            64u8..=n,\n            65u8..=n,\n\
    \            66u8..=n,\n            67u8..=n,\n            68u8..=n,\n       \
    \     69u8..=n,\n            70u8..=n,\n            \n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp4bb6cldx.rs:4:10\n\
    \   |\n2  | fn string_sequence(n: isize) -> String {\n   |                   \
    \                     - closing delimiter possibly meant for this\n3  |     String::from_utf8_lossy(\n\
    4  |         &[\n   |          ^ unclosed delimiter\n...\n77 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:5:19\n\
    \  |\n5 |             0u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n5 |             0u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:5:13\n\
    \  |\n5 |             0u8..=n,\n  |             ^^^^^^^ expected `u8`, found struct\
    \ `RangeInclusive`\n  |\n  = note: expected type `u8`\n           found struct\
    \ `RangeInclusive<u8>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:6:19\n\
    \  |\n6 |             1u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n6 |             1u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:7:19\n\
    \  |\n7 |             2u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n7 |             2u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:8:19\n\
    \  |\n8 |             3u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n  |\n8 |             3u8..=n.try_into().unwrap(),\n  |        \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4bb6cldx.rs:9:19\n\
    \  |\n9 |             4u8..=n,\n  |                   ^ expected `u8`, found `isize`\n\
    \  |\nhel"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b'0',\n            b'1',\n            b'2',\n       \
    \     b'3',\n            b'4',\n            b'5',\n            b'6',\n       \
    \     b'7',\n            b'8',\n            b'9',\n            b'a',\n       \
    \     b'b',\n            b'c',\n            b'd',\n            b'e',\n       \
    \     b'f',\n            b'g',\n            b'h',\n            b'i',\n       \
    \     b'j',\n            b'k',\n            b'l',\n            b'm',\n       \
    \     b'n',\n            b'o',\n            b'p',\n            b'q',\n       \
    \     b'r',\n            b's',\n            b't',\n            b'u',\n       \
    \     b'v',\n            b'w',\n            b'x',\n            b'y',\n       \
    \     b'z',\n            b'A',\n            b'B',\n            b'C',\n       \
    \     b'D',\n            b'E',\n            b'F',\n            b'G',\n       \
    \     b'H',\n            b'I',\n            b'J',\n            b'K',\n       \
    \     b'L',\n            b'M',\n            b'N',\n            b'O',\n       \
    \     b'P',\n            b'Q',\n            b'R',\n            b'S',\n       \
    \     b'T',\n            b'U',\n            b'V',\n            b'W',\n       \
    \     b'X',\n            b'Y',\n            b'Z',\n            b'0',\n       \
    \     b'1',\n            b'2',\n            b'3',\n            b'4',\n       \
    \     b'5',\n            b'6',\n            b'7',\n            b'8',\n       \
    \     b'9',\n            b'a',\n            b'b',\n            b'c',\n       \
    \     b'd',\n            b'e',\n            b'f',\n            b'g',\n       \
    \     b'h',\n            b'i',\n            b'j',\n            b'k',\n       \
    \     b'l',\n            b'm',\n            b'n',\n            b'o',\n       \
    \     b'p',\n            b'q',\n            b'r',\n            b's',\n       \
    \     b't',\n            b'u',\n            b'v',\n            b'w',\n       \
    \     b'x',\n            b'y',\n            b'z',\n            b'A',\n       \
    \     b'B',\n            b'C',\n            b'D',\n            b'E',\n       \
    \     b'F',\n            b'G',\n            b'H',\n            b'I',\n       \
    \     b'J',\n            b'K',\n            b'L',\n            b'M',\n       \
    \     \n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpns730eob.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8_lossy(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n117 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpns730eob.rs:3:5\n    |\n2   |   fn string_sequence(n:\
    \ isize) -> String {\n    |                                   ------ expected\
    \ `String` because of return type\n3   | /     String::from_utf8_lossy(\n4   |\
    \ |         &[\n5   | |             b'0',\n6   | |             b'1',\n...   |\n\
    116 | |             \n117 | | }\n    | | ^- help: try using a conversion method:\
    \ `.to_string()`\n    | |_|\n    |   expected struct `String`, found enum `Cow`\n\
    \    |\n    = note: expected struct `String`\n                 found enum `Cow<'_,\
    \ str>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s.trim_end(',');\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmpkpkogd7u.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpkpkogd7u.rs:7:7\n     |\n7    |     s.trim_end(',');\n     |\
    \       ^^^^^^^^ --- supplied 1 argument\n     |       |\n     |       expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0123456789\"\
    .to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpin8q6vha.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0123456789\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0123456789\"\
    .to_string())`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8',\
    \ b'9',\n            b'a', b'b', b'c', b'd', b'e', b'f', b'g', b'h', b'i', b'j',\n\
    \            b'k', b'l', b'm', b'n', b'o', b'p', b'q', b'r', b's', b't',\n   \
    \         b'u', b'v', b'w', b'x', b'y', b'z',\n        ],\n    )\n    .unwrap()\n\
    \    .to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n  \
    \  assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for enum `Cow<'_, str>` in\
    \ the current scope\n  --> /tmp/tmp4cv0mxb2.rs:11:6\n   |\n11 |     .unwrap()\n\
    \   |      ^^^^^^ method not found in `Cow<'_, str>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0\".to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikzqviee.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        &[\n            b'0',\n            b'1',\n            b'2',\n       \
    \     b'3',\n            b'4',\n            b'5',\n            b'6',\n       \
    \     b'7',\n            b'8',\n            b'9',\n            b'a',\n       \
    \     b'b',\n            b'c',\n            b'd',\n            b'e',\n       \
    \     b'f',\n            b'g',\n            b'h',\n            b'i',\n       \
    \     b'j',\n            b'k',\n            b'l',\n            b'm',\n       \
    \     b'n',\n            b'o',\n            b'p',\n            b'q',\n       \
    \     b'r',\n            b's',\n            b't',\n            b'u',\n       \
    \     b'v',\n            b'w',\n            b'x',\n            b'y',\n       \
    \     b'z',\n            b'A',\n            b'B',\n            b'C',\n       \
    \     b'D',\n            b'E',\n            b'F',\n            b'G',\n       \
    \     b'H',\n            b'I',\n            b'J',\n            b'K',\n       \
    \     b'L',\n            b'M',\n            b'N',\n            b'O',\n       \
    \     b'P',\n            b'Q',\n            b'R',\n            b'S',\n       \
    \     b'T',\n            b'U',\n            b'V',\n            b'W',\n       \
    \     b'X',\n            b'Y',\n            b'Z',\n            b'0',\n       \
    \     b'1',\n            b'2',\n            b'3',\n            b'4',\n       \
    \     b'5',\n            b'6',\n            b'7',\n            b'8',\n       \
    \     b'9',\n            b'a',\n            b'b',\n            b'c',\n       \
    \     b'd',\n            b'e',\n            b'f',\n            b'g',\n       \
    \     b'h',\n            b'i',\n            b'j',\n            b'k',\n       \
    \     b'l',\n            b'm',\n            b'n',\n            b'o',\n       \
    \     b'p',\n            b'q',\n            b'r',\n            b's',\n       \
    \     b't',\n            b'u',\n            b'v',\n            b'w',\n       \
    \     b'x',\n            b'y',\n            b'z',\n            b'A',\n       \
    \     b'B',\n            b'C',\n            b'D',\n            b'E',\n       \
    \     b'F',\n            b'G',\n            b'H',\n            b'I',\n       \
    \     b'J',\n            b'K',\n            b'L',\n            b'M',\n       \
    \     \n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpns730eob.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8_lossy(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n117 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpns730eob.rs:3:5\n    |\n2   |   fn string_sequence(n:\
    \ isize) -> String {\n    |                                   ------ expected\
    \ `String` because of return type\n3   | /     String::from_utf8_lossy(\n4   |\
    \ |         &[\n5   | |             b'0',\n6   | |             b'1',\n...   |\n\
    116 | |             \n117 | | }\n    | | ^- help: try using a conversion method:\
    \ `.to_string()`\n    | |_|\n    |   expected struct `String`, found enum `Cow`\n\
    \    |\n    = note: expected struct `String`\n                 found enum `Cow<'_,\
    \ str>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += String::from(\"0123456789\"\
    .to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpin8q6vha.rs:5:14\n  |\n5 |\
    \         s += String::from(\"0123456789\".to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\"0123456789\"\
    .to_string())`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8(\n\
    \        &[\n            b'0',\n            b'1',\n            b'2',\n       \
    \     b'3',\n            b'4',\n            b'5',\n            b'6',\n       \
    \     b'7',\n            b'8',\n            b'9',\n            b'a',\n       \
    \     b'b',\n            b'c',\n            b'd',\n            b'e',\n       \
    \     b'f',\n            b'g',\n            b'h',\n            b'i',\n       \
    \     b'j',\n            b'k',\n            b'l',\n            b'm',\n       \
    \     b'n',\n            b'o',\n            b'p',\n            b'q',\n       \
    \     b'r',\n            b's',\n            b't',\n            b'u',\n       \
    \     b'v',\n            b'w',\n            b'x',\n            b'y',\n       \
    \     b'z',\n            b'A',\n            b'B',\n            b'C',\n       \
    \     b'D',\n            b'E',\n            b'F',\n            b'G',\n       \
    \     b'H',\n            b'I',\n            b'J',\n            b'K',\n       \
    \     b'L',\n            b'M',\n            b'N',\n            b'O',\n       \
    \     b'P',\n            b'Q',\n            b'R',\n            b'S',\n       \
    \     b'T',\n            b'U',\n            b'V',\n            b'W',\n       \
    \     b'X',\n            b'Y',\n            b'Z',\n            b'0',\n       \
    \     b'1',\n            b'2',\n            b'3',\n            b'4',\n       \
    \     b'5',\n            b'6',\n            b'7',\n            b'8',\n       \
    \     b'9',\n            b'a',\n            b'b',\n            b'c',\n       \
    \     b'd',\n            b'e',\n            b'f',\n            b'g',\n       \
    \     b'h',\n            b'i',\n            b'j',\n            b'k',\n       \
    \     b'l',\n            b'm',\n            b'n',\n            b'o',\n       \
    \     b'p',\n            b'q',\n            b'r',\n            b's',\n       \
    \     b't',\n            b'u',\n            b'v',\n            b'w',\n       \
    \     b'x',\n            b'y',\n            b'z',\n            b'A',\n       \
    \     b'B',\n            b'C',\n            b'D',\n            b'E',\n       \
    \     b'F',\n            b'G',\n            b'H',\n            b'I',\n       \
    \     b'J',\n            b'K',\n            b'L',\n            b'M',\n       \
    \     b'N',\n\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmpz_o49zm6.rs:4:10\n\
    \    |\n2   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n3   |  \
    \   String::from_utf8(\n4   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n118 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpz_o49zm6.rs:4:9\n    |\n4   | /         &[\n5   | |  \
    \           b'0',\n6   | |             b'1',\n7   | |             b'2',\n... \
    \  |\n117 | |\n118 | | }\n    | |_^ expected struct `Vec`, found `&[u8; 112]`\n\
    \    |\n    = note: expected struct `Vec<u8>`\n            found reference `&[u8;\
    \ 112]`\nhelp: try using a conversion method\n    |\n4   ~         (&[\n5   |\
    \             b'0',\n6   |             b'1',\n7   |             b'2',\n8   | \
    \            b'3',\n9   |             b'4',\n  ...\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpz_o49zm6.rs:3:5\n    |\n2   |   fn string_sequence(n:\
    \ isize) -> String {\n    |                                   ------ expected\
    \ `String` because of return type\n3   | /     String::from_utf8(\n4   | |   \
    \      &[\n5   | |             b'0',\n6   | |             b'1',\n...   |\n117\
    \ | |\n118 | | }\n    | |_^ expected struct `String`, found enum `Result`\n  \
    \  |\n    = note: expected struct `String`\n                 found enum `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s.trim_end(',');\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmpkpkogd7u.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpkpkogd7u.rs:7:7\n     |\n7    |     s.trim_end(',');\n     |\
    \       ^^^^^^^^ --- supplied 1 argument\n     |       |\n     |       expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa8ycnbgw.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&[u8]`, found struct `Vec`\n  |\n  = note: expected reference `&[u8]`\n\
    \                found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpa8ycnbgw.rs:3:5\n  |\n2 |   fn string_sequence(n: isize) -> String\
    \ {\n  |                                   ------ expected `String` because of\
    \ return type\n3 | /     String::from_utf8_lossy(\n4 | |         (0..n).map(|i|\
    \ i.to_string()).collect::<Vec<_>>(),\n5 | |     )\n  | |     ^- help: try using\
    \ a conversion method: `.to_string()`\n  | |_____|\n  |       expected struct\
    \ `String`, found enum `Cow`\n  |\n  = note: expected struct `String`\n      \
    \         found enum `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8_lossy(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa8ycnbgw.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>(),\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&[u8]`, found struct `Vec`\n  |\n  = note: expected reference `&[u8]`\n\
    \                found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpa8ycnbgw.rs:3:5\n  |\n2 |   fn string_sequence(n: isize) -> String\
    \ {\n  |                                   ------ expected `String` because of\
    \ return type\n3 | /     String::from_utf8_lossy(\n4 | |         (0..n).map(|i|\
    \ i.to_string()).collect::<Vec<_>>(),\n5 | |     )\n  | |     ^- help: try using\
    \ a conversion method: `.to_string()`\n  | |_____|\n  |       expected struct\
    \ `String`, found enum `Cow`\n  |\n  = note: expected struct `String`\n      \
    \         found enum `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmpunz8neb3.rs:3:26\n  |\n3 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n {\n        s += \"{}, \".format(i);\n    }\n\
    \    s[0..s.len() - 1]\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n --> /tmp/tmpnk3610cu.rs:5:21\n  |\n5 |         s += \"\
    {}, \".format(i);\n  |                     ^^^^^^ method not found in `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnk3610cu.rs:7:5\n  |\n\
    2 | fn string_sequence(n: isize) -> String {\n  |                            \
    \     ------ expected `String` because of return type\n...\n7 |     s[0..s.len()\
    \ - 1]\n  |     ^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |     |\n  |     expected struct `String`, found `str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    String::from_utf8(\n\
    \        (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \"),\n    )\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd1l33hpl.rs:4:9\n  |\n4 |\
    \         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \"),\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `String`\n  |\n  = note: expected struct `Vec<u8>`\n\
    \             found struct `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpd1l33hpl.rs:3:5\n\
    \  |\n2 |   fn string_sequence(n: isize) -> String {\n  |                    \
    \               ------ expected `String` because of return type\n3 | /     String::from_utf8(\n\
    4 | |         (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \"),\n\
    5 | |     )\n  | |_____^ expected struct `String`, found enum `Result`\n  |\n\
    \  = note: expected struct `String`\n               found enum `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975659
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for _ in 0..n {\n        s.push('0');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmposyrhjeh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747222
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwjf7gkh2.rs:3:19\n  |\n3 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747221
