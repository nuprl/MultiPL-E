name: HumanEval_17_parse_music
language: rs
prompt: "/// Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n/// Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n\
  /// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n\
  /// '.|' - quater note, lasts one beat\nfn parse_music(music_string: String) ->\
  \ Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
  \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
  \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1,\
  \ 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2,\
  \ 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o\
  \ o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
completions: ["    let mut beats: Vec<isize> = Vec::new();\n    let mut notes: Vec<&str>\
    \ = music_string.split_whitespace().collect();\n    let mut notes_len: usize =\
    \ 0;\n    let mut current_note = 0;\n    let mut current_beat = 0;\n    let mut\
    \ current_note_len = 0;\n    let mut current_beat_len = 0;\n    let mut current_note_beat_len\
    \ = 0;\n    let mut current_note_beat_len2 = 0;\n    let mut current_note_beat_len3\
    \ = 0;\n    let mut current_note_beat_len4 = 0;\n    let mut current_note_beat_len5\
    \ = 0;\n    let mut current_note_beat_len6 = 0;\n    let mut current_note_beat_len7\
    \ = 0;\n    let mut current_note_beat_len8 = 0;\n    let mut current_note_beat_len9\
    \ = 0;\n    let mut current_note_beat_len10 = 0;\n    let mut current_note_beat_len11\
    \ = 0;\n    let mut current_note_beat_len12 = 0;\n    let mut current_note_beat_len13\
    \ = 0;\n    let mut current_note_beat_len14 = 0;\n    let mut current_note_beat_len15\
    \ = 0;\n    let mut current_note_beat_len16 = 0;\n    let mut current_note_beat_len17\
    \ = 0;\n    let mut current_note_beat_len18 = 0;\n    let mut current_note_beat_len19\
    \ = 0;\n    let mut current_note_beat_len20 = 0;\n    let mut current_note_beat_len21\
    \ = 0;\n    let mut current_note_beat_len22 = 0;\n    let mut current_note_beat_len23\
    \ = 0;\n    let mut current_note_beat_len24 = 0;\n    let mut current_note_beat_len25\
    \ = 0;\n    let mut current_note_beat_len26 = 0;\n    let mut current_note_beat_len27\
    \ = 0;\n    let mut current_note_beat_len28 = 0;\n    let mut current_note_beat_len29\
    \ = 0;\n    let mut current_note_beat_len30 = 0;\n    let mut current_note_beat_len31\
    \ = 0;\n    let mut current_note_beat_len32 = 0;\n    let mut current_note_beat_len33\
    \ = 0;\n    let mut current_note_beat_len34 = 0;\n    let mut current_note_beat_len35\
    \ = 0;\n    let mut current_note_beat_len36 = 0;\n    let mut current_note_beat_len37\
    \ = 0;\n    let mut current_note_beat_len38 = 0;\n    let mut current_note_beat_len39\
    \ = 0;\n    let mut current_note_beat_len40 = 0;", "    let mut music_vec: Vec<isize>\
    \ = Vec::new();\n    let mut music_str: String = music_string;\n    let mut music_char:\
    \ char;\n    let mut music_beats: isize = 0;\n    let mut music_notes: isize =\
    \ 0;\n    let mut music_last_char: char;\n    let mut music_last_beats: isize\
    \ = 0;\n    let mut music_last_notes: isize = 0;\n    let mut music_last_last_char:\
    \ char;\n    let mut music_last_last_beats: isize = 0;\n    let mut music_last_last_notes:\
    \ isize = 0;\n    let mut music_last_last_last_char: char;\n    let mut music_last_last_last_beats:\
    \ isize = 0;\n    let mut music_last_last_last_notes: isize = 0;\n    let mut\
    \ music_last_last_last_last_char: char;\n    let mut music_last_last_last_last_beats:\
    \ isize = 0;\n    let mut music_last_last_last_last_notes: isize = 0;\n    let\
    \ mut music_last_last_last_last_last_char: char;\n    let mut music_last_last_last_last_last_beats:\
    \ isize = 0;\n    let mut music_last_last_last_last_last_notes: isize = 0;\n \
    \   let mut music_last_last_last_last_last_last_char: char;\n    let mut music_last_last_last_last_last_last_beats:\
    \ isize = 0;\n    let mut music_last_last_last_last_last_last_notes: isize = 0;\n\
    \    let mut music_last_last_last_last_last_last_last_char: char;\n    let mut\
    \ music_last_last_last_last_last_last_last_beats: isize = 0;\n    let mut music_last_last_last_last_last_last_last_notes:\
    \ isize = 0;\n    let mut music_last_last_last_last_last_last_last_last_char:\
    \ char;\n    let mut music_last_last_last_last_last_last_last_last_beats: isize\
    \ = 0;\n    let mut music_last_last_last_last_last_last_last_last_notes: isize\
    \ = 0;\n    let mut music_last_last_last_last_last_last_last_last_last_char: char;\n\
    \    let mut music_last_last_last_last_last_last_last_last_last_beats: isize =\
    \ 0;\n    let mut music_last_last_last_last_last_last_last_last_last_notes: isize\
    \ = 0;\n    let mut music_last_last_last_last_last_last_last_last_last_last_char:\
    \ char;\n    let mut music_last_last_", "    let mut beats = vec![];\n    let\
    \ mut notes = music_string.chars().enumerate().filter(|(_, c)| c == 'o' || c ==\
    \ '|' || c == '.').collect::<Vec<_>>();\n    for note in notes {\n        let\
    \ mut beat = 0;\n        let mut note = note.1;\n        while note != 'o' &&\
    \ note != '|' && note != '.' {\n            beat += 1;\n            note += 1;\n\
    \        }\n        beats.push(beat);\n    }\n    return beats;", "    let mut\
    \ notes: Vec<isize> = vec![];\n    let mut beats: Vec<isize> = vec![];\n    let\
    \ mut current_note = String::new();\n    let mut current_beat = String::new();\n\
    \    let mut current_beats: isize = 0;\n    let mut current_notes: isize = 0;\n\
    \    let mut current_notes_beats: isize = 0;\n    let mut current_notes_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats: isize = 0;\n    let\
    \ mut current_notes_beats_beats_beats_beats: isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats: isize\
    \ = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats: isize\
    \ = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_",
  "    let mut music_vec: Vec<isize> = Vec::new();\n    let mut notes: Vec<&str> =\
    \ music_string.split(\"|\").collect();\n    for note in notes {\n        let mut\
    \ note_string = note.trim();\n        let mut beats: isize = 0;\n        let mut\
    \ last_note = false;\n        while note_string.len() > 0 {\n            let mut\
    \ note = note_string[0];\n            note_string = note_string.split_whitespace().collect();\n\
    \            if note == \"o\" {\n                beats = 4;\n                last_note\
    \ = true;\n            } else if note == \"o|\" {\n                beats = 2;\n\
    \                last_note = true;\n            } else if note == \".|\" {\n \
    \               beats = 1;\n                last_note = true;\n            } else\
    \ if note == \".\" {\n                beats = 0;\n                last_note =\
    \ false;\n            } else {\n                panic!(\"Invalid note '{}'\",\
    \ note);\n            }\n            music_vec.push(beats);\n        }\n     \
    \   if last_note {\n            music_vec.push(4);\n        }\n    }\n    music_vec",
  "    let mut beats: Vec<isize> = vec![];\n    let mut current_beat = 0;\n    let\
    \ mut current_note = 0;\n    let mut current_note_len = 0;\n    let mut current_note_char\
    \ = 0;\n    let mut current_note_char_len = 0;\n    let mut current_note_char_value\
    \ = 0;\n    let mut current_note_char_next_value = 0;\n    let mut current_note_char_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_value = 0;\n    let mut current_note_char_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_value = 0;\n  \
    \  let mut current_note_char_next_next_next_next_next_next_value = 0;\n    let\
    \ mut current_note_char_next_next_next_next_next_next_next_value = 0;\n    let\
    \ mut current_note_char_next_next_next_next_next_next_next_next_value = 0;\n \
    \   let mut current_note_char_next_next_next_next_next_next_next_next_value =\
    \ 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_", " \
    \   let mut beats = Vec::new();\n    let mut notes = music_string.chars().enumerate();\n\
    \    let mut current_note = 0;\n    let mut current_beat = 0;\n    let mut current_note_index\
    \ = 0;\n    let mut current_beat_length = 0;\n    let mut current_note_length\
    \ = 0;\n    let mut current_note_length_index = 0;\n    let mut current_note_length_index2\
    \ = 0;\n    let mut current_note_length_index3 = 0;\n    let mut current_note_length_index4\
    \ = 0;\n    let mut current_note_length_index5 = 0;\n    let mut current_note_length_index6\
    \ = 0;\n    let mut current_note_length_index7 = 0;\n    let mut current_note_length_index8\
    \ = 0;\n    let mut current_note_length_index9 = 0;\n    let mut current_note_length_index10\
    \ = 0;\n    let mut current_note_length_index11 = 0;\n    let mut current_note_length_index12\
    \ = 0;\n    let mut current_note_length_index13 = 0;\n    let mut current_note_length_index14\
    \ = 0;\n    let mut current_note_length_index15 = 0;\n    let mut current_note_length_index16\
    \ = 0;\n    let mut current_note_length_index17 = 0;\n    let mut current_note_length_index18\
    \ = 0;\n    let mut current_note_length_index19 = 0;\n    let mut current_note_length_index20\
    \ = 0;\n    let mut current_note_length_index21 = 0;\n    let mut current_note_length_index22\
    \ = 0;\n    let mut current_note_length_index23 = 0;\n    let mut current_note_length_index24\
    \ = 0;\n    let mut current_note_length_index25 = 0;\n    let mut current_note_length_index26\
    \ = 0;\n    let mut current_note_length_index27 = 0;\n    let mut current_note_length_index28\
    \ = 0;\n    let mut current_note_length_index29 = 0;\n    let mut current_note_length_index30\
    \ = 0;\n    let mut current_note_length_index31 = 0;\n    let mut current_note_length_index32\
    \ = 0;\n    let mut current_note_length_index33 = 0;\n    let mut current_note_length_index34\
    \ = 0;\n    let mut current_note_length_index35 = 0;\n    let mut current_note_length_index36\
    \ = 0;\n    let mut current_note_length_index37 = 0;\n    let mut current_note_length_index38\
    \ = 0;\n    let mut current_note_length_index39 = 0;\n    let mut current_note_length_index40\
    \ = 0;\n    let mut current_note_length_index41 = 0;\n    let mut current_note_length_index42\
    \ = 0;\n    let mut current_note_length_index43 = 0;\n    let mut current_note_length_index44\
    \ = 0;\n    let mut current_note_length_index45 = 0;\n    let mut current_note_",
  "    let mut beats: Vec<isize> = Vec::new();\n    let mut notes: Vec<&str> = music_string.split_whitespace().collect();\n\
    \    let mut current_note = notes.last().unwrap();\n    let mut current_beat =\
    \ 0;\n    for note in notes {\n        if note == current_note {\n           \
    \ current_beat += 1;\n        } else {\n            beats.push(current_beat);\n\
    \            current_beat = 1;\n            current_note = note;\n        }\n\
    \    }\n    beats.push(current_beat);\n    beats", "    let mut beats: Vec<isize>\
    \ = vec![];\n    let mut notes: Vec<&str> = vec![];\n    let mut notes_len: usize\
    \ = 0;\n    let mut current_note = String::new();\n    let mut current_beat =\
    \ 0;\n    let mut current_len = 0;\n    let mut current_len2 = 0;\n    let mut\
    \ current_len3 = 0;\n    let mut current_len4 = 0;\n    let mut current_len5 =\
    \ 0;\n    let mut current_len6 = 0;\n    let mut current_len7 = 0;\n    let mut\
    \ current_len8 = 0;\n    let mut current_len9 = 0;\n    let mut current_len10\
    \ = 0;\n    let mut current_len11 = 0;\n    let mut current_len12 = 0;\n    let\
    \ mut current_len13 = 0;\n    let mut current_len14 = 0;\n    let mut current_len15\
    \ = 0;\n    let mut current_len16 = 0;\n    let mut current_len17 = 0;\n    let\
    \ mut current_len18 = 0;\n    let mut current_len19 = 0;\n    let mut current_len20\
    \ = 0;\n    let mut current_len21 = 0;\n    let mut current_len22 = 0;\n    let\
    \ mut current_len23 = 0;\n    let mut current_len24 = 0;\n    let mut current_len25\
    \ = 0;\n    let mut current_len26 = 0;\n    let mut current_len27 = 0;\n    let\
    \ mut current_len28 = 0;\n    let mut current_len29 = 0;\n    let mut current_len30\
    \ = 0;\n    let mut current_len31 = 0;\n    let mut current_len32 = 0;\n    let\
    \ mut current_len33 = 0;\n    let mut current_len34 = 0;\n    let mut current_len35\
    \ = 0;\n    let mut current_len36 = 0;\n    let mut current_len37 = 0;\n    let\
    \ mut current_len38 = 0;\n    let mut current_len39 = 0;\n    let mut current_len40\
    \ = 0;\n    let mut current_len41 = 1;\n    let mut current_len42 = 1;\n    let\
    \ mut current_len43 = 1;\n    let mut current_len44 = 1;\n    let mut current_len45\
    \ = 1;\n    let mut current_len46 = 1;\n    let mut current_len47 = 1;\n    let\
    \ mut current_len48 = 1;\n    let mut current_len49 = 1;\n    let mut current_len50\
    \ = 1;\n    let mut current_len51 = 1;\n    let mut current_len52 = 1;\n    let\
    \ mut current_len53 = 1;\n    let mut current_len54 = 1;\n    let mut current_len55\
    \ = 1;\n    let mut current_len56 = 1;\n    let mut current_len57", "    let mut\
    \ beats = Vec::new();\n    let mut notes = music_string.chars().enumerate().filter(|(_,\
    \ c)| c != '|');\n    let mut current_note = 0;\n    let mut last_note = 0;\n\
    \    let mut last_beat = 0;\n    let mut last_beats = 0;\n    for note in notes\
    \ {\n        if note.1 == 0 {\n            if last_note != 0 {\n             \
    \   beats.push(last_beat);\n            }\n            last_beat = 0;\n      \
    \      last_note = 0;\n            last_beats = 0;\n            current_note =\
    \ note.0;\n        } else {\n            if last_note != 0 {\n               \
    \ beats.push(last_beat);\n            }\n            last_beat = 0;\n        \
    \    last_note = note.0;\n            last_beats = note.1;\n            current_note\
    \ = note.0;\n        }\n    }\n    if last_note != 0 {\n        beats.push(last_beat);\n\
    \    }\n    beats", "    let mut beats: Vec<isize> = Vec::new();\n    let mut\
    \ current_beat = 0;\n    let mut current_note = 0;\n    let mut current_note_length\
    \ = 0;\n    let mut current_note_length_index = 0;\n    let mut current_note_length_value\
    \ = 0;\n    let mut current_note_length_value_length = 0;\n    let mut current_note_length_value_length_index\
    \ = 0;\n    let mut current_note_length_value_length_value = 0;\n    let mut current_note_length_value_length_value_index\
    \ = 0;\n    let mut current_note_length_value_length_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value", "    let mut\
    \ beats: Vec<isize> = vec![];\n    let mut notes: Vec<&str> = music_string.split_whitespace().collect();\n\
    \    let mut last_note = notes.last().unwrap();\n    let mut last_beat = -1;\n\
    \    let mut last_beats: isize = 0;\n    notes.iter().for_each(|note| {\n    \
    \    if note == last_note {\n            last_beats += 1;\n        } else {\n\
    \            beats.push(last_beats);\n            last_beats = 1;\n          \
    \  last_note = note;\n        }\n    });\n    beats.push(last_beats);\n    beats",
  "    let mut beats: Vec<isize> = vec![];\n    let mut notes: Vec<&str> = vec![];\n\
    \    let mut last_note = String::new();\n    let mut last_beat = 0;\n    let mut\
    \ last_beats: isize = 0;\n    let mut last_beats_length = 0;\n    let mut last_beats_lengths:\
    \ Vec<isize> = vec![];\n    let mut last_beats_lengths_length = 0;\n    let mut\
    \ last_beats_lengths_lengths: Vec<isize> = vec![];\n    let mut last_beats_lengths_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths_lengths: Vec<isize> = vec![];\n\
    \    let mut last_beats_lengths_lengths_lengths_length = 0;\n    let mut last_beats_lengths_lengths_lengths_lengths:\
    \ Vec<isize> = vec![];\n    let mut last_beats_lengths_lengths_lengths_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths: Vec<isize>\
    \ = vec![];\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths:\
    \ Vec<isize> = vec![];\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths:\
    \ Vec<isize> = vec![];\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths:\
    \ Vec<isize> = vec![];\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths:\
    \ Vec<isize> = vec![];\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths:\
    \ Vec<isize> = vec![];\n    let mut last_", "    let mut beats = vec![];\n   \
    \ let mut current_beat = 0;\n    let mut current_note = String::new();\n    let\
    \ mut current_note_len = 0;\n    for c in music_string {\n        if c.is_ascii()\
    \ {\n            if c.to_ascii_lowercase() == \"o\" {\n                beats.push(current_beat);\n\
    \                current_beat += 4;\n                current_note = String::new();\n\
    \                current_note_len = String::new();\n            } else if c.to_ascii_lowercase()\
    \ == \"o|\" {\n                beats.push(current_beat);\n                current_beat\
    \ += 2;\n                current_note = String::new();\n                current_note_len\
    \ = String::new();\n            } else if c.to_ascii_lowercase() == \".|\" {\n\
    \                beats.push(current_beat);\n                current_beat += 1;\n\
    \                current_note = String::new();\n                current_note_len\
    \ = String::new();\n            } else {\n                current_note.push(c);\n\
    \                current_note_len = c.len();\n            }\n        } else {\n\
    \            if current_note.len() > 0 {\n                beats.push(current_beat);\n\
    \                current_beat += current_note_len;\n                current_note\
    \ = String::new();\n                current_note_len = String::new();\n      \
    \      }\n        }\n    }\n    beats.push(current_beat);\n    current_beat +=\
    \ current_note_len;\n    beats", "    let mut beats: Vec<isize> = vec![];\n  \
    \  let mut notes: Vec<&str> = music_string.split_whitespace().collect();\n   \
    \ let mut current_beat: isize = 0;\n    let mut current_note = notes.first().unwrap();\n\
    \    let mut current_note_len: isize = 0;\n    let mut last_note = notes.last().unwrap();\n\
    \    let mut last_note_len: isize = 0;\n    let mut last_beat: isize = 0;\n  \
    \  let mut last_beat_len: isize = 0;\n    while current_note != last_note {\n\
    \        if current_note_len > last_note_len() {\n            beats.push(current_beat);\n\
    \            current_beat = 0;\n            current_note_len = 0;\n        }\n\
    \        if current_note_len == last_note_len() {\n            current_beat +=\
    \ 1;\n        }\n        if current_note_len > last_note_len() {\n           \
    \ current_note_len = 0;\n        }\n        if current_note_len == last_note_len()\
    \ {\n            current_note_len += 1;\n        }\n        if current_note_len\
    \ == last_note_len() {\n            current_note_len += 1;\n        }\n      \
    \  if current_note_len == last_note_len() {\n            current_note_len += 1;\n\
    \        }\n        if current_note_len == last_note_len() {\n            current_note_len\
    \ += 1;\n        }\n        if current_note_len == last_note_len() {\n       \
    \     current_note_len += 1;\n        }\n        if current_note_len == last_note_len()\
    \ {\n            current_note_len += 1;\n        }\n        if current_note_len\
    \ == last_note_len() {\n            current_note_len += 1;\n        }\n      \
    \  if current_note_len == last_note_len() {\n            current_note_len += 1;\n\
    \        }\n        if current_note_len == last_note_len() {\n            current_note_len\
    \ += 1;\n        }\n        if current_note_len == last_note_len() {\n       \
    \     current_note_len += 1;\n        }\n        if current_note_len == last_note_len()\
    \ {\n            current_note_len += 1;\n        }\n        if current_note_len\
    \ == last_note_len() {\n            current_note_len += 1;\n        }\n      \
    \  if current_note_len == last_note_len() {\n            current_note_len += 1;\n\
    \        }\n        if current_note_len == last_note_len() {\n            current_note_len\
    \ += 1;\n        }\n        if current_note_len == last_note_len() {\n       \
    \     current_note_len += 1;\n        }\n        if current_note_len == last_note_len()\
    \ {\n            current_note_len += 1;\n        }\n        if current_note_len\
    \ == last_note_len() {\n            current_note_len += 1;\n        }\n      \
    \  if current_note_len == last_note_len() {\n            current_note_len += 1;\n\
    \        }\n        if current_note", "    let mut beats: Vec<isize> = Vec::new();\n\
    \    let mut notes: Vec<&str> = music_string.split_whitespace().collect();\n \
    \   let mut current_note = notes.first().unwrap();\n    let mut current_beat =\
    \ 0;\n    let mut current_length = 0;\n    for note in notes {\n        if note\
    \ == current_note {\n            current_beat += 1;\n            current_length\
    \ += 1;\n        } else {\n            beats.push(current_beat);\n           \
    \ current_beat = 1;\n            current_length = 1;\n            current_note\
    \ = note;\n        }\n    }\n    beats.push(current_beat);\n    beats", "    let\
    \ mut beats = Vec::new();\n    let mut notes = music_string.chars().enumerate();\n\
    \    let mut current_note = 0;\n    let mut current_beat = 0;\n    let mut current_note_len\
    \ = 0;\n    let mut current_beat_len = 0;\n    let mut current_note_char = 0;\n\
    \    let mut current_beat_char = 0;\n    let mut current_note_char_is_octave =\
    \ false;\n    let mut current_beat_char_is_octave = false;\n    let mut current_note_char_is_note\
    \ = false;\n    let mut current_beat_char_is_note = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest = false;\n    let mut current_note_char_is_rest\
    \ = false;\n    let mut current_beat_char_is_rest", "    let mut notes = music_string.chars().map(|c|\
    \ match c {\n        'o' => 1,\n        'o|' => 2,\n        '.|' => 3,\n     \
    \   _ => 0,\n    }).collect::<Vec<isize>>();\n    notes.sort_unstable();\n   \
    \ notes.reverse();\n    notes", "    let mut beats: Vec<isize> = vec![];\n   \
    \ let mut current_beat: isize = 0;\n    let mut current_note = String::new();\n\
    \    let mut current_note_length = 0;\n    let mut current_note_length_index =\
    \ 0;\n    let mut current_note_length_index2 = 0;\n    for c in music_string {\n\
    \        if c.is_ascii() {\n            if c == 'o' {\n                if current_note_length_index\
    \ == 0 {\n                    current_note = String::new();\n                \
    \    current_note_length_index = 0;\n                    current_note_length_index2\
    \ = 0;\n                }\n                current_note.push(c);\n           \
    \     current_note_length_index += 1;\n            } else if c == '|' {\n    \
    \            if current_note_length_index2 == 0 {\n                    current_note\
    \ = String::new();\n                    current_note_length_index = 0;\n     \
    \               current_note_length_index2 = 1;\n                }\n         \
    \       current_note.push(c);\n                current_note_length_index += 1;\n\
    \            } else if c == '.' {\n                if current_note_length_index2\
    \ == 0 {\n                    current_note = String::new();\n                \
    \    current_note_length_index = 0;\n                    current_note_length_index2\
    \ = 1;\n                }\n                current_note.push(c);\n           \
    \     current_note_length_index += 1;\n            } else if c == '|' {\n    \
    \            if current_note_length_index2 == 0 {\n                    current_note\
    \ = String::new();\n                    current_note_length_index = 0;\n     \
    \               current_note_length_index2 = 1;\n                }\n         \
    \       current_note.push(c);\n                current_note_length_index += 1;\n\
    \            } else if c == '|' {\n                if current_note_length_index2\
    \ == 0 {\n                    current_note = String::new();\n                \
    \    current_note_length_index = 0;\n                    current_note_length_index2\
    \ = 1;\n                }\n                current_note.push(c);\n           \
    \     current_note_length_index += 1;\n            } else if c == '|' {\n    \
    \            if current_note_length_index2 == 0 {\n                    current_note\
    \ = String::new();\n                    current_note_length_index = 0;\n     \
    \               current_note_length_index2 = 1;\n                }\n         \
    \       current_note.push(c);\n                current_note_length_index += 1;\n\
    \            } else if c == '|' {\n                if current_note_length_index2\
    \ == 0 {\n                    current_note = String::new();\n                \
    \    current_note_length_index = 0;\n                    current_note_length_index2\
    \ = 1;\n                }\n                current_note.push(c);\n           \
    \     current_note_length_index += 1;\n            } else if c == '|' {\n    \
    \            if current_note_length_index2 == 0 {\n                    current_note\
    \ = String::new();\n                    current_note_length_index = 0;\n     \
    \               current_note_length_index2 = 1;\n                }\n         \
    \       current_note.push(c);", "    let mut beats: Vec<isize> = vec![];\n   \
    \ let mut current_beat = 0;\n    let mut current_note = String::new();\n    let\
    \ mut current_octave = 0;\n    let mut current_length = 0;\n    let mut current_note_is_octave\
    \ = false;\n    let mut current_note_is_length = false;\n\n    for c in music_string\
    \ {\n        if c == 'o' {\n            if current_note_is_octave {\n        \
    \        println!(\"Invalid music string: note {} is octave {} but octave was\
    \ already set\", current_note, current_octave);\n                return beats;\n\
    \            }\n            current_note_is_octave = true;\n            current_octave\
    \ = 0;\n            current_length = 0;\n            current_note_is_length =\
    \ false;\n            current_note = String::new();\n            current_note_is_length\
    \ = true;\n            current_beat = 0;\n        } else if c == '|' {\n     \
    \       if current_note_is_length {\n                println!(\"Invalid music\
    \ string: note {} is length {} but length was already set\", current_note, current_length);\n\
    \                return beats;\n            }\n            current_note_is_length\
    \ = true;\n            current_length = 0;\n            current_note_is_octave\
    \ = false;\n            current_note = String::new();\n            current_note_is_octave\
    \ = true;\n            current_beat = 0;\n        } else if c == '.' {\n     \
    \       if current_note_is_length {\n                println!(\"Invalid music\
    \ string: note {} is length {} but length was already set\", current_note, current_length);\n\
    \                return beats;\n            }\n            current_note_is_length\
    \ = true;\n            current_length = 0;\n            current_note_is_octave\
    \ = false;\n            current_note = String::new();\n            current_note_is_octave\
    \ = true;\n            current_beat = 0;\n        } else if c.is_ascii() {\n \
    \           if current_note_is_length {\n                current_length += 1;\n\
    \            } else if current_note_is_octave {\n                current_octave\
    \ += 1;\n            } else if current_note.is_empty() {\n                current_note\
    \ = c.to_ascii_lowercase();\n                current_beat = 0;\n            }\
    \ else {\n                println!(\"Invalid music string: note {} is length {},\
    \ octave {} but note was already set\", current_note, current_length, current_octave);\n\
    \                return beats;\n            }\n        } else {\n            println!(\"\
    Invalid music string: note {} is length {}, octave {} but note was already set\"\
    , current_note, current_length, current_octave);\n            return beats;\n\
    \        }\n    }\n\n    if current_note_is_length {\n        println!(\"Invalid\
    \ music string: note {} is length {}, octave {} but note was already set\", current_note, "]
stop_tokens:
- "\n}"
