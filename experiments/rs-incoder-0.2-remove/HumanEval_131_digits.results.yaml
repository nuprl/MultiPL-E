language: rs
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for d in n.digits() {\n        if d % 2 == 1 {\n            product\
    \ *= d;\n        }\n    }\n    product\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpwvwtvs0k.rs:10:16\n   |\n10 |     for d in n.digits() {\n\
    \   |                ^^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpwc0a2k_n.rs:12:9\n\
    \   |\n8  | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n12 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for d in n.digits() {\n        if d % 2 == 1 {\n            product\
    \ *= d;\n        }\n    }\n    product\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpwvwtvs0k.rs:10:16\n   |\n10 |     for d in n.digits() {\n\
    \   |                ^^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpwc0a2k_n.rs:12:9\n\
    \   |\n8  | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n12 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n % 10\n    }\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmptb2kf564.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n % 2 ==\
    \ 0 {\n        n\n    } else {\n        digits(n / 2)\n    }\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmp7ymby321.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n * digits(n / 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp7kxazw4v.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpwc0a2k_n.rs:12:9\n\
    \   |\n8  | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n12 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpwc0a2k_n.rs:12:9\n\
    \   |\n8  | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n12 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n % 2 ==\
    \ 0 {\n        n\n    } else {\n        digits(n / 2)\n    }\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmp7ymby321.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n / 2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmpfl96y2mz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n / 2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmpfl96y2mz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n / 2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmpfl96y2mz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpwc0a2k_n.rs:12:9\n\
    \   |\n8  | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n12 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n / 2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmpfl96y2mz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n / 2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmpfl96y2mz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n / 10\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpqtsxt9_0.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            product *= n %\
    \ 10;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp8vq2apbu.rs:14:9\n\
    \   |\n8  | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            product *= n %\
    \ 10;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp8vq2apbu.rs:14:9\n\
    \   |\n8  | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748905
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n / 2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmpfl96y2mz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748905
