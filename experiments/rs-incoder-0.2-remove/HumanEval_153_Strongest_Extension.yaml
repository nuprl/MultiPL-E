name: HumanEval_153_Strongest_Extension
language: rs
prompt: "/// You will be given the name of a class (a string) and a list of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ list.\n/// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\nfn Strongest_Extension(class_name:\
  \ String, extensions: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"\
  Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"\
  eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"\
  Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"\
  YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"\
  ));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"\
  t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"\
  ), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"\
  __YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"\
  Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]),\
  \ String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"),\
  \ vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"\
  -_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"\
  YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"\
  WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"\
  ));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"\
  Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]),\
  \ String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"\
  _\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"\
  ));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"\
  ), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n"
completions: ["    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension = extension.clone();\n\
    \        let mut count = 0;\n        for c in extension.chars() {\n          \
    \  if c.is_uppercase() {\n                count += 1;\n            }\n       \
    \     if c.is_lowercase() {\n                count += 1;\n            }\n    \
    \    }\n        if count > strength {\n            strength = count;\n       \
    \     extension = extension.clone();\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        let strength = cap - sm;\n        if strength\
    \ > 0 {\n            extension = e.to_string();\n            break;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n      \
    \  let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n        let strength\
    \ = if cap > sm { cap - sm } else { sm - cap };\n        if strength > strength\
    \ {\n            extension = e;\n            strength = strength;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n      \
    \  let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    return class_name.concat(extension).concat(\"\
    .\")\n        .concat(extensions[extensions.iter().position(|e| e == extension).unwrap()])\n\
    \        .concat(\".\")\n        .concat(extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extension).unwrap()]).unwrap()])\n\
    \        .concat(\".\")\n        .concat(extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]).unwrap()]).unwrap()])\n        .concat(\".\")\n \
    \       .concat(extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]).unwrap()]).unwrap()]).unwrap()])\n        .concat(\"\
    .\")\n        .concat(extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extension).unwrap()]).unwrap()]).unwrap()]).unwrap()]).unwrap()])\n\
    \        .concat(\".\")\n        .concat(extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extension).unwrap()]).unwrap()]).unwrap()]).unwrap()]).unwrap()])\n\
    \        .concat(\".\")\n        .concat(extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == ", "    let mut extensions_map = HashMap::new();\n    for extension in\
    \ extensions {\n        let mut extension_map = HashMap::new();\n        let mut\
    \ extension_strength = -1;\n        for c in extension.chars() {\n           \
    \ if let Some(strength) = extension_map.get(c) {\n                extension_map.insert(c,\
    \ strength + 1);\n            } else {\n                extension_map.insert(c,\
    \ 1);\n            }\n            if strength > extension_strength {\n       \
    \         extension_strength = strength;\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strongest_extension = String::new();\n \
    \   let mut strongest_extension_strength = -1;\n    for extension in extensions_map.keys()\
    \ {\n        let extension_map = extensions_map.get(extension);\n        let mut\
    \ extension_strength = -1;\n        for c in extension.chars() {\n           \
    \ if let Some(strength) = extension_map.get(c) {\n                extension_map.insert(c,\
    \ strength + 1);\n            } else {\n                extension_map.insert(c,\
    \ 1);\n            }\n            if strength > extension_strength {\n       \
    \         extension_strength = strength;\n            }\n        }\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    strongest_extension.push_str(class_name);\n    strongest_extension.push_str(&strongest_extension_strength.to_string());\n\
    \    strongest_extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.to_lowercase();\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension_length = extension.len();\n\
    \        let mut class_length = class_name.len();\n        while extension_length\
    \ >= class_length {\n            extension = extension.chars().filter(|c| *c >=\
    \ 'A' && *c <= 'Z').collect::<String>();\n            extension_length -= class_length;\n\
    \            class_length += 1;\n        }\n        let mut class_length = extension.len();\n\
    \        while class_length >= extension_length {\n            class_length -=\
    \ extension_length;\n            extension += extension.chars().filter(|c| *c\
    \ >= 'a' && *c <= 'z').collect::<String>();\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       class_length -= extension_length;\n            extension += extension.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').collect::<String>();\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       class_length -= extension_length;\n            extension += extension.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').collect::<String>();\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       class_length -= extension_length;\n            extension += extension.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').collect::<String>();\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       class_length -= extension_length;\n            extension += extension.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').collect::<String>();\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       class_length -= extension_length;\n            extension += extension.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').collect::<String>();\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       class_length -= extension_length;\n            extension += extension.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').collect::<String>();\n        }\n        let mu", " \
    \   let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name.to_lowercase();\n \
    \       let mut extension = extension.to_lowercase();\n        let mut count =\
    \ 0;\n        while class_name.contains(&extension) {\n            class_name\
    \ = class_name.remove(&extension);\n            count++;\n        }\n        strength\
    \ = if count > 0 {\n            count as i32 / extension.chars().count() as i32\n\
    \        } else {\n            -1\n        };\n    }\n    format!(\"{}.{}\", class_name,\
    \ extensions[strength])", "    let mut strength = -1;\n    let mut extension =\
    \ String::new();\n    for extension in extensions {\n        let mut cap = String::new();\n\
    \        let mut sm = String::new();\n        for c in extension.chars() {\n \
    \           if c.is_uppercase() {\n                cap.push(c);\n            }\
    \ else {\n                sm.push(c);\n            }\n        }\n        let cap_len\
    \ = cap.chars().count();\n        let sm_len = sm.chars().count();\n        let\
    \ cap_diff = cap_len - sm_len;\n        let strength = if cap_diff > 0 {\n   \
    \         cap_diff / cap_len\n        } else {\n            sm_len / cap_len\n\
    \        };\n        if strength > strength {\n            extension = extension;\n\
    \            strength = strength;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > strength {\n            extension\
    \ = e;\n            strength = strength;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut extensions_map = HashMap::new();\n   \
    \ for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n        }\n        extensions_map.insert(extension.clone(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::new();\n    for (extension, extension_map) in extensions_map.iter()\
    \ {\n        let mut extension_strength = -1;\n        for (key, value) in extension_map.iter()\
    \ {\n            let c = key.chars().filter(|c| c.to_uppercase() == c).count();\n\
    \            let s = key.chars().filter(|c| c.to_lowercase() == c).count();\n\
    \            extension_strength = extension_strength.max(|a, b| a.cmp(b));\n \
    \           extension_strength = extension_strength.max(|a, b| a.cmp(b));\n  \
    \      }\n        if extension_strength > strength {\n            strength = extension_strength;\n\
    \            best_extension = extension.clone();\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, best_extension)", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension {\n            match extension_map.entry(c) {\n  \
    \              hash_map::Entry::Occupied(mut e) => {\n                    let\
    \ count = e.get_or_insert(0);\n                    *count += 1;\n            \
    \    }\n                hash_map::Entry::Vacant(e) => {\n                    *e.insert(1);\n\
    \                }\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let ", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = 0;\n        for c in extension.chars() {\n\
    \            if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ 1);\n            } else {\n                extension_map.insert(c.to_string(),\
    \ -1);\n            }\n            extension_strength += extension_map.get(&c.to_string()).unwrap();\n\
    \        }\n        extensions_map.insert(extension.to_string(), extension_strength);\n\
    \    }\n    let mut max_strength = -1;\n    let mut max_extension = String::new();\n\
    \    for extension in extensions_map.keys() {\n        if extensions_map.get(extension).unwrap()\
    \ > max_strength {\n            max_strength = extensions_map.get(extension).unwrap();\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = -1;\n    for extension in extensions\
    \ {\n        let mut extension_strength = extension.chars().filter(|c| c.is_uppercase()).count()\
    \ - extension.chars().filter(|c| c.is_lowercase()).count();\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e.to_lowercase().contains(extension.to_lowercase())).unwrap()].to_lowercase());",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n \
    \       }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extension = String::new();\n \
    \   let mut extension_map = extensions_map.get(&class_name);\n    if extension_map.is_none()\
    \ {\n        return \"\";\n    }\n    for c in extension_map.keys().cloned() {\n\
    \        if strength == -1 || strength > extension_map.get(c).len() {\n      \
    \      extension = c.to_string();\n            strength = extension_map.get(c).len();\n\
    \        }\n    }\n    extension.to_string()", "    let mut strength = -1;\n \
    \   let mut extension = String::new();\n    for e in extensions {\n        let\
    \ mut c = e.chars().filter(|c| *c >= 'A' && *c <= 'Z').count();\n        let mut\
    \ s = e.chars().filter(|c| *c >= 'a' && *c <= 'z').count();\n        if c > s\
    \ {\n            strength = -1;\n            extension = e;\n        } else if\
    \ c < s {\n            strength = s;\n            extension = e;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut class_name = class_name.to_string();\n        let mut extension\
    \ = extension.to_string();\n        let mut cap = class_name.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let mut sm = class_name.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        let strength = cap - sm;\n        if\
    \ strength > 0 {\n            break;\n        }\n    }\n    extension.to_string().to_string()",
  "    let mut strongest_extension = String::new();\n    let mut extensions_count\
    \ = extensions.length;\n    let mut extensions_cap = extensions_count.to_f64();\n\
    \    let mut extensions_sm = extensions_count.to_f64();\n    let mut extensions_strength\
    \ = -1;\n    let mut extensions_index = -1;\n    let mut extensions_name = String::new();\n\
    \    \n    while extensions_count > 0 {\n        extensions_index = extensions_cap.floor();\n\
    \        extensions_cap = extensions_cap.sub(1.0);\n        extensions_sm = extensions_sm.sub(1.0);\n\
    \        extensions_strength = extensions_cap - extensions_sm;\n        extensions_name\
    \ = extensions[extensions_index];\n        \n        if extensions_strength >\
    \ 0 {\n            strongest_extension = format!(\"{}.{}\", class_name, extensions_name);\n\
    \            break;\n        }\n        \n        extensions_count--;\n    }\n\
    \    \n    return strongest_extension;", "    let mut strength = -1;\n    let\
    \ mut extension = String::new();\n    for e in extensions {\n        let cap =\
    \ e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm\n        };\n        extension = extension.concat(e);\n\
    \    }\n    extension.concat(\".\").concat(class_name.to_lowercase()).concat(\"\
    .\").concat(extensions[strength].to_lowercase());"]
stop_tokens:
- "\n}"
