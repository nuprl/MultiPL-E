name: HumanEval_153_Strongest_Extension
language: rs
prompt: "/// You will be given the name of a class (a string) and a list of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ list.\n/// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\nfn Strongest_Extension(class_name:\
  \ String, extensions: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"\
  Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"\
  eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"\
  Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"\
  YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"\
  ));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"\
  t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"\
  ), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"\
  __YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"\
  Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]),\
  \ String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"),\
  \ vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"\
  -_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"\
  YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"\
  WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"\
  ));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"\
  Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]),\
  \ String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"\
  _\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"\
  ));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"\
  ), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n"
completions: ["    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension = extension.clone();\n\
    \        let mut count = 0;\n        for c in extension.chars() {\n          \
    \  if c.is_uppercase() {\n                count += 1;\n            }\n       \
    \     if c.is_lowercase() {\n                count += 1;\n            }\n    \
    \    }\n        if count > strength {\n            strength = count;\n       \
    \     extension = extension.clone();\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        let strength = cap - sm;\n        if strength\
    \ > 0 {\n            extension = e.to_string();\n            break;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n      \
    \  let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n        let strength\
    \ = if cap > sm { cap - sm } else { sm - cap };\n        if strength > strength\
    \ {\n            extension = e;\n            strength = strength;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n      \
    \  let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    return class_name.concat(extension).concat(\"\
    .\")\n        .concat(extensions[extensions.iter().position(|e| e == extension).unwrap()])\n\
    \        .concat(\".\")\n        .concat(extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extension).unwrap()]).unwrap()])\n\
    \        .concat(\".\")\n        .concat(extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]).unwrap()]).unwrap()])\n        .concat(\".\")\n \
    \       .concat(extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]).unwrap()]).unwrap()]).unwrap()])\n        .concat(\"\
    .\")\n        .concat(extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extension).unwrap()]).unwrap()]).unwrap()]).unwrap()]).unwrap()])\n\
    \        .concat(\".\")\n        .concat(extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extension).unwrap()]).unwrap()]).unwrap()]).unwrap()]).unwrap()])\n\
    \        .concat(\".\")\n        .concat(extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == extensions[extensions.iter().position(|e| e == extensions[extensions.iter().position(|e|\
    \ e == ", "    let mut extensions_map = HashMap::new();\n    for extension in\
    \ extensions {\n        let mut extension_map = HashMap::new();\n        let mut\
    \ extension_strength = -1;\n        for c in extension.chars() {\n           \
    \ if let Some(strength) = extension_map.get(c) {\n                extension_map.insert(c,\
    \ strength + 1);\n            } else {\n                extension_map.insert(c,\
    \ 1);\n            }\n            if strength > extension_strength {\n       \
    \         extension_strength = strength;\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strongest_extension = String::new();\n \
    \   let mut strongest_extension_strength = -1;\n    for extension in extensions_map.keys()\
    \ {\n        let extension_map = extensions_map.get(extension);\n        let mut\
    \ extension_strength = -1;\n        for c in extension.chars() {\n           \
    \ if let Some(strength) = extension_map.get(c) {\n                extension_map.insert(c,\
    \ strength + 1);\n            } else {\n                extension_map.insert(c,\
    \ 1);\n            }\n            if strength > extension_strength {\n       \
    \         extension_strength = strength;\n            }\n        }\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    strongest_extension.push_str(class_name);\n    strongest_extension.push_str(&strongest_extension_strength.to_string());\n\
    \    strongest_extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.to_lowercase();\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension_length = extension.len();\n\
    \        let mut class_length = class_name.len();\n        while extension_length\
    \ >= class_length {\n            extension = extension.chars().filter(|c| *c >=\
    \ 'A' && *c <= 'Z').collect::<String>();\n            extension_length -= class_length;\n\
    \            class_length += 1;\n        }\n        let mut class_length = extension.len();\n\
    \        while class_length >= extension_length {\n            class_length -=\
    \ extension_length;\n            extension += extension.chars().filter(|c| *c\
    \ >= 'a' && *c <= 'z').collect::<String>();\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       class_length -= extension_length;\n            extension += extension.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').collect::<String>();\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       class_length -= extension_length;\n            extension += extension.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').collect::<String>();\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       class_length -= extension_length;\n            extension += extension.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').collect::<String>();\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       class_length -= extension_length;\n            extension += extension.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').collect::<String>();\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       class_length -= extension_length;\n            extension += extension.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').collect::<String>();\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       class_length -= extension_length;\n            extension += extension.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').collect::<String>();\n        }\n        let mu", " \
    \   let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name.to_lowercase();\n \
    \       let mut extension = extension.to_lowercase();\n        let mut count =\
    \ 0;\n        while class_name.contains(&extension) {\n            class_name\
    \ = class_name.remove(&extension);\n            count++;\n        }\n        strength\
    \ = if count > 0 {\n            count as i32 / extension.chars().count() as i32\n\
    \        } else {\n            -1\n        };\n    }\n    format!(\"{}.{}\", class_name,\
    \ extensions[strength])", "    let mut strength = -1;\n    let mut extension =\
    \ String::new();\n    for extension in extensions {\n        let mut cap = String::new();\n\
    \        let mut sm = String::new();\n        for c in extension.chars() {\n \
    \           if c.is_uppercase() {\n                cap.push(c);\n            }\
    \ else {\n                sm.push(c);\n            }\n        }\n        let cap_len\
    \ = cap.chars().count();\n        let sm_len = sm.chars().count();\n        let\
    \ cap_diff = cap_len - sm_len;\n        let strength = if cap_diff > 0 {\n   \
    \         cap_diff / cap_len\n        } else {\n            sm_len / cap_len\n\
    \        };\n        if strength > strength {\n            extension = extension;\n\
    \            strength = strength;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > strength {\n            extension\
    \ = e;\n            strength = strength;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut extensions_map = HashMap::new();\n   \
    \ for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n        }\n        extensions_map.insert(extension.clone(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::new();\n    for (extension, extension_map) in extensions_map.iter()\
    \ {\n        let mut extension_strength = -1;\n        for (key, value) in extension_map.iter()\
    \ {\n            let c = key.chars().filter(|c| c.to_uppercase() == c).count();\n\
    \            let s = key.chars().filter(|c| c.to_lowercase() == c).count();\n\
    \            extension_strength = extension_strength.max(|a, b| a.cmp(b));\n \
    \           extension_strength = extension_strength.max(|a, b| a.cmp(b));\n  \
    \      }\n        if extension_strength > strength {\n            strength = extension_strength;\n\
    \            best_extension = extension.clone();\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, best_extension)", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension {\n            match extension_map.entry(c) {\n  \
    \              hash_map::Entry::Occupied(mut e) => {\n                    let\
    \ count = e.get_or_insert(0);\n                    *count += 1;\n            \
    \    }\n                hash_map::Entry::Vacant(e) => {\n                    *e.insert(1);\n\
    \                }\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let ", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = 0;\n        for c in extension.chars() {\n\
    \            if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ 1);\n            } else {\n                extension_map.insert(c.to_string(),\
    \ -1);\n            }\n            extension_strength += extension_map.get(&c.to_string()).unwrap();\n\
    \        }\n        extensions_map.insert(extension.to_string(), extension_strength);\n\
    \    }\n    let mut max_strength = -1;\n    let mut max_extension = String::new();\n\
    \    for extension in extensions_map.keys() {\n        if extensions_map.get(extension).unwrap()\
    \ > max_strength {\n            max_strength = extensions_map.get(extension).unwrap();\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = -1;\n    for extension in extensions\
    \ {\n        let mut extension_strength = extension.chars().filter(|c| c.is_uppercase()).count()\
    \ - extension.chars().filter(|c| c.is_lowercase()).count();\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e.to_lowercase().contains(extension.to_lowercase())).unwrap()].to_lowercase());",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n \
    \       }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extension = String::new();\n \
    \   let mut extension_map = extensions_map.get(&class_name);\n    if extension_map.is_none()\
    \ {\n        return \"\";\n    }\n    for c in extension_map.keys().cloned() {\n\
    \        if strength == -1 || strength > extension_map.get(c).len() {\n      \
    \      extension = c.to_string();\n            strength = extension_map.get(c).len();\n\
    \        }\n    }\n    extension.to_string()", "    let mut strength = -1;\n \
    \   let mut extension = String::new();\n    for e in extensions {\n        let\
    \ mut c = e.chars().filter(|c| *c >= 'A' && *c <= 'Z').count();\n        let mut\
    \ s = e.chars().filter(|c| *c >= 'a' && *c <= 'z').count();\n        if c > s\
    \ {\n            strength = -1;\n            extension = e;\n        } else if\
    \ c < s {\n            strength = s;\n            extension = e;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut class_name = class_name.to_string();\n        let mut extension\
    \ = extension.to_string();\n        let mut cap = class_name.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let mut sm = class_name.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        let strength = cap - sm;\n        if\
    \ strength > 0 {\n            break;\n        }\n    }\n    extension.to_string().to_string()",
  "    let mut strongest_extension = String::new();\n    let mut extensions_count\
    \ = extensions.length;\n    let mut extensions_cap = extensions_count.to_f64();\n\
    \    let mut extensions_sm = extensions_count.to_f64();\n    let mut extensions_strength\
    \ = -1;\n    let mut extensions_index = -1;\n    let mut extensions_name = String::new();\n\
    \    \n    while extensions_count > 0 {\n        extensions_index = extensions_cap.floor();\n\
    \        extensions_cap = extensions_cap.sub(1.0);\n        extensions_sm = extensions_sm.sub(1.0);\n\
    \        extensions_strength = extensions_cap - extensions_sm;\n        extensions_name\
    \ = extensions[extensions_index];\n        \n        if extensions_strength >\
    \ 0 {\n            strongest_extension = format!(\"{}.{}\", class_name, extensions_name);\n\
    \            break;\n        }\n        \n        extensions_count--;\n    }\n\
    \    \n    return strongest_extension;", "    let mut strength = -1;\n    let\
    \ mut extension = String::new();\n    for e in extensions {\n        let cap =\
    \ e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm\n        };\n        extension = extension.concat(e);\n\
    \    }\n    extension.concat(\".\").concat(class_name.to_lowercase()).concat(\"\
    .\").concat(extensions[strength].to_lowercase());", "    let mut strength = -1;\n\
    \    let mut extension = String::new();\n    for extension in extensions {\n \
    \       let mut class_name = class_name.to_string();\n        let mut extension\
    \ = extension.to_string();\n        let mut count = class_name.chars().filter(|c|\
    \ c.is_uppercase()).count() - extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if strength == -1 || strength > count {\n            strength = count;\n\
    \            extension = class_name;\n        }\n    }\n    extension", "    let\
    \ mut extensions_map = HashMap::new();\n    for extension in extensions {\n  \
    \      let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n \
    \       }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extension = extensions_map.get(&class_name).unwrap();\n\
    \    let mut strength_map = HashMap::new();\n    for (key, value) in extension\
    \ {\n        let mut strength_map: HashMap<String, usize> = HashMap::new();\n\
    \        for (key, value) in value {\n            strength_map.insert(key, 0);\n\
    \        }\n        for (key, value) in value {\n            strength_map.insert(key,\
    \ value + 1);\n        }\n        let mut max_value = -1;\n        let mut max_key\
    \ = \"\";\n        for (k, v) in strength_map {\n            if v > max_value\
    \ {\n                max_value = v;\n                max_key = k;\n          \
    \  }\n        }\n        strength_map.remove(&max_key);\n        strength_map.insert(max_key,\
    \ strength_map.get(&max_key).unwrap() + 1);\n        strength = max_value;\n \
    \   }\n    extensions_map.remove(&class_name);\n    extensions_map.insert(class_name.clone(),\
    \ extensions_map.get(&class_name).unwrap());\n    extensions_map.remove(&class_name);\n\
    \    extensions_map.insert(class_name.clone(), extensions_map.get(&class_name).unwrap());\n\
    \    extensions_map.remove(&class_name);\n    extensions_map.insert(class_name.clone(),\
    \ extensions_map.get(&class_name).unwrap());\n    extensions_map.remove(&class_name);\n\
    \    extensions_map.insert(class_name.clone(), extensions_map.get(&class_name).unwrap());\n\
    \    extensions_map.remove(&class_name);\n    extensions_map.insert(class_name.clone(),\
    \ extensions_map.get(&class_name).unwrap());\n    extensions_map.remove(&class_name);\n\
    \    extensions_map.insert(class_name.clone(), extensions_map.get(&class_name).unwrap());\n\
    \    extensions_map.remove(&class_name);\n    extensions_map.insert(class_name.clone(),\
    \ extensions_map.get(&class_name).unwrap());\n    extensions_map.remove(&class_name);\n\
    \    extensions_map.insert(class_name.clone(), extensions_map.get(&class_name).unwrap());\n\
    \    extensions_map.remove(&class_name);\n    extensions_map.insert(class_name.clone(),\
    \ extensions_map.get(&class_name).unwrap());\n    extensions_map.remove(&class_name);\n\
    \    extensions_map.insert(class_name.clone", "    let mut strength = -1;\n  \
    \  let mut extension = String::new();\n    for extension in extensions {\n   \
    \     let mut extension_length = extension.len();\n        let mut class_length\
    \ = class_name.len();\n        let mut i = 0;\n        while i < extension_length\
    \ && i < class_length {\n            if extension[i] >= class_name[i] {\n    \
    \            extension_length -= 1;\n                class_length -= 1;\n    \
    \        } else {\n                i += 1;\n            }\n        }\n       \
    \ if extension_length == 0 {\n            strength = -1;\n            break;\n\
    \        }\n        let mut i = 0;\n        while i < extension_length {\n   \
    \         if extension[i] == class_name[i] {\n                i += 1;\n      \
    \      } else {\n                break;\n            }\n        }\n        if\
    \ i == extension_length {\n            strength = -1;\n            break;\n  \
    \      }\n        if strength == -1 || strength > i - 1 {\n            strength\
    \ = i - 1;\n            extension = extension.clone();\n        }\n    }\n   \
    \ extension", "    let mut strongest_extension = String::new();\n    let mut num_uppercase_letters\
    \ = 0;\n    let mut num_lowercase_letters = 0;\n    for extension in extensions\
    \ {\n        let mut extension_length = extension.len();\n        let mut extension_strength\
    \ = -1;\n        let mut extension_class = String::new();\n        let mut extension_class_length\
    \ = extension_class.len();\n        let mut extension_class_strength = -1;\n \
    \       let mut extension_class_name = String::new();\n        let mut extension_class_name_length\
    \ = extension_class_name.len();\n        let mut extension_class_name_strength\
    \ = -1;\n        let mut extension_class_name_char_count = 0;\n        let mut\
    \ extension_class_name_char_strength = -1;\n        let mut extension_class_name_chars\
    \ = String::new();\n        let mut extension_class_name_chars_length = extension_class_name_chars.len();\n\
    \        let mut extension_class_name_chars_strength = -1;\n        let mut extension_class_name_char_count\
    \ = 0;\n        let mut extension_class_name_char_strength = -1;\n        let\
    \ mut extension_class_name_chars = String::new();\n        let mut extension_class_name_chars_length\
    \ = extension_class_name_chars.len();\n        let mut extension_class_name_chars_strength\
    \ = -1;\n        let mut extension_class_name_char_count = 0;\n        let mut\
    \ extension_class_name_char_strength = -1;\n        let mut extension_class_name_chars\
    \ = String::new();\n        let mut extension_class_name_chars_length = extension_class_name_chars.len();\n\
    \        let mut extension_class_name_chars_strength = -1;\n        let mut extension_class_name_char_count\
    \ = 0;\n        let mut extension_class_name_char_strength = -1;\n        let\
    \ mut extension_class_name_chars = String::new();\n        let mut extension_class_name_chars_length\
    \ = extension_class_name_chars.len();\n        let mut extension_class_name_chars_strength\
    \ = -1;\n        let mut extension_class_name_char_count = 0;\n        let mut\
    \ extension_class_name_char_strength = -1;\n        let mut extension_class_name_chars\
    \ = String::new();\n        let mut extension_class_name_chars_length = extension_class_name_chars.len();\n\
    \        let mut extension_class_name_chars_strength = -1;\n        let mut extension_class_name_char_count\
    \ = 0;\n        let mut extension_class_name_char_strength = -1;\n        let\
    \ mut extension_class_name_chars = String::new();\n        let mut extension_class_name_chars_length\
    \ = extension_", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut class_name = class_name.to_lowercase();\n\
    \        let mut extension = extension.to_lowercase();\n        let mut count\
    \ = 0;\n        while class_name.contains(&extension) {\n            class_name\
    \ = class_name.remove(&extension);\n            count += 1;\n        }\n     \
    \   if count > strength {\n            strength = count;\n            extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strongest_extension = String::new();\n    let mut strength = -1;\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            strongest_extension.push_str(&extension);\n\
    \        }\n    }\n    strongest_extension.push_str(&class_name);\n    strongest_extension.push_str(&extensions[strength]);\n\
    \    strongest_extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut counter\
    \ = 0;\n        while class_name.len() > 0 && extension.len() > 0 {\n        \
    \    let cap = class_name.chars().filter(|c| c.is_uppercase()).count();\n    \
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \          let strength = cap - sm;\n            if strength > counter {\n   \
    \             counter = strength;\n                extension = String::new();\n\
    \            }\n            class_name = class_name.chars().filter(|c| !c.is_uppercase()).collect();\n\
    \            extension = extension.chars().filter(|c| !c.is_lowercase()).collect();\n\
    \        }\n        if class_name.len() > 0 {\n            extension = extension.chars().filter(|c|\
    \ !c.is_lowercase()).collect();\n        }\n        extension = extension.chars().filter(|c|\
    \ !c.is_uppercase()).collect();\n    }\n    if strength == -1 {\n        extension\
    \ = extension.chars().filter(|c| !c.is_lowercase()).collect();\n    }\n    extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > strength {\n            extension\
    \ = e;\n            strength = strength;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut extensions_count = extensions.size();\n    let mut extensions_cap\
    \ = 0;\n    let mut extensions_sm = 0;\n    for extension in extensions {\n  \
    \      let mut extension_cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut extension_sm = 0;\n        for c in extension {\n           \
    \ if c.is_lowercase() {\n                extension_sm += 1;\n            }\n \
    \       }\n        extensions_cap += extension_cap;\n        extensions_sm +=\
    \ extension_sm;\n    }\n    let mut strength = -1;\n    if extensions_cap > extensions_sm\
    \ {\n        strength = extensions_cap - extensions_sm;\n    } else {\n      \
    \  strength = extensions_sm - extensions_cap;\n    }\n    strongest_extension.push_str(&class_name);\n\
    \    strongest_extension.push_str(\".\")\n        .push_str(&extensions[extensions.iter().min_by_key(|&x|\
    \ x.cmp(&strength)).unwrap()])\n        .push_str(\".\")\n        .push_str(&extensions[extensions.iter().max_by_key(|&x|\
    \ x.cmp(&strength)).unwrap()])\n        .push_str(\".\")\n        .push_str(&extensions[extensions.iter().iter().min_by_key(|&x|\
    \ x.cmp(&strength)).unwrap()])\n        .push_str(\".\")\n        .push_str(&extensions[extensions.iter().iter().max_by_key(|&x|\
    \ x.cmp(&strength)).unwrap()])\n        .push_str(\".\")\n        .push_str(&extensions[extensions.iter().iter().iter().min_by_key(|&x|\
    \ x.cmp(&strength)).unwrap()])\n        .push_str(\".\")\n        .push_str(&extensions[extensions.iter().iter().iter().max_by_key(|&x|\
    \ x.cmp(&strength)).unwrap()])\n        .push_str(\".\")\n        .push_str(&extensions[extensions.iter().iter().iter().iter().min_by_key(|&x|\
    \ x.cmp(&strength)).unwrap()])\n        .push_str(\".\")\n        .push_str(&extensions[extensions.iter().iter().iter().iter().max_by_key(|&x|\
    \ x.cmp(&strength)).unwrap()])\n        .push_str(\".\")\n        .push_str(&extensions[extensions.iter().iter().iter().iter().iter().min_by_key(|&x|\
    \ x.cmp(&strength)).unwrap()])\n        .push_str(\".\")\n        .push_str(&extensions[extensions.iter().iter().iter().iter().max_by_key(|&x|\
    \ x.cmp(&strength)).unwrap()])\n        .push_str(\".\")\n        .push_str(&",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut extension_len = extension.len();\n        let\
    \ mut class_len = class_name.len();\n        let mut i = 0;\n        while i <\
    \ extension_len {\n            if extension[i] >= class_name[i] {\n          \
    \      extension_len = i;\n            } else {\n                class_len = i;\n\
    \            }\n            i += 1;\n        }\n        if strength == -1 || strength\
    \ > extension_len - class_len {\n            strength = extension_len - class_len;\n\
    \            extension = extension.to_string();\n        }\n    }\n    return\
    \ class_name + \".\" + extension;", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength_frac = cap - sm;\n        if strength_frac > strength {\n\
    \            extension = e;\n            strength = strength_frac;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength =\
    \ if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > strength {\n            extension = e;\n  \
    \          strength = strength;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            match extension_map.entry(c) {\n                hash_map::Entry::Occupied(mut\
    \ e) => {\n                    e.insert((extension.len() - extension.chars().count(),\
    \ 1));\n                }\n                hash_map::Entry::Vacant(e) => {\n \
    \                   e.insert((extension.len() - extension.chars().count(), 1));\n\
    \                }\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::new();\n    for extension in extensions_map.keys() {\n        let\
    \ mut extension_map = extensions_map.get(extension);\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            match extension_map.entry(c)\
    \ {\n                hash_map::Entry::Occupied(mut e) => {\n                 \
    \   let (count, count) = e.get_mut();\n                    extension_strength\
    \ = count / extension.len();\n                }\n                hash_map::Entry::Vacant(e)\
    \ => {\n                    extension_strength = -1;\n                }\n    \
    \        }\n        }\n        if extension_strength > strength {\n          \
    \  strength = extension_strength;\n            best_extension = extension;\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, best_extension)", "    let\
    \ mut strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength_frac\
    \ = cap - sm;\n        if strength > strength_frac {\n            extension =\
    \ e;\n            strength = strength_frac;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut extensions_count = extensions.length;\n    let mut extensions_strength\
    \ = -1;\n    let mut extensions_index = 0;\n    \n    while extensions_count >\
    \ 0 {\n        let mut extension = extensions[extensions_index];\n        let\
    \ mut extension_strength = -1;\n        let mut extension_class_name = String::new();\n\
    \        \n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                extension_strength += 1;\n                extension_class_name\
    \ += c;\n            }\n        }\n        \n        if extension_strength > extensions_strength\
    \ {\n            strongest_extension = extension_class_name;\n            extensions_strength\
    \ = extension_strength;\n        }\n        \n        extensions_count -= 1;\n\
    \        extensions_index += 1;\n    }\n    \n    strongest_extension", "    let\
    \ mut strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n \
    \       let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n       \
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm\n        };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[strength].to_lowercase());",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[strength].to_lowercase());",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name.to_lowercase();\n \
    \       let mut extension = extension.to_lowercase();\n        let mut class_name\
    \ = String::new();\n        let mut extension = String::new();\n        let mut\
    \ class_name = String::new();\n        let mut extension = String::new();\n  \
    \      let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new();\n        let mut extension = String::new();\n\
    \        let mut class_name = String::new", "    let mut strongest_extension =\
    \ String::new();\n    let mut extensions_count = extensions.length;\n    let mut\
    \ class_count = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \    let mut class_strength = -1;\n    let mut extension_strength = -1;\n    let\
    \ mut extension_strength_counter = vec![];\n    let mut extensions_counter = vec![];\n\
    \    \n    while extensions_count > 0 && class_count > 0 {\n        let mut extension\
    \ = String::new();\n        let mut extension_counter = vec![];\n        \n  \
    \      for _ in 0..extensions_count {\n            let mut extension_counter =\
    \ vec![];\n            for _ in 0..class_count {\n                let mut extension_counter\
    \ = vec![];\n                \n                for _ in 0..extensions_count {\n\
    \                    let mut extension_counter = vec![];\n                   \
    \ \n                    for _ in 0..class_count {\n                        let\
    \ mut extension_counter = vec![];\n                        \n                \
    \        for _ in 0..extensions_count {\n                            let mut extension_counter\
    \ = vec![];\n                            \n                            for _ in\
    \ 0..class_count {\n                                let mut extension_counter\
    \ = vec![];\n                                \n                              \
    \  for _ in 0..extensions_count {\n                                    let mut\
    \ extension_counter = vec![];\n                                    \n        \
    \                            for _ in 0..class_count {\n                     \
    \                   let mut extension_counter = vec![];\n                    \
    \                    \n                                        for _ in 0..extensions_count\
    \ {\n                                            let mut extension_counter = vec![];\n\
    \                                            \n                              \
    \              for _ in 0..class_count {\n                                   \
    \             let mut extension_counter = vec![];\n                          \
    \                      \n                                                for _\
    \ in 0..extensions_count {\n                                                 \
    \   let mut extension_counter = vec![];\n                                    \
    \                \n                                                    for _ in\
    \ 0..class_count {\n                                                        let\
    \ mut extension_counter = vec![];\n                                          \
    \              \n                                                        for _\
    \ in 0..extensions_count {\n                                                 \
    \           let mut extension_counter = vec![];\n                            \
    \                                \n                                          \
    \                  for _ in 0..class_count {\n                               \
    \                                 let mut extension_counter = vec![];\n      \
    \                                                          \n                \
    \                                                for _ in 0..extensions_count\
    \ {\n                                                                    let mut\
    \ extension_counter = vec![];\n                                              \
    \                      \n                                                    \
    \                for _ in 0..class_count {\n                                 \
    \                                       let mut extension_counter = vec![];\n\
    \                                                                        \n  \
    \                                                                      for _ in\
    \ 0..extensions_count {\n                                                    \
    \                        let mut ", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            if let Some(strength) = extension_map.get(c) {\n            \
    \    extension_map.insert(c, strength + 1);\n                if strength > extension_strength\
    \ {\n                    extension_strength = strength;\n                }\n \
    \           } else {\n                extension_map.insert(c, 1);\n          \
    \  }\n        }\n        extensions_map.insert(extension, extension_strength);\n\
    \    }\n    let mut max_extension_strength = -1;\n    let mut max_extension =\
    \ String::new();\n    for extension in extensions_map.keys() {\n        if extensions_map.get(extension).unwrap()\
    \ > max_extension_strength {\n            max_extension_strength = extensions_map.get(extension).unwrap();\n\
    \            max_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, max_extension)", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_map.insert(c.to_string(), extension_strength);\n     \
    \       }\n            extension_strength += 1;\n        }\n        extensions_map.insert(extension.to_string(),\
    \ extension_map);\n    }\n    let mut max_extension_strength = -1;\n    let mut\
    \ max_extension = String::new();\n    for extension in extensions_map.keys() {\n\
    \        let mut extension_map = extensions_map.get(extension);\n        let mut\
    \ extension_strength = -1;\n        for c in extension.chars() {\n           \
    \ if c.is_uppercase() {\n                extension_strength += 1;\n          \
    \  }\n            if c.is_lowercase() {\n                extension_strength +=\
    \ 1;\n            }\n        }\n        if extension_strength > max_extension_strength\
    \ {\n            max_extension_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, max_extension)",
  "    let mut strongest_extension = String::new();\n    let mut num_upper = 0;\n\
    \    let mut num_lower = 0;\n    for extension in extensions {\n        let cap\
    \ = extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm =\
    \ extension.chars().filter(|c| c.is_lowercase()).count();\n        if cap > sm\
    \ {\n            num_upper += cap;\n        } else {\n            num_lower +=\
    \ sm;\n        }\n    }\n    let strength = num_upper - num_lower;\n    if strength\
    \ > 0 {\n        strongest_extension.push_str(&format!(\"{}.{}\", class_name,\
    \ extensions[0]));\n        for extension in extensions.iter().skip(1) {\n   \
    \         let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \            let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \            if cap > sm {\n                num_upper += cap;\n            } else\
    \ {\n                num_lower += sm;\n            }\n        }\n        strongest_extension.push_str(&format!(\"\
    .{}\", extensions[0]));\n    }\n    strongest_extension", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        for c in extension.chars() {\n            if let\
    \ Some(mut v) = extension_map.entry(c) {\n                v.insert(1);\n     \
    \       } else {\n                extension_map.insert(c, 1);\n            }\n\
    \        }\n        extensions_map.insert(extension, extension_map);\n    }\n\
    \    let mut strength = -1;\n    let mut best_extension = String::new();\n   \
    \ for extension in extensions_map.keys() {\n        let mut extension_map = extensions_map.get(extension);\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            if let Some(mut v) = extension_map.entry(c) {\n             \
    \   extension_strength += v.value();\n            }\n        }\n        if extension_strength\
    \ > strength {\n            strength = extension_strength;\n            best_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, best_extension)",
  "    let mut strongest_extension = String::new();\n    let mut num_caps = 0;\n \
    \   let mut num_sms = 0;\n    for extension in extensions {\n        let caps\
    \ = extension.chars().filter(|c| c.is_uppercase()).count();\n        let sms =\
    \ extension.chars().filter(|c| c.is_lowercase()).count();\n        num_caps +=\
    \ caps;\n        num_sms += sms;\n        if caps > sms {\n            strongest_extension.push_str(extension);\n\
    \        }\n    }\n    if num_caps == 0 {\n        strongest_extension.push_str(class_name);\n\
    \    }\n    if num_sms == 0 {\n        strongest_extension.push_str(class_name);\n\
    \    }\n    if num_caps > num_sms {\n        strongest_extension.push_str(class_name);\n\
    \    }\n    strongest_extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        strength = if cap > sm {\n         \
    \   cap - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    extension.push_str(&class_name.to_string());\n\
    \    extension.push_str(&extensions[extensions.len() - 1]);\n    extension", " \
    \   let mut strongest_extension = String::new();\n    let mut num_uppercase_letters\
    \ = 0;\n    let mut num_lowercase_letters = 0;\n    for extension in extensions\
    \ {\n        let mut extension_length = extension.len();\n        let mut extension_uppercase_letters\
    \ = 0;\n        let mut extension_lowercase_letters = 0;\n        for c in extension\
    \ {\n            if c.is_uppercase() {\n                extension_uppercase_letters\
    \ += 1;\n            } else if c.is_lowercase() {\n                extension_lowercase_letters\
    \ += 1;\n            }\n        }\n        let strength = extension_uppercase_letters\
    \ - extension_lowercase_letters;\n        if strength > 0 {\n            if strength\
    \ > num_uppercase_letters {\n                num_uppercase_letters = strength;\n\
    \                strongest_extension = extension.to_string() + strongest_extension;\n\
    \            }\n            if strength > num_lowercase_letters {\n          \
    \      num_lowercase_letters = strength;\n                strongest_extension\
    \ = strongest_extension.to_string() + extension.to_string();\n            }\n\
    \        }\n    }\n    if num_uppercase_letters > num_lowercase_letters {\n  \
    \      strongest_extension = strongest_extension.to_string() + class_name.to_string();\n\
    \    }\n    strongest_extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let mut extension\
    \ = extension.clone();\n        let mut cap = extension.chars().filter(|c| c >=\
    \ 'A' && c <= 'Z').count();\n        let mut sm = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        if cap > sm {\n            strength\
    \ = cap - sm;\n            extension = extension.clone();\n        }\n    }\n\
    \    if strength == -1 {\n        extension = extension.clone();\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut num_cap = 0;\n    let mut num_sm = 0;\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      num_cap += cap;\n        num_sm += sm;\n        if cap > sm {\n       \
    \     strongest_extension.push_str(extension);\n        }\n    }\n    if num_cap\
    \ == 0 {\n        return strongest_extension;\n    }\n    let strength = num_cap\
    \ - num_sm;\n    if strength > 0 {\n        strongest_extension.push_str(&format!(\"\
    {}.{}\", class_name, extensions[0]));\n    }\n    for extension in extensions.iter().skip(1)\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strongest_extension.push_str(&format!(\"{}.{}\"\
    , class_name, extension));\n        }\n    }\n    strongest_extension", "    let\
    \ mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut extension_length = extension.len();\n     \
    \   let mut class_length = class_name.len();\n        let mut i = 0;\n       \
    \ while i < extension_length && i < class_length {\n            if extension[i]\
    \ == class_name[i] {\n                extension_length -= 1;\n               \
    \ class_length -= 1;\n                i += 1;\n            } else {\n        \
    \        i += 1;\n            }\n        }\n        if extension_length == 0 {\n\
    \            strength = -1;\n            break;\n        }\n        if extension_length\
    \ < class_length {\n            strength = -1;\n            break;\n        }\n\
    \        if extension_length == class_length {\n            if extension_length\
    \ > 0 {\n                strength = extension_length - 1;\n            }\n   \
    \         break;\n        }\n    }\n    if strength == -1 {\n        String::new()\n\
    \    } else {\n        format!(\"{}.{}\", class_name, extensions[strength])\n\
    \    }", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c >= 'A' &&\
    \ c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n\
    \        let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > strength {\n        \
    \    extension = e;\n            strength = strength;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > strength {\n        \
    \    extension = e;\n            strength = strength;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n        }\n        extensions_map.insert(extension.clone(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::new();\n    for (extension, extension_map) in extensions_map {\n \
    \       let mut extension_strength = -1;\n        for c in extension.chars() {\n\
    \            let mut extension_strength_map = HashMap::new();\n            for\
    \ (k, v) in extension_map.iter() {\n                if k.contains(&c) {\n    \
    \                extension_strength_map.insert(k.clone(), v.clone());\n      \
    \          }\n            }\n            extension_strength += extension_strength_map.len()\
    \ as i32;\n        }\n        if extension_strength > strength {\n           \
    \ strength = extension_strength;\n            best_extension = extension.clone();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, best_extension)", "    let\
    \ mut extensions_map = HashMap::new();\n    for extension in extensions {\n  \
    \      let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n \
    \       }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut best_extension = String::new();\n\
    \    for extension in extensions_map.iter() {\n        let mut extension_map =\
    \ extension.clone();\n        let mut extension_strength = -1;\n        for c\
    \ in extension.keys() {\n            if extension_map.get(c).len() > extension_strength\
    \ {\n                extension_map.insert(c.to_uppercase(), c.to_lowercase());\n\
    \                extension_strength = extension_map.get(c).len();\n          \
    \  }\n        }\n        if extension_strength > strength {\n            strength\
    \ = extension_strength;\n            best_extension = extension.clone();\n   \
    \     }\n    }\n    format!(\"{}.{}\", class_name, best_extension)", "    let\
    \ mut extensions_map = HashMap::new();\n    for extension in extensions {\n  \
    \      let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(c) {\n                extension_map.insert(c, strength +\
    \ 1);\n            } else {\n                extension_map.insert(c, 1);\n   \
    \         }\n        }\n        if let Some(strength) = extension_map.get(&'.')\
    \ {\n            extension_strength = strength;\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut max_strength = -1;\n    let mut max_extension\
    \ = String::new();\n    for (_, strength) in extensions_map.iter() {\n       \
    \ if strength > max_strength {\n            max_strength = strength;\n       \
    \     max_extension = String::from(class_name);\n        }\n    }\n    max_extension.push_str(&extensions_map.get(&'.').unwrap());\n\
    \    max_extension.push_str(&max_strength);\n    max_extension", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut c = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut s = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if c > s {\n            strength = -1;\n            extension = extension;\n\
    \        } else {\n            strength = c as i32 - s as i32;\n            extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n \
    \       }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extension = String::new();\n \
    \   for c in class_name.chars() {\n        if let Some(extension_map) = extensions_map.get(&c.to_uppercase())\
    \ {\n            for (extension, extension_map) in extension_map {\n         \
    \       if extension_map.len() > strength {\n                    strength = extension_map.len();\n\
    \                    extension = extension;\n                }\n            }\n\
    \        }\n    }\n    extension.clone()", "    let mut strength = -1;\n    let\
    \ mut extension = String::new();\n    let mut extension_counter = 0;\n    for\
    \ extension in extensions {\n        let mut extension_counter = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  extension_counter += 1;\n            }\n            if c.is_lowercase() {\n\
    \                extension_counter += 1;\n            }\n        }\n        if\
    \ extension_counter > strength {\n            strength = extension_counter;\n\
    \            extension = extension;\n        }\n    }\n    format!(\"{}.{}\",\
    \ class_name, extension)", "    let mut extensions_map = HashMap::new();\n   \
    \ for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension {\n    \
    \        if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_strength += 1;\n            }\n        }\n        extensions_map.insert(extension.to_string(),\
    \ extension_map);\n    }\n    let mut max_extension_strength = -1;\n    let mut\
    \ max_extension = String::new();\n    for extension in extensions_map.keys() {\n\
    \        let mut extension_map = extensions_map.get(extension);\n        let mut\
    \ extension_strength = -1;\n        for c in extension {\n            if c.is_uppercase()\
    \ {\n                extension_strength += 1;\n            }\n            if c.is_lowercase()\
    \ {\n                extension_strength += 1;\n            }\n        }\n    \
    \    if extension_strength > max_extension_strength {\n            max_extension_strength\
    \ = extension_strength;\n            max_extension = extension;\n        }\n \
    \   }\n    format!(\"{}.{}\", class_name, max_extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n      \
    \  let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n        \n  \
    \      if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = e;\n        }\n    }\n    \n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i32 = -1;\n    let mut extension = String::new();\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut counter: i32 = 0;\n       \
    \ while counter < CAP_AND_SM.len() {\n            let mut counter: i32 = 0;\n\
    \            let mut class_name = class_name;\n            let mut extension =\
    \ extension;\n            while counter < CAP_AND_SM.len() {\n               \
    \ if CAP_AND_SM[counter] == extension[counter] {\n                    counter++;\n\
    \                } else {\n                    break;\n                }\n   \
    \         }\n            if counter == CAP_AND_SM.len() {\n                strength\
    \ = CAP_AND_SM.len() - counter;\n                class_name = class_name.to_string();\n\
    \                extension = extension.to_string();\n            }\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut extension = extension.clone();\n        let mut class_name\
    \ = class_name.clone();\n        let mut cap = class_name.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut sm = class_name.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            class_name\
    \ = &class_name[cap..];\n        }\n        if class_name == &extension {\n  \
    \          class_name = &class_name[..cap];\n        }\n        if class_name\
    \ == &extension[..sm] {\n            class_name = &class_name[..sm];\n       \
    \ }\n        if class_name == &extension[..cap] {\n            class_name = &class_name[..cap];\n\
    \        }\n        if class_name == &extension[..] {\n            class_name\
    \ = &class_name[..];\n        }\n        if class_name == &extension {\n     \
    \       class_name = &class_name[..];\n        }\n        if class_name == &extension\
    \ {\n            class_name = &class_name[..];\n        }\n        if class_name\
    \ == &extension {\n            class_name = &class_name[..];\n        }\n    \
    \    if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n\
    \        }\n        if class_name == &extension {\n            class_name = &class_name[..];\n",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    let mut\
    \ extension_len = extension.len();\n    let mut i = 0;\n    for extension in extensions\
    \ {\n        let mut j = 0;\n        for c in extension.chars() {\n          \
    \  if i == 0 {\n                strength = c.to_ascii_uppercase().len() - c.to_ascii_lowercase().len();\n\
    \                extension = extension.clone();\n            }\n            if\
    \ i == 1 {\n                strength = c.to_ascii_lowercase().len() - c.to_ascii_uppercase().len();\n\
    \                extension = extension.clone();\n            }\n            if\
    \ i == 2 {\n                strength = c.to_ascii_uppercase().len() - c.to_ascii_lowercase().len();\n\
    \                extension = extension.clone();\n            }\n            if\
    \ i == 3 {\n                strength = c.to_ascii_lowercase().len() - c.to_ascii_uppercase().len();\n\
    \                extension = extension.clone();\n            }\n            i\
    \ += 1;\n        }\n    }\n    if strength == -1 {\n        extension = extension.clone();\n\
    \    }\n    if strength == 0 {\n        extension = extension.clone();\n    }\n\
    \    if strength == 1 {\n        extension = extension.clone();\n    }\n    if\
    \ strength == 2 {\n        extension = extension.clone();\n    }\n    if strength\
    \ == 3 {\n        extension = extension.clone();\n    }\n    if strength == 4\
    \ {\n        extension = extension.clone();\n    }\n    if strength == 5 {\n \
    \       extension = extension.clone();\n    }\n    if strength == 6 {\n      \
    \  extension = extension.clone();\n    }\n    if strength == 7 {\n        extension\
    \ = extension.clone();\n    }\n    if strength == 8 {\n        extension = extension.clone();\n\
    \    }\n    if strength == 9 {\n        extension = extension.clone();\n    }\n\
    \    if strength == 10 {\n        extension = extension.clone();\n    }\n    if\
    \ strength == 11 {\n        extension = extension.clone();\n    }\n    if strength\
    \ == 12 {\n        extension = extension.clone();\n    }\n    if strength == 13\
    \ {\n        extension = extension.clone();\n    }\n    if strength == 14 {\n\
    \        extension = extension.clone();\n    }\n    if strength == 15 {\n    \
    \    extension = extension.clone();\n    }\n    if strength == 16 {\n        extension\
    \ = extension.clone();\n    }\n    if strength == 17 {\n        extension = extension.clone();\n\
    \    }\n    if strength == 18 {\n        extension = extension.clone();\n    }\n\
    \    if strength == 19 {\n        extension = extension.clone();\n    }\n    if\
    \ strength == 20 {\n        extension = extension.clone();\n    }\n    if strength\
    \ == 21 {\n        extension = extension.clone();\n", "    let mut strength =\
    \ -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut extension_length = extension.len();\n        let mut class_length\
    \ = class_name.len();\n        while extension_length >= class_length {\n    \
    \        extension = extension.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \            extension_length -= class_length;\n            class_length -= extension_length;\n\
    \        }\n        let mut class_char = class_name.chars().filter(|c| c >= 'A'\
    \ && c <= 'Z').collect::<String>();\n        let mut extension_char = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').collect::<String>();\n        let mut strength_diff =\
    \ extension_char.len() - class_char.len();\n        if strength_diff > strength\
    \ {\n            strength = strength_diff;\n            extension = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').collect::<String>();\n        }\n    }\n    extension",
  "    let mut strength: i32 = 0;\n    let mut extension: Option<String> = None;\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm { cap - sm } else { sm - cap };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    extension.map(|e| class_name\
    \ + e.to_string()).unwrap_or(class_name)", "    let mut strength = -1;\n    let\
    \ mut extension = String::new();\n    for extension in extensions {\n        let\
    \ mut class_name = class_name.to_lowercase();\n        let mut extension = extension.to_lowercase();\n\
    \        let mut count = 0;\n        for c in class_name {\n            if c >=\
    \ 'a' && c <= 'z' {\n                count += 1;\n            }\n        }\n \
    \       let mut count = 0;\n        for c in extension {\n            if c >=\
    \ 'a' && c <= 'z' {\n                count += 1;\n            }\n        }\n \
    \       let strength = if count > strength {\n            count\n        } else\
    \ {\n            strength\n        };\n    }\n    extension.to_string() + class_name.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()].to_lowercase());", "    let mut strength = -1;\n \
    \   let mut extension = String::new();\n    for extension in extensions {\n  \
    \      let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n   \
    \     let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n     \
    \   strength = if cap > sm {\n            cap - sm\n        } else {\n       \
    \     sm - cap\n        };\n        if strength > 0 {\n            break;\n  \
    \      }\n    }\n    extension.push_str(&class_name.to_string());\n    extension.push_str(&extensions[extensions.len()\
    \ - 1]);\n    extension", "    let mut strength = -1;\n    let mut extension =\
    \ String::new();\n    let mut extension_len = extension.len();\n    let mut class_len\
    \ = class_name.len();\n    \n    while extension_len > 0 && class_len > 0 {\n\
    \        let mut class_char = class_name.chars().nth(class_len).unwrap();\n  \
    \      let mut extension_char = extension.chars().nth(extension_len).unwrap();\n\
    \        \n        if class_char == extension_char {\n            class_len -=\
    \ 1;\n            extension_len -= 1;\n        } else {\n            strength\
    \ = class_char - extension_char;\n            extension = extension.chars().nth(extension_len).unwrap();\n\
    \            extension_len -= 1;\n            class_len -= 1;\n        }\n   \
    \ }\n    \n    if extension_len > 0 {\n        extension = extension.chars().nth(extension_len).unwrap();\n\
    \    }\n    \n    format!(\"{}.{}\", class_name, extension)", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        let mut extension_strength = -1;\n        for c in\
    \ extension.chars() {\n            if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_strength += 1;\n            }\n        }\n        extensions_map.insert(extension.to_string(),\
    \ extension_map);\n    }\n    let mut max_extension_strength = -1;\n    let mut\
    \ max_extension = String::new();\n    for extension in extensions_map.keys() {\n\
    \        let extension_map = extensions_map.get(extension);\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                extension_strength += 1;\n            }\n            if c.is_lowercase()\
    \ {\n                extension_strength += 1;\n            }\n        }\n    \
    \    if extension_strength > max_extension_strength {\n            max_extension_strength\
    \ = extension_strength;\n            max_extension = extension;\n        }\n \
    \   }\n    return class_name + \".\" + max_extension;", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength_fraction\
    \ = cap - sm;\n        if strength_fraction > strength {\n            extension\
    \ = e;\n            strength = strength_fraction;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        extension = extension.concat(e);\n  \
    \  }\n    extension.concat(\".\").concat(class_name.to_lowercase());\n    extension.concat(\"\
    .\").concat(extensions[extensions.iter().position(|x| x.to_lowercase()).unwrap_or(&\"\
    -1\")].to_lowercase());\n    extension.concat(\".\").concat(extensions[extensions.iter().position(|x|\
    \ x.to_lowercase()).unwrap_or(&\"-1\")].to_lowercase());\n    extension.concat(\"\
    .\").concat(extensions[extensions.iter().position(|x| x.to_lowercase()).unwrap_or(&\"\
    -1\")].to_lowercase());\n    extension.concat(\".\").concat(extensions[extensions.iter().position(|x|\
    \ x.to_lowercase()).unwrap_or(&\"-1\")].to_lowercase());\n    extension.concat(\"\
    .\").concat(extensions[extensions.iter().position(|x| x.to_lowercase()).unwrap_or(&\"\
    -1\")].to_lowercase());\n    extension.concat(\".\").concat(extensions[extensions.iter().position(|x|\
    \ x.to_lowercase()).unwrap_or(&\"-1\")].to_lowercase());\n    extension.concat(\"\
    .\").concat(extensions[extensions.iter().position(|x| x.to_lowercase()).unwrap_or(&\"\
    -1\")].to_lowercase());\n    extension.concat(\".\").concat(extensions[extensions.iter().position(|x|\
    \ x.to_lowercase()).unwrap_or(&\"-1\")].to_lowercase());\n    extension.concat(\"\
    .\").concat(extensions[extensions.iter().position(|x| x.to_lowercase()).unwrap_or(&\"\
    -1\")].to_lowercase());\n    extension.concat(\".\").concat(extensions[extensions.iter().position(|x|\
    \ x.to_lowercase()).unwrap_or(&\"-1\")].to_lowercase());\n    extension.concat(\"\
    .\").concat(extensions[extensions.iter().position(|x| x.to_lowercase()).unwrap_or(&\"\
    -1\")].to_lowercase());\n    extension.concat(\".\").concat(extensions[extensions.iter().position(|x|\
    \ x.to_lowercase()).unwrap_or(&\"-1\")].to_lowercase());\n    extension.concat(\"\
    .\").concat(extensions[extensions.iter().position(|x| x.to_lowercase()).unwrap_or(&\"",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                extension_map.insert(c.to_string(), 1);\n            } else\
    \ {\n                extension_map.insert(c.to_string(), 0);\n            }\n\
    \        }\n        for (key, value) in extension_map.iter() {\n            if\
    \ value > extension_strength {\n                extension_strength = value;\n\
    \            }\n        }\n        extensions_map.insert(extension.clone(), extension_strength);\n\
    \    }\n    let mut max_extension_strength = -1;\n    let mut max_extension =\
    \ String::new();\n    for extension in extensions_map.iter() {\n        if extension.value\
    \ > max_extension_strength {\n            max_extension_strength = extension.value;\n\
    \            max_extension = extension.key;\n        }\n    }\n    return class_name.to_string()\
    \ + max_extension.to_string();", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let mut cap = String::new();\n\
    \        let mut sm = String::new();\n        for c in extension.chars() {\n \
    \           if c.is_uppercase() {\n                cap += c;\n            } else\
    \ {\n                sm += c;\n            }\n        }\n        let cap = cap.chars().count();\n\
    \        let sm = sm.chars().count();\n        strength = if cap > sm {\n    \
    \        cap - sm\n        } else {\n            sm - cap\n        };\n    }\n\
    \    extension.push_str(&class_name);\n    extension.push_str(&extensions[strength]);\n\
    \    extension", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        for\
    \ c in extension {\n            if let Some(key) = extension_map.entry(c) {\n\
    \                key.push((extensions_map.entry(c).or_insert(0) as f64 + 1.0)\
    \ as usize);\n            } else {\n                extension_map.insert(c, 0);\n\
    \            }\n        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut max_extension_strength = -1;\n    let mut max_extension =\
    \ String::new();\n    for extension in extensions_map.keys() {\n        let strength\
    \ = extensions_map.get(extension).iter().sum();\n        if strength > max_extension_strength\
    \ {\n            max_extension_strength = strength;\n            max_extension\
    \ = extension.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, max_extension)",
  "    let mut strength: i32 = 0;\n    let mut extension = String::new();\n    let\
    \ mut extension_len = extension.len();\n    let mut class_len = class_name.len();\n\
    \    while class_len > 0 {\n        let mut class_char = class_name[class_len\
    \ - 1];\n        if class_char >= 'A' && class_char <= 'Z' {\n            class_char\
    \ = class_char - 'A' as i32;\n        }\n        let mut extension_char = extension[extension_len\
    \ - 1];\n        if extension_char >= 'A' && extension_char <= 'Z' {\n       \
    \     extension_char = extension_char - 'A' as i32;\n        }\n        strength\
    \ += class_char - extension_char;\n        class_len -= 1;\n        extension_len\
    \ -= 1;\n    }\n    if strength == 0 {\n        return class_name;\n    }\n  \
    \  let mut strength_str = String::new();\n    let mut strength_len = strength_str.len();\n\
    \    while strength_len > 0 {\n        let mut strength_char = strength[strength_len\
    \ - 1];\n        if strength_char >= 'A' && strength_char <= 'Z' {\n         \
    \   strength_char = strength_char - 'A' as i32;\n        }\n        strength_str.insert(0,\
    \ strength_char);\n        strength_len -= 1;\n    }\n    strength_str.insert(0,\
    \ class_name);\n    strength_str.insert(0, '.');\n    strength_str.insert(0, extension);\n\
    \    return strength_str;", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = -1;\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = strength;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name.to_lowercase();\n \
    \       let mut extension = extension.to_lowercase();\n        let mut cap = class_name.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let mut sm = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        if cap - sm > strength {\n         \
    \   strength = cap - sm;\n            extension = extension;\n        }\n    }\n\
    \    class_name.to_string() + extension.to_string()", "    let mut strength =\
    \ -1;\n    let mut extension = String::new();\n    for e in extensions {\n   \
    \     let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength = if\
    \ cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n \
    \       };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut count = 0;\n        while class_name.len() > 0\
    \ {\n            if class_name.chars().all(|c| c.is_uppercase()) {\n         \
    \       count += 1;\n            }\n            class_name = &class_name[0..class_name.len()\
    \ - 1];\n        }\n        if count > strength {\n            strength = count;\n\
    \            extension = extension;\n        }\n    }\n    format!(\"{}.{}\",\
    \ class_name, extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut num_caps = 0;\n    let mut num_sms = 0;\n    for extension in extensions\
    \ {\n        let caps = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sms = extension.chars().filter(|c| c.is_lowercase()).count();\n \
    \       num_caps += caps;\n        num_sms += sms;\n        if caps > sms {\n\
    \            strongest_extension.push_str(extension);\n        }\n    }\n    if\
    \ num_caps == 0 {\n        strongest_extension.push_str(class_name);\n    }\n\
    \    if num_sms == 0 {\n        strongest_extension.push_str(class_name.to_lowercase());\n\
    \    }\n    if num_caps > num_sms {\n        strongest_extension.push_str(class_name.to_lowercase());\n\
    \    }\n    strongest_extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    let mut extension_len = extension.len();\n    for extension\
    \ in extensions {\n        let mut extension_len = extension.len();\n        for\
    \ c in extension {\n            if c.is_uppercase() {\n                strength\
    \ += 1;\n            }\n            if c.is_lowercase() {\n                strength\
    \ -= 1;\n            }\n        }\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    extension = extension.trim_end().to_string();\n    extension\
    \ = extension.concat(\".\").concat(class_name.to_lowercase());\n    extension\
    \ = extension.concat(\".\").concat(extension);\n    extension", "    let mut strongest_extension:\
    \ Vec<String> = Vec::new();\n    let mut class_name = class_name.to_string();\n\
    \    let mut extensions = extensions.to_vec();\n    let mut strength: i32 = -1;\n\
    \    let mut i = 0;\n    while i < extensions.len() {\n        let mut extension\
    \ = extensions[i].to_string();\n        let mut j = 0;\n        while j < class_name.len()\
    \ {\n            if extension[j] == class_name[j] {\n                let mut strength_new\
    \ = strength;\n                let mut j = 0;\n                while j < extension.len()\
    \ {\n                    if extension[j] != class_name[j] {\n                \
    \        strength_new += 1;\n                    }\n                    j += 1;\n\
    \                }\n                if strength_new > strength {\n           \
    \         strongest_extension = extension.clone();\n                    strength\
    \ = strength_new;\n                }\n            }\n            j += 1;\n   \
    \     }\n        i += 1;\n    }\n    strongest_extension.sort();\n    strongest_extension.first().to_string()",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut c = extension.chars();\n        let mut s =\
    \ c.count();\n        let mut cap = 0;\n        let mut sm = 0;\n        while\
    \ c.any() {\n            let c = c.next().unwrap();\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else if c.is_lowercase() {\n   \
    \             sm += 1;\n            }\n        }\n        strength = if cap -\
    \ sm > strength { cap - sm } else { strength };\n    }\n    format!(\"{}.{}\"\
    , class_name, extensions[strength])", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n        }\n        extensions_map.insert(extension.chars().collect::<String>(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::new();\n    for (extension, extension_map) in extensions_map {\n \
    \       let mut extension_strength = -1;\n        for c in extension.chars() {\n\
    \            let mut extension_strength_map = HashMap::new();\n            for\
    \ (extension_char, extension_char_map) in extension_map {\n                if\
    \ extension_char == c {\n                    extension_strength_map.insert(extension_char,\
    \ 1);\n                }\n            }\n            let mut extension_strength_sum\
    \ = extension_strength_map.iter().sum();\n            for (extension_char, extension_char_map)\
    \ in extension_map {\n                extension_strength_sum += extension_char_map.get(&c).unwrap();\n\
    \            }\n            extension_strength_map.insert(c, extension_strength_sum);\n\
    \            extension_strength = extension_strength_map.iter().max().unwrap();\n\
    \        }\n        if extension_strength > strength {\n            strength =\
    \ extension_strength;\n            best_extension = extension;\n        }\n  \
    \  }\n    format!(\"{}.{}\", class_name, best_extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut extension_length = extension.len();\n        let mut class_length\
    \ = class_name.len();\n        let mut i = 0;\n        while i < extension_length\
    \ && i < class_length {\n            if extension[i] >= class_name[i] {\n    \
    \            extension_length -= 1;\n                class_length -= 1;\n    \
    \        } else {\n                i += 1;\n            }\n        }\n       \
    \ if extension_length == 0 {\n            extension = extension.to_string();\n\
    \        }\n        if class_length == 0 {\n            class_name = extension.to_string();\n\
    \        }\n        if strength < 0 {\n            strength = extension_length\
    \ - class_length;\n        }\n    }\n    if strength == 0 {\n        return class_name;\n\
    \    }\n    if strength == 1 {\n        return class_name + \".\" + extensions[0];\n\
    \    }\n    let mut i = 0;\n    while i < extension.len() {\n        if extension[i]\
    \ >= class_name[i] {\n            i += 1;\n        } else {\n            extension\
    \ = extension.substr(0, i) + \".\" + extension.substr(i);\n        }\n    }\n\
    \    return class_name + \".\" + extension;", "    let mut strength = -1;\n  \
    \  let mut extension = String::new();\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength_frac = cap - sm;\n        if\
    \ strength_frac > strength {\n            extension = e;\n            strength\
    \ = strength_frac;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i32 = 0;\n    let mut extension = String::new();\n    for\
    \ extension in extensions {\n        let mut extension_length = extension.len();\n\
    \        let mut class_length = class_name.len();\n        let mut i = 0;\n  \
    \      while i < extension_length {\n            let mut j = i;\n            while\
    \ j < extension_length && extension[j] == class_name[j] {\n                j +=\
    \ 1;\n            }\n            let mut k = i;\n            while k < extension_length\
    \ && extension[k] == class_name[k] {\n                k += 1;\n            }\n\
    \            let mut strength = extension_length - j - k;\n            if strength\
    \ > strength {\n                extension = extension.clone();\n             \
    \   extension_length = extension.len();\n                class_length = class_name.len();\n\
    \                i = j;\n                j = k;\n            }\n            i\
    \ += 1;\n        }\n    }\n    extension.clone()", "    let mut strength = -1;\n\
    \    let mut extension = String::new();\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = if cap > sm {\n         \
    \   cap - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > strength {\n            extension = e;\n            strength = strength;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = -1;\n    let mut extensions_count = extensions.len();\n    let mut extensions_names_count\
    \ = extensions.iter().map(|x| x.chars().count()).sum();\n    let mut extensions_names_strength\
    \ = -1;\n    let mut extensions_names_count = extensions.iter().map(|x| x.chars().count()).sum();\n\
    \    let mut extensions_names_strength = -1;\n    let mut extensions_names_count\
    \ = extensions.iter().map(|x| x.chars().count()).sum();\n    let mut extensions_names_strength\
    \ = -1;\n    let mut extensions_names_count = extensions.iter().map(|x| x.chars().count()).sum();\n\
    \    let mut extensions_names_strength = -1;\n    let mut extensions_names_count\
    \ = extensions.iter().map(|x| x.chars().count()).sum();\n    let mut extensions_names_strength\
    \ = -1;\n    let mut extensions_names_count = extensions.iter().map(|x| x.chars().count()).sum();\n\
    \    let mut extensions_names_strength = -1;\n    let mut extensions_names_count\
    \ = extensions.iter().map(|x| x.chars().count()).sum();\n    let mut extensions_names_strength\
    \ = -1;\n    let mut extensions_names_count = extensions.iter().map(|x| x.chars().count()).sum();\n\
    \    let mut extensions_names_strength = -1;\n    let mut extensions_names_count\
    \ = extensions.iter().map(|x| x.chars().count()).sum();\n    let mut extensions_names_strength\
    \ = -1;\n    let mut extensions_names_count = extensions.iter().map(|x| x.chars().count()).sum();\n\
    \    let mut extensions_names_strength = -1;\n    let mut extensions_names_count\
    \ = extensions.iter().map(|x| x.chars().count()).sum();\n    let mut extensions_names_strength\
    \ = -1;\n    let mut extensions_names_count = extensions.iter().map(|x| x.chars().count()).sum();\n\
    \    let mut extensions_names_strength = -1;\n    let mut extensions_names_count\
    \ = extensions.iter().map(|x| x.chars().count()).sum();\n    let mut extensions_names_strength\
    \ = -1;\n    let mut extensions_names_count = extensions.iter().map(|x| x.chars().count()).sum();\n\
    \    let mut extensions_names_strength = -1;\n    let ", "    let mut strongest_extension\
    \ = String::new();\n    let mut num_caps = 0;\n    let mut num_sms = 0;\n    for\
    \ extension in extensions {\n        let caps = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sms = extension.chars().filter(|c| c.is_lowercase()).count();\n \
    \       let strength = caps - sms;\n        if strength > 0 {\n            if\
    \ num_caps < strength {\n                num_caps = strength;\n              \
    \  strongest_extension = extension;\n            }\n        } else if num_sms\
    \ < strength {\n            num_sms = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension {\n\
    \            if let Some(key) = extension_map.entry(c) {\n                key.push((extension,\
    \ extensions_map.entry(c).or_insert(vec)));\n            } else {\n          \
    \      extension_map.insert(c, vec);\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut max_strength = -1;\n    let mut max_extension\
    \ = String::new();\n    for extension in extensions_map.keys() {\n        let\
    \ strength = extensions_map.get(extension).iter().map(|v| v.len()).sum();\n  \
    \      if strength > max_strength {\n            max_strength = strength;\n  \
    \          max_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, max_extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm { cap - sm } else { sm - cap };\n        extension\
    \ = format!(\"{}.{}\", class_name, e);\n        if strength > 0 {\n          \
    \  break;\n        }\n    }\n    extension", "    let mut strength = -1;\n   \
    \ let mut extension = String::new();\n    for extension in extensions {\n    \
    \    let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n       \
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm\n        };\n        if strength > 0 {\n            break;\n        }\n\
    \    }\n    extension.to_string() + class_name.to_string() + extensions[extensions.len()\
    \ - 1].to_string()", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        let\
    \ mut extension_strength = 0;\n        for c in extension {\n            if c.is_uppercase()\
    \ {\n                extension_map.insert(c.to_string(), 1);\n            } else\
    \ {\n                extension_map.insert(c.to_string(), 0);\n            }\n\
    \            extension_strength += extension_map.get(&c.to_string()).unwrap();\n\
    \        }\n        extensions_map.insert(extension.to_string(), extension_strength);\n\
    \    }\n    let mut max_strength = -1;\n    let mut max_extension = String::new();\n\
    \    for (extension, strength) in extensions_map {\n        if strength > max_strength\
    \ {\n            max_strength = strength;\n            max_extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, max_extension)", "    let\
    \ mut extensions_map = HashMap::new();\n    for extension in extensions {\n  \
    \      let mut extension_map = HashMap::new();\n        for c in extension {\n\
    \            match extension_map.entry(c) {\n                hash_map::Entry::Occupied(mut\
    \ e) => {\n                    e.insert((extensions_map.entry(class_name).or_insert(0)\
    \ as i32).unwrap());\n                }\n                hash_map::Entry::Vacant(e)\
    \ => {\n                    e.insert((extensions_map.entry(class_name).or_insert(0)\
    \ as i32).unwrap());\n                }\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut max_strength = -1;\n    let mut max_extension\
    \ = String::new();\n    for extension, strength in extensions_map.iter() {\n \
    \       if strength > max_strength {\n            max_strength = strength;\n \
    \           max_extension = extension;\n        }\n    }\n    return max_extension;",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension {\n\
    \            extension_map.insert(c.to_lowercase(), -1);\n        }\n        extensions_map.insert(extension.to_lowercase(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::new();\n    for extension in extensions_map.keys() {\n        let\
    \ extension_map = extensions_map.get(extension);\n        let mut extension_strength\
    \ = -1;\n        for c in extension {\n            let c = c.to_lowercase();\n\
    \            let strength = extension_map.get(c);\n            if strength > extension_strength\
    \ {\n                extension_strength = strength;\n                best_extension\
    \ = extension;\n            }\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ best_extension)", "    let mut strongest_extension = String::new();\n    let\
    \ mut strength = -1;\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut cap =\
    \ class_name.chars().filter(|c| c.is_uppercase()).count();\n        let mut sm\
    \ = class_name.chars().filter(|c| c.is_lowercase()).count();\n        if cap >\
    \ sm {\n            strongest_extension = class_name.to_string();\n          \
    \  strength = cap - sm;\n        }\n    }\n    if strength == -1 {\n        strongest_extension\
    \ = class_name.to_string();\n    }\n    strongest_extension.to_string()", "  \
    \  let mut strongest_extension = String::new();\n    let mut extensions_count\
    \ = extensions.length;\n    let mut extensions_cap = 0;\n    let mut extensions_sm\
    \ = 0;\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        extensions_cap += cap;\n        extensions_sm += sm;\n    }\n    let\
    \ strength = extensions_cap - extensions_sm;\n    if extensions_count > 0 {\n\
    \        if strength > 0 {\n            strongest_extension.push_str(&class_name.to_string());\n\
    \            strongest_extension.push_str(&extensions[0].to_string());\n     \
    \       strongest_extension.push_str(&extensions[extensions_count - 1].to_string());\n\
    \        } else {\n            strongest_extension.push_str(&class_name.to_string());\n\
    \            strongest_extension.push_str(&extensions[extensions_count - 1].to_string());\n\
    \        }\n    }\n    strongest_extension", "    let mut strength = -1;\n   \
    \ let mut extension = String::new();\n    for e in extensions {\n        let cap\
    \ = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm\n        };\n        extension = extension.concat(e);\n\
    \    }\n    extension.concat(class_name.to_string());\n    extension.concat(\"\
    .\".to_string());\n    extension.concat(format!(\"{}\", strength));\n    extension",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            if let Some(mut v) = extension_map.get(c.to_ascii_lowercase())\
    \ {\n                v.push(c); \n                extension_map.insert(c.to_ascii_lowercase(),\
    \ v);\n            } else {\n                extension_map.insert(c.to_ascii_lowercase(),\
    \ vec![c]);\n            }\n        }\n        extensions_map.insert(extension.chars().next().unwrap().to_ascii_lowercase(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut extension =\
    \ String::new();\n    for c in class_name.chars() {\n        if let Some(mut v)\
    \ = extensions_map.get(c.to_ascii_lowercase()) {\n            if strength < v.len()\
    \ {\n                strength = v.len();\n                extension = extension.clone();\n\
    \            }\n            for c in v[v.len() - 1] {\n                extension.push(c);\n\
    \            }\n        }\n    }\n    extension", "    let mut strongest_extension:\
    \ Vec<String> = Vec::new();\n    let mut class_name = class_name.to_string();\n\
    \    let mut extensions = extensions.to_vec();\n    let mut strength: usize =\
    \ 0;\n    let mut current_extension: Vec<String> = Vec::new();\n    let mut current_extension_strength:\
    \ usize = 0;\n    let mut current_extension_class: String = String::new();\n \
    \   let mut current_extension_class_strength: usize = 0;\n    let mut current_extension_class_name:\
    \ String = String::new();\n    let mut current_extension_class_name_strength:\
    \ usize = 0;\n    let mut current_extension_class_name_length: usize = 0;\n  \
    \  let mut current_extension_class_name_length2: usize = 0;\n    let mut current_extension_class_name_length3:\
    \ usize = 0;\n    let mut current_extension_class_name_length4: usize = 0;\n \
    \   let mut current_extension_class_name_length5: usize = 0;\n    let mut current_extension_class_name_length6:\
    \ usize = 0;\n    let mut current_extension_class_name_length7: usize = 0;\n \
    \   let mut current_extension_class_name_length8: usize = 0;\n    let mut current_extension_class_name_length9:\
    \ usize = 0;\n    let mut current_extension_class_name_length10: usize = 0;\n\
    \    let mut current_extension_class_name_length11: usize = 0;\n    let mut current_extension_class_name_length12:\
    \ usize = 0;\n    let mut current_extension_class_name_length13: usize = 0;\n\
    \    let mut current_extension_class_name_length14: usize = 0;\n    let mut current_extension_class_name_length15:\
    \ usize = 0;\n    let mut current_extension_class_name_length16: usize = 0;\n\
    \    let mut current_extension_class_name_length17: usize = 0;\n    let mut current_extension_class_name_length18:\
    \ usize = 0;\n    let mut current_extension_class_name_length19: usize = 0;\n\
    \    let mut current_extension_class_name_length20: usize = 0;\n    let mut current_extension_class_name_length21:\
    \ usize = 0;\n    let mut current_extension_class_name_length22: usize = 0;\n\
    \    let mut current_extension_class_name_length23: usize = 0;\n    let mut current_extension_class_name_length24:\
    \ usize = 0;\n    let mut current_extension_class_name_length25: usize = 0;\n\
    \    let mut current_extension_class_name_length26: u", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut cap = String::new();\n        let mut sm = String::new();\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             cap.push(c);\n            } else {\n                sm.push(c);\n\
    \            }\n        }\n        let cap_len = cap.chars().count();\n      \
    \  let sm_len = sm.chars().count();\n        let cap_diff = cap_len - sm_len;\n\
    \        let strength = if cap_diff > 0 {\n            cap_len - cap_diff\n  \
    \      } else {\n            sm_len - cap_len\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    extension.push_str(&class_name.to_string());\n\
    \    extension.push_str(&extensions[strength].to_string());\n    extension", " \
    \   let mut strongest_extension = String::new();\n    let mut counter = vec![0;\
    \ extensions.len()];\n    for extension in extensions {\n        let mut counter\
    \ = vec![0; extensions.len()];\n        for c in extension.chars() {\n       \
    \     counter[c.to_uppercase().unwrap()] += 1;\n            counter[c.to_lowercase().unwrap()]\
    \ += 1;\n        }\n        let strength = counter.iter().fold(0, |a, b| {\n \
    \           a + (b as f64) / (a.to_f64() + b.to_f64())\n        });\n        if\
    \ strength > 0 {\n            strongest_extension.push_str(&format!(\"{}.{}\"\
    , class_name, extension));\n        }\n    }\n    strongest_extension", "    let\
    \ mut strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e.to_lowercase() == extension).unwrap()].to_lowercase());", "    let mut strongest_extension\
    \ = String::new();\n    let mut extensions_count = extensions.size();\n    let\
    \ mut extensions_cap = 0;\n    let mut extensions_sm = 0;\n    for extension in\
    \ extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      extensions_cap += cap;\n        extensions_sm += sm;\n        if extensions_cap\
    \ > extensions_sm {\n            strongest_extension.push_str(extension);\n  \
    \          extensions_cap -= cap;\n        } else {\n            strongest_extension.push_str(extension);\n\
    \            extensions_sm -= sm;\n        }\n    }\n    strongest_extension.push_str(&class_name.to_string());\n\
    \    strongest_extension", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = -1;\n    for extension in extensions\
    \ {\n        let mut extension_strength = -1;\n        let mut extension_class_name\
    \ = String::new();\n        let mut extension_class_name_strength = -1;\n    \
    \    let mut extension_class_name_length = String::new();\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                extension_class_name_strength\
    \ += 1;\n                extension_class_name_length += c.to_string();\n     \
    \       } else if c.is_lowercase() {\n                extension_strength += 1;\n\
    \                extension_class_name_strength += 1;\n            }\n        }\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n        if extension_class_name_strength > extension_class_name_strength\
    \ {\n            extension_class_name = extension_class_name;\n            extension_class_name_strength\
    \ = extension_class_name_strength;\n            extension_class_name_length =\
    \ extension_class_name_length;\n        }\n    }\n    strongest_extension.push_str(&class_name);\n\
    \    strongest_extension.push_str(&strongest_extension_strength.to_string());\n\
    \    strongest_extension.push_str(&extension_class_name);\n    strongest_extension.push_str(&extension_class_name_strength.to_string());\n\
    \    strongest_extension.push_str(&extension_class_name_length);\n    strongest_extension",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(c) {\n                extension_map.insert(c, strength +\
    \ 1);\n            } else {\n                extension_map.insert(c, 1);\n   \
    \         }\n        }\n        if let Some(strength) = extension_map.get(&'Z')\
    \ {\n            extension_map.insert(&'Z', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'z') {\n            extension_map.insert(&'z',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&'A')\
    \ {\n            extension_map.insert(&'A', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'a') {\n            extension_map.insert(&'a',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&'0')\
    \ {\n            extension_map.insert(&'0', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'9') {\n            extension_map.insert(&'9',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&'-')\
    \ {\n            extension_map.insert(&'-', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'_') {\n            extension_map.insert(&'_',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&'-')\
    \ {\n            extension_map.insert(&'-', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'-') {\n            extension_map.insert(&'-',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&'-')\
    \ {\n            extension_map.insert(&'-', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'-') {\n            extension_map.insert(&'-',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&'-')\
    \ {\n            extension_map.insert(&'-', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'-') {\n            extension_map.insert(&'-',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&'-')\
    \ {\n            extension_map.insert(&'-', strength + 1);\n        }\n      \
    \  if let Some(strength) = ", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        \n        if cap > sm {\n            extension = e;\n            strength\
    \ = cap - sm;\n        }\n    }\n    \n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension {\n\
    \            if c.is_uppercase() {\n                extension_map.insert(c.to_lowercase(),\
    \ 1);\n            } else {\n                extension_map.insert(c.to_uppercase(),\
    \ 1);\n            }\n        }\n        extensions_map.insert(extension.to_lowercase(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::new();\n    for extension in extensions_map.keys() {\n        let\
    \ mut extension_map = extensions_map.get(extension);\n        let mut extension_strength\
    \ = 0;\n        for c in extension {\n            if c.is_uppercase() {\n    \
    \            extension_strength += extension_map.get(c.to_lowercase()).unwrap();\n\
    \            } else {\n                extension_strength += extension_map.get(c.to_uppercase()).unwrap();\n\
    \            }\n        }\n        if extension_strength > strength {\n      \
    \      strength = extension_strength;\n            best_extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, best_extension)", "    let\
    \ mut strength: i32 = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut extension_len = extension.len();\n        let\
    \ mut class_len = class_name.len();\n        let mut i = 0;\n        while i <\
    \ extension_len {\n            if extension[i] >= 'A' && extension[i] <= 'Z' {\n\
    \                extension_len = extension_len - 1;\n                class_len\
    \ = class_len - 1;\n            } else {\n                extension_len = extension_len\
    \ - 1;\n            }\n            i = i + 1;\n        }\n        let mut j =\
    \ 0;\n        while j < class_len {\n            if class_name[j] >= 'a' && class_name[j]\
    \ <= 'z' {\n                class_len = class_len - 1;\n            } else {\n\
    \                class_len = class_len - 1;\n            }\n            j = j\
    \ + 1;\n        }\n        let mut k = extension_len - class_len;\n        while\
    \ k >= 0 {\n            if strength < 0 {\n                strength = k;\n   \
    \             extension = extension.clone();\n            }\n            k = k\
    \ - 1;\n        }\n    }\n    if strength == -1 {\n        extension.clone() +\
    \ \".\" + class_name.clone()\n    } else {\n        extension.clone() + \".\"\
    \ + class_name.clone() + \"(\" + &strength.to_string()[..] + \")\"\n    }", " \
    \   let mut strongest_extension = String::new();\n    let mut strength = -1;\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            strongest_extension.push_str(&extension);\n\
    \        }\n    }\n    if strength == 0 {\n        strongest_extension.push_str(&class_name);\n\
    \    }\n    strongest_extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm\n        };\n        extension = extension.concat(e);\n    }\n \
    \   extension.concat(\".\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().min_by_key(|e|\
    \ e.chars().filter(|c| c.is_lowercase()).count()).unwrap()]);", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    let mut extension_counter\
    \ = 0;\n    for extension in extensions {\n        let mut extension_counter =\
    \ 0;\n        for c in extension.chars() {\n            if c.is_uppercase() {\n\
    \                extension_counter += 1;\n            }\n            if c.is_lowercase()\
    \ {\n                extension_counter += 1;\n            }\n        }\n     \
    \   if extension_counter > strength {\n            strength = extension_counter;\n\
    \            extension = extension;\n        }\n    }\n    format!(\"{}.{}\",\
    \ class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm\n        };\n        extension = extension.concat(e);\n    }\n \
    \   extension.concat(class_name);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension.concat(\".\");\n    extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = -1;\n    let mut extensions_count\
    \ = extensions.len();\n    for extension in extensions {\n        let mut extension_strength\
    \ = extension.chars().filter(|c| c.is_uppercase()).count() - extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n        extensions_count -=\
    \ 1;\n    }\n    if extensions_count == 0 {\n        strongest_extension = class_name;\n\
    \        strongest_extension_strength = -1;\n    }\n    strongest_extension",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = -1;\n    for extension in extensions {\n        let mut extension_strength\
    \ = -1;\n        let mut extension_class_name = String::new();\n        let mut\
    \ extension_class_name_strength = -1;\n        let mut extension_class_name_length\
    \ = 0;\n        let mut extension_class_name_char_count = 0;\n        for c in\
    \ extension.chars() {\n            if c.is_uppercase() {\n                extension_class_name_char_count\
    \ += 1;\n            }\n            if c.is_lowercase() {\n                extension_class_name_char_count\
    \ += 1;\n            }\n            if c.is_digit() {\n                extension_class_name_char_count\
    \ += 1;\n            }\n        }\n        if extension_class_name_char_count\
    \ == 0 {\n            continue;\n        }\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                extension_strength +=\
    \ 1;\n            }\n            if c.is_lowercase() {\n                extension_strength\
    \ += 1;\n            }\n            if c.is_digit() {\n                extension_strength\
    \ += 1;\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strength = -1;\n    let mut\
    \ extension = String::new();\n    for extension in extensions {\n        let cap\
    \ = extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm =\
    \ extension.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = cap - sm;\n        if strength > 0 {\n            break;\n        }\n    }\n\
    \    extension.push_str(&class_name.to_string());\n    extension.push_str(&extensions[strength].to_string());\n\
    \    extension", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        let\
    \ mut extension_strength = 0;\n        for c in extension.chars() {\n        \
    \    if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ 1);\n            } else {\n                extension_map.insert(c.to_string(),\
    \ -1);\n            }\n            extension_strength += extension_map.get(&c.to_string()).unwrap();\n\
    \        }\n        extensions_map.insert(extension.to_string(), extension_strength);\n\
    \    }\n    let mut max_strength = -1;\n    let mut max_extension = String::new();\n\
    \    for extension in extensions_map.keys() {\n        if extensions_map.get(extension).unwrap()\
    \ > max_strength {\n            max_strength = extensions_map.get(extension).unwrap();\n\
    \            max_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, max_extension)", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            extension_map.insert(c, 0);\n\
    \        }\n        extensions_map.insert(extension, extension_map);\n    }\n\
    \    let mut max_strength = -1;\n    let mut max_extension = String::new();\n\
    \    for (extension, extension_map) in extensions_map {\n        let mut strength\
    \ = extension.chars().filter(|c| extension_map.get(c).is_some()).count() as i32;\n\
    \        if strength > max_strength {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, max_extension)", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            if let Some(strength) = extension_map.get(c) {\n            \
    \    extension_map.insert(c, strength + 1);\n            } else {\n          \
    \      extension_map.insert(c, 1);\n            }\n        }\n        if extension_map.len()\
    \ > extension_strength {\n            extension_strength = extension_map.len();\n\
    \        }\n        extensions_map.insert(extension, extension_strength);\n  \
    \  }\n    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = -1;\n    for extension in extensions_map.keys() {\n        if extensions_map.get(extension).unwrap()\
    \ > strongest_extension_strength {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extensions_map.get(extension).unwrap();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut strength = -1;\n    let mut extension = String::new();\n    for e\
    \ in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n \
    \       }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extension = extensions_map.get(&class_name);\n\
    \    while extension != Some(&{}) {\n        for (key, value) in extension {\n\
    \            if let Some(key) = key {\n                if let Some(key) = value\
    \ {\n                    if strength < key.len() - key.chars().count() - key.chars().count()\
    \ {\n                        strength = key.len() - key.chars().count() - key.chars().count();\n\
    \                        extension = Some(&key);\n                    }\n    \
    \            }\n            }\n        }\n        extension = extensions_map.get(&class_name);\n\
    \    }\n    extension.unwrap().iter().next().unwrap().iter().next().unwrap().to_string()",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut cap = extension.chars().filter(|c| c >= 'A'\
    \ && c <= 'Z').count();\n        let mut sm = extension.chars().filter(|c| c >=\
    \ 'a' && c <= 'z').count();\n        if cap > sm {\n            strength = cap\
    \ - sm;\n            extension = extension.clone();\n        }\n    }\n    extension.push_str(&class_name.to_string());\n\
    \    extension.push_str(&extensions[strength].to_string());\n    extension", " \
    \   let mut strength: i32 = 0;\n    let mut extension: String;\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm\n        };\n        if strength > 0 {\n            break;\n     \
    \   }\n    }\n    extension = extension.to_string();\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        for\
    \ c in extension.chars() {\n            extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n        }\n        extensions_map.insert(extension.chars().next().unwrap(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::new();\n    for extension in extensions_map.keys() {\n        let\
    \ mut extension_map = extensions_map.get(extension);\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            let mut extension_map\
    \ = extensions_map.get(extension);\n            let mut extension_map = extension_map.get(c.to_lowercase());\n\
    \            if extension_map.is_none() {\n                extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n                extension_map.insert(c.to_lowercase(), c.to_uppercase());\n\
    \            }\n            let mut extension_map = extension_map.get(c.to_uppercase());\n\
    \            if extension_map.is_none() {\n                extension_map.insert(c.to_lowercase(),\
    \ c.to_uppercase());\n                extension_map.insert(c.to_uppercase(), c.to_lowercase());\n\
    \            }\n            let mut extension_map = extension_map.get(c.to_lowercase());\n\
    \            if extension_map.is_none() {\n                extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n                extension_map.insert(c.to_lowercase(), c.to_uppercase());\n\
    \            }\n            let mut extension_map = extension_map.get(c.to_uppercase());\n\
    \            if extension_map.is_none() {\n                extension_map.insert(c.to_lowercase(),\
    \ c.to_uppercase());\n                extension_map.insert(c.to_uppercase(), c.to_lowercase());\n\
    \            }\n            let mut extension_map = extension_map.get(c.to_lowercase());\n\
    \            if extension_map.is_none() {\n                extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n                extension_map.insert(c.to_lowercase(), c.to_uppercase());\n\
    \            }\n            let mut extension_map = extension_map.get(c.to_uppercase());\n\
    \            if extension_map.is_none() {\n                extension_map.insert(c.to_lowercase(),\
    \ c.to_uppercase());\n                extension_map.insert(c.to_uppercase(), c.to_lowercase());\n\
    \            }\n            let mut extension_map = extension_map.get(c.to_lowercase());\n\
    \            if extension_map.is_none() {\n                extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n                extension_map.insert(c.to_lowercase(), c.to_uppercase());\n\
    \            }\n", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        for\
    \ c in extension.chars() {\n            extension_map.insert(c, 0);\n        }\n\
    \        extensions_map.insert(extension, extension_map);\n    }\n    let mut\
    \ strength = -1;\n    let mut best_extension = String::new();\n    for extension\
    \ in extensions_map.keys() {\n        let mut extension_map = extensions_map.get(extension);\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c, 0);\n        }\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c, extension_map.get(c) + 1);\n        }\n\
    \        if extension_map.len() > extension_strength {\n            extension_strength\
    \ = extension_map.len();\n            best_extension = extension;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, best_extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength = if\
    \ cap > sm {\n            cap - sm\n        } else {\n            sm\n       \
    \ };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e.to_lowercase() == extension).unwrap()].to_lowercase());\n    return extension",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                extension_map.insert(c.to_string(), 1);\n            } else\
    \ {\n                extension_map.insert(c.to_string(), -1);\n            }\n\
    \        }\n        if extension_map.len() > extension_strength {\n          \
    \  extension_strength = extension_map.len();\n        }\n        extensions_map.insert(extension.to_string(),\
    \ extension_strength);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::new();\n    for extension in extensions_map.keys() {\n        let\
    \ strength = extensions_map.get(extension).unwrap();\n        if strength > strength\
    \ {\n            best_extension = extension;\n            strength = strength;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, best_extension)", "    let\
    \ mut strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n \
    \       let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n       \
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.to_string()\
    \ + extension;\n        }\n    }\n    extension.to_string() + class_name.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut cap = String::new();\n        let mut sm =\
    \ String::new();\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap.push(c);\n            } else {\n                sm.push(c);\n\
    \            }\n        }\n        if cap.len() > sm.len() {\n            strength\
    \ = cap.len() - sm.len();\n            extension = extension.clone();\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    let mut extension_len = extension.len();\n\
    \    for extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             strength += 1;\n            }\n            if c.is_lowercase() {\n\
    \                strength -= 1;\n            }\n        }\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    extension.push_str(&class_name.to_string());\n\
    \    extension.push_str(&extensions[strength].to_string());\n    extension", " \
    \   let mut extensions_map = HashMap::new();\n    for extension in extensions\
    \ {\n        let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_ascii_lowercase(), 1);\n        }\n\
    \        extensions_map.insert(extension.clone(), extension_map);\n    }\n   \
    \ let mut max_extension_strength = -1;\n    let mut max_extension = String::new();\n\
    \    for (extension, extension_map) in extensions_map {\n        let strength\
    \ = extension_map.len() - extension.chars().filter(|c| c >= 'a' && c <= 'z').count()\
    \ - extension.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n        if strength\
    \ > max_extension_strength {\n            max_extension_strength = strength;\n\
    \            max_extension = extension.clone();\n        }\n    }\n    return\
    \ class_name + \".\" + max_extension;", "    let mut strength = -1;\n    let mut\
    \ extension = String::new();\n    for extension in extensions {\n        let mut\
    \ cap = extension.chars().filter(|c| c.is_uppercase()).count();\n        let mut\
    \ sm = extension.chars().filter(|c| c.is_lowercase()).count();\n        if cap\
    \ > sm {\n            strength = cap - sm;\n            extension = extension.to_lowercase();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n \
    \       }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut best_extension = String::new();\n\
    \    for extension in extensions_map.keys() {\n        let mut extension_map =\
    \ extensions_map.get(extension);\n        let mut extension_strength = -1;\n \
    \       for c in extension.chars() {\n            let mut extension_map = extensions_map.get(extension);\n\
    \            let mut extension_map = extension_map.get(c.to_lowercase());\n  \
    \          if extension_map.is_none() {\n                extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n                extension_strength = -1;\n            }\
    \ else {\n                let mut extension_map = extension_map.get(c.to_uppercase());\n\
    \                if extension_map.is_none() {\n                    extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n                    extension_strength = -1;\n         \
    \       } else {\n                    let mut extension_map = extension_map.get(c.to_lowercase());\n\
    \                    if extension_map.is_none() {\n                        extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n                        extension_strength = -1;\n     \
    \               } else {\n                        let mut extension_map = extension_map.get(c.to_uppercase());\n\
    \                        if extension_map.is_none() {\n                      \
    \      extension_map.insert(c.to_uppercase(), c.to_lowercase());\n           \
    \                 extension_strength = -1;\n                        } else {\n\
    \                            let mut extension_map = extension_map.get(c.to_lowercase());\n\
    \                            if extension_map.is_none() {\n                  \
    \              extension_map.insert(c.to_uppercase(), c.to_lowercase());\n   \
    \                             extension_strength = -1;\n                     \
    \       } else {\n                                let mut extension_map = extension_map.get(c.to_uppercase());\n\
    \                                if extension_map.is_none() {\n              \
    \                      extension_map.insert(c.to_uppercase(), c.to_lowercase());\n\
    \                                    extension_strength = -1;\n              \
    \                  } else {\n                                    let mut extension_map\
    \ = extension_map.get(c.to_lowercase());\n                                   \
    \ if extension_map.is_none() {\n                                        extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n                                        extension_strength\
    \ = -1;\n                                    } else {\n                      \
    \                  let mut extension_map = extension_map.get(c.to_uppercase());\n\
    \                                        if extension_map.is_none() {\n      \
    \                                      extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n                                            ", "    let\
    \ mut strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    extension.concat(class_name.to_string()\
    \ + \"_\").concat(extensions[extensions.iter().position(|e| e.contains(&extension)).unwrap()].to_string()\
    \ + \"_\").to_string()", "    let mut strength = -1;\n    let mut extension =\
    \ String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        \n        if cap > sm {\n            extension = e;\n            strength\
    \ = cap - sm;\n        }\n    }\n    \n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > strength {\n            extension\
    \ = e;\n            strength = strength;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut extensions_map = HashMap::new();\n   \
    \ for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension {\n            if let Some(key) = extension_map.entry(c)\
    \ {\n                key.push((extensions_map.entry(c).or_insert(0) as usize)\
    \ as usize);\n            } else {\n                extension_map.insert(c, 0);\n\
    \            }\n        }\n        extensions_map.insert(extension.chars().next().unwrap(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::new();\n    for extension in extensions_map.keys() {\n        let\
    \ mut extension_map = extensions_map.get(extension);\n        let mut extension_strength\
    \ = -1;\n        for c in extension {\n            if let Some(key) = extension_map.entry(c)\
    \ {\n                extension_strength = key.or_insert(0) as usize;\n       \
    \     }\n        }\n        if extension_strength > strength {\n            strength\
    \ = extension_strength;\n            best_extension = extension;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, best_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut extensions_count = extensions[0].chars().filter(|c|\
    \ c.is_uppercase()).count();\n    let mut extensions_count_lower = extensions[0].chars().filter(|c|\
    \ c.is_lowercase()).count();\n    for extension in extensions {\n        let extension_chars\
    \ = extension.chars().filter(|c| c.is_uppercase()).count();\n        let extension_chars_lower\
    \ = extension.chars().filter(|c| c.is_lowercase()).count();\n        if extension_chars\
    \ > extensions_count {\n            strongest_extension.push_str(extension);\n\
    \            extensions_count = extension_chars;\n        }\n        if extension_chars_lower\
    \ > extensions_count_lower {\n            strongest_extension.push_str(extension);\n\
    \            extensions_count_lower = extension_chars_lower;\n        }\n    }\n\
    \    strongest_extension.push_str(&class_name.to_string());\n    strongest_extension.push_str(&extensions[0].to_string());\n\
    \    strongest_extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > 0 {\n            extension\
    \ = e.to_string() + extension;\n        }\n    }\n    extension.to_string() +\
    \ class_name.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > strength {\n        \
    \    extension = e;\n            strength = strength;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strength = -1;\n    for extension in extensions {\n        let mut\
    \ cap = String::new();\n        let mut sm = String::new();\n        for c in\
    \ extension.chars() {\n            if c.is_uppercase() {\n                cap.push(c);\n\
    \            } else {\n                sm.push(c);\n            }\n        }\n\
    \        let cap_len = cap.chars().count();\n        let sm_len = sm.chars().count();\n\
    \        let cap_strength = cap_len - sm_len;\n        if cap_strength > strength\
    \ {\n            strongest_extension = extension;\n            strength = cap_strength;\n\
    \        }\n    }\n    strongest_extension.push_str(class_name);\n    strongest_extension.push_str(&extensions[extensions.len()\
    \ - 1]);\n    strongest_extension", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_map.insert(c.to_string(), extension_strength);\n     \
    \       }\n            extension_strength += 1;\n        }\n        extensions_map.insert(extension.clone(),\
    \ extension_map);\n    }\n    let mut extensions_strength = -1;\n    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        let mut extension_strength = -1;\n        for c in\
    \ extension.chars() {\n            if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_map.insert(c.to_string(), extension_strength);\n     \
    \       }\n            extension_strength += 1;\n        }\n        extensions_map.insert(extension.clone(),\
    \ extension_map);\n    }\n    let mut extensions_strength = -1;\n    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        let mut extension_strength = -1;\n        for c in\
    \ extension.chars() {\n            if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_map.insert(c.to_string(), extension_strength);\n     \
    \       }\n            extension_strength += 1;\n        }\n        extensions_map.insert(extension.clone(),\
    \ extension_map);\n    }\n    let mut extensions_strength = -1;\n    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        let mut extension_strength = -1;\n        for c in\
    \ extension.chars() {\n            if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_map.insert(c.to_string(), extension_strength);\n     \
    \       }\n            extension_strength += 1;\n        }\n        extensions_map.insert(extension.clone(),\
    \ extension_map);\n    }\n    let mut extensions_strength = -1;\n    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = ", "    let mut extensions_map = HashMap::new();\n    for extension in extensions\
    \ {\n        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                extension_map.insert(c.to_string(), extension_strength);\n\
    \            }\n            if c.is_lowercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            extension_strength += 1;\n\
    \        }\n        extensions_map.insert(extension.to_string(), extension_map);\n\
    \    }\n    let mut max_extension_strength = -1;\n    let mut max_extension =\
    \ String::new();\n    for extension in extensions_map.keys() {\n        let extension_map\
    \ = extensions_map.get(extension);\n        let mut extension_strength = -1;\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             extension_strength += extension_map.get(c.to_string());\n      \
    \      }\n            if c.is_lowercase() {\n                extension_strength\
    \ += extension_map.get(c.to_string());\n            }\n        }\n        if extension_strength\
    \ > max_extension_strength {\n            max_extension_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return max_extension.to_string()\
    \ + \".\" + max_extension_strength.to_string();", "    let mut strength = -1;\n\
    \    let mut extension = String::new();\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = if cap > sm {\n         \
    \   cap - sm\n        } else {\n            sm\n        };\n        if strength\
    \ > strength {\n            extension = e;\n            strength = strength;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.to_lowercase();\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        strength = if cap > sm {\n         \
    \   cap - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    let mut extension_len = extension.len();\n    let mut class_len = class_name.len();\n\
    \    \n    while extension_len > 0 {\n        let mut i = 0;\n        while i\
    \ < extension_len {\n            if extension[i] == class_name[i] {\n        \
    \        i += 1;\n            } else {\n                break;\n            }\n\
    \        }\n        \n        if i == extension_len {\n            extension =\
    \ extension.clone();\n            extension_len = 0;\n        } else {\n     \
    \       extension = extension.clone() + class_name[i];\n            extension_len\
    \ = extension_len - 1;\n        }\n    }\n    \n    if strength == -1 {\n    \
    \    return extension;\n    }\n    \n    let mut i = 0;\n    while i < extension_len\
    \ {\n        if extension[i] == class_name[i] {\n            i += 1;\n       \
    \ } else {\n            break;\n        }\n    }\n    \n    if i == extension_len\
    \ {\n        return extension;\n    }\n    \n    let mut strength_counter = strength;\n\
    \    while i < extension_len {\n        if extension[i] == class_name[i] {\n \
    \           i += 1;\n        } else {\n            break;\n        }\n    }\n\
    \    \n    if i == extension_len {\n        return extension;\n    }\n    \n \
    \   while i < extension_len {\n        if extension[i] == class_name[i] {\n  \
    \          i += 1;\n        } else {\n            break;\n        }\n    }\n \
    \   \n    if i == extension_len {\n        return extension;\n    }\n    \n  \
    \  while i < extension_len {\n        if extension[i] == class_name[i] {\n   \
    \         i += 1;\n        } else {\n            break;\n        }\n    }\n  \
    \  \n    if i == extension_len {\n        return extension;\n    }\n    \n   \
    \ while i < extension_len {\n        if extension[i] == class_name[i] {\n    \
    \        i += 1;\n        } else {\n            break;\n        }\n    }\n   \
    \ \n    if i == extension_len {\n        return extension;\n    }\n    \n    while\
    \ i < extension_len {\n        if extension[i] == class_name[i] {\n          \
    \  i += 1;\n        } else {\n            break;\n        }\n    }\n    \n   \
    \ if i == extension_len {\n        return extension;\n    }\n    \n    while i\
    \ < extension_len {\n        if extension[i] == class_name[i] {\n            i\
    \ += 1;\n        } else {\n            break;\n        }\n    }\n    \n    if\
    \ i == extension_len {\n        return extension;\n    }\n    \n    while i <\
    \ extension_len {\n        if extension[i] == class_name[i] {\n            i +=\
    \ 1;\n        } else {\n            break;\n        }\n    }\n    \n    if i ==\
    \ extension_len {\n        return extension;\n    }\n    \n    while i < extension_len\
    \ {\n        if extension[i] == class_name[i] {\n            i += 1;\n       \
    \ } else {\n            break;\n        }\n    }\n    \n    if i == extension_len\
    \ {\n", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let mut cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut sm = e.chars().filter(|c| c.is_lowercase()).count();\n      \
    \  if cap > sm {\n            cap = cap - sm;\n            sm = sm;\n        }\n\
    \        extension += &format!(\"{}.{}\", class_name, e);\n        if strength\
    \ == -1 || cap > strength {\n            strength = cap;\n            extension\
    \ = extension.clone();\n        }\n    }\n    extension", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength = if\
    \ cap > sm {\n            cap - sm\n        } else {\n            sm\n       \
    \ };\n        extension = extension.concat(e);\n    }\n    extension.concat(class_name.to_string()\
    \ + \".\").concat(extensions[extensions.iter().min_by_key(|&x| x.cmp(&strength)).unwrap()])",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            cap = cap - sm;\n            sm = 0;\n   \
    \     }\n        strength = if strength == -1 || cap > strength {\n          \
    \  cap\n        } else {\n            strength\n        };\n    }\n    extension.to_string()\
    \ + class_name.to_string() + extensions[extensions.len() - 1].to_string() + &extensions[extensions.len()\
    \ - 1][..strength]", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c >= 'A' &&\
    \ c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        if strength > 0 {\n            extension\
    \ = e.to_string();\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut i = 0;\n\
    \        while i < class_name.len() {\n            if class_name[i] == extension[i]\
    \ {\n                i += 1;\n            } else {\n                break;\n \
    \           }\n        }\n        if i == class_name.len() {\n            strength\
    \ = -1;\n        } else {\n            strength = class_name.chars().filter(|c|\
    \ c.is_uppercase().unwrap()).count() - extension.chars().filter(|c| c.is_lowercase().unwrap()).count();\n\
    \        }\n    }\n    if strength == -1 {\n        return class_name;\n    }\n\
    \    let mut i = 0;\n    while i < class_name.len() {\n        if class_name[i]\
    \ == extension[i] {\n            i += 1;\n        } else {\n            break;\n\
    \        }\n    }\n    if i == class_name.len() {\n        return class_name;\n\
    \    }\n    let mut strength_str = String::new();\n    let mut extension_str =\
    \ String::new();\n    let mut i = 0;\n    while i < class_name.len() {\n     \
    \   if class_name[i] == extension[i] {\n            i += 1;\n        } else {\n\
    \            break;\n        }\n    }\n    if i == class_name.len() {\n      \
    \  strength_str = &class_name;\n    } else {\n        strength_str = &class_name.chars().filter(|c|\
    \ c.is_uppercase().unwrap()).count() - extension.chars().filter(|c| c.is_lowercase().unwrap()).count();\n\
    \    }\n    extension_str = &extension;\n    strength_str.chars().filter(|c| c.is_lowercase().unwrap()).count().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string().to_string",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                extension_map.insert(c.to_string(), 1);\n            } else\
    \ {\n                extension_map.insert(c.to_string(), 0);\n            }\n\
    \            extension_strength += extension_map.get(&c.to_string()).unwrap();\n\
    \        }\n        extensions_map.insert(extension.to_string(), extension_strength);\n\
    \    }\n    let mut max_strength = -1;\n    let mut max_extension = String::new();\n\
    \    for extension in extensions_map.keys() {\n        if extensions_map.get(&extension).unwrap()\
    \ > max_strength {\n            max_strength = extensions_map.get(&extension).unwrap();\n\
    \            max_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, max_extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut cap =\
    \ class_name.chars().filter(|c| c.is_uppercase()).count();\n        let mut sm\
    \ = class_name.chars().filter(|c| c.is_lowercase()).count();\n        if cap >\
    \ sm {\n            cap = cap - sm;\n            sm = sm;\n        }\n       \
    \ strength = if cap > strength {\n            cap\n        } else {\n        \
    \    strength\n        };\n    }\n    extension.to_string() + \".\" + extensions[extensions.len()\
    \ - strength].to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        strength = if cap > sm {\n            cap - sm\n\
    \        } else {\n            sm - cap\n        };\n        extension = extension.concat(e);\n\
    \    }\n    extension.concat(\".\").concat(class_name.to_lowercase()).concat(\"\
    .\").concat(extensions[extensions.iter().position(|e| e == extension).unwrap()].to_lowercase());",
  "    let mut strongest_extension = String::new();\n    let mut extensions_count\
    \ = extensions.size();\n    let mut class_count = class_name.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n    let mut strength = -1;\n    let mut i =\
    \ 0;\n    while i < class_count {\n        let mut j = 0;\n        while j < extensions_count\
    \ {\n            let mut k = i;\n            while k >= 0 && class_count[k] >=\
    \ class_count[j] {\n                k -= 1;\n            }\n            if k ==\
    \ i {\n                let mut strength_diff = extensions[j].chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count() - class_count[j];\n                if strength_diff\
    \ > strength {\n                    strength = strength_diff;\n              \
    \      strongest_extension = extensions[j];\n                }\n            }\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    strongest_extension",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm\n        };\n        if strength > 0 {\n            break;\n     \
    \   }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut extension_length = extension.len();\n        let mut class_length\
    \ = class_name.len();\n        while extension_length >= class_length {\n    \
    \        extension = extension.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \            extension_length -= class_length;\n            class_length -= extension_length;\n\
    \        }\n        let mut class_length = extension.len();\n        while class_length\
    \ >= extension_length {\n            extension = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').collect::<String>();\n            class_length -= extension_length;\n\
    \            extension_length -= class_length;\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       extension = extension.chars().filter(|c| c >= '0' && c <= '9').collect::<String>();\n\
    \            class_length -= extension_length;\n            extension_length -=\
    \ class_length;\n        }\n        let mut class_length = extension.len();\n\
    \        while class_length >= extension_length {\n            extension = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').collect::<String>();\n            class_length -= extension_length;\n\
    \            extension_length -= class_length;\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       extension = extension.chars().filter(|c| c >= 'a' && c <= 'z').collect::<String>();\n\
    \            class_length -= extension_length;\n            extension_length -=\
    \ class_length;\n        }\n        let mut class_length = extension.len();\n\
    \        while class_length >= extension_length {\n            extension = extension.chars().filter(|c|\
    \ c >= '0' && c <= '9').collect::<String>();\n            class_length -= extension_length;\n\
    \            extension_length -= class_length;\n        }\n        let mut class_length\
    \ = extension.len();\n        while class_length >= extension_length {\n     \
    \       extension = extension.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \            class_length -= extension_length;\n            extension_length -=\
    \ class_length;\n        }\n        let mut class_length = extension.len();\n\
    \        while class_length >= extension_length {\n            extension = extension.chars().filter(|c| ",
  "    let mut strongest_extension: Vec<String> = Vec::new();\n    let mut extensions_count\
    \ = extensions.len();\n    let mut class_count = class_name.len();\n    let mut\
    \ strength = -1;\n    let mut i = 0;\n    while i < extensions_count {\n     \
    \   let mut j = 0;\n        while j < class_count {\n            if class_name[j]\
    \ == extensions[i][0] {\n                strength = extensions[i].len() - extensions[i].chars().filter(|&x|\
    \ x == x).count();\n                strongest_extension.push(extensions[i]);\n\
    \                i += 1;\n                break;\n            }\n            j\
    \ += 1\n        }\n    }\n    strongest_extension.sort();\n    strongest_extension.iter().next().unwrap()",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    extension.push_str(&class_name.to_string());\n    extension.push_str(&extensions[strength].to_string());\n\
    \    extension", "    let mut strongest_extension = String::new();\n    let mut\
    \ strongest_extension_strength = -1;\n    let mut extensions_count = extensions.length;\n\
    \    let mut extensions_strength = -1;\n    let mut extensions_name = \"\";\n\
    \    let mut extensions_name_strength = -1;\n    let mut extensions_name_count\
    \ = 1;\n    let mut extensions_name_strength_sum = 0;\n    let mut extensions_name_strength_product\
    \ = 1;\n    let mut extensions_name_strength_product2 = 0;\n    let mut extensions_name_strength_product3\
    \ = 0;\n    let mut extensions_name_strength_product4 = 0;\n    let mut extensions_name_strength_product5\
    \ = 0;\n    let mut extensions_name_strength_product6 = 0;\n    let mut extensions_name_strength_product7\
    \ = 0;\n    let mut extensions_name_strength_product8 = 0;\n    let mut extensions_name_strength_product9\
    \ = 0;\n    let mut extensions_name_strength_product10 = 0;\n    let mut extensions_name_strength_product11\
    \ = 0;\n    let mut extensions_name_strength_product12 = 0;\n    let mut extensions_name_strength_product13\
    \ = 0;\n    let mut extensions_name_strength_product14 = 0;\n    let mut extensions_name_strength_product15\
    \ = 0;\n    let mut extensions_name_strength_product16 = 0;\n    let mut extensions_name_strength_product17\
    \ = 0;\n    let mut extensions_name_strength_product18 = 0;\n    let mut extensions_name_strength_product19\
    \ = 0;\n    let mut extensions_name_strength_product20 = 0;\n    let mut extensions_name_strength_product21\
    \ = 0;\n    let mut extensions_name_strength_product22 = 0;\n    let mut extensions_name_strength_product23\
    \ = 0;\n    let mut extensions_name_strength_product24 = 0;\n    let mut extensions_name_strength_product25\
    \ = 0;\n    let mut extensions_name_strength_product26 = 0;\n    let mut extensions_name_strength_product27\
    \ = 0;\n    let mut extensions_name_strength_product28 = 0;\n    let mut extensions_name_strength_product29\
    \ = 0;\n    let mut extensions_name_strength_product30 = 0;\n    let mut extensions_name_strength_product31\
    \ = 0;\n    let mut extensions_name_strength_product32 = 0;\n    let mut extensions_name_strength_product33\
    \ = 0;\n    let mut extensions_name_strength_product34 = 0;\n    let mut extensions_name_strength_product35\
    \ = 0;\n    let mut extensions_name_strength_product36 = 0;\n    let mut extension",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(c) {\n                extension_map.insert(c, strength +\
    \ 1);\n            } else {\n                extension_map.insert(c, 1);\n   \
    \         }\n            if strength > extension_strength {\n                extension_strength\
    \ = strength;\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for (extension, strength) in extensions_map {\n      \
    \  if strength > strength {\n            strength = strength;\n            extension\
    \ = extension;\n        }\n    }\n    extension.push_str(class_name);\n    extension.push_str(&extension);\n\
    \    extension", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    let mut extension_counter = 0;\n    for extension in extensions {\n     \
    \   let mut extension_counter = 0;\n        for c in extension.chars() {\n   \
    \         if c.is_uppercase() {\n                extension_counter += 1;\n   \
    \         }\n            if c.is_lowercase() {\n                extension_counter\
    \ += 1;\n            }\n        }\n        if extension_counter > strength {\n\
    \            strength = extension_counter;\n            extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n \
    \       }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extension = extensions_map.get(&class_name).unwrap();\n\
    \    for (_, value) in extension {\n        if strength < value.len() as i32 {\n\
    \            strength = value.len() as i32;\n            extension = value;\n\
    \        }\n    }\n    extension.iter().next().unwrap().to_string()", "    let\
    \ mut strength: i32 = 0;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n      \
    \  strength += cap - sm;\n        extension = extension.concat(e);\n    }\n  \
    \  if strength == 0 {\n        extension = extension.concat(\"Extension\");\n\
    \    }\n    extension.concat(\".\").concat(class_name.to_lowercase());\n    extension",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut cap = String::new();\n        let mut sm =\
    \ String::new();\n        for c in extension {\n            if c.is_uppercase()\
    \ {\n                cap.push(c);\n            } else {\n                sm.push(c);\n\
    \            }\n        }\n        let cap_len = cap.chars().count();\n      \
    \  let sm_len = sm.chars().count();\n        strength = if cap_len > sm_len {\
    \ cap_len - sm_len } else { sm_len - cap_len };\n    }\n    extension.to_string()\
    \ + class_name.to_string() + extensions[strength].to_string()", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    extension.to_string() + class_name.to_string() + \".\"\
    \ + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    extension.to_string() + class_name.to_string() + extensions[extensions.len()\
    \ - 1].to_string()", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        for\
    \ c in extension.chars() {\n            extension_map.insert(c.to_ascii_lowercase(),\
    \ 1);\n        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extension = String::new();\n \
    \   let mut extension_map = extensions_map.get(&class_name);\n    while extension_map.is_some()\
    \ {\n        let mut extension_map = extension_map.unwrap();\n        let mut\
    \ extension_strength = -1;\n        for (key, value) in extension_map {\n    \
    \        if value > extension_strength {\n                extension_strength =\
    \ value;\n                extension = key;\n            }\n        }\n       \
    \ extension_map.remove(&extension);\n        strength = extension_strength;\n\
    \    }\n    extension", "    let mut strength: i64 = 0;\n    let mut extension:\
    \ Option<String> = None;\n    for extension in extensions.iter() {\n        let\
    \ cap = extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = extension.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n    }\n    if strength == 0 {\n        return class_name;\n  \
    \  }\n    let mut extensions = extensions.iter().cloned().collect::<Vec<_>>();\n\
    \    extensions.sort();\n    let mut strength_extension = Vec::new();\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength_extension.push(extension);\n      \
    \  }\n    }\n    if strength_extension.len() == 0 {\n        return class_name;\n\
    \    }\n    let mut extension = strength_extension.iter().cloned().collect::<Vec<_>>();\n\
    \    extension.sort();\n    let mut strength_extension = Vec::new();\n    for\
    \ extension in extension {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength_extension.push(extension);\n      \
    \  }\n    }\n    if strength_extension.len() == 0 {\n        return class_name;\n\
    \    }\n    let mut extension = strength_extension.iter().cloned().collect::<Vec<_>>();\n\
    \    extension.sort();\n    let mut strength_extension = Vec::new();\n    for\
    \ extension in extension {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength_extension.push(extension);\n      \
    \  }\n    }\n    if strength_extension.len() == 0 {\n        return class_name;\n\
    \    }\n    let mut extension = strength_extension.iter().cloned().collect::<Vec<_>>();\n\
    \    extension.sort();\n    let mut strength_extension = Vec::new();\n    for\
    \ extension in extension {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if ", "    let mut strongest_extension = String::new();\n    let mut strength\
    \ = -1;\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            strongest_extension.push_str(extension);\n\
    \        }\n    }\n    if strength == 0 {\n        strongest_extension.push_str(class_name);\n\
    \    }\n    strongest_extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strongest_extension = String::new();\n    let mut strength = -1;\n\
    \    let mut i = 0;\n    while i < extensions.len() {\n        let extension =\
    \ extensions[i];\n        let mut j = 0;\n        while j < class_name.len() {\n\
    \            let c = class_name[j];\n            if c.is_uppercase() && extension[j].is_lowercase()\
    \ {\n                strength = strength.saturating_add((c.to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_lowercase().unwrap().to_ascii_uppercase().unwrap().to_ascii_",
  "    let mut strength: i32 = -1;\n    let mut extension = String::new();\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    let mut\
    \ extension_len = extension.len();\n    let mut i = 0;\n    for extension in extensions\
    \ {\n        let mut extension_len = extension.len();\n        let mut j = 0;\n\
    \        while i < extension_len {\n            if extension[i] == class_name[j]\
    \ {\n                i += 1;\n                j += 1;\n            } else {\n\
    \                break;\n            }\n        }\n        if j > strength {\n\
    \            strength = j;\n            extension = extension.clone();\n     \
    \   }\n    }\n    if strength == 0 {\n        extension = extension.clone();\n\
    \    }\n    extension", "    let mut strongest_extension = String::new();\n  \
    \  let mut extensions_count = extensions.length;\n    let mut class_count = class_name.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n    let mut class_strength = -1;\n    let mut\
    \ extension_strength = -1;\n    let mut extension_strength_counter = vec![0; extensions.len()];\n\
    \    let mut extensions_counter = vec![0; extensions.len()];\n    let mut extensions_counter_max\
    \ = vec![0; extensions.len()];\n    let mut extensions_counter_max_index = -1;\n\
    \    let mut extensions_counter_max_value = -1;\n    let mut extensions_counter_max_counter\
    \ = vec![0; extensions.len()];\n    let mut extensions_counter_max_counter_index\
    \ = -1;\n    let mut extensions_counter_max_counter_value = -1;\n    let mut extensions_counter_max_counter_value_index\
    \ = -1;\n    let mut extensions_counter_max_counter_value_value = -1;\n    let\
    \ mut extensions_counter_max_counter_value_value_index = -1;\n    let mut extensions_counter_max_counter_value_value_value\
    \ = -1;\n    let mut extensions_counter_max_counter_value_value_value_index =\
    \ -1;\n    let mut extensions_counter_max_counter_value_value_value_value = -1;\n\
    \    let mut extensions_counter_max_counter_value_value_value_index = -1;\n  \
    \  let mut extensions_counter_max_counter_value_value_value_value = -1;\n    let\
    \ mut extensions_counter_max_counter_value_value_value_index = -1;\n    let mut\
    \ extensions_counter_max_counter_value_value_value_value = -1;\n    let mut extensions_counter_max_counter_value_value_value_index\
    \ = -1;\n    let mut extensions_counter_max_counter_value_value_value_value =\
    \ -1;\n    let mut extensions_counter_max_counter_value_value_value_index = -1;\n\
    \    let mut extensions_counter_max_counter_value_value_value_value = -1;\n  \
    \  let mut extensions_counter_max_counter_value_value_value_index = -1;\n    let\
    \ mut extensions_counter_max_counter_value_value_value_value = -1;\n    let mut\
    \ extensions_counter_max_counter_value_value_value_index = -1;\n    let mut extensions_counter_max_counter_value_value_value_value\
    \ = -1;\n    let mut extensions_counter_max_counter_value_value_value_index =\
    \ -1;\n    let mut extensions_counter_max_counter_value_value_value_value = -1;\n\
    \    let mut extensions_counter_max_counter_value_value_value_index = -1;\n  \
    \  let mut extensions_counter_max_counter_value_value_value_value = -1;\n    let\
    \ mut extensions_counter_max_counter_value_value_value_index = -1;\n    let mut\
    \ extensions_counter_max_counter_value_value_value_value = -1;\n    let mut extensions_counter_max_counter_value_value_value_index\
    \ = -1;\n    let ", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm\n        };\n    }\n    extension.push_str(&class_name.to_string());\n\
    \    extension.push_str(&extensions[strength].to_string());\n    extension", " \
    \   let mut strongest_extension = String::new();\n    let mut strength = -1;\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            strongest_extension.push_str(&extension);\n\
    \        }\n    }\n    if strength == 0 {\n        return class_name;\n    }\n\
    \    if strength == 1 {\n        return strongest_extension;\n    }\n    if strength\
    \ > 1 {\n        let mut index = extensions.index(|x| x.to_lowercase() == strongest_extension.to_lowercase());\n\
    \        if index == 0 {\n            index = extensions.index(|x| x.to_lowercase()\
    \ == class_name.to_lowercase());\n        }\n        if index == 0 {\n       \
    \     index = extensions.index(|x| x.to_lowercase() == class_name.to_lowercase().to_lowercase());\n\
    \        }\n        if index == 0 {\n            index = extensions.index(|x|\
    \ x.to_lowercase() == class_name.to_lowercase().to_lowercase().to_lowercase());\n\
    \        }\n        if index == 0 {\n            index = extensions.index(|x|\
    \ x.to_lowercase() == class_name.to_lowercase().to_lowercase().to_lowercase().to_lowercase());\n\
    \        }\n        if index == 0 {\n            index = extensions.index(|x|\
    \ x.to_lowercase() == class_name.to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase());\n\
    \        }\n        if index == 0 {\n            index = extensions.index(|x|\
    \ x.to_lowercase() == class_name.to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase());\n\
    \        }\n        if index == 0 {\n            index = extensions.index(|x|\
    \ x.to_lowercase() == class_name.to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase());\n\
    \        }\n        if index == 0 {\n            index = extensions.index(|x|\
    \ x.to_lowercase() == class_name.to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase());\n\
    \        }\n        if index == 0 {\n            index = extensions.index(|x|\
    \ x.to_lowercase() == class_name.to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase());\n\
    \        }\n        if index == 0 {\n            index = extensions.index(|x|\
    \ x.to_lowercase() == class_name.to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_lowercase().to_",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let mut c = e.chars().filter(|c| *c >= 'A' && *c <= 'Z').count();\n\
    \        let mut s = e.chars().filter(|c| *c >= 'a' && *c <= 'z').count();\n \
    \       if c > s {\n            strength = -1;\n            extension = e;\n \
    \       } else if c < s {\n            strength = s;\n            extension =\
    \ e;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let\
    \ mut strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name.to_string();\n    \
    \    let mut extension = extension.to_string();\n        let mut cap = class_name.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let mut sm = class_name.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = cap - sm;\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    extension.to_string().to_string()\
    \ + extensions[extensions.len() - 1].to_string()", "    let mut strongest_extension:\
    \ String = String::new();\n    let mut strongest_extension_strength: i32 = -1;\n\
    \    for extension in extensions {\n        let mut extension_strength: i32 =\
    \ -1;\n        let mut extension_class_name: String = String::new();\n       \
    \ let mut extension_class_name_strength: i32 = -1;\n        let mut extension_class_name_length:\
    \ i32 = -1;\n        let mut extension_class_name_char: i32 = -1;\n        let\
    \ mut extension_class_name_char_strength: i32 = -1;\n        let mut extension_class_name_char_length:\
    \ i32 = -1;\n        let mut extension_class_name_char_char: i32 = -1;\n     \
    \   let mut extension_class_name_char_char_strength: i32 = -1;\n        let mut\
    \ extension_class_name_char_char_length: i32 = -1;\n        let mut extension_class_name_char_char_char:\
    \ i32 = -1;\n        let mut extension_class_name_char_char_char_strength: i32\
    \ = -1;\n        let mut extension_class_name_char_char_char_length: i32 = -1;\n\
    \        let mut extension_class_name_char_char_char_char: i32 = -1;\n       \
    \ let mut extension_class_name_char_char_char_char_strength: i32 = -1;\n     \
    \   let mut extension_class_name_char_char_char_char_length: i32 = -1;\n     \
    \   let mut extension_class_name_char_char_char_char_char: i32 = -1;\n       \
    \ let mut extension_class_name_char_char_char_char_char_strength: i32 = -1;\n\
    \        let mut extension_class_name_char_char_char_char_char_length: i32 = -1;\n\
    \        let mut extension_class_name_char_char_char_char_char_char: i32 = -1;\n\
    \        let mut extension_class_name_char_char_char_char_char_char_strength:\
    \ i32 = -1;\n        let mut extension_class_name_char_char_char_char_char_char_length:\
    \ i32 = -1;\n        let mut extension_class_name_char_char_char_char_char_char_char:\
    \ i32 = -1;\n        let mut extension_class_name_char_char_char_char_char_char_char_strength:\
    \ i32 = -1;\n        let mut extension_class_name_char_char_char_char_char_char_char_length:\
    \ i32 = -1;\n        let mut extension_class_name_char_char_char_char_char_char_char_char:\
    \ i32 = -1;\n        let mut extension_class_name_char_char_char_char_char_char_char_char_strength:\
    \ i32 = -1;\n        let mut extension_class_name_char_char_char_char_char_char_char_char_length:\
    \ i32 = -1;\n        let mut extension_class_name_char_char_char_char_char_char_char_char_char",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let mut c = e.chars().filter(|c| *c >= 'A' && *c <= 'Z').count();\n\
    \        let mut s = e.chars().filter(|c| *c >= 'a' && *c <= 'z').count();\n \
    \       if c > s {\n            strength = -1;\n            extension = e.to_string();\n\
    \        } else {\n            strength = c as i32 - s as i32;\n            extension\
    \ = e.to_string();\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut i = 0;\n        while i < class_name.len() {\n\
    \            if class_name.chars().all(|c| c.is_uppercase() && c != extension.chars().nth(i).unwrap())\
    \ {\n                class_name = &class_name[..i];\n                break;\n\
    \            }\n            i += 1;\n        }\n        if class_name.len() ==\
    \ 0 {\n            return extension;\n        }\n        let mut i = 0;\n    \
    \    while i < extension.len() {\n            if extension.chars().all(|c| c.is_lowercase()\
    \ && c != class_name.chars().nth(i).unwrap()) {\n                extension = &extension[..i];\n\
    \                break;\n            }\n            i += 1;\n        }\n     \
    \   if extension.len() == 0 {\n            return extension;\n        }\n    \
    \    if strength == -1 || strength > extension.chars().count() - class_name.chars().count()\
    \ {\n            strength = extension.chars().count() - class_name.chars().count();\n\
    \            extension = class_name;\n        }\n    }\n    return extension;",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension {\n\
    \            if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ -1);\n            } else {\n                extension_map.insert(c.to_string(),\
    \ 0);\n            }\n        }\n        extensions_map.insert(extension.to_string(),\
    \ extension_map);\n    }\n    let mut max_strength = -1;\n    let mut max_extension\
    \ = String::new();\n    for (extension, extension_map) in extensions_map {\n \
    \       let strength = extension_map.iter().filter(|(_, v)| v == -1).count();\n\
    \        if strength > max_strength {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, max_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strength = -1;\n    for extension in extensions {\n        let cap\
    \ = extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm =\
    \ extension.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = cap - sm;\n        if strength > 0 {\n            strongest_extension.push_str(&extension);\n\
    \        }\n    }\n    if strength == 0 {\n        strongest_extension.push_str(&class_name);\n\
    \    }\n    strongest_extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut cap =\
    \ class_name.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n        let mut\
    \ sm = class_name.chars().filter(|c| c >= 'a' && c <= 'z').count();\n        if\
    \ cap > sm {\n            cap = cap - sm;\n            sm = sm;\n        }\n \
    \       strength = if cap > sm {\n            cap - sm\n        } else {\n   \
    \         sm\n        };\n        if strength > 0 {\n            break;\n    \
    \    }\n    }\n    if strength == -1 {\n        extension = extension.clone();\n\
    \    }\n    class_name + \".\" + extension", "    let mut strength: i32 = 0;\n\
    \    let mut extension = String::new();\n    let mut extension_counter: i32 =\
    \ 0;\n    for extension in extensions {\n        let mut extension_counter: i32\
    \ = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                strength += 1;\n            } else if c.is_lowercase() {\n\
    \                strength += 2;\n            }\n            extension_counter\
    \ += 1;\n        }\n        if extension_counter > strength {\n            extension\
    \ = extension;\n            strength = extension_counter;\n        }\n    }\n\
    \    extension.push_str(&class_name.to_string());\n    extension.push_str(&extensions[strength].to_string());\n\
    \    extension", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        for\
    \ c in extension {\n            match extension_map.entry(c) {\n             \
    \   Occupied::Occupied(mut e) => {\n                    e.insert(1);\n       \
    \         }\n                Occupied::Vacant(e) => {\n                    e.insert(1);\n\
    \                }\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut extensions_iter\
    \ = extensions_map.iter().rev();\n    for extension in extensions_iter {\n   \
    \     let mut extension_map = extension.value.clone();\n        let mut extension_map_iter\
    \ = extension_map.iter().rev();\n        for c in extension_map_iter {\n     \
    \       if let Occupied::Occupied(e) = extension_map.entry(c) {\n            \
    \    let mut e = e.get_mut();\n                e.insert(strength);\n         \
    \   }\n        }\n        if strength == -1 {\n            strength = extension_map.len();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extensions_map.iter().next().unwrap().keys().next().unwrap())",
  "    let mut strongest_extension = String::new();\n    let mut extensions_count\
    \ = extensions.length;\n    let mut extensions_cap = extensions_count;\n    let\
    \ mut extensions_sm = extensions_count;\n    let mut extensions_strength = -1;\n\
    \    let mut extensions_index = -1;\n    let mut extensions_name = String::new();\n\
    \    let mut extensions_name_len = extensions_name.length;\n    let mut extensions_name_strength\
    \ = -1;\n    let mut extensions_name_strength_len = extensions_name_strength.length;\n\
    \    let mut extensions_name_strength_pos = 0;\n    let mut extensions_name_strength_pos_len\
    \ = extensions_name_strength_pos.length;\n    let mut extensions_name_strength_pos_pos\
    \ = 0;\n    let mut extensions_name_strength_pos_pos_len = extensions_name_strength_pos_pos.length;\n\
    \    let mut extensions_name_strength_pos_pos_pos = 0;\n    let mut extensions_name_strength_pos_pos_pos_len\
    \ = extensions_name_strength_pos_pos_pos.length;\n    let mut extensions_name_strength_pos_pos_pos_pos\
    \ = 0;\n    let mut extensions_name_strength_pos_pos_pos_pos_len = extensions_name_strength_pos_pos_pos_pos.length;\n\
    \    let mut extensions_name_strength_pos_pos_pos_pos_pos = 0;\n    let mut extensions_name_strength_pos_pos_pos_pos_pos_len\
    \ = extensions_name_strength_pos_pos_pos_pos_pos.length;\n    let mut extensions_name_strength_pos_pos_pos_pos_pos_pos\
    \ = 0;\n    let mut extensions_name_strength_pos_pos_pos_pos_pos_pos_len = extensions_name_strength_pos_pos_pos_pos_pos_pos_pos.length;\n\
    \    let mut extensions_name_strength_pos_pos_pos_pos_pos_pos_pos_len = extensions_name_strength_pos_pos_pos_pos_pos_pos_pos_pos.length;\n\
    \    let mut extensions_name_strength_pos_pos_pos_pos_pos_pos_pos_pos_len = extensions_name_strength_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos.length;\n\
    \    let mut extensions_name_strength_pos_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = extensions_name_strength_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos.length;\n\
    \    let mut extensions_name_strength_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = extensions_name_strength_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos.length;\n\
    \    let mut extensions_name_strength_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = extensions_name_strength_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos.length;\n\
    \    let ", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm { cap - sm } else { sm - cap };\n        if strength > 0 {\n \
    \           extension = e.to_string() + extension;\n        }\n    }\n    extension.split_whitespace().last().unwrap()\
    \ + class_name + extension", "    let mut extensions_map = HashMap::new();\n \
    \   for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            extension_map.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n        }\n        extensions_map.insert(extension.clone(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::new();\n    for (extension, extension_map) in extensions_map.iter()\
    \ {\n        let mut extension_strength = -1;\n        for (key, value) in extension_map.iter()\
    \ {\n            if key == class_name.to_uppercase() {\n                extension_strength\
    \ = value.len() - class_name.to_lowercase().len();\n            }\n        }\n\
    \        if extension_strength > strength {\n            strength = extension_strength;\n\
    \            best_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, best_extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm\n        };\n        extension = extension.concat(e);\n    }\n \
    \   extension.concat(\".\").concat(class_name.to_lowercase());\n    extension.concat(\"\
    .\").concat(format!(\"{}\", strength));\n    return extension;", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut class_name = String::new();\n        class_name.push_str(&class_name[..]);\n\
    \        class_name.push_str(&extension[..]);\n        let mut class_name = String::new();\n\
    \        class_name.push_str(&class_name[..]);\n        class_name.push_str(&extension[..]);\n\
    \        let mut class_name = String::new();\n        class_name.push_str(&class_name[..]);\n\
    \        class_name.push_str(&extension[..]);\n        let mut class_name = String::new();\n\
    \        class_name.push_str(&class_name[..]);\n        class_name.push_str(&extension[..]);\n\
    \        let mut class_name = String::new();\n        class_name.push_str(&class_name[..]);\n\
    \        class_name.push_str(&extension[..]);\n        let mut class_name = String::new();\n\
    \        class_name.push_str(&class_name[..]);\n        class_name.push_str(&extension[..]);\n\
    \        let mut class_name = String::new();\n        class_name.push_str(&class_name[..]);\n\
    \        class_name.push_str(&extension[..]);\n        let mut class_name = String::new();\n\
    \        class_name.push_str(&class_name[..]);\n        class_name.push_str(&extension[..]);\n\
    \        let mut class_name = String::new();\n        class_name.push_str(&class_name[..]);\n\
    \        class_name.push_str(&extension[..]);\n        let mut class_name = String::new();\n\
    \        class_name.push_str(&class_name[..]);\n        class_name.push_str(&extension[..]);\n\
    \        let mut class_name = String::new();\n        class_name.push_str(&class_name[..]);\n\
    \        class_name.push_str(&extension[..]);\n        let mut class_name = String::new();\n\
    \        class_name.push_str(&class_name[..]);\n        class_name.push_str(&extension[..]);\n\
    \        let mut class_name = String::new();\n        class_name.push_str(&class_name[..]);\n\
    \        class_name.push_str(&extension[..]);\n        let mut class_name = String::new();\n\
    \        class_name.push_str(&class_name[..]);\n        class_name.push_str(&extension[..]);\n\
    \        let mut class_name = String::new();\n        class_name.push_str(&class_name[..]);\n\
    \        class_name.push_str(&extension[..]);\n        let mut class_name = String::new();\n\
    \        class_name.push_str(&class_name[..]);\n        class_name.push_str(&extension[..]);\n\
    \        let mut class_name = String::new();", "    let mut strength = -1;\n \
    \   let mut extension = String::new();\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = cap - sm;\n        if strength\
    \ > 0 {\n            extension = e.to_string();\n            break;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)"]
stop_tokens:
- "\n}"
