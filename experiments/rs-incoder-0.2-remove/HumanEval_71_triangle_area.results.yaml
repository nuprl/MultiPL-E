language: rs
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n    }\n\
    \    if b + c > a {\n        return -1.0\n    }\n    let area = (a * b + c * a\
    \ - b * c) / (2.0 * a)\n    return area.round()\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmplm_5hhbn.rs:17:51\n\
    \   |\n17 |     let area = (a * b + c * a - b * c) / (2.0 * a)\n   |         \
    \                                          ^ help: add `;` here\n18 |     return\
    \ area.round()\n   |     ------ unexpected token\n\nerror[E0277]: cannot multiply\
    \ `{float}` by `isize`\n  --> /tmp/tmplm_5hhbn.rs:17:47\n   |\n17 |     let area\
    \ = (a * b + c * a - b * c) / (2.0 * a)\n   |                                \
    \               ^ no implementation for `{float} * isize`\n   |\n   = help: the\
    \ trait `Mul<isize>` is not implemented for `{float}`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let area = (a * b + c * a + b * c)\
    \ / 2;\n    if area > 0 {\n        return area.round()\n    } else {\n       \
    \ return -1\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpirmq1rt1.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0599]: no method named `round`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpirmq1rt1.rs:19:21\n\
    \   |\n19 |         return area.round()\n   |                     ^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area: f64\
    \ = 0.0;\n    if a + b > c {\n        area = (a * b) / c;\n    } else {\n    \
    \    area = ((a + b) * c) / b;\n    }\n    if area > 1.0 {\n        area = 1.0;\n\
    \    }\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqsuwql0.rs:10:16\n   |\n\
    10 |         area = (a * b) / c;\n   |                ^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    10 |         area = ((a * b) / c) as f64;\n   |                ~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuqsuwql0.rs:12:16\n   |\n12 |\
    \         area = ((a + b) * c) / b;\n   |                ^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    12 |         area = (((a + b) * c) / b) as f64;\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        _ => if a + b > c { \n            (a * b) / c\n   \
    \     } else {\n            (a * c) / b\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprinr6ggx.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             (a * b) / c\n   |             ^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    11 |             ((a * b) / c) as f64\n   |\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprinr6ggx.rs:13:13\n   |\n7  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n13 |             (a * c) / b\n \
    \  |             ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |             ((a * c) / b) as\
    \ f64\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n\
    \    if a + b > c {\n        s = s + (b - c) * (b + c);\n    }\n    if a + c >\
    \ b {\n        s = s + (c - b) * (c + b);\n    }\n    if b + c > a {\n       \
    \ s = s + (a - b) * (a + b);\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpawozlvdf.rs:10:15\n\
    \   |\n10 |         s = s + (b - c) * (b + c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpawozlvdf.rs:13:15\n\
    \   |\n13 |         s = s + (c - b) * (c + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpawozlvdf.rs:16:15\n\
    \   |\n16 |         s = s + (a - b) * (a + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        1 => 1.0,\n        _ => -1.0,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpren0xc92.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        1 => 1.,\n        _ => 0.,\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.0`,\n right: `6.0`', /tmp/tmp9e69umd2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n\
    \    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut\
    \ w = 0.0;\n    \n    if a + b > c {\n        s = b - c;\n        w = c - (a +\
    \ b);\n    } else {\n        s = a - c;\n        w = a - (a + b);\n    }\n   \
    \ \n    if s > 0.0 {\n        t = s / 2.0;\n        u = w / 2.0;\n        v =\
    \ u * t;\n    } else {\n        t = w / 2.0;\n        u = t / 2.0;\n        v\
    \ = u * t;\n    }\n    \n    if u + v > 1.0 {\n        return -1.0;\n    }\n \
    \   \n    return s * v + w * u;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptwys6qw9.rs:15:13\n   |\n\
    15 |         s = b - c;\n   |             ^^^^^ expected floating-point number,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptwys6qw9.rs:16:13\n\
    \   |\n16 |         w = c - (a + b);\n   |             ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptwys6qw9.rs:18:13\n\
    \   |\n18 |         s = a - c;\n   |             ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptwys6qw9.rs:19:13\n\
    \   |\n19 |         w = a - (a + b);\n   |             ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = a + b + c;\n    if s\
    \ % 2 == 0 {\n        return s / 2\n    }\n    s / 2\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsjjyzoql.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsjjyzoql.rs:21:5\n   |\n7  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n21 |     s / 2\n   |     ^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    21 |     (s / 2) as f64\n   |\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n        _ => return -1.0\
    \ // not a valid triangle\n    }\n    match a + c {\n        0 => 0.0\n      \
    \  1 => 1.0\n        2 => 2.0\n        _ => return -1.0 // not a valid triangle\n\
    \    }\n    match b + c {\n        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n\
    \        _ => return -1.0 // not a valid triangle\n    }\n    match a + b {\n\
    \        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n        _ => return -1.0\
    \ // not a valid triangle\n    }\n    match b + c {\n        0 => 0.0\n      \
    \  1 => 1.0\n        2 => 2.0\n        _ => return -1.0 // not a valid triangle\n\
    \    }\n    match a + c {\n        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n\
    \        _ => return -1.0 // not a valid triangle\n    }\n    match a + b {\n\
    \        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n        _ => return -1.0\
    \ // not a valid triangle\n    }\n    match b + a {\n        0 => 0.0\n      \
    \  1 => 1.0\n        2 => 2.0\n        _ => return -1.0 // not a valid triangle\n\
    \    }\n    match a + c {\n        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n\
    \        _ => return -1.0 // not a valid triangle\n    }\n    match b + a {\n\
    \        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n        _ => return -1.0\
    \ // not a valid triangle\n    }\n    match c + a {\n        0 => 0.0\n      \
    \  1 => 1.0\n        2 => 2.0\n        _ => return -1.0 // not a valid triangle\n\
    \    }\n    match a + b {\n        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n\
    \        _ => return -1.0 // not a valid triangle\n    }\n    match c + a {\n\
    \        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n        _ => return -1.0\
    \ // not a valid triangle\n    }\n    match b + c {\n        0 => 0.0\n      \
    \  1 => 1.0\n        2 => 2.0\n        _ => return -1.0 // not a valid triangle\n\
    \    }\n    match c + b {\n        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n\
    \        _ => return -1.0 // not a valid triangle\n    }\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmpa1emf9li.rs:10:9\n   |\n9  |         0 => 0.0\n   |           --\
    \    - expected one of `,`, `.`, `?`, `}`, or an operator\n   |           |\n\
    \   |           while parsing the `match` arm starting here\n10 |         1 =>\
    \ 1.0\n   |         ^ unexpected token\n\nerror: expected one of `,`, `.`, `?`,\
    \ `}`, or an operator, found `1`\n  --> /tmp/tmpa1emf9li.rs:16:9\n   |\n15 | \
    \        0 => 0.0\n   |           --    - expected one of `,`, `.`, `?`, `}`,\
    \ or an operator\n   |           |\n   |           while parsing the `match` arm\
    \ starting here\n16 |         1 => 1.0\n   |         ^ unexpected token\n\nerror:\
    \ expected one of `,`, `.`, `?`, `}`, or an operator, found `1`\n  --> /tmp/tmpa1emf9li.rs:22:9\n\
    \   |\n21 |         0 => 0.0\n   |           --    - expected one of `,`, `.`,\
    \ `?`, `}`, or an operator\n   |           |\n   |           while parsing the\
    \ `match` arm starting here\n22 |         1 => 1.0\n   |         ^ unexpected\
    \ token\n\nerror: expected one of `,`, `.`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmpa1emf9li.rs:28:9\n   |\n27 |         0 => 0.0\n   |           --\
    \    - expected one of `,`, `.`, `?`, `}`, or an operator\n   |           |\n\
    \   |           while parsing the `match` arm starting here\n28 |         1 =>\
    \ 1.0\n   |         ^ unexpected token\n\nerror: expected one of `,`, `.`, `?`,\
    \ `}`, or an operator, found `1`\n  --> /tmp/tmpa1emf9li.rs:34:9\n   |\n33 | \
    \        0 => 0.0\n   |           --    - expected one of `,`, `.`, `?`, `}`,\
    \ or an operator\n   |           |\n   |           while parsing the `match` arm\
    \ starting here\n34 |         1 => 1.0\n   |         ^ unexpected token\n\nerror:\
    \ expected one of `,`, `.`, `?`, `}`, or an operator, found `1`\n  --> /tmp/tmpa1emf9li.rs:40:9\n\
    \   |\n39 |         0 => 0.0\n   |           --    - expected one of `,`, `.`,\
    \ `?`, `}`, or an operator\n   |           |\n   |           while parsing the\
    \ `match` arm starting here\n40 |         1 => 1.0\n   |         ^ unexpected\
    \ token\n\nerror: expected one of `,`, `.`, `?`, `}`, or an operato"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum: f64\
    \ = a + b + c;\n    if sum < b {\n        sum = b;\n    }\n    if sum < c {\n\
    \        sum = c\n    }\n    if sum < a {\n        sum = a\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1bz1govc.rs:8:24\n  |\n8 |\
    \     let mut sum: f64 = a + b + c;\n  |                  ---   ^^^^^^^^^ expected\
    \ `f64`, found `isize`\n  |                  |\n  |                  expected\
    \ due to this\n  |\nhelp: you can convert an `isize` to an `f64`, producing the\
    \ floating point representation of the integer, rounded if necessary\n  |\n8 |\
    \     let mut sum: f64 = (a + b + c) as f64;\n  |                        ~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp1bz1govc.rs:9:14\n  |\n9 |    \
    \ if sum < b {\n  |              ^ expected `f64`, found `isize`\n  |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n9 |     if sum < b as f64 {\n  |\
    \              ~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1bz1govc.rs:10:15\n\
    \   |\n10 |         sum = b;\n   |               ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |         sum\
    \ = b as f64;\n   |               ~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1bz1govc.rs:12:14\n   |\n12 |     if sum < c {\n   |          \
    \    ^ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to\
    \ an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n12 |     if sum < c as f64 {\n   |              ~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1bz1govc.rs:13:15\n   |\n13 |\
    \         sum = c\n   |               ^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |         sum = c as f64\n  \
    \ |               ~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1bz1govc.rs:15:14\n\
    \   |\n15 |     if sum < a {\n   |              ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, roun"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    if a + c > b {\n        return -1.0;\n    }\n\
    \    if b + c > a {\n        return -1.0;\n    }\n    let mut s = (a + b + c)\
    \ / 2.0;\n    if s > 0.0 {\n        return s * s;\n    }\n    return -1.0;\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp32h3m_od.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        1 => 1.,\n        _ => 0.,\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.0`,\n right: `6.0`', /tmp/tmp9e69umd2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 || s == 1 {\n  \
    \      return 0.0;\n    }\n    if s == 2 {\n        return 1.0;\n    }\n    if\
    \ s == 3 {\n        return 0.0;\n    }\n    if s == 4 {\n        return 1.0;\n\
    \    }\n    if s == 5 {\n        return 0.0;\n    }\n    if s == 6 {\n       \
    \ return 1.0;\n    }\n    if s == 7 {\n        return 0.0;\n    }\n    if s ==\
    \ 8 {\n        return 1.0;\n    }\n    if s == 9 {\n        return 0.0;\n    }\n\
    \    if s == 10 {\n        return 1.0;\n    }\n    if s == 11 {\n        return\
    \ 0.0;\n    }\n    if s == 12 {\n        return 1.0;\n    }\n    if s == 13 {\n\
    \        return 0.0;\n    }\n    if s == 14 {\n        return 1.0;\n    }\n  \
    \  if s == 15 {\n        return 0.0;\n    }\n    if s == 16 {\n        return\
    \ 1.0;\n    }\n    if s == 17 {\n        return 0.0;\n    }\n    if s == 18 {\n\
    \        return 1.0;\n    }\n    if s == 19 {\n        return 0.0;\n    }\n  \
    \  if s == 20 {\n        return 1.0;\n    }\n    if s == 21 {\n        return\
    \ 0.0;\n    }\n    if s == 22 {\n        return 1.0;\n    }\n    if s == 23 {\n\
    \        return 0.0;\n    }\n    if s == 24 {\n        return 1.0;\n    }\n  \
    \  if s == 25 {\n        return 0.0;\n    }\n    if s == 26 {\n        return\
    \ 1.0;\n    }\n    if s == 27 {\n        return 0.0;\n    }\n    if s == 28 {\n\
    \        return 1.0;\n    }\n    if s == 29 {\n        return 0.0;\n    }\n  \
    \  if s == 30 {\n        return 1.0;\n    }\n    if s == 31 {\n        return\
    \ 0.0;\n    }\n    if s == 32 {\n        return 1.0;\n    }\n    if s == 33 {\n\
    \        return 0.0;\n    }\n    if s == 34 {\n        return 1.0;\n    }\n  \
    \  if s == 35 {\n        return 0.0;\n    }\n    if s == 36 {\n        return\
    \ 1.0;\n    }\n    if s == 37 {\n        return 0.0;\n    }\n    if s == 38 {\n\
    \        return 1.0;\n    }\n    if s == 39 {\n        return 0.0;\n    }\n  \
    \  if s == 40 {\n        return 1.0;\n    }\n    if s == 41 {\n        return\
    \ 0.0;\n    }\n    if s == 42 {\n        return 1.0;\n    }\n    if s == 43 {\n\
    \        return 0.0;\n    }\n    if s == 44 {\n        return 1.0;\n    }\n  \
    \  if s == 45 {\n        return 0.0;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmpm6u6mbcc.rs:144:5\n\
    \    |\n7   |   fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    |\
    \                                                     --- expected `f64` because\
    \ of this return type\n...\n144 | /     if s == 45 {\n145 | |         return 0.0;\n\
    146 | |     }\n    | |_____^ expected `f64`, found `()`\n    |\n    = note: `if`\
    \ expressions without `else` evaluate to `()`\n    = help: consider adding an\
    \ `else` block that evaluates to the expected type\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        _ => if a + b > c { \n            (a * b) / c\n  \
    \      } else {\n            -1.0\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ok83n_b.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             (a * b) / c\n   |             ^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    11 |             ((a * b) / c) as f64\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area = area\
    \ + (a + b + c) / 2.0;\n    area = area - (a + b) * (b + c) / 2.0;\n    area =\
    \ area - (b + c) * (a + c) / 2.0;\n    area = area / 2.0;\n    area = area / 3.0;\n\
    \    area = area / 4.0;\n    area = area / 5.0;\n    area = area / 6.0;\n    area\
    \ = area / 7.0;\n    area = area / 8.0;\n    area = area / 9.0;\n    area = area\
    \ / 10.0;\n    area = area / 11.0;\n    area = area / 12.0;\n    area = area /\
    \ 13.0;\n    area = area / 14.0;\n    area = area / 15.0;\n    area = area / 16.0;\n\
    \    area = area / 17.0;\n    area = area / 18.0;\n    area = area / 19.0;\n \
    \   area = area / 20.0;\n    area = area / 21.0;\n    area = area / 22.0;\n  \
    \  area = area / 23.0;\n    area = area / 24.0;\n    area = area / 25.0;\n   \
    \ area = area / 26.0;\n    area = area / 27.0;\n    area = area / 28.0;\n    area\
    \ = area / 29.0;\n    area = area / 30.0;\n    area = area / 31.0;\n    area =\
    \ area / 32.0;\n    area = area / 33.0;\n    area = area / 34.0;\n    area = area\
    \ / 35.0;\n    area = area / 36.0;\n    area = area / 37.0;\n    area = area /\
    \ 38.0;\n    area = area / 39.0;\n    area = area / 40.0;\n    area = area / 41.0;\n\
    \    area = area / 42.0;\n    area = area / 43.0;\n    area = area / 44.0;\n \
    \   area = area / 45.0;\n    area = area / 46.0;\n    area = area / 47.0;\n  \
    \  area = area / 48.0;\n    area = area / 49.0;\n    area = area / 50.0;\n   \
    \ area = area / 51.0;\n    area = area / 52.0;\n    area = area / 53.0;\n    area\
    \ = area / 54.0;\n    area = area / 55.0;\n    area = area / 56.0;\n    area =\
    \ area / 57.0;\n    area = area / 58.0;\n    area = area / 59.0;\n    area = area\
    \ / 60.0;\n    \n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyfqew0w0.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide `isize`\
    \ by `{float}`\n  --> /tmp/tmpyfqew0w0.rs:18:31\n   |\n18 |     area = area +\
    \ (a + b + c) / 2.0;\n   |                               ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpyfqew0w0.rs:19:37\n\
    \   |\n19 |     area = area - (a + b) * (b + c) / 2.0;\n   |                 \
    \                    ^ no implementation for `isize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpyfqew0w0.rs:20:37\n   |\n20 |   \
    \  area = area - (b + c) * (a + c) / 2.0;\n   |                              \
    \       ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpyfqew0w0.rs:7:51\n  |\n7 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n  |    -------------                                  ^^^\
    \ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = a + b + c;\n    if s\
    \ % 2 == 0 {\n        return s / 2\n    }\n    s / 2\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsjjyzoql.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsjjyzoql.rs:21:5\n   |\n7  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n21 |     s / 2\n   |     ^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    21 |     (s / 2) as f64\n   |\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s > c {\n        s /= 2;\n\
    \    }\n    if s > b {\n        s /= 2;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_b0ko0jc.rs:18:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n18 |     s\n   |     ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n18 |     s as f64\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = (a + b + c) / 2;\n  \
    \  if s == 0 {\n        return -1\n    }\n    let mut area = 0.0;\n    while s\
    \ > 0 {\n        area += s * (s - a) * (s - b) * (s - c);\n        s /= 2.0;\n\
    \    }\n    area /= 3.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpys_5gmwb.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpys_5gmwb.rs:23:14\n   |\n23 |         area\
    \ += s * (s - a) * (s - b) * (s - c);\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror[E0277]: cannot divide-assign `isize` by `{float}`\n\
    \  --> /tmp/tmpys_5gmwb.rs:24:11\n   |\n24 |         s /= 2.0;\n   |         \
    \  ^^ no implementation for `isize /= {float}`\n   |\n   = help: the trait `DivAssign<{float}>`\
    \ is not implemented for `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = 0.0;\n    if\
    \ a + b > c {\n        s = s + (a + b - c) / 2.0;\n    }\n    if a + c > b {\n\
    \        s = s + (a + c - b) / 2.0;\n    }\n    if b + c > a {\n        s = s\
    \ + (b + c - a) / 2.0;\n    }\n    s /= 2.0;\n    s * s\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpcrw1z108.rs:19:29\n\
    \   |\n19 |         s = s + (a + b - c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpcrw1z108.rs:22:29\n   |\n22 |         s = s + (a + c - b) / 2.0;\n\
    \   |                             ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpcrw1z108.rs:25:29\n\
    \   |\n25 |         s = s + (b + c - a) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
