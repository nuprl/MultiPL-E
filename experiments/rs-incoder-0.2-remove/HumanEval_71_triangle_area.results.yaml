language: rs
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n    }\n\
    \    if b + c > a {\n        return -1.0\n    }\n    let area = (a * b + c * a\
    \ - b * c) / (2.0 * a)\n    return area.round()\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmplm_5hhbn.rs:17:51\n\
    \   |\n17 |     let area = (a * b + c * a - b * c) / (2.0 * a)\n   |         \
    \                                          ^ help: add `;` here\n18 |     return\
    \ area.round()\n   |     ------ unexpected token\n\nerror[E0277]: cannot multiply\
    \ `{float}` by `isize`\n  --> /tmp/tmplm_5hhbn.rs:17:47\n   |\n17 |     let area\
    \ = (a * b + c * a - b * c) / (2.0 * a)\n   |                                \
    \               ^ no implementation for `{float} * isize`\n   |\n   = help: the\
    \ trait `Mul<isize>` is not implemented for `{float}`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let area = (a * b + c * a + b * c)\
    \ / 2;\n    if area > 0 {\n        return area.round()\n    } else {\n       \
    \ return -1\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpirmq1rt1.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0599]: no method named `round`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpirmq1rt1.rs:19:21\n\
    \   |\n19 |         return area.round()\n   |                     ^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area: f64\
    \ = 0.0;\n    if a + b > c {\n        area = (a * b) / c;\n    } else {\n    \
    \    area = ((a + b) * c) / b;\n    }\n    if area > 1.0 {\n        area = 1.0;\n\
    \    }\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqsuwql0.rs:10:16\n   |\n\
    10 |         area = (a * b) / c;\n   |                ^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    10 |         area = ((a * b) / c) as f64;\n   |                ~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuqsuwql0.rs:12:16\n   |\n12 |\
    \         area = ((a + b) * c) / b;\n   |                ^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    12 |         area = (((a + b) * c) / b) as f64;\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        _ => if a + b > c { \n            (a * b) / c\n   \
    \     } else {\n            (a * c) / b\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprinr6ggx.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             (a * b) / c\n   |             ^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    11 |             ((a * b) / c) as f64\n   |\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprinr6ggx.rs:13:13\n   |\n7  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n13 |             (a * c) / b\n \
    \  |             ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |             ((a * c) / b) as\
    \ f64\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n\
    \    if a + b > c {\n        s = s + (b - c) * (b + c);\n    }\n    if a + c >\
    \ b {\n        s = s + (c - b) * (c + b);\n    }\n    if b + c > a {\n       \
    \ s = s + (a - b) * (a + b);\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpawozlvdf.rs:10:15\n\
    \   |\n10 |         s = s + (b - c) * (b + c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpawozlvdf.rs:13:15\n\
    \   |\n13 |         s = s + (c - b) * (c + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpawozlvdf.rs:16:15\n\
    \   |\n16 |         s = s + (a - b) * (a + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        1 => 1.0,\n        _ => -1.0,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpren0xc92.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        1 => 1.,\n        _ => 0.,\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.0`,\n right: `6.0`', /tmp/tmp9e69umd2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n\
    \    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut\
    \ w = 0.0;\n    \n    if a + b > c {\n        s = b - c;\n        w = c - (a +\
    \ b);\n    } else {\n        s = a - c;\n        w = a - (a + b);\n    }\n   \
    \ \n    if s > 0.0 {\n        t = s / 2.0;\n        u = w / 2.0;\n        v =\
    \ u * t;\n    } else {\n        t = w / 2.0;\n        u = t / 2.0;\n        v\
    \ = u * t;\n    }\n    \n    if u + v > 1.0 {\n        return -1.0;\n    }\n \
    \   \n    return s * v + w * u;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptwys6qw9.rs:15:13\n   |\n\
    15 |         s = b - c;\n   |             ^^^^^ expected floating-point number,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptwys6qw9.rs:16:13\n\
    \   |\n16 |         w = c - (a + b);\n   |             ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptwys6qw9.rs:18:13\n\
    \   |\n18 |         s = a - c;\n   |             ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptwys6qw9.rs:19:13\n\
    \   |\n19 |         w = a - (a + b);\n   |             ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = a + b + c;\n    if s\
    \ % 2 == 0 {\n        return s / 2\n    }\n    s / 2\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsjjyzoql.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsjjyzoql.rs:21:5\n   |\n7  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n21 |     s / 2\n   |     ^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    21 |     (s / 2) as f64\n   |\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n        _ => return -1.0\
    \ // not a valid triangle\n    }\n    match a + c {\n        0 => 0.0\n      \
    \  1 => 1.0\n        2 => 2.0\n        _ => return -1.0 // not a valid triangle\n\
    \    }\n    match b + c {\n        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n\
    \        _ => return -1.0 // not a valid triangle\n    }\n    match a + b {\n\
    \        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n        _ => return -1.0\
    \ // not a valid triangle\n    }\n    match b + c {\n        0 => 0.0\n      \
    \  1 => 1.0\n        2 => 2.0\n        _ => return -1.0 // not a valid triangle\n\
    \    }\n    match a + c {\n        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n\
    \        _ => return -1.0 // not a valid triangle\n    }\n    match a + b {\n\
    \        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n        _ => return -1.0\
    \ // not a valid triangle\n    }\n    match b + a {\n        0 => 0.0\n      \
    \  1 => 1.0\n        2 => 2.0\n        _ => return -1.0 // not a valid triangle\n\
    \    }\n    match a + c {\n        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n\
    \        _ => return -1.0 // not a valid triangle\n    }\n    match b + a {\n\
    \        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n        _ => return -1.0\
    \ // not a valid triangle\n    }\n    match c + a {\n        0 => 0.0\n      \
    \  1 => 1.0\n        2 => 2.0\n        _ => return -1.0 // not a valid triangle\n\
    \    }\n    match a + b {\n        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n\
    \        _ => return -1.0 // not a valid triangle\n    }\n    match c + a {\n\
    \        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n        _ => return -1.0\
    \ // not a valid triangle\n    }\n    match b + c {\n        0 => 0.0\n      \
    \  1 => 1.0\n        2 => 2.0\n        _ => return -1.0 // not a valid triangle\n\
    \    }\n    match c + b {\n        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n\
    \        _ => return -1.0 // not a valid triangle\n    }\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmpa1emf9li.rs:10:9\n   |\n9  |         0 => 0.0\n   |           --\
    \    - expected one of `,`, `.`, `?`, `}`, or an operator\n   |           |\n\
    \   |           while parsing the `match` arm starting here\n10 |         1 =>\
    \ 1.0\n   |         ^ unexpected token\n\nerror: expected one of `,`, `.`, `?`,\
    \ `}`, or an operator, found `1`\n  --> /tmp/tmpa1emf9li.rs:16:9\n   |\n15 | \
    \        0 => 0.0\n   |           --    - expected one of `,`, `.`, `?`, `}`,\
    \ or an operator\n   |           |\n   |           while parsing the `match` arm\
    \ starting here\n16 |         1 => 1.0\n   |         ^ unexpected token\n\nerror:\
    \ expected one of `,`, `.`, `?`, `}`, or an operator, found `1`\n  --> /tmp/tmpa1emf9li.rs:22:9\n\
    \   |\n21 |         0 => 0.0\n   |           --    - expected one of `,`, `.`,\
    \ `?`, `}`, or an operator\n   |           |\n   |           while parsing the\
    \ `match` arm starting here\n22 |         1 => 1.0\n   |         ^ unexpected\
    \ token\n\nerror: expected one of `,`, `.`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmpa1emf9li.rs:28:9\n   |\n27 |         0 => 0.0\n   |           --\
    \    - expected one of `,`, `.`, `?`, `}`, or an operator\n   |           |\n\
    \   |           while parsing the `match` arm starting here\n28 |         1 =>\
    \ 1.0\n   |         ^ unexpected token\n\nerror: expected one of `,`, `.`, `?`,\
    \ `}`, or an operator, found `1`\n  --> /tmp/tmpa1emf9li.rs:34:9\n   |\n33 | \
    \        0 => 0.0\n   |           --    - expected one of `,`, `.`, `?`, `}`,\
    \ or an operator\n   |           |\n   |           while parsing the `match` arm\
    \ starting here\n34 |         1 => 1.0\n   |         ^ unexpected token\n\nerror:\
    \ expected one of `,`, `.`, `?`, `}`, or an operator, found `1`\n  --> /tmp/tmpa1emf9li.rs:40:9\n\
    \   |\n39 |         0 => 0.0\n   |           --    - expected one of `,`, `.`,\
    \ `?`, `}`, or an operator\n   |           |\n   |           while parsing the\
    \ `match` arm starting here\n40 |         1 => 1.0\n   |         ^ unexpected\
    \ token\n\nerror: expected one of `,`, `.`, `?`, `}`, or an operato"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum: f64\
    \ = a + b + c;\n    if sum < b {\n        sum = b;\n    }\n    if sum < c {\n\
    \        sum = c\n    }\n    if sum < a {\n        sum = a\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1bz1govc.rs:8:24\n  |\n8 |\
    \     let mut sum: f64 = a + b + c;\n  |                  ---   ^^^^^^^^^ expected\
    \ `f64`, found `isize`\n  |                  |\n  |                  expected\
    \ due to this\n  |\nhelp: you can convert an `isize` to an `f64`, producing the\
    \ floating point representation of the integer, rounded if necessary\n  |\n8 |\
    \     let mut sum: f64 = (a + b + c) as f64;\n  |                        ~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp1bz1govc.rs:9:14\n  |\n9 |    \
    \ if sum < b {\n  |              ^ expected `f64`, found `isize`\n  |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n9 |     if sum < b as f64 {\n  |\
    \              ~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1bz1govc.rs:10:15\n\
    \   |\n10 |         sum = b;\n   |               ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |         sum\
    \ = b as f64;\n   |               ~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1bz1govc.rs:12:14\n   |\n12 |     if sum < c {\n   |          \
    \    ^ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to\
    \ an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n12 |     if sum < c as f64 {\n   |              ~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1bz1govc.rs:13:15\n   |\n13 |\
    \         sum = c\n   |               ^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |         sum = c as f64\n  \
    \ |               ~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1bz1govc.rs:15:14\n\
    \   |\n15 |     if sum < a {\n   |              ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, roun"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    if a + c > b {\n        return -1.0;\n    }\n\
    \    if b + c > a {\n        return -1.0;\n    }\n    let mut s = (a + b + c)\
    \ / 2.0;\n    if s > 0.0 {\n        return s * s;\n    }\n    return -1.0;\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp32h3m_od.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        1 => 1.,\n        _ => 0.,\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.0`,\n right: `6.0`', /tmp/tmp9e69umd2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 || s == 1 {\n  \
    \      return 0.0;\n    }\n    if s == 2 {\n        return 1.0;\n    }\n    if\
    \ s == 3 {\n        return 0.0;\n    }\n    if s == 4 {\n        return 1.0;\n\
    \    }\n    if s == 5 {\n        return 0.0;\n    }\n    if s == 6 {\n       \
    \ return 1.0;\n    }\n    if s == 7 {\n        return 0.0;\n    }\n    if s ==\
    \ 8 {\n        return 1.0;\n    }\n    if s == 9 {\n        return 0.0;\n    }\n\
    \    if s == 10 {\n        return 1.0;\n    }\n    if s == 11 {\n        return\
    \ 0.0;\n    }\n    if s == 12 {\n        return 1.0;\n    }\n    if s == 13 {\n\
    \        return 0.0;\n    }\n    if s == 14 {\n        return 1.0;\n    }\n  \
    \  if s == 15 {\n        return 0.0;\n    }\n    if s == 16 {\n        return\
    \ 1.0;\n    }\n    if s == 17 {\n        return 0.0;\n    }\n    if s == 18 {\n\
    \        return 1.0;\n    }\n    if s == 19 {\n        return 0.0;\n    }\n  \
    \  if s == 20 {\n        return 1.0;\n    }\n    if s == 21 {\n        return\
    \ 0.0;\n    }\n    if s == 22 {\n        return 1.0;\n    }\n    if s == 23 {\n\
    \        return 0.0;\n    }\n    if s == 24 {\n        return 1.0;\n    }\n  \
    \  if s == 25 {\n        return 0.0;\n    }\n    if s == 26 {\n        return\
    \ 1.0;\n    }\n    if s == 27 {\n        return 0.0;\n    }\n    if s == 28 {\n\
    \        return 1.0;\n    }\n    if s == 29 {\n        return 0.0;\n    }\n  \
    \  if s == 30 {\n        return 1.0;\n    }\n    if s == 31 {\n        return\
    \ 0.0;\n    }\n    if s == 32 {\n        return 1.0;\n    }\n    if s == 33 {\n\
    \        return 0.0;\n    }\n    if s == 34 {\n        return 1.0;\n    }\n  \
    \  if s == 35 {\n        return 0.0;\n    }\n    if s == 36 {\n        return\
    \ 1.0;\n    }\n    if s == 37 {\n        return 0.0;\n    }\n    if s == 38 {\n\
    \        return 1.0;\n    }\n    if s == 39 {\n        return 0.0;\n    }\n  \
    \  if s == 40 {\n        return 1.0;\n    }\n    if s == 41 {\n        return\
    \ 0.0;\n    }\n    if s == 42 {\n        return 1.0;\n    }\n    if s == 43 {\n\
    \        return 0.0;\n    }\n    if s == 44 {\n        return 1.0;\n    }\n  \
    \  if s == 45 {\n        return 0.0;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmpm6u6mbcc.rs:144:5\n\
    \    |\n7   |   fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    |\
    \                                                     --- expected `f64` because\
    \ of this return type\n...\n144 | /     if s == 45 {\n145 | |         return 0.0;\n\
    146 | |     }\n    | |_____^ expected `f64`, found `()`\n    |\n    = note: `if`\
    \ expressions without `else` evaluate to `()`\n    = help: consider adding an\
    \ `else` block that evaluates to the expected type\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        _ => if a + b > c { \n            (a * b) / c\n  \
    \      } else {\n            -1.0\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ok83n_b.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             (a * b) / c\n   |             ^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    11 |             ((a * b) / c) as f64\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area = area\
    \ + (a + b + c) / 2.0;\n    area = area - (a + b) * (b + c) / 2.0;\n    area =\
    \ area - (b + c) * (a + c) / 2.0;\n    area = area / 2.0;\n    area = area / 3.0;\n\
    \    area = area / 4.0;\n    area = area / 5.0;\n    area = area / 6.0;\n    area\
    \ = area / 7.0;\n    area = area / 8.0;\n    area = area / 9.0;\n    area = area\
    \ / 10.0;\n    area = area / 11.0;\n    area = area / 12.0;\n    area = area /\
    \ 13.0;\n    area = area / 14.0;\n    area = area / 15.0;\n    area = area / 16.0;\n\
    \    area = area / 17.0;\n    area = area / 18.0;\n    area = area / 19.0;\n \
    \   area = area / 20.0;\n    area = area / 21.0;\n    area = area / 22.0;\n  \
    \  area = area / 23.0;\n    area = area / 24.0;\n    area = area / 25.0;\n   \
    \ area = area / 26.0;\n    area = area / 27.0;\n    area = area / 28.0;\n    area\
    \ = area / 29.0;\n    area = area / 30.0;\n    area = area / 31.0;\n    area =\
    \ area / 32.0;\n    area = area / 33.0;\n    area = area / 34.0;\n    area = area\
    \ / 35.0;\n    area = area / 36.0;\n    area = area / 37.0;\n    area = area /\
    \ 38.0;\n    area = area / 39.0;\n    area = area / 40.0;\n    area = area / 41.0;\n\
    \    area = area / 42.0;\n    area = area / 43.0;\n    area = area / 44.0;\n \
    \   area = area / 45.0;\n    area = area / 46.0;\n    area = area / 47.0;\n  \
    \  area = area / 48.0;\n    area = area / 49.0;\n    area = area / 50.0;\n   \
    \ area = area / 51.0;\n    area = area / 52.0;\n    area = area / 53.0;\n    area\
    \ = area / 54.0;\n    area = area / 55.0;\n    area = area / 56.0;\n    area =\
    \ area / 57.0;\n    area = area / 58.0;\n    area = area / 59.0;\n    area = area\
    \ / 60.0;\n    \n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyfqew0w0.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide `isize`\
    \ by `{float}`\n  --> /tmp/tmpyfqew0w0.rs:18:31\n   |\n18 |     area = area +\
    \ (a + b + c) / 2.0;\n   |                               ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpyfqew0w0.rs:19:37\n\
    \   |\n19 |     area = area - (a + b) * (b + c) / 2.0;\n   |                 \
    \                    ^ no implementation for `isize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpyfqew0w0.rs:20:37\n   |\n20 |   \
    \  area = area - (b + c) * (a + c) / 2.0;\n   |                              \
    \       ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpyfqew0w0.rs:7:51\n  |\n7 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n  |    -------------                                  ^^^\
    \ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = a + b + c;\n    if s\
    \ % 2 == 0 {\n        return s / 2\n    }\n    s / 2\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsjjyzoql.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsjjyzoql.rs:21:5\n   |\n7  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n21 |     s / 2\n   |     ^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    21 |     (s / 2) as f64\n   |\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s > c {\n        s /= 2;\n\
    \    }\n    if s > b {\n        s /= 2;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_b0ko0jc.rs:18:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n18 |     s\n   |     ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n18 |     s as f64\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = (a + b + c) / 2;\n  \
    \  if s == 0 {\n        return -1\n    }\n    let mut area = 0.0;\n    while s\
    \ > 0 {\n        area += s * (s - a) * (s - b) * (s - c);\n        s /= 2.0;\n\
    \    }\n    area /= 3.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpys_5gmwb.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpys_5gmwb.rs:23:14\n   |\n23 |         area\
    \ += s * (s - a) * (s - b) * (s - c);\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror[E0277]: cannot divide-assign `isize` by `{float}`\n\
    \  --> /tmp/tmpys_5gmwb.rs:24:11\n   |\n24 |         s /= 2.0;\n   |         \
    \  ^^ no implementation for `isize /= {float}`\n   |\n   = help: the trait `DivAssign<{float}>`\
    \ is not implemented for `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = 0.0;\n    if\
    \ a + b > c {\n        s = s + (a + b - c) / 2.0;\n    }\n    if a + c > b {\n\
    \        s = s + (a + c - b) / 2.0;\n    }\n    if b + c > a {\n        s = s\
    \ + (b + c - a) / 2.0;\n    }\n    s /= 2.0;\n    s * s\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpcrw1z108.rs:19:29\n\
    \   |\n19 |         s = s + (a + b - c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpcrw1z108.rs:22:29\n   |\n22 |         s = s + (a + c - b) / 2.0;\n\
    \   |                             ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpcrw1z108.rs:25:29\n\
    \   |\n25 |         s = s + (b + c - a) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        x => if a + b > c { x / 2. } else { b / 2. },\n   \
    \     y => if a + c > b { y / 2. } else { c / 2. },\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpv40fbpln.rs:10:31\n\
    \   |\n10 |         x => if a + b > c { x / 2. } else { b / 2. },\n   |      \
    \                         ^ no implementation for `isize / {float}`\n   |\n  \
    \ = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpv40fbpln.rs:10:47\n   |\n10 |   \
    \      x => if a + b > c { x / 2. } else { b / 2. },\n   |                   \
    \                            ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpv40fbpln.rs:11:31\n   |\n11 |   \
    \      y => if a + c > b { y / 2. } else { c / 2. },\n   |                   \
    \            ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot divi"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area = area\
    \ + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n    area = area\
    \ / 2.0;\n    area = round(area, 2);\n    return area;\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpit7z2q3p.rs:23:12\n\
    \   |\n23 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpit7z2q3p.rs:9:16\n  |\n\
    7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |             \
    \                                      --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:18:17\n   |\n18 |     area = area +\
    \ (a * b) - (c * c);\n   |                 ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:19:17\n   |\n19 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        1 => 1.0,\n        _ => -1.0,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpren0xc92.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = (a + b + c) /\
    \ 2.0;\n    let mut area = 0.0;\n    while s > 0.0 {\n        if s % 2.0 == 0.0\
    \ {\n            area += s;\n        }\n        s /= 2.0;\n    }\n    area\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp6b1a29p9.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area: f64\
    \ = 0.0;\n    if a + b > c {\n        area = (a * b) / c;\n    } else {\n    \
    \    area = ((b * c) - (a * b)) / a;\n    }\n    area = area.round();\n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7wperg6l.rs:10:16\n   |\n\
    8  |     let mut area: f64 = 0.0;\n   |                   --- expected due to\
    \ this type\n9  |     if a + b > c {\n10 |         area = (a * b) / c;\n   | \
    \               ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n10 |         area = ((a * b) / c)\
    \ as f64;\n   |                +           ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7wperg6l.rs:12:16\n   |\n8  |     let mut area: f64 = 0.0;\n\
    \   |                   --- expected due to this type\n...\n12 |         area\
    \ = ((b * c) - (a * b)) / a;\n   |                ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    12 |         area = (((b * c) - (a * b)) / a) as f64;\n   |                + \
    \                      ++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = (a + b + c) /\
    \ 2.0;\n    if s > (a + b + c) / 2.0 {\n        return 0.0;\n    }\n    if s >\
    \ (a + c + b) / 2.0 {\n        return 0.0;\n    }\n    if s > (b + c + a) / 2.0\
    \ {\n        return 0.0;\n    }\n    return s * s;\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpsjid8vp4.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpsjid8vp4.rs:18:24\n   |\n18 |     if s > (a + b + c) / 2.0 {\n\
    \   |                        ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpsjid8vp4.rs:21:24\n   |\n21 |   \
    \  if s > (a + c + b) / 2.0 {\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpsjid8vp4.rs:24:24\n\
    \   |\n24 |     if s > (b + c + a) / 2.0 {\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area: f64 = 0.0;\n    area\
    \ = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n   \
    \ return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd8qc099k.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd8qc099k.rs:18:12\n   |\n17 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n18 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut s = 0.0;\n    s += a\
    \ * b + c * b;\n    s += a * c + b * c;\n    s += a * a + b * b + c * c;\n   \
    \ s / 3.0;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjh35ghn5.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpjh35ghn5.rs:18:7\n   |\n18 |     s += a\
    \ * b + c * b;\n   |       ^^ no implementation for `{float} += isize`\n   |\n\
    \   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `AddAssign<Rhs>`:\n      \
    \       <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n          \
    \   <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpjh35ghn5.rs:19:7\n\
    \   |\n19 |     s += a * c + b * c;\n   |       ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpjh35ghn5.rs:20:7\n\
    \   |\n20 |     s += a * a + b * b + c * c;\n   |       ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n     "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = (a + b + c) / 2;\n  \
    \  let mut area: f64 = 0.0;\n    while s > 0.0 {\n        if s % 2 == 0 {\n  \
    \          area += s / 2.0;\n        }\n        s /= 2.0;\n    }\n    area\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppz69q9pu.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppz69q9pu.rs:19:15\n   |\n19 |     while s > 0.0 {\n   |       \
    \        ^^^ expected `isize`, found floating-point number\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmppz69q9pu.rs:21:23\n   |\n21 |   \
    \          area += s / 2.0;\n   |                       ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide-assign `isize` by `{float}`\n  -->\
    \ /tmp/tmppz69q9pu.rs:23:11\n   |\n23 |         s /= 2.0;\n   |           ^^ no\
    \ implementation for `isize /= {float}`\n   |\n   = help: the trait `DivAssign<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n           \
    \  <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n             <f64\
    \ as DivAssign>\n             <i128 as DivAssign<&i128>>\n             <i128 as\
    \ DivAssign>\n             <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n\
    \           and 20 others\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0;\n    \n\
    \    area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n\
    \    area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n\
    \    area = area / 2.0;\n    \n    area = area.round();\n    \n    return area;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx94zmxvs.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpx94zmxvs.rs:20:17\n   |\n20 |     area = area +\
    \ (a * b) - (c * c);\n   |                 ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpx94zmxvs.rs:21:17\n   |\n21 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpx94zmxvs.rs:22:17\n\
    \   |\n22 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n      "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n    area\
    \ = area + (a * b) - (a * c) - (b * c);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp27okr5l.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpp27okr5l.rs:18:17\n   |\n18 |     area = area +\
    \ (a * b) - (a * c) - (b * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0689]:\
    \ can't call method `round` on ambiguous numeric type `{float}`\n  --> /tmp/tmpp27okr5l.rs:20:17\n\
    \   |\n20 |     area = area.round();\n   |                 ^^^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `f32`\n   |\n17 |     let mut\
    \ area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0689.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut s = 0.0;\n    if a +\
    \ b > c {\n        s = s + (a + b - c);\n    }\n    if a + c > b {\n        s\
    \ = s + (a + c - b);\n    }\n    if b + c > a {\n        s = s + (b + c - a);\n\
    \    }\n    s /= 2.0;\n    s * s\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppw8n3ddv.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmppw8n3ddv.rs:19:15\n   |\n19 |         s = s + (a\
    \ + b - c);\n   |               ^ no implementation for `{float} + isize`\n  \
    \ |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmppw8n3ddv.rs:22:15\n   |\n22 |\
    \         s = s + (a + c - b);\n   |               ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmppw8n3ddv.rs:25:15\n   |\n25 |\
    \         s = s + (b + c - a);\n   |               ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        x => if a + b > c { 0.; }\n        else if b > c {\
    \ a / b; }\n        else { c / a }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbxf3z3v_.rs:10:27\n   |\n\
    10 |         x => if a + b > c { 0.; }\n   |                           ^^^^-^^\n\
    \   |                           |   |\n   |                           |   help:\
    \ remove this semicolon\n   |                           expected `f64`, found\
    \ `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbxf3z3v_.rs:11:23\n  \
    \ |\n11 |         else if b > c { a / b; }\n   |                       ^^^^^^^^^^\
    \ expected `f64`, found `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbxf3z3v_.rs:12:16\n\
    \   |\n7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n12 |         else { c / a }\n   |                ^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    12 |         else { (c / a) as f64 }\n   |                +     ++++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = (a + b + c) /\
    \ 2.0;\n    if s < (a + b + c) / 2.0 {\n        return 0.0;\n    }\n    if s <\
    \ (a + b + c) / 2.0 {\n        return 0.0;\n    }\n    if s < (a + b + c) / 2.0\
    \ {\n        return 0.0;\n    }\n    return s;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmptik2oevj.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmptik2oevj.rs:18:24\n   |\n18 |     if s < (a + b + c) / 2.0 {\n\
    \   |                        ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmptik2oevj.rs:21:24\n   |\n21 |   \
    \  if s < (a + b + c) / 2.0 {\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmptik2oevj.rs:24:24\n\
    \   |\n24 |     if s < (a + b + c) / 2.0 {\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n    }\n\
    \    if b + c > a {\n        return -1.0\n    }\n    let mut s = (a + b + c) /\
    \ 2.0;\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a\
    \ + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n\
    \        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n \
    \   }\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a\
    \ + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n\
    \        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n \
    \   }\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a\
    \ + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n\
    \        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n \
    \   }\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a\
    \ + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n\
    \        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n \
    \   }\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a\
    \ + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n\
    \        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n \
    \   }\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a\
    \ + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n\
    \        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n \
    \   }\n    if s > (a + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a\
    \ + b + c) / 2.0 {\n        s = 0.0;\n    }\n    if s > (a + b + c) / 2.0 {\n\
    \        s = 0.0;\n    }\n    if s > (a + b\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpruxopl41.rs:100:1\n    |\n\
    99  |     if s > (a + b\n    |     -- this `if` expression has a condition, but\
    \ no block\n100 | }\n    | ^ expected `{`\n\nerror: mismatched closing delimiter:\
    \ `}`\n   --> /tmp/tmpruxopl41.rs:99:12\n    |\n7   | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n    |                                        \
    \               - closing delimiter possibly meant for this\n...\n99  |     if\
    \ s > (a + b\n    |            ^ unclosed delimiter\n100 | }\n    | ^ mismatched\
    \ closing delimiter\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  -->\
    \ /tmp/tmpruxopl41.rs:17:29\n   |\n17 |     let mut s = (a + b + c) / 2.0;\n \
    \  |                             ^ no implementation for `isize / {float}`\n \
    \  |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Div<Rhs>`:\n             <&'a\
    \ f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128\
    \ as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as\
    \ Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpruxopl41.rs:18:24\n   |\n\
    18 |     if s > (a + b + c) / 2.0 {\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpruxopl41.rs:21:24\n\
    \   |\n21 |     if s > (a + b + c) / 2.0 {\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the tra"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    \n    if s == 0 {\n      \
    \  return 0.0;\n    }\n    \n    if a < b {\n        if b < c {\n            return\
    \ s * s;\n        }\n        return 0.0;\n    }\n    \n    if a > b {\n      \
    \  if c < b {\n            return s * s;\n        }\n        return 0.0;\n   \
    \ }\n    \n    if c < b {\n        return s * s;\n    }\n    \n    return 0.0;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvsn1zdb0.rs:19:20\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n19 |             return s * s;\n   |                    ^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    19 |             return (s * s) as f64;\n   |                    +     ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area +=\
    \ a * b\n    area += a * c\n    area += b * c\n    area /= 3.0\n    area\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area`\n  --> /tmp/tmp2ihldarf.rs:18:18\n  \
    \ |\n18 |     area += a * b\n   |                  ^ help: add `;` here\n19 |\
    \     area += a * c\n   |     ---- unexpected token\n\nerror: expected `;`, found\
    \ `area`\n  --> /tmp/tmp2ihldarf.rs:19:18\n   |\n19 |     area += a * c\n   |\
    \                  ^ help: add `;` here\n20 |     area += b * c\n   |     ----\
    \ unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmp2ihldarf.rs:20:18\n\
    \   |\n20 |     area += b * c\n   |                  ^ help: add `;` here\n21\
    \ |     area /= 3.0\n   |     ---- unexpected token\n\nerror: expected `;`, found\
    \ `area`\n  --> /tmp/tmp2ihldarf.rs:21:16\n   |\n21 |     area /= 3.0\n   |  \
    \              ^ help: add `;` here\n22 |     area\n   |     ---- unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp2ihldarf.rs:9:16\n  |\n7 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n  |                                   \
    \                --- expected `f64` because of return type\n8 |     if a + b >\
    \ c {\n9 |         return -1\n  |                ^^\n  |                |\n  |\
    \                expected `f64`, found integer\n  |                help: use a\
    \ float literal: `-1.0`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmp2ihldarf.rs:18:10\n   |\n18 |     area += a * b\n   |         \
    \ ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmp2ihldarf.rs:19:10\n   |\n19 |     area += a * c\n   |         \
    \ ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n   = "
  stdout: ''
  timestamp: 1659976620
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        x => if a + b > c { -1.0 } else { 1.0 / 3.0 }\n   \
    \ }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpfknyzxty.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_1nydc9x.rs:12:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n12 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n12 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut area: f64 = 0.0;\n\
    \    area = (a * b) - (a * c);\n    area = area / 2.0;\n    area = area + (a *\
    \ c);\n    area = area / 2.0;\n    area = area + (b * c);\n    area = area / 2.0;\n\
    \    area = area + (b * c);\n    area = area / 2.0;\n    area = area + (c * c);\n\
    \    area = area / 2.0;\n    area = area + (c * c);\n    area = area / 2.0;\n\
    \    area = area + (c * c);\n    area = area / 2.0;\n    area = area + (c * c);\n\
    \    area = area / 2.0;\n    area = area + (c * c);\n    area = area / 2.0;\n\
    \    area = area + (c * c);\n    area = area / 2.0;\n    area = area + (c * c);\n\
    \    area = area / 2.0;\n    area = area + (c * c);\n    area = area / 2.0;\n\
    \    area = area + (c * c);\n    area = area / 2.0;\n    area = area + (c * c);\n\
    \    area = area / 2.0;\n    area = area + (c * c);\n    area = area / 2.0;\n\
    \    area = area + (c * c);\n    area = area / 2.0;\n    area = area + (c * c);\n\
    \    area = area / 2.0;\n    area = area + (c * c);\n    area = area / 2.0;\n\
    \    area = area + (c * c);\n    area = area / 2.0;\n    area = area + (c * c);\n\
    \    area = area / 2.0;\n    area = area + (c * c);\n    area = area / 2.0;\n\
    \    area = area + (c * c);\n    area = area / 2.0;\n    area = area + (c * c);\n\
    \    area = area / 2.0;\n    area = area + (c * c);\n    area = area / 2.0;\n\
    \    area = area + (c * c);\n    area = area / 2.0;\n    area = area + (c * c);\n\
    \    area = area / 2.0;\n    area = area + (c * c);\n    area = area / 2.0;\n\
    \    area = area + (c * c);\n    area = area / 2.0;\n    area = area + (c * c);\n\
    \    area = area / 2.0;\n    area = area + (c * c);\n    area = area / 2.0;\n\
    \    area = area + (c * c);\n    area = area / \n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp90z_tjm4.rs:80:1\n\
    \   |\n80 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp90z_tjm4.rs:18:12\n   |\n17 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n18 |     area = (a * b) -\
    \ (a * c);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |     area = ((a\
    \ * b) - (a * c)) as f64;\n   |            +                 ++++++++\n\nerror[E0277]:\
    \ cannot add `isize` to `f64`\n  --> /tmp/tmp90z_tjm4.rs:20:17\n   |\n20 |   \
    \  area = area + (a * c);\n   |                 ^ no implementation for `f64 +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `f64`\n  --> /tmp/tmp90z_tjm4.rs:22:17\n   |\n22 |   \
    \  area = area + (b * c);\n   |                 ^ no implementation for `f64 +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `f64`\n  --> /tmp/tmp90z_tjm4.rs:24:17\n   |\n24 |   \
    \  area = area + (b * c);\n   |                 ^ no implementation for `f64 +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `f"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut area: f64 = 0.0;\n\
    \    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjshkp6ix.rs:18:12\n   |\n\
    17 |     let mut area: f64 = 0.0;\n   |                   --- expected due to\
    \ this type\n18 |     area = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n18 |     area = ((a * b) - (c * a)) as f64;\n   |         \
    \   +                 ++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjshkp6ix.rs:7:51\n\
    \  |\n7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s *= s;\n    if s > 0 {\n\
    \        s /= 2;\n    }\n    s\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpji5sra81.rs:16:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s\n   |     ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n16 |     s as f64\n   |       ++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area +=\
    \ a * b\n    area += a * c\n    area += b * c\n    area /= 3.0\n    area = area.round()\n\
    \    return area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area`\n  --> /tmp/tmpxtjvd6u_.rs:18:18\n  \
    \ |\n18 |     area += a * b\n   |                  ^ help: add `;` here\n19 |\
    \     area += a * c\n   |     ---- unexpected token\n\nerror: expected `;`, found\
    \ `area`\n  --> /tmp/tmpxtjvd6u_.rs:19:18\n   |\n19 |     area += a * c\n   |\
    \                  ^ help: add `;` here\n20 |     area += b * c\n   |     ----\
    \ unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmpxtjvd6u_.rs:20:18\n\
    \   |\n20 |     area += b * c\n   |                  ^ help: add `;` here\n21\
    \ |     area /= 3.0\n   |     ---- unexpected token\n\nerror: expected `;`, found\
    \ `area`\n  --> /tmp/tmpxtjvd6u_.rs:21:16\n   |\n21 |     area /= 3.0\n   |  \
    \              ^ help: add `;` here\n22 |     area = area.round()\n   |     ----\
    \ unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpxtjvd6u_.rs:22:24\n\
    \   |\n22 |     area = area.round()\n   |                        ^ help: add `;`\
    \ here\n23 |     return area\n   |     ------ unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpxtjvd6u_.rs:9:16\n  |\n7 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n  |                                   \
    \                --- expected `f64` because of return type\n8 |     if a + b >\
    \ c {\n9 |         return -1\n  |                ^^\n  |                |\n  |\
    \                expected `f64`, found integer\n  |                help: use a\
    \ float literal: `-1.0`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpxtjvd6u_.rs:18:10\n   |\n18 |     area += a * b\n   |         \
    \ ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = 0.0;\n    if\
    \ a + b > c {\n        s = s + (a + b - c) * (b - a);\n    }\n    if a + c > b\
    \ {\n        s = s + (a + c - b) * (c - a);\n    }\n    if b + c > a {\n     \
    \   s = s + (b + c - a) * (c - b);\n    }\n    s /= 2.0;\n    round!(s, 2);\n\
    \    s\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `round` in this scope\n  --> /tmp/tmpi7y3s02l.rs:28:5\n\
    \   |\n28 |     round!(s, 2);\n   |     ^^^^^\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpi7y3s02l.rs:19:15\n   |\n19 |         s = s + (a\
    \ + b - c) * (b - a);\n   |               ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpi7y3s02l.rs:22:15\n   |\n22 |\
    \         s = s + (a + c - b) * (c - a);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpi7y3s02l.rs:25:15\n\
    \   |\n25 |         s = s + (b + c - a) * (c - b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due t"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n\
    \    if a + b > c {\n        area = area + b * c / a;\n    } else {\n        area\
    \ = area + a * c / b;\n    }\n    if a + c > b {\n        area = area + a * c\
    \ / b;\n    } else {\n        area = area + b * c / a;\n    }\n    if b + c >\
    \ a {\n        area = area + b * c / a;\n    } else {\n        area = area + a\
    \ * c / b;\n    }\n    area = area.round() as f64;\n    return area;\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp7fpnebjt.rs:10:21\n\
    \   |\n10 |         area = area + b * c / a;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp7fpnebjt.rs:12:21\n\
    \   |\n12 |         area = area + a * c / b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp7fpnebjt.rs:15:21\n\
    \   |\n15 |         area = area + a * c / b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp7fpnebjt.rs:17:21\n\
    \   |\n17 |         area = area + b * c / a;\n   |                  "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0\n    \n\
    \    for i in 0..3 {\n        let mut x = 0.0\n        let mut y = 0.0\n     \
    \   \n        if i == 0 {\n            x = a\n            y = b\n        }\n \
    \       else if i == 1 {\n            x = b\n            y = c\n        }\n  \
    \      else if i == 2 {\n            x = c\n            y = a\n        }\n   \
    \     \n        let mut s = 0.0\n        \n        for j in 0..3 {\n         \
    \   let mut d = 0.0\n            \n            if j == 0 {\n                d\
    \ = x\n            }\n            else if j == 1 {\n                d = y\n  \
    \          }\n            else if j == 2 {\n                d = x - y\n      \
    \      }\n            \n            s += d\n        }\n        \n        area\
    \ += s\n    }\n    \n    area / 3.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp12zwnc3t.rs:18:23\n\
    \   |\n18 |     let mut area = 0.0\n   |                       ^ help: add `;`\
    \ here\n19 |     \n20 |     for i in 0..3 {\n   |     --- unexpected token\n\n\
    error: expected `;`, found keyword `let`\n  --> /tmp/tmp12zwnc3t.rs:21:24\n  \
    \ |\n21 |         let mut x = 0.0\n   |                        ^ help: add `;`\
    \ here\n22 |         let mut y = 0.0\n   |         --- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmp12zwnc3t.rs:22:24\n   |\n22\
    \ |         let mut y = 0.0\n   |                        ^ help: add `;` here\n\
    23 |         \n24 |         if i == 0 {\n   |         -- unexpected token\n\n\
    error: expected `;`, found `y`\n  --> /tmp/tmp12zwnc3t.rs:25:18\n   |\n25 |  \
    \           x = a\n   |                  ^ help: add `;` here\n26 |          \
    \   y = b\n   |             - unexpected token\n\nerror: expected `;`, found `y`\n\
    \  --> /tmp/tmp12zwnc3t.rs:29:18\n   |\n29 |             x = b\n   |         \
    \         ^ help: add `;` here\n30 |             y = c\n   |             - unexpected\
    \ token\n\nerror: expected `;`, found `y`\n  --> /tmp/tmp12zwnc3t.rs:33:18\n \
    \  |\n33 |             x = c\n   |                  ^ help: add `;` here\n34 |\
    \             y = a\n   |             - unexpected token\n\nerror: expected `;`,\
    \ found keyword `for`\n  --> /tmp/tmp12zwnc3t.rs:37:24\n   |\n37 |         let\
    \ mut s = 0.0\n   |                        ^ help: add `;` here\n38 |        \
    \ \n39 |         for j in 0..3 {\n   |         --- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmp12zwnc3t.rs:40:28\n   |\n40\
    \ |             let mut d = 0.0\n   |                            ^ help: add `;`\
    \ here\n41 |             \n42 |             if j == 0 {\n   |             -- unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp12zwnc3t.rs:9:16\n  |\n\
    7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |             \
    \                                      --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |    "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    if a + b >\
    \ c {\n        return -1\n    }\n    \n    if a + c > b {\n        return -1\n\
    \    }\n    \n    if b + c > a {\n        return -1\n    }\n    \n    let mut\
    \ area = 0.0;\n    \n    if a + b > c {\n        area = area + (b - c) * (b +\
    \ c) / 2.0;\n    }\n    \n    if a + c > b {\n        area = area + (c - a) *\
    \ (c + a) / 2.0;\n    }\n    \n    if b + c > a {\n        area = area + (a -\
    \ b) * (a + b) / 2.0;\n    }\n    \n    area = area.round();\n    \n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphw_slr4x.rs:10:16\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n10 |         return -1\n   |                ^^\n   |            \
    \    |\n   |                expected `f64`, found integer\n   |              \
    \  help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide `isize` by\
    \ `{float}`\n  --> /tmp/tmphw_slr4x.rs:24:41\n   |\n24 |         area = area +\
    \ (b - c) * (b + c) / 2.0;\n   |                                         ^ no\
    \ implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmphw_slr4x.rs:28:41\n   |\n28 |         area = area + (c - a) * (c\
    \ + a) / 2.0;\n   |                                         ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmphw_slr4x.rs:32:41\n\
    \   |\n32 |         area = area + (a - b) * (a + b) / 2.0;\n   |             \
    \                            ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   ="
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        _ => if a + b > c { \n            a / b + c / a \n\
    \        } else { \n            c / a + b / c \n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7e9dy_k7.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             a / b + c / a \n   |             ^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    11 |             (a / b + c / a) as f64 \n   |             +             ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7e9dy_k7.rs:13:13\n   |\n7  |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |              \
    \                                     --- expected `f64` because of return type\n\
    ...\n13 |             c / a + b / c \n   |             ^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    13 |             (c / a + b / c) as f64 \n   |             +             ++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    \n    if a + c > b {\n        return -1\n    }\n\
    \    \n    if b + c > a {\n        return -1\n    }\n    \n    let mut area =\
    \ 0.0;\n    \n    area = area + (b * c);\n    area = area + (a * c);\n    area\
    \ = area + (a * b);\n    area = area + (b * a);\n    \n    area = area.round();\n\
    \    \n    area = area / 4.0;\n    \n    return area;\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw95dy1pw.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpw95dy1pw.rs:22:17\n   |\n22 |     area = area +\
    \ (b * c);\n   |                 ^ no implementation for `{float} + isize`\n \
    \  |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpw95dy1pw.rs:23:17\n   |\n23 |\
    \     area = area + (a * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpw95dy1pw.rs:24:17\n   |\n24 |\
    \     area = area + (a * b);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n "
  stdout: ''
  timestamp: 1659976620
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        x => if x > c { -1.0 } else { 1.0 },\n        y =>\
    \ if y > b { -1.0 } else { 1.0 },\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpnqw5mj59.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n    area\
    \ = area + (a * b) - (c * b);\n    area = area + (a * c) - (b * c);\n    area\
    \ = area + (c * a) - (b * a);\n    area = area + (c * b) - (a * b);\n    area\
    \ = area + (a * c) - (c * a);\n    area = area + (b * c) - (a * c);\n    area\
    \ = area / 2.0;\n    area = round(area as f64);\n    return area;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp95kktyia.rs:25:12\n\
    \   |\n25 |     area = round(area as f64);\n   |            ^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp95kktyia.rs:9:16\n\
    \  |\n7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |       \
    \                                            --- expected `f64` because of return\
    \ type\n8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n\
    \  |                |\n  |                expected `f64`, found integer\n  | \
    \               help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add\
    \ `isize` to `{float}`\n  --> /tmp/tmp95kktyia.rs:18:17\n   |\n18 |     area =\
    \ area + (a * b) - (c * b);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp95kktyia.rs:19:17\n   |\n19 |\
    \     area = area + (a * c) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp95kktyia.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (b * a);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = 0.0;\n    if\
    \ a + b > c {\n        s = s + (a + b - c) * 0.5;\n    }\n    if a + c > b {\n\
    \        s = s + (a + c - b) * 0.5;\n    }\n    if b + c > a {\n        s = s\
    \ + (b + c - a) * 0.5;\n    }\n    return s;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpqpi9f16k.rs:19:29\n\
    \   |\n19 |         s = s + (a + b - c) * 0.5;\n   |                         \
    \    ^ no implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmpqpi9f16k.rs:22:29\n   |\n22 |         s = s + (a + c - b) * 0.5;\n\
    \   |                             ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpqpi9f16k.rs:25:29\n   |\n\
    25 |         s = s + (b + c - a) * 0.5;\n   |                             ^ no\
    \ implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area = area\
    \ + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n    area = area\
    \ / 2.0;\n    area = area.round();\n    return area;\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgiub18fs.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpgiub18fs.rs:18:17\n   |\n18 |     area = area +\
    \ (a * b) - (c * c);\n   |                 ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpgiub18fs.rs:19:17\n   |\n19 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpgiub18fs.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n      "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n    }\n\
    \    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n   \
    \ area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n \
    \   area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp2cu3uy_4.rs:18:19\n\
    \   |\n18 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp2cu3uy_4.rs:19:19\n\
    \   |\n19 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp2cu3uy_4.rs:20:19\n\
    \   |\n20 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp2cu3uy_4.rs:21:19\n\
    \   |\n21 |     area += a * b * 0.5;\n   |                   ^ no implementati"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area_sum:\
    \ f64 = 0.0;\n    let mut area_product: f64 = 0.0;\n    \n    if a + b > c {\n\
    \        area_sum += (a + b) * 0.5;\n        area_product += (a * b) * 0.5;\n\
    \    }\n    \n    if a + c > b {\n        area_sum += (a + c) * 0.5;\n       \
    \ area_product += (a * c) * 0.5;\n    }\n    \n    if b + c > a {\n        area_sum\
    \ += (b + c) * 0.5;\n        area_product += (b * c) * 0.5;\n    }\n    \n   \
    \ if area_sum > area_product {\n        area_sum += area_product;\n        area_product\
    \ = area_sum;\n    }\n    \n    if area_sum < area_product {\n        area_product\
    \ -= area_sum;\n        area_sum = area_product;\n    }\n    \n    area_sum.round()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpdrsb3mvq.rs:12:29\n\
    \   |\n12 |         area_sum += (a + b) * 0.5;\n   |                         \
    \    ^ no implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmpdrsb3mvq.rs:13:33\n   |\n13 |         area_product += (a * b) *\
    \ 0.5;\n   |                                 ^ no implementation for `isize *\
    \ {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpdrsb3mvq.rs:17:29\n   |\n\
    17 |         area_sum += (a + c) * 0.5;\n   |                             ^ no\
    \ implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmpdrsb3mvq.rs:18:33\n   |\n18"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum: f64\
    \ = 0.0;\n    sum += a;\n    sum += b;\n    sum += c;\n    if sum > c {\n    \
    \    sum -= c;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `f64`\n --> /tmp/tmpks3ngdr3.rs:9:9\n\
    \  |\n9 |     sum += a;\n  |         ^^ no implementation for `f64 += isize`\n\
    \  |\n  = help: the trait `AddAssign<isize>` is not implemented for `f64`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `f64`\n  --> /tmp/tmpks3ngdr3.rs:10:9\n   |\n10 |     sum += b;\n\
    \   |         ^^ no implementation for `f64 += isize`\n   |\n   = help: the trait\
    \ `AddAssign<isize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `f64`\n  --> /tmp/tmpks3ngdr3.rs:11:9\n   |\n11 |     sum += c;\n\
    \   |         ^^ no implementation for `f64 += isize`\n   |\n   = help: the trait\
    \ `AddAssign<isize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpks3ngdr3.rs:12:14\n   |\n12 |     if sum > c {\n   |  \
    \            ^ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representati"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    \n    if a + c > b {\n        return -1\n    }\n\
    \    \n    if b + c > a {\n        return -1\n    }\n    \n    let area = (a *\
    \ b + c * a - b * c) / (2.0 * a)\n    \n    if area < 0.0 {\n        return -1.0\n\
    \    }\n    \n    return area.round()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpw_yt1v7q.rs:20:51\n\
    \   |\n20 |     let area = (a * b + c * a - b * c) / (2.0 * a)\n   |         \
    \                                          ^ help: add `;` here\n21 |     \n22\
    \ |     if area < 0.0 {\n   |     -- unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpw_yt1v7q.rs:9:16\n  |\n7 | fn triangle_area(a: isize, b:\
    \ isize, c: isize) -> f64 {\n  |                                             \
    \      --- expected `f64` because of return type\n8 |     if a + b > c {\n9 |\
    \         return -1\n  |                ^^\n  |                |\n  |        \
    \        expected `f64`, found integer\n  |                help: use a float literal:\
    \ `-1.0`\n\nerror[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpw_yt1v7q.rs:20:47\n\
    \   |\n20 |     let area = (a * b + c * a - b * c) / (2.0 * a)\n   |         \
    \                                      ^ no implementation for `{float} * isize`\n\
    \   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    \n    let mut area = 0.0;\n    \n    if a +\
    \ c > b {\n        area = area + (b - c) * 0.5;\n    }\n    \n    if b + c > a\
    \ {\n        area = area + (a - b) * 0.5;\n    }\n    \n    if a + b > c {\n \
    \       area = area + (c - a) * 0.5;\n    }\n    \n    area\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpx21mgob0.rs:15:31\n\
    \   |\n15 |         area = area + (b - c) * 0.5;\n   |                       \
    \        ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmpx21mgob0.rs:19:31\n   |\n19 |         area\
    \ = area + (a - b) * 0.5;\n   |                               ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpx21mgob0.rs:23:31\n\
    \   |\n23 |         area = area + (c - a) * 0.5;\n   |                       \
    \        ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut area: f64 = 0.0;\n \
    \   area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1z075v3.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl1z075v3.rs:18:12\n   |\n17 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n18 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = (a + b + c) / 2;\n  \
    \  if s == 0 {\n        return -1\n    }\n    s *= s;\n    if s == a {\n     \
    \   return b * c / 2\n    }\n    if s == b {\n        return a * c / 2\n    }\n\
    \    if s == c {\n        return a * b / 2\n    }\n    return -1\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptlm2imrp.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    if a + c > b {\n        return -1.0;\n    }\n\
    \    if b + c > a {\n        return -1.0;\n    }\n    let mut s = (a + b + c)\
    \ / 2;\n    if s % 2 == 0 {\n        return s / 2;\n    }\n    else if s == 0\
    \ {\n        return 0.0;\n    }\n    else {\n        return -1.0;\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwwjjzv.rs:19:16\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n19 |         return s / 2;\n   |                ^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    19 |         return (s / 2) as f64;\n   |                +     ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = (a + b + c) /\
    \ 2.0;\n    if s == 0.0 {\n        return -1.0;\n    }\n    let mut u = (a + b)\
    \ / 2.0;\n    let mut v = (c + b) / 2.0;\n    if u > v {\n        u.swap(v);\n\
    \    }\n    let mut area: f64 = 0.0;\n    while u != 0.0 {\n        area += u;\n\
    \        u /= 2.0;\n    }\n    while v != 0.0 {\n        area += v;\n        v\
    \ /= 2.0;\n    }\n    area /= 2.0;\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmprgqoc_l6.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmprgqoc_l6.rs:21:25\n   |\n21 |     let mut u = (a + b) / 2.0;\n\
    \   |                         ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmprgqoc_l6.rs:22:25\n   |\n22 |   \
    \  let mut v = (c + b) / 2.0;\n   |                         ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = a + b + c;\n    if s\
    \ > 0 {\n        s /= 2;\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0kg2r94v.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0kg2r94v.rs:21:5\n   |\n7  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n21 |     s\n   |     ^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    21 |     s as f64\n   |       ++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        1 => 1.0,\n        _ => match a + b {\n          \
    \  a if a > c => 0.0,\n            b if b > c => 1.0,\n            c if c > a\
    \ => 1.0,\n            _ => 2.0 * (a + b + c) / 3.0,\n        },\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmp914oo4cc.rs:15:22\n\
    \   |\n15 |             _ => 2.0 * (a + b + c) / 3.0,\n   |                  \
    \    ^ no implementation for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0;\n    \n\
    \    area += a * b\n    area += a * c\n    area += b * c\n    \n    area = area.round();\n\
    \    \n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area`\n  --> /tmp/tmpmwxldt2t.rs:20:18\n  \
    \ |\n20 |     area += a * b\n   |                  ^ help: add `;` here\n21 |\
    \     area += a * c\n   |     ---- unexpected token\n\nerror: expected `;`, found\
    \ `area`\n  --> /tmp/tmpmwxldt2t.rs:21:18\n   |\n21 |     area += a * c\n   |\
    \                  ^ help: add `;` here\n22 |     area += b * c\n   |     ----\
    \ unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmpmwxldt2t.rs:22:18\n\
    \   |\n22 |     area += b * c\n   |                  ^ help: add `;` here\n23\
    \ |     \n24 |     area = area.round();\n   |     ---- unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpmwxldt2t.rs:9:16\n  |\n7 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n  |                                   \
    \                --- expected `f64` because of return type\n8 |     if a + b >\
    \ c {\n9 |         return -1\n  |                ^^\n  |                |\n  |\
    \                expected `f64`, found integer\n  |                help: use a\
    \ float literal: `-1.0`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpmwxldt2t.rs:20:10\n   |\n20 |     area += a * b\n   |         \
    \ ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpmwxldt2t.rs:21:10\n   |\n21 |     area += a * c\n   |         \
    \ ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as Add"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s > b {\n        s /= 2;\n\
    \    }\n    if s > c {\n        s /= 2;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp66dutb7x.rs:18:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n18 |     s\n   |     ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n18 |     s as f64\n   |       ++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area_sum:\
    \ f64 = 0.0;\n    if a + b > c {\n        area_sum += (a + b) * (a + c) / 2.0;\n\
    \    }\n    if a + c > b {\n        area_sum += (a + c) * (b + c) / 2.0;\n   \
    \ }\n    if b + c > a {\n        area_sum += (b + c) * (a + b) / 2.0;\n    }\n\
    \    area_sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpuc6zqs46.rs:10:39\n\
    \   |\n10 |         area_sum += (a + b) * (a + c) / 2.0;\n   |               \
    \                        ^ no implementation for `isize / {float}`\n   |\n   =\
    \ help: the trait `Div<{float}>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpuc6zqs46.rs:13:39\n   |\n13 |   \
    \      area_sum += (a + c) * (b + c) / 2.0;\n   |                            \
    \           ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmpuc6zqs46.rs:16:39\n   |\n16 |         area_sum\
    \ += (b + c) * (a + b) / 2.0;\n   |                                       ^ no\
    \ implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 3 previous errors\n\nFo"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n\
    \    s += a;\n    s += b;\n    s += c;\n    if s > 0.0 {\n        return s.sqrt();\n\
    \    } else {\n        return -1.0;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n --> /tmp/tmpse3_m7g3.rs:9:7\n\
    \  |\n9 |     s += a;\n  |       ^^ no implementation for `{float} += isize`\n\
    \  |\n  = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpse3_m7g3.rs:10:7\n   |\n10 |\
    \     s += b;\n   |       ^^ no implementation for `{float} += isize`\n   |\n\
    \   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `AddAssign<Rhs>`:\n      \
    \       <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n          \
    \   <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpse3_m7g3.rs:11:7\n\
    \   |\n11 |     s += c;\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0689]: can't call method `sqrt` on ambiguous numeric type `{float}`\n\
    \  --> /tmp/tmpse3_m7g3.rs:13:18\n   |\n13 |         return s.sqrt();\n   |  \
    \                ^^^^\n   |\nhelp: you must specify a type for "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    let mut area:\
    \ f64 = 0.0;\n    \n    if a + b > c {\n        area = (a * b) / c;\n    } else\
    \ {\n        area = (a * b) / c;\n    }\n    \n    if a + c > b {\n        area\
    \ = (a * c) / b;\n    } else {\n        area = (a * c) / b;\n    }\n    \n   \
    \ if b + c > a {\n        area = (b * c) / a;\n    } else {\n        area = (b\
    \ * c) / a;\n    }\n    \n    area = area.round();\n    \n    return area;\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjq4g7ibn.rs:12:16\n   |\n\
    9  |     let mut area: f64 = 0.0;\n   |                   --- expected due to\
    \ this type\n...\n12 |         area = (a * b) / c;\n   |                ^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n12 |         area = ((a * b) / c) as f64;\n   |           \
    \     +           ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjq4g7ibn.rs:14:16\n\
    \   |\n9  |     let mut area: f64 = 0.0;\n   |                   --- expected\
    \ due to this type\n...\n14 |         area = (a * b) / c;\n   |              \
    \  ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n14 |         area = ((a * b) / c) as f64;\n   |        \
    \        +           ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjq4g7ibn.rs:18:16\n\
    \   |\n9  |     let mut area: f64 = 0.0;\n   |                   --- expected\
    \ due to this type\n...\n18 |         area = (a * c) / b;\n   |              \
    \  ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n18 |         area = ((a * c) / b) as f64;\n   |        \
    \        +           ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjq4g7ibn.rs:20:16\n\
    \   |\n9  |     let mut area: f64 = 0.0;\n   |                   --- expected\
    \ due to this type\n...\n20 |         area = (a * c) / b;\n   |              \
    \  ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n20 |         area = ((a * c) / b) as f64;\n   |        \
    \        +           ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjq4g7ibn.rs:24:16\n\
    \   |\n9  |     let mut area: f64 = 0.0;\n   |                   --- expected\
    \ due to thi"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    if a + c > b {\n        return -1.0;\n    }\n\
    \    if b + c > a {\n        return -1.0;\n    }\n    let mut s = (a + b + c)\
    \ / 2.0;\n    if s > 0.0 {\n        return s * s;\n    }\n    return -1.0;\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp32h3m_od.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area = area\
    \ + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n    area = area\
    \ / 2.0;\n    area = round(area, 2);\n    return area;\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpit7z2q3p.rs:23:12\n\
    \   |\n23 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpit7z2q3p.rs:9:16\n  |\n\
    7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |             \
    \                                      --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:18:17\n   |\n18 |     area = area +\
    \ (a * b) - (c * c);\n   |                 ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:19:17\n   |\n19 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    \n    if a + c > b {\n        return -1\n    }\n\
    \    \n    if b + c > a {\n        return -1\n    }\n    \n    let mut area =\
    \ 0.0;\n    \n    if a + b > c {\n        area = (a * b) / c\n    }\n    \n  \
    \  if a + c > b {\n        area = (a * c) / b\n    }\n    \n    if b + c > a {\n\
    \        area = (b * c) / a\n    }\n    \n    area\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9jh3ileg.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9jh3ileg.rs:23:16\n   |\n20 |     let mut area = 0.0;\n   |   \
    \                 --- expected due to this value\n...\n23 |         area = (a\
    \ * b) / c\n   |                ^^^^^^^^^^^ expected floating-point number, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9jh3ileg.rs:27:16\n\
    \   |\n20 |     let mut area = 0.0;\n   |                    --- expected due\
    \ to this value\n...\n27 |         area = (a * c) / b\n   |                ^^^^^^^^^^^\
    \ expected floating-point number, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9jh3ileg.rs:31:16\n   |\n20 |     let mut area = 0.0;\n   |   \
    \                 --- expected due to this value\n...\n31 |         area = (b\
    \ * c) / a\n   |                ^^^^^^^^^^^ expected floating-point number, found\
    \ `isize`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area = area\
    \ + (a * b) - (a * c);\n    area = area + (b * c) - (b * a);\n    area = area\
    \ + (c * a) - (c * b);\n    area = area / 2.0;\n    area = area.round();\n   \
    \ return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprqxp8y_p.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmprqxp8y_p.rs:18:17\n   |\n18 |     area = area +\
    \ (a * b) - (a * c);\n   |                 ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmprqxp8y_p.rs:19:17\n   |\n19 |\
    \     area = area + (b * c) - (b * a);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmprqxp8y_p.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (c * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n      "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area: f64 = 0.0;\n    area\
    \ = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n   \
    \ return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd8qc099k.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd8qc099k.rs:18:12\n   |\n17 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n18 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        1 => 1.0,\n        _ => -1.0,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpren0xc92.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let area = (a * b + c * a - b * c)\
    \ / (2.0 * a)\n    return area.round()\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmpbzw4722m.rs:17:51\n\
    \   |\n17 |     let area = (a * b + c * a - b * c) / (2.0 * a)\n   |         \
    \                                          ^ help: add `;` here\n18 |     return\
    \ area.round()\n   |     ------ unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpbzw4722m.rs:9:16\n  |\n7 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n  |                                                   ---\
    \ expected `f64` because of return type\n8 |     if a + b > c {\n9 |         return\
    \ -1\n  |                ^^\n  |                |\n  |                expected\
    \ `f64`, found integer\n  |                help: use a float literal: `-1.0`\n\
    \nerror[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpbzw4722m.rs:17:47\n\
    \   |\n17 |     let area = (a * b + c * a - b * c) / (2.0 * a)\n   |         \
    \                                      ^ no implementation for `{float} * isize`\n\
    \   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return\
    \ 0.0;\n    }\n    return s * s;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwz960_74.rs:15:12\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n15 |     return s * s;\n   |            ^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n15 |     return\
    \ (s * s) as f64;\n   |            +     ++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area: f64 = 0.0;\n    area\
    \ = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n   \
    \ return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd8qc099k.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd8qc099k.rs:18:12\n   |\n17 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n18 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area = area\
    \ + (b * c);\n    area = area + (a * c);\n    area = area + (a * b);\n    area\
    \ = area + (b * a);\n    area = area / 3.0;\n    area = round(area, 2);\n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpbn67ytrq.rs:23:12\n\
    \   |\n23 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbn67ytrq.rs:9:16\n  |\n\
    7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |             \
    \                                      --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpbn67ytrq.rs:18:17\n   |\n18 |     area = area +\
    \ (b * c);\n   |                 ^ no implementation for `{float} + isize`\n \
    \  |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpbn67ytrq.rs:19:17\n   |\n19 |\
    \     area = area + (a * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpbn67ytrq.rs:20:17\n   |\n20 |\
    \     area = area + (a * b);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isiz"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_1nydc9x.rs:12:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n12 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n12 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        _ => if a + b > c { \n            a / 2.0 + b / 2.0\
    \ + c / 2.0\n        } else { \n            c / 2.0 + a / 2.0 + b / 2.0\n    \
    \    },\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmputq20kt3.rs:11:15\n\
    \   |\n11 |             a / 2.0 + b / 2.0 + c / 2.0\n   |               ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmputq20kt3.rs:11:25\n\
    \   |\n11 |             a / 2.0 + b / 2.0 + c / 2.0\n   |                    \
    \     ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmputq20kt3.rs:11:35\n   |\n11 |             a / 2.0 + b / 2.0 + c\
    \ / 2.0\n   |                                   ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmputq20kt3.rs:13:15\n\
    \   |\n13 |           "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut area = 0.0;\n   \
    \ area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n \
    \   area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area \n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpt6mo6vu3.rs:18:19\n\
    \   |\n18 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpt6mo6vu3.rs:19:19\n\
    \   |\n19 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpt6mo6vu3.rs:20:19\n\
    \   |\n20 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpt6mo6vu3.rs:21:19\n\
    \   |\n21 |     area += a * b * 0.5;\n   |                   ^ no implementati"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area = area\
    \ + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n    area = area\
    \ / 2.0;\n    area = round(area, 2);\n    return area;\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpit7z2q3p.rs:23:12\n\
    \   |\n23 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpit7z2q3p.rs:9:16\n  |\n\
    7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |             \
    \                                      --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:18:17\n   |\n18 |     area = area +\
    \ (a * b) - (c * c);\n   |                 ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:19:17\n   |\n19 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut area = 0.0;\n   \
    \ area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n   \
    \ area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n   \
    \ area = area / 2.0;\n    area = round(area, 2);\n    return area;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp0jo316pt.rs:23:12\n\
    \   |\n23 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp0jo316pt.rs:18:17\n\
    \   |\n18 |     area = area + (a * b) - (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp0jo316pt.rs:19:17\n\
    \   |\n19 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp0jo316pt.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isiz"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = 0.0\n    s += a * b\n\
    \    s += a * c\n    s += b * c\n    s / 3.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `s`\n  --> /tmp/tmpdgvw8o3t.rs:17:20\n   |\n\
    17 |     let mut s = 0.0\n   |                    ^ help: add `;` here\n18 | \
    \    s += a * b\n   |     - unexpected token\n\nerror: expected `;`, found `s`\n\
    \  --> /tmp/tmpdgvw8o3t.rs:18:15\n   |\n18 |     s += a * b\n   |            \
    \   ^ help: add `;` here\n19 |     s += a * c\n   |     - unexpected token\n\n\
    error: expected `;`, found `s`\n  --> /tmp/tmpdgvw8o3t.rs:19:15\n   |\n19 |  \
    \   s += a * c\n   |               ^ help: add `;` here\n20 |     s += b * c\n\
    \   |     - unexpected token\n\nerror: expected `;`, found `s`\n  --> /tmp/tmpdgvw8o3t.rs:20:15\n\
    \   |\n20 |     s += b * c\n   |               ^ help: add `;` here\n21 |    \
    \ s / 3.0\n   |     - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpdgvw8o3t.rs:9:16\n  |\n7 | fn triangle_area(a: isize, b: isize, c: isize)\
    \ -> f64 {\n  |                                                   --- expected\
    \ `f64` because of return type\n8 |     if a + b > c {\n9 |         return -1\n\
    \  |                ^^\n  |                |\n  |                expected `f64`,\
    \ found integer\n  |                help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpdgvw8o3t.rs:18:7\n   |\n\
    18 |     s += a * b\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpdgvw8o3t.rs:19:7\n\
    \   |\n19 |     s += a * c\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0\n    area += a\
    \ * b\n    area += a * c\n    area += b * c\n    area /= 3.0\n    area = area.round()\n\
    \    return area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area`\n  --> /tmp/tmpm8ttp327.rs:17:23\n  \
    \ |\n17 |     let mut area = 0.0\n   |                       ^ help: add `;` here\n\
    18 |     area += a * b\n   |     ---- unexpected token\n\nerror: expected `;`,\
    \ found `area`\n  --> /tmp/tmpm8ttp327.rs:18:18\n   |\n18 |     area += a * b\n\
    \   |                  ^ help: add `;` here\n19 |     area += a * c\n   |    \
    \ ---- unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmpm8ttp327.rs:19:18\n\
    \   |\n19 |     area += a * c\n   |                  ^ help: add `;` here\n20\
    \ |     area += b * c\n   |     ---- unexpected token\n\nerror: expected `;`,\
    \ found `area`\n  --> /tmp/tmpm8ttp327.rs:20:18\n   |\n20 |     area += b * c\n\
    \   |                  ^ help: add `;` here\n21 |     area /= 3.0\n   |     ----\
    \ unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmpm8ttp327.rs:21:16\n\
    \   |\n21 |     area /= 3.0\n   |                ^ help: add `;` here\n22 |  \
    \   area = area.round()\n   |     ---- unexpected token\n\nerror: expected `;`,\
    \ found keyword `return`\n  --> /tmp/tmpm8ttp327.rs:22:24\n   |\n22 |     area\
    \ = area.round()\n   |                        ^ help: add `;` here\n23 |     return\
    \ area\n   |     ------ unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpm8ttp327.rs:9:16\n  |\n7 | fn triangle_area(a: isize, b: isize, c: isize)\
    \ -> f64 {\n  |                                                   --- expected\
    \ `f64` because of return type\n8 |     if a + b > c {\n9 |         return -1\n\
    \  |                ^^\n  |                |\n  |                expected `f64`,\
    \ found integer\n  |                help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpm8ttp327.rs:18:10\n  \
    \ |\n18 |     area += a * b\n   |          ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as Add"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    if a + c > b {\n        return -1.0;\n    }\n\
    \    if b + c > a {\n        return -1.0;\n    }\n    let mut area = 0.0;\n  \
    \  area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n  \
    \  area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n  \
    \  area = area / 2.0;\n    area = round(area, 2);\n    return area;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpql_ug_1x.rs:23:12\n\
    \   |\n23 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpql_ug_1x.rs:18:17\n\
    \   |\n18 |     area = area + (a * b) - (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpql_ug_1x.rs:19:17\n\
    \   |\n19 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpql_ug_1x.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isiz"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return\
    \ 0.0;\n    }\n    return s * s;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwz960_74.rs:15:12\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n15 |     return s * s;\n   |            ^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n15 |     return\
    \ (s * s) as f64;\n   |            +     ++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    \n    let mut s = (a + b + c) / 2.0;\n    \n\
    \    if s > 0.0 {\n        let mut area = 0.0;\n        \n        if a > b {\n\
    \            area = area + (b - s) * c;\n        }\n        \n        if a > c\
    \ {\n            area = area + (s - a) * b;\n        }\n        \n        if b\
    \ > c {\n            area = area + (s - b) * a;\n        }\n        \n       \
    \ return area / 2.0;\n    }\n    \n    return -1.0;\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpltpxaham.rs:12:29\n\
    \   |\n12 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s *= s;\n    if s > 0 {\n\
    \        s /= 2;\n    }\n    s\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpji5sra81.rs:16:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s\n   |     ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n16 |     s as f64\n   |       ++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return\
    \ 0.0;\n    }\n    if a > b {\n        (a, b) = (b, a);\n    }\n    if c > b {\n\
    \        (c, c) = (c, b);\n    }\n    if a > c {\n        (a, c) = (c, a);\n \
    \   }\n    if b > c {\n        (b, b) = (b, c);\n    }\n    s * (s - a) * (s -\
    \ b) * (s - c)\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpku25guih.rs:27:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n27 |     s * (s - a) * (s - b) * (s - c)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n27 |     (s * (s - a) * (s - b) * (s - c)) as f64\n   |   \
    \  +                               ++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut s = 0.0;\n    s += a\
    \ * b as f64;\n    s += a * c as f64;\n    s += b * c as f64;\n    s /= 2.0;\n\
    \    s * (s as f64)\n}\n\nfn main() {\n    let candidate = triangle_area;\n  \
    \  assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpziusit6b.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply `isize`\
    \ by `f64`\n  --> /tmp/tmpziusit6b.rs:18:12\n   |\n18 |     s += a * b as f64;\n\
    \   |            ^ no implementation for `isize * f64`\n   |\n   = help: the trait\
    \ `Mul<f64>` is not implemented for `isize`\n   = help: the following other types\
    \ implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n          \
    \   <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n            \
    \ <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a\
    \ i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a isize\
    \ as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot multiply `isize`\
    \ by `f64`\n  --> /tmp/tmpziusit6b.rs:19:12\n   |\n19 |     s += a * c as f64;\n\
    \   |            ^ no implementation for `isize * f64`\n   |\n   = help: the trait\
    \ `Mul<f64>` is not implemented for `isize`\n   = help: the following other types\
    \ implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n          \
    \   <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n            \
    \ <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a\
    \ i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a isize\
    \ as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot multiply `isize`\
    \ by `f64`\n  --> /tmp/tmpziusit6b.rs:20:12\n   |\n20 |     s += b * c as f64;\n\
    \   |            ^ no implementation for `isize * f64`\n   |\n   = help: the trait\
    \ `Mul<f64>` is not implemented for `isize`\n   = help: the following other types\
    \ implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n          \
    \   <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n           "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let area = (a * b + c * a - b * c)\
    \ / (2.0 * a)\n    return area.round()\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmpbzw4722m.rs:17:51\n\
    \   |\n17 |     let area = (a * b + c * a - b * c) / (2.0 * a)\n   |         \
    \                                          ^ help: add `;` here\n18 |     return\
    \ area.round()\n   |     ------ unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpbzw4722m.rs:9:16\n  |\n7 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n  |                                                   ---\
    \ expected `f64` because of return type\n8 |     if a + b > c {\n9 |         return\
    \ -1\n  |                ^^\n  |                |\n  |                expected\
    \ `f64`, found integer\n  |                help: use a float literal: `-1.0`\n\
    \nerror[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpbzw4722m.rs:17:47\n\
    \   |\n17 |     let area = (a * b + c * a - b * c) / (2.0 * a)\n   |         \
    \                                      ^ no implementation for `{float} * isize`\n\
    \   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut area: f64 = 0.0;\n \
    \   area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1z075v3.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl1z075v3.rs:18:12\n   |\n17 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n18 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return\
    \ 0;\n    }\n    if s == a {\n        return b * c;\n    }\n    if s == b {\n\
    \        return a * c;\n    }\n    if s == c {\n        return a * b\n    }\n\
    \    return -1;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxse7p3gi.rs:13:16\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n13 |         return 0;\n   |                ^\n   |             \
    \   |\n   |                expected `f64`, found integer\n   |               \
    \ help: use a float literal: `0.0`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n    area\
    \ = area + (b * c);\n    area = area + (a * c);\n    area = area + (a * b);\n\
    \    area = area + (b * a);\n    area = area / 3.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4jtr49u1.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmp4jtr49u1.rs:18:17\n   |\n18 |     area = area +\
    \ (b * c);\n   |                 ^ no implementation for `{float} + isize`\n \
    \  |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp4jtr49u1.rs:19:17\n   |\n19 |\
    \     area = area + (a * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp4jtr49u1.rs:20:17\n   |\n20 |\
    \     area = area + (a * b);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let area = (a * b + c * a - b * c)\
    \ / 2;\n    if area < 0 {\n        return -1\n    }\n    return area.round()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkzeiyb4y.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0599]: no method named `round`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpkzeiyb4y.rs:21:17\n\
    \   |\n21 |     return area.round()\n   |                 ^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut area: f64 = 0.0;\n \
    \   area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1z075v3.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl1z075v3.rs:18:12\n   |\n17 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n18 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a = a + b;\n\
    \    let mut b = b + c;\n    let mut c = c + a;\n    if a + b > c {\n        a\
    \ = c;\n        b = a + b;\n    }\n    if a + c > b {\n        a = b;\n      \
    \  c = a + c;\n    }\n    if b + c > a {\n        b = c;\n        c = b + c;\n\
    \    }\n    (a * b) / c\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb0soogc7.rs:23:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n23 |     (a * b) / c\n   |     ^^^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n23 |     ((a\
    \ * b) / c) as f64\n   |     +           ++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    \n    let mut area_sum: f64 = 0.0;\n\
    \    area_sum += a * b\n    area_sum += a * c\n    area_sum += b * c\n    \n \
    \   area_sum / 3.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area_sum`\n  --> /tmp/tmpqrg_cehp.rs:19:22\n\
    \   |\n19 |     area_sum += a * b\n   |                      ^ help: add `;` here\n\
    20 |     area_sum += a * c\n   |     -------- unexpected token\n\nerror: expected\
    \ `;`, found `area_sum`\n  --> /tmp/tmpqrg_cehp.rs:20:22\n   |\n20 |     area_sum\
    \ += a * c\n   |                      ^ help: add `;` here\n21 |     area_sum\
    \ += b * c\n   |     -------- unexpected token\n\nerror: expected `;`, found `area_sum`\n\
    \  --> /tmp/tmpqrg_cehp.rs:21:22\n   |\n21 |     area_sum += b * c\n   |     \
    \                 ^ help: add `;` here\n22 |     \n23 |     area_sum / 3.0\n \
    \  |     -------- unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqrg_cehp.rs:9:16\n\
    \  |\n7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |       \
    \                                            --- expected `f64` because of return\
    \ type\n8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n\
    \  |                |\n  |                expected `f64`, found integer\n  | \
    \               help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `f64`\n  --> /tmp/tmpqrg_cehp.rs:19:14\n   |\n19 |     area_sum +=\
    \ a * b\n   |              ^^ no implementation for `f64 += isize`\n   |\n   =\
    \ help: the trait `AddAssign<isize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `f64`\n  --> /tmp/tmpqrg_cehp.rs:20:14\n   |\n20 |   \
    \  area_sum += a * c\n   |              ^^ no implementation for `f64 += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area_sum:\
    \ f64 = 0.0;\n    let mut area_product: f64 = 0.0;\n    \n    if a + b > c {\n\
    \        area_sum += (a + b) * 0.5;\n        area_product += (a * b) * 0.5;\n\
    \    }\n    \n    if a + c > b {\n        area_sum += (a + c) * 0.5;\n       \
    \ area_product += (a * c) * 0.5;\n    }\n    \n    if b + c > a {\n        area_sum\
    \ += (b + c) * 0.5;\n        area_product += (b * c) * 0.5;\n    }\n    \n   \
    \ if area_sum > area_product {\n        area_sum += area_product * 0.5;\n    }\n\
    \    \n    area_sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n  \
    \  assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp69aawau_.rs:12:29\n\
    \   |\n12 |         area_sum += (a + b) * 0.5;\n   |                         \
    \    ^ no implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmp69aawau_.rs:13:33\n   |\n13 |         area_product += (a * b) *\
    \ 0.5;\n   |                                 ^ no implementation for `isize *\
    \ {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmp69aawau_.rs:17:29\n   |\n\
    17 |         area_sum += (a + c) * 0.5;\n   |                             ^ no\
    \ implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmp69aawau_.rs:18:33\n   |\n18"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    \n    if a + c > b {\n        return -1;\n   \
    \ }\n    \n    if b + c > a {\n        return -1;\n    }\n    \n    let mut s\
    \ = (a + b + c) / 2;\n    \n    if s == 0 {\n        return 0;\n    }\n    \n\
    \    if s == 1 {\n        return 1;\n    }\n    \n    if s == 2 {\n        return\
    \ b;\n    }\n    \n    if s == 3 {\n        return c;\n    }\n    \n    if s ==\
    \ 4 {\n        return a;\n    }\n    \n    if s == 5 {\n        return a + b;\n\
    \    }\n    \n    if s == 6 {\n        return a + c;\n    }\n    \n    if s ==\
    \ 7 {\n        return b + c;\n    }\n    \n    if s == 8 {\n        return a +\
    \ b;\n    }\n    \n    if s == 9 {\n        return a + c;\n    }\n    \n    if\
    \ s == 10 {\n        return b + c;\n    }\n    \n    if s == 11 {\n        return\
    \ a + b;\n    }\n    \n    if s == 12 {\n        return a + c;\n    }\n    \n\
    \    if s == 13 {\n        return b + c;\n    }\n    \n    if s == 14 {\n    \
    \    return a + b;\n    }\n    \n    if s == 15 {\n        return a + c;\n   \
    \ }\n    \n    if s == 16 {\n        return b + c;\n    }\n    \n    if s == 17\
    \ {\n        return a + b;\n    }\n    \n    if s == 18 {\n        return a +\
    \ c;\n    }\n    \n    if s == 19 {\n        return b + c;\n    }\n    \n    if\
    \ s == 20 {\n        return a + b;\n    }\n    \n    if s == 21 {\n        return\
    \ a + c;\n    }\n    \n    if s == 22 {\n        return b + c;\n    }\n    \n\
    \    if s == 23 {\n        return a + b;\n    }\n    \n    if s == 24 {\n    \
    \    return a + c;\n    }\n    \n    if s == 25 {\n        return b + c;\n   \
    \ }\n    \n    if s == 26 {\n        return a + b;\n    }\n    \n    if s == 27\
    \ {\n        return a + c;\n    }\n    \n    if s == 28 {\n        return b +\
    \ c;\n    }\n    \n    if s == 29 {\n        return a + b;\n    }\n    \n    if\
    \ s == 30 {\n        return a + c;\n    }\n    \n    if s == 31 {\n        return\
    \ b + c;\n    }\n    \n    if s == 32 {\n        return a + b;\n    }\n    \n\
    \    if s == 33 {\n        return a + c;\n    }\n    \n    if s == 34 {\n    \
    \    return b + c;\n    }\n    \n    if s == \n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmp03vku2t3.rs:163:1\n\
    \    |\n163 | }\n    | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp03vku2t3.rs:9:16\n  |\n7 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n  |                                                   ---\
    \ expected `f64` because of return type\n8 |     if a + b > c {\n9 |         return\
    \ -1;\n  |                ^^\n  |                |\n  |                expected\
    \ `f64`, found integer\n  |                help: use a float literal: `-1.0`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return\
    \ 0.0;\n    }\n    if a > b {\n        (a, b) = (b, a);\n    }\n    if c > b {\n\
    \        (c, a) = (a, c);\n    }\n    if a > c {\n        (a, b) = (b, a);\n \
    \   }\n    if b > c {\n        (b, c) = (c, b);\n    }\n    return s;\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4ky7p_no.rs:27:12\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n27 |     return s;\n   |            ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n27 |     return s\
    \ as f64;\n   |              ++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area = area\
    \ + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n    area = area\
    \ / 2.0;\n    area = round(area, 2);\n    return area;\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpit7z2q3p.rs:23:12\n\
    \   |\n23 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpit7z2q3p.rs:9:16\n  |\n\
    7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |             \
    \                                      --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:18:17\n   |\n18 |     area = area +\
    \ (a * b) - (c * c);\n   |                 ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:19:17\n   |\n19 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0\n    area += a\
    \ * b\n    area += a * c\n    area += b * c\n    area /= 3\n    area = area.round()\n\
    \    return area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area`\n  --> /tmp/tmp37ddeajx.rs:17:23\n  \
    \ |\n17 |     let mut area = 0.0\n   |                       ^ help: add `;` here\n\
    18 |     area += a * b\n   |     ---- unexpected token\n\nerror: expected `;`,\
    \ found `area`\n  --> /tmp/tmp37ddeajx.rs:18:18\n   |\n18 |     area += a * b\n\
    \   |                  ^ help: add `;` here\n19 |     area += a * c\n   |    \
    \ ---- unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmp37ddeajx.rs:19:18\n\
    \   |\n19 |     area += a * c\n   |                  ^ help: add `;` here\n20\
    \ |     area += b * c\n   |     ---- unexpected token\n\nerror: expected `;`,\
    \ found `area`\n  --> /tmp/tmp37ddeajx.rs:20:18\n   |\n20 |     area += b * c\n\
    \   |                  ^ help: add `;` here\n21 |     area /= 3\n   |     ----\
    \ unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmp37ddeajx.rs:21:14\n\
    \   |\n21 |     area /= 3\n   |              ^ help: add `;` here\n22 |     area\
    \ = area.round()\n   |     ---- unexpected token\n\nerror: expected `;`, found\
    \ keyword `return`\n  --> /tmp/tmp37ddeajx.rs:22:24\n   |\n22 |     area = area.round()\n\
    \   |                        ^ help: add `;` here\n23 |     return area\n   |\
    \     ------ unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp37ddeajx.rs:9:16\n\
    \  |\n7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |       \
    \                                            --- expected `f64` because of return\
    \ type\n8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n\
    \  |                |\n  |                expected `f64`, found integer\n  | \
    \               help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmp37ddeajx.rs:18:10\n   |\n18 |     area +=\
    \ a * b\n   |          ^^ no implementation for `{float} += isize`\n   |\n   =\
    \ help: the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        _ => if a + b > c { \n            a / (a + b + c) \n\
    \        } else {\n            b / (a + b + c) \n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdu2jkt3r.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             a / (a + b + c) \n   |             ^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n11 |             (a / (a + b + c)) as f64 \n   |          \
    \   +               ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdu2jkt3r.rs:13:13\n\
    \   |\n7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |             b / (a + b + c) \n   |             ^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n13 |             (b / (a + b + c)) as f64 \n   |          \
    \   +               ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        1 => 1.0,\n        _ => match a + b {\n          \
    \  0 => match b + c {\n                0 => 0.0,\n                1 => 1.0,\n\
    \                _ => -1.0\n            },\n            1 => match a + c {\n \
    \               0 => 0.0,\n                1 => 1.0,\n                _ => -1.0\n\
    \            },\n            _ => -1.0\n        }\n    }\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpfr4tgie8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n\
    \    if a + b > c {\n        area = area + ((a + b) - (c + a));\n    }\n    if\
    \ a + c > b {\n        area = area + ((a + c) - (b + a));\n    }\n    if b + c\
    \ > a {\n        area = area + ((b + c) - (a + b));\n    }\n    area = area.round();\n\
    \    if area == 0.0 {\n        area = -1.0;\n    }\n    return area;\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpvo3d84zq.rs:10:21\n\
    \   |\n10 |         area = area + ((a + b) - (c + a));\n   |                 \
    \    ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  -->\
    \ /tmp/tmpvo3d84zq.rs:13:21\n   |\n13 |         area = area + ((a + c) - (b +\
    \ a));\n   |                     ^ no implementation for `{float} + isize`\n \
    \  |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpvo3d84zq.rs:16:21\n   |\n16 |\
    \         area = area + ((b + c) - (a + b));\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmpvo3d84zq.rs:18:17\n   |\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = (a + b + c) /\
    \ 2.0;\n    let mut area = 0.0;\n    while s > 0.0 {\n        area = area + (s\
    \ * (s - a) * (s - b) * (s - c));\n        s /= 2.0;\n    }\n    area\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp4we_dzun.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    \n    if a + c > b {\n        return -1;\n   \
    \ }\n    \n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area +=\
    \ b * c * 0.5;\n    \n    area = area.round();\n    \n    return area;\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpccmci_57.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply `isize`\
    \ by `{float}`\n  --> /tmp/tmpccmci_57.rs:22:19\n   |\n22 |     area += a * b\
    \ * 0.5;\n   |                   ^ no implementation for `isize * {float}`\n \
    \  |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpccmci_57.rs:23:19\n   |\n\
    23 |     area += a * c * 0.5;\n   |                   ^ no implementation for\
    \ `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpccmci_57.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f6"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    \n    if a + c > b {\n        return -1\n    }\n\
    \    \n    if b + c > a {\n        return -1\n    }\n    \n    let mut area =\
    \ 0.0;\n    \n    area = area + (a * b) - (c * c);\n    area = area + (a * c)\
    \ - (b * b);\n    area = area + (c * a) - (b * c);\n    area = area + (c * b)\
    \ - (a * a);\n    area = area / 2.0;\n    \n    if area < 0.0 {\n        area\
    \ = -1.0;\n    }\n    \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp37ga5xg2.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmp37ga5xg2.rs:22:17\n   |\n22 |     area = area +\
    \ (a * b) - (c * c);\n   |                 ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp37ga5xg2.rs:23:17\n   |\n23 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp37ga5xg2.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n      "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    let mut area_sum:\
    \ f64 = 0.0;\n    \n    if a + b > c {\n        area_sum += (a + b - c) * 0.5;\n\
    \    }\n    \n    if a + c > b {\n        area_sum += (a + c - b) * 0.5;\n   \
    \ }\n    \n    if b + c > a {\n        area_sum += (b + c - a) * 0.5;\n    }\n\
    \    \n    if area_sum > 0.0 {\n        return area_sum * 0.5;\n    }\n    \n\
    \    return -1.0;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpr1gzbb_9.rs:12:33\n\
    \   |\n12 |         area_sum += (a + b - c) * 0.5;\n   |                     \
    \            ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmpr1gzbb_9.rs:16:33\n   |\n16 |         area_sum\
    \ += (a + c - b) * 0.5;\n   |                                 ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpr1gzbb_9.rs:20:33\n\
    \   |\n20 |         area_sum += (b + c - a) * 0.5;\n   |                     \
    \            ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n    }\n\
    \    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n   \
    \ area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n \
    \   area /= 3.0;\n    area = area.round();\n    return area;\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpei7r9876.rs:18:19\n\
    \   |\n18 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpei7r9876.rs:19:19\n\
    \   |\n19 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpei7r9876.rs:20:19\n\
    \   |\n20 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmpei7r9876.rs:22:17\n   |\n22 |     area = area.round();\n\
    \   |           "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = 0.0;\n    s +=\
    \ a;\n    s += b;\n    s += c;\n    s /= 3.0;\n    s * s\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpu9j_6glb.rs:18:7\n\
    \   |\n18 |     s += a;\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpu9j_6glb.rs:19:7\n\
    \   |\n19 |     s += b;\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpu9j_6glb.rs:20:7\n\
    \   |\n20 |     s += c;\n   |       ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    let mut area = 0.0;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area /= 2.0\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area`\n  --> /tmp/tmpem5gm1wn.rs:15:16\n  \
    \ |\n15 |     area /= 2.0\n   |                ^ help: add `;` here\n16 |    \
    \ area\n   |     ---- unexpected token\n\nerror[E0277]: cannot multiply `isize`\
    \ by `{float}`\n  --> /tmp/tmpem5gm1wn.rs:12:19\n   |\n12 |     area += a * b\
    \ * 0.5;\n   |                   ^ no implementation for `isize * {float}`\n \
    \  |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpem5gm1wn.rs:13:19\n   |\n\
    13 |     area += a * c * 0.5;\n   |                   ^ no implementation for\
    \ `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpem5gm1wn.rs:14:19\n\
    \   |\n14 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n     "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = a + b + c;\n    if s\
    \ > 0 {\n        s /= 2;\n    }\n    return s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpccw1w872.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n    }\n\
    \    if b + c > a {\n        return -1.0\n    }\n    let mut area = 0.0;\n   \
    \ area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n   \
    \ area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n   \
    \ area = area / 2.0;\n    area = area.round();\n    return area;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp6g1kg43n.rs:18:17\n\
    \   |\n18 |     area = area + (a * b) - (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp6g1kg43n.rs:19:17\n\
    \   |\n19 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp6g1kg43n.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp6g1kg43n.rs:21:17\n\
    \   |\n21 |     area = area + (c * b) - (a * a);\n   |              "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n\
    \    if a + b > c {\n        area = area + b * c;\n    }\n    if a + c > b {\n\
    \        area = area + c * b;\n    }\n    if b + c > a {\n        area = area\
    \ + a * c;\n    }\n    area = area / 2.0;\n    area = area.round();\n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpeo4g0mmg.rs:10:21\n\
    \   |\n10 |         area = area + b * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpeo4g0mmg.rs:13:21\n\
    \   |\n13 |         area = area + c * b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpeo4g0mmg.rs:16:21\n\
    \   |\n16 |         area = area + a * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmpeo4g0mmg.rs:19:17\n   |\n19 |     area = area.round();\n\
    \   |        "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    if a + b >\
    \ c {\n        return -1;\n    }\n    \n    if a + c > b {\n        return -1;\n\
    \    }\n    \n    if b + c > a {\n        return -1;\n    }\n    \n    let mut\
    \ area: f64 = 0.0;\n    \n    area = (a * b) - (c * a);\n    \n    if area < 0.0\
    \ {\n        area = -area;\n    }\n    \n    area = (a * b) - (c * a);\n    \n\
    \    if area < 0.0 {\n        area = -area;\n    }\n    \n    area = (a * b) -\
    \ (c * a);\n    \n    if area < 0.0 {\n        area = -area;\n    }\n    \n  \
    \  area = (a * b) - (c * a);\n    \n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    \n    area = (a * b) - (c * a);\n    \n    if area < 0.0 {\n     \
    \   area = -area;\n    }\n    \n    area = (a * b) - (c * a);\n    \n    if area\
    \ < 0.0 {\n        area = -area;\n    }\n    \n    area = (a * b) - (c * a);\n\
    \    \n    if area < 0.0 {\n        area = -area;\n    }\n    \n    area = (a\
    \ * b) - (c * a);\n    \n    if area < 0.0 {\n        area = -area;\n    }\n \
    \   \n    area = (a * b) - (c * a);\n    \n    if area < 0.0 {\n        area =\
    \ -area;\n    }\n    \n    area = (a * b) - (c * a);\n    \n    if area < 0.0\
    \ {\n        area = -area;\n    }\n    \n    area = (a * b) - (c * a);\n    \n\
    \    if area < 0.0 {\n        area = -area;\n    }\n    \n    area = (a * b) -\
    \ (c * a);\n    \n    if area < 0.0 {\n        area = -area;\n    }\n    \n  \
    \  area = (a * b) - (c * a);\n    \n    if area < 0.0 {\n        area = -area;\n\
    \    }\n    \n    area = (a * b) - (c * a);\n    \n    if area < 0.0 {\n     \
    \   area = -area;\n    }\n    \n    area = (a * b) - (c * a);\n    \n    if area\
    \ < 0.0 {\n        area = -area;\n    }\n    \n    area = (a * b) - (c * a);\n\
    \    \n    if area < 0.0 {\n        area = -area;\n    }\n    \n    area = (a\
    \ * b) - (c * a);\n    \n    if area < 0.0 {\n        area = -area;\n    }\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzol2lvv0.rs:10:16\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n10 |         return -1;\n   |                ^^\n   |           \
    \     |\n   |                expected `f64`, found integer\n   |             \
    \   help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzol2lvv0.rs:23:12\n   |\n21 |     let mut area: f64 = 0.0;\n   |   \
    \                --- expected due to this type\n22 |     \n23 |     area = (a\
    \ * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n23 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzol2lvv0.rs:29:12\n   |\n21 |     let mut area:\
    \ f64 = 0.0;\n   |                   --- expected due to this type\n...\n29 |\
    \     area = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    29 |     area = ((a * b) - (c * a)) as f64;\n   |            +               \
    \  ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzol2lvv0.rs:35:12\n\
    \   |\n21 |     let mut area: f64 = 0.0;\n   |                   --- expected\
    \ due to this type\n...\n35 |     area = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n35 |     area = ((a * b) - (c * a)) as f64;\n   |         \
    \   +                 ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzol2lvv0.rs:41:12\n\
    \   |\n21 |     let mut area: f64 = 0.0;\n   |                   --- expected\
    \ due to this type\n...\n41 |     area = (a * b) - (c *"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area: f64\
    \ = 0.0;\n    if a + b > c {\n        area = (a * b) / c;\n    } else {\n    \
    \    area = (a * c) / b;\n    }\n    if area > 1.0 {\n        area = 1.0;\n  \
    \  }\n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfqb40p73.rs:10:16\n   |\n\
    8  |     let mut area: f64 = 0.0;\n   |                   --- expected due to\
    \ this type\n9  |     if a + b > c {\n10 |         area = (a * b) / c;\n   | \
    \               ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n10 |         area = ((a * b) / c)\
    \ as f64;\n   |                +           ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfqb40p73.rs:12:16\n   |\n8  |     let mut area: f64 = 0.0;\n\
    \   |                   --- expected due to this type\n...\n12 |         area\
    \ = (a * c) / b;\n   |                ^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n12 |         area\
    \ = ((a * c) / b) as f64;\n   |                +           ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    let mut area = 0.0;\n    let mut s = 0.0;\n\
    \    let mut t = 0.0;\n    if a > b {\n        s = a;\n        t = b;\n    } else\
    \ {\n        s = b;\n        t = a;\n    }\n    if c > s {\n        area = s *\
    \ c / 2.0;\n    } else {\n        area = s * c / 2.0;\n    }\n    if area > 1.0\
    \ {\n        area = 1.0;\n    }\n    return area;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4etwx7gi.rs:15:13\n   |\n\
    12 |     let mut s = 0.0;\n   |                 --- expected due to this value\n\
    ...\n15 |         s = a;\n   |             ^ expected floating-point number, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4etwx7gi.rs:16:13\n\
    \   |\n13 |     let mut t = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n16 |         t = b;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4etwx7gi.rs:18:13\n\
    \   |\n12 |     let mut s = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n18 |         s = b;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4etwx7gi.rs:19:13\n\
    \   |\n13 |     let mut t = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n19 |         t = a;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4etwx7gi.rs:21:12\n\
    \   |\n21 |     if c > s {\n   |            ^ expected `isize`, found floating-point\
    \ number\n\nerror[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmp4etwx7gi.rs:22:18\n\
    \   |\n22 |         area = s * c / 2.0;\n   |                  ^ no implementation\
    \ for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmp4etwx7gi.rs:24:18\n\
    \   |\n24 |         area = s * c / 2.0;\n   |                  ^ no implementation\
    \ for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Mul<Rhs>"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = (a + b + c) / 2;\n  \
    \  if s == 0 {\n        return -1\n    }\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n\
    \    s /= 2;\n    s *= s;\n    s /= 2;\n    s *= s;\n    \n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnpbz2u31.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpnpbz2u31.rs:7:51\n  |\n7 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n  |    -------------                                  ^^^\
    \ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut area = 0.0;\n   \
    \ area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n   \
    \ area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n   \
    \ area = area / 2.0;\n    area = round(area, 2);\n    return area;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp0jo316pt.rs:23:12\n\
    \   |\n23 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp0jo316pt.rs:18:17\n\
    \   |\n18 |     area = area + (a * b) - (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp0jo316pt.rs:19:17\n\
    \   |\n19 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp0jo316pt.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isiz"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        _ => if a + b > c { \n            (a * b) / c\n  \
    \      } else {\n            -1.0\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ok83n_b.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             (a * b) / c\n   |             ^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    11 |             ((a * b) / c) as f64\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        x => if x > c { -1.0 } else { 1.0 },\n        y =>\
    \ if y > b { -1.0 } else { 1.0 },\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpnqw5mj59.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = 0.0;\n    let\
    \ mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n\
    \    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ a = 0.0;\n    let mut b = 0.0;\n    let mut c = 0.0;\n    let mut d = 0.0;\n\
    \    let mut e = 0.0;\n    let mut f = 0.0;\n    let mut g = 0.0;\n    let mut\
    \ h = 0.0;\n    let mut i = 0.0;\n    let mut j = 0.0;\n    let mut k = 0.0;\n\
    \    let mut l = 0.0;\n    let mut m = 0.0;\n    let mut n = 0.0;\n    let mut\
    \ o = 0.0;\n    let mut p = 0.0;\n    let mut q = 0.0;\n    let mut r = 0.0;\n\
    \    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut\
    \ v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n\
    \    let mut z = 0.0;\n    let mut a = 0.0;\n    let mut b = 0.0;\n    let mut\
    \ c = 0.0;\n    let mut d = 0.0;\n    let mut e = 0.0;\n    let mut f = 0.0;\n\
    \    let mut g = 0.0;\n    let mut h = 0.0;\n    let mut i = 0.0;\n    let mut\
    \ j = 0.0;\n    let mut k = 0.0;\n    let mut l = 0.0;\n    let mut m = 0.0;\n\
    \    let mut n = 0.0;\n    let mut o = 0.0;\n    let mut p = 0.0;\n    let mut\
    \ q = 0.0;\n    let mut r = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n\
    \    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut\
    \ x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut a = 0.0;\n\
    \    let mut b = 0.0;\n    let mut c = 0.0;\n    let mut d = 0.0;\n    let mut\
    \ e = 0.0;\n    let mut f = 0.0;\n    let mut g = 0.0;\n    let mut h\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvnkzcbh6.rs:84:14\n   |\n\
    84 |     let mut h\n   |              ^ help: add `;` here\n85 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvnkzcbh6.rs:7:51\n  |\n\
    7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    \n    let mut area_sum: f64 = 0.0;\n    \n    if\
    \ a > b {\n        area_sum += b * c / a;\n    }\n    \n    if a > c {\n     \
    \   area_sum += c * a / b;\n    }\n    \n    if b > c {\n        area_sum += a\
    \ * b / c;\n    }\n    \n    area_sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe6yketm1.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `f64`\n  --> /tmp/tmpe6yketm1.rs:15:18\n   |\n15 |         area_sum\
    \ += b * c / a;\n   |                  ^^ no implementation for `f64 += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpe6yketm1.rs:19:18\n\
    \   |\n19 |         area_sum += c * a / b;\n   |                  ^^ no implementation\
    \ for `f64 += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpe6yketm1.rs:23:18\n\
    \   |\n23 |         area_sum += a * b / c;\n   |                  ^^ no implementation\
    \ for `f64 += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    \n    if a + c > b {\n        return -1;\n   \
    \ }\n    \n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    area = area + (a * b) - (c * b);\n    area = area + (a * c)\
    \ - (b * c);\n    area = area + (b * c) - (a * a);\n    \n    area = area.round();\n\
    \    \n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgslqqqdv.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpgslqqqdv.rs:22:17\n   |\n22 |     area = area +\
    \ (a * b) - (c * b);\n   |                 ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpgslqqqdv.rs:23:17\n   |\n23 |\
    \     area = area + (a * c) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpgslqqqdv.rs:24:17\n\
    \   |\n24 |     area = area + (b * c) - (a * a);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n     "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area: f64 = 0.0;\n    area\
    \ = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n   \
    \ return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd8qc099k.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd8qc099k.rs:18:12\n   |\n17 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n18 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area = area\
    \ + (a * b) - (a * c);\n    area = area + (b * c) - (b * a);\n    area = area\
    \ + (c * a) - (c * b);\n    area = area / 2.0;\n    area = area.round();\n   \
    \ return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprqxp8y_p.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmprqxp8y_p.rs:18:17\n   |\n18 |     area = area +\
    \ (a * b) - (a * c);\n   |                 ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmprqxp8y_p.rs:19:17\n   |\n19 |\
    \     area = area + (b * c) - (b * a);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmprqxp8y_p.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (c * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n      "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n\
    \    \n    if a + b > c {\n        area = area + b * c;\n    }\n    \n    if a\
    \ + c > b {\n        area = area + a * c;\n    }\n    \n    if b + c > a {\n \
    \       area = area + a * b + b * c;\n    }\n    \n    area = area.round();\n\
    \    \n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp1gq21efs.rs:11:21\n\
    \   |\n11 |         area = area + b * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp1gq21efs.rs:15:21\n\
    \   |\n15 |         area = area + a * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp1gq21efs.rs:19:21\n\
    \   |\n19 |         area = area + a * b + b * c;\n   |                     ^ no\
    \ implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0689]: can't call method `round` on ambiguous\
    \ numeric type `{float}`\n  --> /tmp/tmp1gq21efs.rs:22:17\n   |\n22 |     area\
    \ = area.round();\n   |"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ += a * b\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcm5jgfqi.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply `isize`\
    \ by `{float}`\n  --> /tmp/tmpcm5jgfqi.rs:18:19\n   |\n18 |     area += a * b\
    \ * 0.5;\n   |                   ^ no implementation for `isize * {float}`\n \
    \  |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpcm5jgfqi.rs:19:19\n   |\n\
    19 |     area += a * c * 0.5;\n   |                   ^ no implementation for\
    \ `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpcm5jgfqi.rs:20:19\n\
    \   |\n20 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f6"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = (a + b + c) /\
    \ 2.0;\n    if s % 1.0 != 0.0 {\n        return -1.0;\n    }\n    return s * s;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpyx0nb1e1.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut s = 0.0;\n    s += a;\n\
    \    s += b;\n    s += c;\n    s /= 2.0;\n    return s;\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdwli82zo.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpdwli82zo.rs:18:7\n   |\n18 |     s += a;\n\
    \   |       ^^ no implementation for `{float} += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpdwli82zo.rs:19:7\n   |\n19 |     s += b;\n\
    \   |       ^^ no implementation for `{float} += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpdwli82zo.rs:20:7\n   |\n20 |     s += c;\n\
    \   |       ^^ no implementation for `{float} += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut area: f64 = 0.0;\n\
    \    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6qmulb69.rs:18:12\n   |\n\
    17 |     let mut area: f64 = 0.0;\n   |                   --- expected due to\
    \ this type\n18 |     area = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n18 |     area = ((a * b) - (c * a)) as f64;\n   |         \
    \   +                 ++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    \n    let mut s = 0.0;\n   \
    \ s += a * b * 0.5;\n    s += a * c * 0.5;\n    s += b * c * 0.5;\n    \n    if\
    \ s > 0.0 {\n        return s.round();\n    }\n    return -1;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwozeagga.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply `isize`\
    \ by `{float}`\n  --> /tmp/tmpwozeagga.rs:19:16\n   |\n19 |     s += a * b * 0.5;\n\
    \   |                ^ no implementation for `isize * {float}`\n   |\n   = help:\
    \ the trait `Mul<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpwozeagga.rs:20:16\n   |\n20 | \
    \    s += a * c * 0.5;\n   |                ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpwozeagga.rs:21:16\n   |\n\
    21 |     s += b * c * 0.5;\n   |                ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n   "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        x => if a + b > c { \n            a / b\n        }\
    \ else {\n            c / a\n        },\n        y => if b + c > a { \n      \
    \      b / c\n        } else {\n            a / b\n        },\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa0mobkj9.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             a / b\n   |             ^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n11 |      \
    \       (a / b) as f64\n   |             +     ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpa0mobkj9.rs:13:13\n   |\n7  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n13 |             c\
    \ / a\n   |             ^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |             (c / a) as f64\n\
    \   |             +     ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa0mobkj9.rs:16:13\n\
    \   |\n7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n16 |             b / c\n   |             ^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    16 |             (b / c) as f64\n   |             +     ++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa0mobkj9.rs:18:13\n   |\n7  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n18 |       \
    \      a / b\n   |             ^^^^^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n18 |             (a / b) as f64\n\
    \   |             +     ++++++++\n\nerror: aborting "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n\
    \    if a + b > c {\n        area = area + b * c;\n    }\n    if a + c > b {\n\
    \        area = area + c * b;\n    }\n    if b + c > a {\n        area = area\
    \ + a * c;\n    }\n    area = area / 2.0;\n    area = area.round();\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpamx52ema.rs:10:21\n\
    \   |\n10 |         area = area + b * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpamx52ema.rs:13:21\n\
    \   |\n13 |         area = area + c * b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpamx52ema.rs:16:21\n\
    \   |\n16 |         area = area + a * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmpamx52ema.rs:19:17\n   |\n19 |     area = area.round();\n\
    \   |        "
  stdout: ''
  timestamp: 1659976620
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        1 => 1.0,\n        _ => match a + b {\n          \
    \  a if a > c => 0.0,\n            b if b > c => 0.0,\n            c if c > a\
    \ => 0.0,\n            _ => 1.0,\n        },\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.0`,\n right: `6.0`', /tmp/tmpesw8qdft.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut s = (a + b + c) / 2;\n\
    \    if s == 0 {\n        return -1;\n    }\n    let mut area = 0.0;\n    while\
    \ s > 0 {\n        area += s;\n        s -= 1;\n    }\n    area /= 2;\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpegrj0m_e.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpegrj0m_e.rs:23:14\n   |\n23 |         area\
    \ += s;\n   |              ^^ no implementation for `{float} += isize`\n   |\n\
    \   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `AddAssign<Rhs>`:\n      \
    \       <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n          \
    \   <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot divide-assign `{float}` by `{integer}`\n  --> /tmp/tmpegrj0m_e.rs:26:10\n\
    \   |\n26 |     area /= 2;\n   |          ^^ no implementation for `{float} /=\
    \ {integer}`\n   |\n   = help: the trait `DivAssign<{integer}>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n\
    \    if a + b > c {\n        area = area + b * b - c * c;\n    }\n    if a + c\
    \ > b {\n        area = area + a * c - b * b;\n    }\n    if b + c > a {\n   \
    \     area = area + a * b - b * c;\n    }\n    area = area / 2.0;\n    area =\
    \ area.round();\n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp6v15138w.rs:10:21\n\
    \   |\n10 |         area = area + b * b - c * c;\n   |                     ^ no\
    \ implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  -->\
    \ /tmp/tmp6v15138w.rs:13:21\n   |\n13 |         area = area + a * c - b * b;\n\
    \   |                     ^ no implementation for `{float} + isize`\n   |\n  \
    \ = help: the trait `Add<isize>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp6v15138w.rs:16:21\n   |\n16 |      \
    \   area = area + a * b - b * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmp6v15138w.rs:19:17\n   |\n19 |     area = ar"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area = area\
    \ + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n    area = area\
    \ / 2.0;\n    area = round(area, 2);\n    return area;\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpit7z2q3p.rs:23:12\n\
    \   |\n23 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpit7z2q3p.rs:9:16\n  |\n\
    7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |             \
    \                                      --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:18:17\n   |\n18 |     area = area +\
    \ (a * b) - (c * c);\n   |                 ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:19:17\n   |\n19 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpit7z2q3p.rs:20:17\n\
    \   |\n20 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0\n    area += a\
    \ * b\n    area += a * c\n    area += b * c\n    area /= 3.0\n    area\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area`\n  --> /tmp/tmptasxrpic.rs:17:23\n  \
    \ |\n17 |     let mut area = 0.0\n   |                       ^ help: add `;` here\n\
    18 |     area += a * b\n   |     ---- unexpected token\n\nerror: expected `;`,\
    \ found `area`\n  --> /tmp/tmptasxrpic.rs:18:18\n   |\n18 |     area += a * b\n\
    \   |                  ^ help: add `;` here\n19 |     area += a * c\n   |    \
    \ ---- unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmptasxrpic.rs:19:18\n\
    \   |\n19 |     area += a * c\n   |                  ^ help: add `;` here\n20\
    \ |     area += b * c\n   |     ---- unexpected token\n\nerror: expected `;`,\
    \ found `area`\n  --> /tmp/tmptasxrpic.rs:20:18\n   |\n20 |     area += b * c\n\
    \   |                  ^ help: add `;` here\n21 |     area /= 3.0\n   |     ----\
    \ unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmptasxrpic.rs:21:16\n\
    \   |\n21 |     area /= 3.0\n   |                ^ help: add `;` here\n22 |  \
    \   area\n   |     ---- unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmptasxrpic.rs:9:16\n  |\n7 | fn triangle_area(a: isize, b: isize, c: isize)\
    \ -> f64 {\n  |                                                   --- expected\
    \ `f64` because of return type\n8 |     if a + b > c {\n9 |         return -1\n\
    \  |                ^^\n  |                |\n  |                expected `f64`,\
    \ found integer\n  |                help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmptasxrpic.rs:18:10\n  \
    \ |\n18 |     area += a * b\n   |          ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = (a + b + c) / 2;\n  \
    \  if s == 0 {\n        return -1\n    }\n    let mut area: f64 = s * s;\n   \
    \ if area > 0 {\n        area = area / 2\n    }\n    return area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr17oyqn5.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpr17oyqn5.rs:21:25\n   |\n21 |     let mut area: f64 = s * s;\n\
    \   |                   ---   ^^^^^ expected `f64`, found `isize`\n   |      \
    \             |\n   |                   expected due to this\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n21 |     let mut area: f64 = (s\
    \ * s) as f64;\n   |                         +     ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr17oyqn5.rs:22:15\n   |\n22 |     if area > 0 {\n   | \
    \              ^\n   |               |\n   |               expected `f64`, found\
    \ integer\n   |               help: use a float literal: `0.0`\n\nerror[E0277]:\
    \ cannot divide `f64` by `{integer}`\n  --> /tmp/tmpr17oyqn5.rs:23:21\n   |\n\
    23 |         area = area / 2\n   |                     ^ no implementation for\
    \ `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n23 |         area = area / 2.0\n   |                        ++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n        _ => return -1.0\
    \ // Invalid triangle\n    }\n    let mut area_sum = 0.0\n    for i in 0..3 {\n\
    \        area_sum += (area_sum * i) / 3.0\n    }\n    area_sum\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmp07rh7ud0.rs:10:9\n   |\n9  |         0 => 0.0\n   |           --\
    \    - expected one of `,`, `.`, `?`, `}`, or an operator\n   |           |\n\
    \   |           while parsing the `match` arm starting here\n10 |         1 =>\
    \ 1.0\n   |         ^ unexpected token\n\nerror: expected `;`, found keyword `for`\n\
    \  --> /tmp/tmp07rh7ud0.rs:14:27\n   |\n14 |     let mut area_sum = 0.0\n   |\
    \                           ^ help: add `;` here\n15 |     for i in 0..3 {\n \
    \  |     --- unexpected token\n\nwarning: unreachable statement\n  --> /tmp/tmp07rh7ud0.rs:14:5\n\
    \   |\n8  | /     match a + b + c {\n9  | |         0 => 0.0\n10 | |         1\
    \ => 1.0\n11 | |         2 => 2.0\n12 | |         _ => return -1.0 // Invalid\
    \ triangle\n13 | |     }\n   | |_____- any code following this expression is unreachable\n\
    14 |       let mut area_sum = 0.0\n   |       ^^^^^^^^^^^^^^^^^^^^^^ unreachable\
    \ statement\n   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror[E0277]:\
    \ cannot multiply `{float}` by `{integer}`\n  --> /tmp/tmp07rh7ud0.rs:16:31\n\
    \   |\n16 |         area_sum += (area_sum * i) / 3.0\n   |                   \
    \            ^ no implementation for `{float} * {integer}`\n   |\n   = help: the\
    \ trait `Mul<{integer}>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to\
    \ 3 previous errors; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    \n    if a + c > b {\n        return -1\n    }\n\
    \    \n    if b + c > a {\n        return -1\n    }\n    \n    let mut area =\
    \ 0.0\n    \n    area = area + (a * b) - (c * b)\n    area = area + (a * c) -\
    \ (b * c)\n    area = area + (b * c) - (a * b)\n    \n    area = area / 2.0\n\
    \    area = area / 3.0\n    \n    area = area.round()\n    \n    return area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area`\n  --> /tmp/tmpwhh2pdp0.rs:20:23\n  \
    \ |\n20 |     let mut area = 0.0\n   |                       ^ help: add `;` here\n\
    21 |     \n22 |     area = area + (a * b) - (c * b)\n   |     ---- unexpected\
    \ token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmpwhh2pdp0.rs:22:36\n\
    \   |\n22 |     area = area + (a * b) - (c * b)\n   |                        \
    \            ^ help: add `;` here\n23 |     area = area + (a * c) - (b * c)\n\
    \   |     ---- unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmpwhh2pdp0.rs:23:36\n\
    \   |\n23 |     area = area + (a * c) - (b * c)\n   |                        \
    \            ^ help: add `;` here\n24 |     area = area + (b * c) - (a * b)\n\
    \   |     ---- unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmpwhh2pdp0.rs:24:36\n\
    \   |\n24 |     area = area + (b * c) - (a * b)\n   |                        \
    \            ^ help: add `;` here\n25 |     \n26 |     area = area / 2.0\n   |\
    \     ---- unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmpwhh2pdp0.rs:26:22\n\
    \   |\n26 |     area = area / 2.0\n   |                      ^ help: add `;` here\n\
    27 |     area = area / 3.0\n   |     ---- unexpected token\n\nerror: expected\
    \ `;`, found `area`\n  --> /tmp/tmpwhh2pdp0.rs:27:22\n   |\n27 |     area = area\
    \ / 3.0\n   |                      ^ help: add `;` here\n28 |     \n29 |     area\
    \ = area.round()\n   |     ---- unexpected token\n\nerror: expected `;`, found\
    \ keyword `return`\n  --> /tmp/tmpwhh2pdp0.rs:29:24\n   |\n29 |     area = area.round()\n\
    \   |                        ^ help: add `;` here\n30 |     \n31 |     return\
    \ area\n   |     ------ unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpwhh2pdp0.rs:9:16\n  |\n7 | fn triangle_area(a: isize, b: isize, c: isize)\
    \ -> f64 {\n  |                                                   --- expected\
    \ `f64` because of return type\n8 |     if a + b > c {\n9 |         return -1\n\
    \  |                ^^\n  |                |\n  |                expected `f64`,\
    \ found integer\n  |                help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot add `is"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s *= s;\n    if s > 0 {\n\
    \        s /= 2;\n    }\n    s\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpji5sra81.rs:16:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s\n   |     ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n16 |     s as f64\n   |       ++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0;\n    \n\
    \    area = area + ((a * b) - (c * c));\n    area = area + ((a * c) - (b * b));\n\
    \    area = area + ((b * c) - (a * a));\n    \n    area = area.round();\n    \n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfo12jfeq.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpfo12jfeq.rs:20:17\n   |\n20 |     area = area +\
    \ ((a * b) - (c * c));\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpfo12jfeq.rs:21:17\n   |\n21 |\
    \     area = area + ((a * c) - (b * b));\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpfo12jfeq.rs:22:17\n\
    \   |\n22 |     area = area + ((b * c) - (a * a));\n   |                 ^ no\
    \ implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    \n    if a + c > b {\n        return -1\n    }\n\
    \    \n    if b + c > a {\n        return -1\n    }\n    \n    let mut area: f64\
    \ = 0.0;\n    \n    area = (a * b) - (c * a);\n    area = area / 2.0;\n    \n\
    \    area = area.round();\n    \n    return area;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoyubdqe9.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpoyubdqe9.rs:22:12\n   |\n20 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n21 |     \n22 |     area\
    \ = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n22 |     area\
    \ = ((a * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area: f64 = 0.0;\n    area\
    \ = (a * b) - (c * c);\n    if area < 0.0 {\n        area = -area;\n    }\n  \
    \  area = area / 2.0;\n    area = round(area * 100.0) / 100.0;\n    return area;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp_4xy_69k.rs:23:12\n\
    \   |\n23 |     area = round(area * 100.0) / 100.0;\n   |            ^^^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_4xy_69k.rs:9:16\n\
    \  |\n7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |       \
    \                                            --- expected `f64` because of return\
    \ type\n8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n\
    \  |                |\n  |                expected `f64`, found integer\n  | \
    \               help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_4xy_69k.rs:18:12\n   |\n17 |     let mut area: f64 = 0.0;\n\
    \   |                   --- expected due to this type\n18 |     area = (a * b)\
    \ - (c * c);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |     area = ((a\
    \ * b) - (c * c)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = a + b + c;\n    if s\
    \ > 0 {\n        s /= 2;\n    }\n    return s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpccw1w872.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        1 => 1.0,\n        _ => match a + b {\n          \
    \  a if a > c => 0.0,\n            b if b > c => 0.0,\n            c if c > a\
    \ => 0.0,\n            _ => 1.0,\n        },\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.0`,\n right: `6.0`', /tmp/tmpesw8qdft.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = (a + b + c) /\
    \ 2.0;\n    let mut area: f64 = 0.0;\n    while s > 0.0 {\n        if s % 2 ==\
    \ 0 {\n            area += s;\n        }\n        s /= 2.0;\n    }\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpwq1_8o77.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut s = (a + b + c) / 2;\n  \
    \  if s == 0 {\n        return -1\n    }\n    if s == 1 {\n        return s *\
    \ s\n    }\n    if s == 2 {\n        return s * s * s\n    }\n    let mut area\
    \ = 0;\n    if a > b {\n        area = s * s;\n    } else {\n        area = s\
    \ * s * s;\n    }\n    return area.round();\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpepns62a5.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0599]: no method named `round`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpepns62a5.rs:33:17\n\
    \   |\n33 |     return area.round();\n   |                 ^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        _ => if a + b > c { \n            (a * b) / c\n  \
    \      } else {\n            -1.0\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ok83n_b.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             (a * b) / c\n   |             ^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    11 |             ((a * b) / c) as f64\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a = a as\
    \ f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a + b > c\
    \ {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n    }\n    if\
    \ a + c > b {\n        a = a - c;\n        c = c - a;\n        b = b + c;\n  \
    \  }\n    if b + c > a {\n        b = b - c;\n        c = c - b;\n        a =\
    \ a + c;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.0`,\n right: `6.0`', /tmp/tmpijlfcuzz.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976621
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    let mut area = 0.0;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area /= 3.0;\n    area\
    \ = area.round();\n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp6cfue2qe.rs:12:19\n\
    \   |\n12 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp6cfue2qe.rs:13:19\n\
    \   |\n13 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp6cfue2qe.rs:14:19\n\
    \   |\n14 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmp6cfue2qe.rs:16:17\n   |\n16 |     area = area.round();\n\
    \   |           "
  stdout: ''
  timestamp: 1659976620
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        1 => 1.0,\n        _ => -1.0,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpren0xc92.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        x => if a + b > c { \n            a / b\n        }\
    \ else if b + c > a { \n            b / c\n        } else {\n            c / a\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj7xl26jb.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             a / b\n   |             ^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n11 |      \
    \       (a / b) as f64\n   |             +     ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7xl26jb.rs:13:13\n   |\n7  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n13 |             b\
    \ / c\n   |             ^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |             (b / c) as f64\n\
    \   |             +     ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7xl26jb.rs:15:13\n\
    \   |\n7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |             c / a\n   |             ^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    15 |             (c / a) as f64\n   |             +     ++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = 0.0;\n    if\
    \ a > b {\n        s += b - a;\n    }\n    if a > c {\n        s += c - a;\n \
    \   }\n    if b > c {\n        s += c - b;\n    }\n    s /= 2.0;\n    s * s\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpzeqdvkl8.rs:19:11\n\
    \   |\n19 |         s += b - a;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpzeqdvkl8.rs:22:11\n\
    \   |\n22 |         s += c - a;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpzeqdvkl8.rs:25:11\n\
    \   |\n25 |         s += c - b;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_1nydc9x.rs:12:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n12 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n12 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        1 => 1.0,\n        _ => 2.0 * a + b + c / 2.0,\n \
    \   }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpdthqf9h2.rs:11:18\n\
    \   |\n11 |         _ => 2.0 * a + b + c / 2.0,\n   |                  ^ no implementation\
    \ for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpdthqf9h2.rs:11:30\n\
    \   |\n11 |         _ => 2.0 * a + b + c / 2.0,\n   |                        \
    \      ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    if a + c > b {\n        return -1.0;\n    }\n\
    \    if b + c > a {\n        return -1.0;\n    }\n    let mut s = (a + b + c)\
    \ / 2;\n    let mut area: f64 = 0.0;\n    while s > 0 {\n        if s % 2 == 0\
    \ {\n            area = area + (s * (s - a) * (s - b) * (s - c));\n        }\n\
    \        s = s / 2;\n    }\n    area = area / 3;\n    area = area.round();\n \
    \   return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `f64`\n  --> /tmp/tmp6ho8p0xo.rs:21:25\n\
    \   |\n21 |             area = area + (s * (s - a) * (s - b) * (s - c));\n   |\
    \                         ^ no implementation for `f64 + isize`\n   |\n   = help:\
    \ the trait `Add<isize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ divide `f64` by `{integer}`\n  --> /tmp/tmp6ho8p0xo.rs:25:17\n   |\n25 |   \
    \  area = area / 3;\n   |                 ^ no implementation for `f64 / {integer}`\n\
    \   |\n   = help: the trait `Div<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n25 |     area\
    \ = area / 3.0;\n   |                    ++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0;\n    \n\
    \    if a + b > c {\n        area = area + (b - c) * (b + c) / 2.0;\n    }\n \
    \   if a + c > b {\n        area = area + (c - a) * (c + a) / 2.0;\n    }\n  \
    \  if b + c > a {\n        area = area + (a - b) * (a + b) / 2.0;\n    }\n   \
    \ \n    area = area.round();\n    \n    if area == 0.0 {\n        return -1.0\n\
    \    }\n    \n    return area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn__4jv6t.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide `isize`\
    \ by `{float}`\n  --> /tmp/tmpn__4jv6t.rs:21:41\n   |\n21 |         area = area\
    \ + (b - c) * (b + c) / 2.0;\n   |                                         ^ no\
    \ implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpn__4jv6t.rs:24:41\n   |\n24 |         area = area + (c - a) * (c\
    \ + a) / 2.0;\n   |                                         ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpn__4jv6t.rs:27:41\n\
    \   |\n27 |         area = area + (a - b) * (a + b) / 2.0;\n   |             \
    \                            ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `is"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        _ => if a + b > c { \n            a / b\n        }\
    \ else if b + c > a { \n            b / c\n        } else { \n            c /\
    \ a \n        }\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaeccks5s.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             a / b\n   |             ^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n11 |      \
    \       (a / b) as f64\n   |             +     ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpaeccks5s.rs:13:13\n   |\n7  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n13 |             b\
    \ / c\n   |             ^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |             (b / c) as f64\n\
    \   |             +     ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaeccks5s.rs:15:13\n\
    \   |\n7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |             c / a \n   |             ^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    15 |             (c / a) as f64 \n   |             +     ++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n\
    \    if a + b > c {\n        s = s + (b - c) * (b + c);\n    }\n    if a + c >\
    \ b {\n        s = s + (c - b) * (c + b);\n    }\n    if b + c > a {\n       \
    \ s = s + (a - b) * (a + b);\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpawozlvdf.rs:10:15\n\
    \   |\n10 |         s = s + (b - c) * (b + c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpawozlvdf.rs:13:15\n\
    \   |\n13 |         s = s + (c - b) * (c + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpawozlvdf.rs:16:15\n\
    \   |\n16 |         s = s + (a - b) * (a + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area: f64 = 0.0;\n    area\
    \ = (a * b) - (c * c);\n    if area < 0.0 {\n        area = -area;\n    }\n  \
    \  area = area.round();\n    return area;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwajw0b7l.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwajw0b7l.rs:18:12\n   |\n17 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n18 |     area = (a * b) -\
    \ (c * c);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |     area = ((a\
    \ * b) - (c * c)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = (a + b + c) /\
    \ 2.0;\n    let mut area = 0.0;\n    while s > 0.0 {\n        area += s;\n   \
    \     s -= 1.0;\n    }\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpxrqawaws.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut area: f64 = 0.0;\n \
    \   area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1z075v3.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl1z075v3.rs:18:12\n   |\n17 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n18 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        _ => if a + b > c { a / 2.0 } else { b / 2.0 },\n \
    \   }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpmti9rs7u.rs:10:31\n\
    \   |\n10 |         _ => if a + b > c { a / 2.0 } else { b / 2.0 },\n   |    \
    \                           ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpmti9rs7u.rs:10:48\n   |\n10 |   \
    \      _ => if a + b > c { a / 2.0 } else { b / 2.0 },\n   |                 \
    \                               ^ no implementation for `isize / {float}`\n  \
    \ |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Div<Rhs>`:\n             <&'a\
    \ f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128\
    \ as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as\
    \ Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        1 => 1.0,\n        _ => -1.0,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpren0xc92.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n\
    \    if a + b > c {\n        area = area + b * c / a;\n    }\n    if a + c > b\
    \ {\n        area = area + c * a / b;\n    }\n    if b + c > a {\n        area\
    \ = area + a * b / c;\n    }\n    area = area.round();\n    return area;\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4a92vg0a.rs:10:21\n\
    \   |\n10 |         area = area + b * c / a;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4a92vg0a.rs:13:21\n\
    \   |\n13 |         area = area + c * a / b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp4a92vg0a.rs:16:21\n\
    \   |\n16 |         area = area + a * b / c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmp4a92vg0a.rs:18:17\n   |\n18 |     area = area.round();\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut area: f64 = 0.0;\n\
    \    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = round(area,\
    \ 2);\n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmptfi6wio_.rs:20:12\n\
    \   |\n20 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfi6wio_.rs:18:12\n \
    \  |\n17 |     let mut area: f64 = 0.0;\n   |                   --- expected due\
    \ to this type\n18 |     area = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n18 |     area = ((a * b) - (c * a)) as f64;\n   |         \
    \   +                 ++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut area = 0.0;\n   \
    \ area = area + (b * b);\n    area = area + (c * c);\n    area = area + (a * a);\n\
    \    area = area / (2.0 * 3.1415926535897932);\n    area = area.round();\n   \
    \ return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpgx5ol0nv.rs:18:17\n\
    \   |\n18 |     area = area + (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpgx5ol0nv.rs:19:17\n\
    \   |\n19 |     area = area + (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpgx5ol0nv.rs:20:17\n\
    \   |\n20 |     area = area + (a * a);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmpgx5ol0nv.rs:22:17\n   |\n22 |     area = area.round();\n\
    \   |                 ^^^^^\n   "
  stdout: ''
  timestamp: 1659976620
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        x => if a + b > c { 1.0 } else { -1.0 },\n       \
    \ y => if a + c > b { 1.0 } else { -1.0 },\n        z => if b + c > a { 1.0 }\
    \ else { -1.0 },\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.0`,\n right: `6.0`', /tmp/tmpyxat633j.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976621
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area: f64\
    \ = 0.0;\n    if a + b > c {\n        area = (a * b) / c;\n    } else {\n    \
    \    area = ((b * c) - (a * b)) / a;\n    }\n    area = area.round();\n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7wperg6l.rs:10:16\n   |\n\
    8  |     let mut area: f64 = 0.0;\n   |                   --- expected due to\
    \ this type\n9  |     if a + b > c {\n10 |         area = (a * b) / c;\n   | \
    \               ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n10 |         area = ((a * b) / c)\
    \ as f64;\n   |                +           ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7wperg6l.rs:12:16\n   |\n8  |     let mut area: f64 = 0.0;\n\
    \   |                   --- expected due to this type\n...\n12 |         area\
    \ = ((b * c) - (a * b)) / a;\n   |                ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    12 |         area = (((b * c) - (a * b)) / a) as f64;\n   |                + \
    \                      ++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    if a + c > b {\n        return -1.0;\n    }\n\
    \    if b + c > a {\n        return -1.0;\n    }\n    let mut s = (a + b + c)\
    \ / 2.0;\n    let mut area = 0.0;\n    while s > 0.0 {\n        area += s;\n \
    \       s -= 1.0;\n    }\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpsa6ue5_r.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area +=\
    \ a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area /=\
    \ 2.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp11aelo_r.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n  |    \
    \            |\n  |                expected `f64`, found integer\n  |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply `isize`\
    \ by `{float}`\n  --> /tmp/tmp11aelo_r.rs:18:19\n   |\n18 |     area += a * b\
    \ * 0.5;\n   |                   ^ no implementation for `isize * {float}`\n \
    \  |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmp11aelo_r.rs:19:19\n   |\n\
    19 |     area += a * c * 0.5;\n   |                   ^ no implementation for\
    \ `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp11aelo_r.rs:20:19\n\
    \   |\n20 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s > c {\n        s /= 2;\n\
    \    }\n    if s > b {\n        s /= 2;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_b0ko0jc.rs:18:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n18 |     s\n   |     ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n18 |     s as f64\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut area: f64 = 0.0;\n \
    \   area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1z075v3.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl1z075v3.rs:18:12\n   |\n17 |     let mut area: f64 = 0.0;\n  \
    \ |                   --- expected due to this type\n18 |     area = (a * b) -\
    \ (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = (a + b + c) /\
    \ 2.0;\n    let mut area: f64 = 0.0;\n    while s > 0.0 {\n        area = area\
    \ + (s * (s - a) * (s - b) * (s - c));\n        s = s / 2.0;\n    }\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpnc0niryt.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        x => if a + b > c { \n            (a * b) / c\n   \
    \     } else {\n            -1\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplw2vkqyw.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             (a * b) / c\n   |             ^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    11 |             ((a * b) / c) as f64\n   |             +           ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplw2vkqyw.rs:13:13\n   |\n7  |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |              \
    \                                     --- expected `f64` because of return type\n\
    ...\n13 |             -1\n   |             ^^\n   |             |\n   |      \
    \       expected `f64`, found integer\n   |             help: use a float literal:\
    \ `-1.0`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a + b > c {\n        area = (a * b) / c;\n    }\n    \n    if a\
    \ + c > b {\n        area = (a * c) / b;\n    }\n    \n    if b + c > a {\n  \
    \      area = (b * c) / a;\n    }\n    \n    area = area.round();\n    \n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp22n5jvon.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp22n5jvon.rs:21:16\n   |\n18 |     let mut area = 0.0;\n   |   \
    \                 --- expected due to this value\n...\n21 |         area = (a\
    \ * b) / c;\n   |                ^^^^^^^^^^^ expected floating-point number, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22n5jvon.rs:25:16\n\
    \   |\n18 |     let mut area = 0.0;\n   |                    --- expected due\
    \ to this value\n...\n25 |         area = (a * c) / b;\n   |                ^^^^^^^^^^^\
    \ expected floating-point number, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp22n5jvon.rs:29:16\n   |\n18 |     let mut area = 0.0;\n   |   \
    \                 --- expected due to this value\n...\n29 |         area = (b\
    \ * c) / a;\n   |                ^^^^^^^^^^^ expected floating-point number, found\
    \ `isize`\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmp22n5jvon.rs:32:17\n   |\n32 |     area = area.round();\n\
    \   |                 ^^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `f32`\n   |\n18 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0689.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976621
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.,\n        _ => if a + b > c { \n            a / b + c / a \n\
    \        } else { \n            b / a + c / b \n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp36na2dx1.rs:11:13\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n11 |             a / b + c / a \n   |             ^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    11 |             (a / b + c / a) as f64 \n   |             +             ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp36na2dx1.rs:13:13\n   |\n7  |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |              \
    \                                     --- expected `f64` because of return type\n\
    ...\n13 |             b / a + c / b \n   |             ^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    13 |             (b / a + c / b) as f64 \n   |             +             ++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut s = 0.0;\n    s +=\
    \ a * b + c * b;\n    s += a * c + b * c;\n    s += a * b + c * c;\n    s /= 2.0;\n\
    \    \n    if s == 0.0 {\n        return -1.0;\n    }\n    \n    return s.round();\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp72pzn9fc.rs:18:7\n\
    \   |\n18 |     s += a * b + c * b;\n   |       ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp72pzn9fc.rs:19:7\n\
    \   |\n19 |     s += a * c + b * c;\n   |       ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp72pzn9fc.rs:20:7\n\
    \   |\n20 |     s += a * b + c * c;\n   |       ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmp72pzn9fc.rs:27:14\n   |\n27 |     return s.round();\n\
    \   |           "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    \n    let mut area_sum = 0.0\n  \
    \  for i in 0..3 {\n        area_sum += (area_of_triangle(a + i, b + i, c + i)\
    \ * 0.5).round()\n    }\n    area_sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpscju9d7d.rs:18:27\n\
    \   |\n18 |     let mut area_sum = 0.0\n   |                           ^ help:\
    \ add `;` here\n19 |     for i in 0..3 {\n   |     --- unexpected token\n\nerror[E0425]:\
    \ cannot find function `area_of_triangle` in this scope\n  --> /tmp/tmpscju9d7d.rs:20:22\n\
    \   |\n20 |         area_sum += (area_of_triangle(a + i, b + i, c + i) * 0.5).round()\n\
    \   |                      ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpscju9d7d.rs:9:16\n  |\n7 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n  |                                   \
    \                --- expected `f64` because of return type\n8 |     if a + b >\
    \ c {\n9 |         return -1\n  |                ^^\n  |                |\n  |\
    \                expected `f64`, found integer\n  |                help: use a\
    \ float literal: `-1.0`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    if a + c > b {\n        return -1.0;\n    }\n\
    \    if b + c > a {\n        return -1.0;\n    }\n    let mut s = (a + b + c)\
    \ / 2.0;\n    if s > 0.0 {\n        return s * s;\n    }\n    return -1.0;\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp32h3m_od.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749805
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return\
    \ 0.0;\n    }\n    if a > b {\n        if b > c {\n            return s * s;\n\
    \        }\n        return 0.0;\n    }\n    if b > c {\n        return 0.0;\n\
    \    }\n    return s * s;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1w0o8a9m.rs:17:20\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n17 |             return s * s;\n   |                    ^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    17 |             return (s * s) as f64;\n   |                    +     ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut area = 0.0;\n   \
    \ area = area + (b * c);\n    area = area + (a * c);\n    area = area + (a * b)\
    \ - (a * c);\n    area = area + (b * a) - (b * c);\n    area = area + (c * a)\
    \ - (c * b);\n    area = area / (a * a + b * b + c * c);\n    area = area.round();\n\
    \    area = area / 2.0;\n    return area;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp8x1b_x57.rs:18:17\n\
    \   |\n18 |     area = area + (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp8x1b_x57.rs:19:17\n\
    \   |\n19 |     area = area + (a * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp8x1b_x57.rs:20:17\n\
    \   |\n20 |     area = area + (a * b) - (a * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp8x1b_x57.rs:21:17\n\
    \   |\n21 |     area = area + (b * a) - (b * c);\n   |                 ^ no implementati"
  stdout: ''
  timestamp: 1659976621
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    \n    if a + c > b {\n        return -1\n    }\n\
    \    \n    if b + c > a {\n        return -1\n    }\n    \n    let mut area =\
    \ 0.0;\n    \n    area += a * b\n    area += a * c\n    area += b * c\n    \n\
    \    area /= 2.0\n    \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area`\n  --> /tmp/tmplacu3jw1.rs:22:18\n  \
    \ |\n22 |     area += a * b\n   |                  ^ help: add `;` here\n23 |\
    \     area += a * c\n   |     ---- unexpected token\n\nerror: expected `;`, found\
    \ `area`\n  --> /tmp/tmplacu3jw1.rs:23:18\n   |\n23 |     area += a * c\n   |\
    \                  ^ help: add `;` here\n24 |     area += b * c\n   |     ----\
    \ unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmplacu3jw1.rs:24:18\n\
    \   |\n24 |     area += b * c\n   |                  ^ help: add `;` here\n25\
    \ |     \n26 |     area /= 2.0\n   |     ---- unexpected token\n\nerror: expected\
    \ `;`, found `area`\n  --> /tmp/tmplacu3jw1.rs:26:16\n   |\n26 |     area /= 2.0\n\
    \   |                ^ help: add `;` here\n27 |     \n28 |     area\n   |    \
    \ ---- unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmplacu3jw1.rs:9:16\n\
    \  |\n7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |       \
    \                                            --- expected `f64` because of return\
    \ type\n8 |     if a + b > c {\n9 |         return -1\n  |                ^^\n\
    \  |                |\n  |                expected `f64`, found integer\n  | \
    \               help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmplacu3jw1.rs:22:10\n   |\n22 |     area +=\
    \ a * b\n   |          ^^ no implementation for `{float} += isize`\n   |\n   =\
    \ help: the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmplacu3jw1.rs:23:10\n   |\n23 |\
    \     area += a * c\n   |          ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n    area\
    \ = area + (b * b);\n    area = area + (c * c);\n    area = area + (a * a);\n\
    \    area = area / (2.0 * 3.1415926535897932);\n    area = area as f64;\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3v94at6e.rs:9:16\n  |\n7 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |               \
    \                                    --- expected `f64` because of return type\n\
    8 |     if a + b > c {\n9 |         return -1;\n  |                ^^\n  |   \
    \             |\n  |                expected `f64`, found integer\n  |       \
    \         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmp3v94at6e.rs:18:17\n   |\n18 |     area = area +\
    \ (b * b);\n   |                 ^ no implementation for `{float} + isize`\n \
    \  |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp3v94at6e.rs:19:17\n   |\n19 |\
    \     area = area + (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp3v94at6e.rs:20:17\n   |\n20 |\
    \     area = area + (a * a);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n"
  stdout: ''
  timestamp: 1659976621
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n\
    \    \n    if a + b > c {\n        area = area + b * c;\n    }\n    \n    if a\
    \ + c > b {\n        area = area + a * c;\n    }\n    \n    if b + c > a {\n \
    \       area = area + a * b + b * c;\n    }\n    \n    area = area / 2.0;\n  \
    \  \n    if area < 0.0 {\n        area = -1.0;\n    }\n    \n    area\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpfhq5webq.rs:11:21\n\
    \   |\n11 |         area = area + b * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpfhq5webq.rs:15:21\n\
    \   |\n15 |         area = area + a * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpfhq5webq.rs:19:21\n\
    \   |\n19 |         area = area + a * b + b * c;\n   |                     ^ no\
    \ implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b\
    \ + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0x_g4l94.rs:12:5\n   |\n\
    7  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n12 |     s\n   |     ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n12 |     s as f64\n   |       ++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0\n        1 => 1.0\n        2 => 2.0\n        _ => return -1.0\n\
    \    }\n    let mut area_sum = 0.0\n    let mut side_sum = 0.0\n    match a {\n\
    \        0 => side_sum += b\n        _ => side_sum += a\n    }\n    match b {\n\
    \        0 => side_sum += c\n        _ => side_sum += b\n    }\n    match c {\n\
    \        0 => area_sum += side_sum\n        _ => area_sum += side_sum * side_sum\n\
    \    }\n    area_sum / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmpm2i5sk0d.rs:10:9\n   |\n9  |         0 => 0.0\n   |           --\
    \    - expected one of `,`, `.`, `?`, `}`, or an operator\n   |           |\n\
    \   |           while parsing the `match` arm starting here\n10 |         1 =>\
    \ 1.0\n   |         ^ unexpected token\n\nerror: expected `;`, found keyword `let`\n\
    \  --> /tmp/tmpm2i5sk0d.rs:14:27\n   |\n14 |     let mut area_sum = 0.0\n   |\
    \                           ^ help: add `;` here\n15 |     let mut side_sum =\
    \ 0.0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `match`\n\
    \  --> /tmp/tmpm2i5sk0d.rs:15:27\n   |\n15 |     let mut side_sum = 0.0\n   |\
    \                           ^ help: add `;` here\n16 |     match a {\n   |   \
    \  ----- unexpected token\n\nerror: expected one of `!`, `,`, `.`, `::`, `?`,\
    \ `{`, `}`, or an operator, found reserved identifier `_`\n  --> /tmp/tmpm2i5sk0d.rs:18:9\n\
    \   |\n17 |         0 => side_sum += b\n   |           --              - expected\
    \ one of 8 possible tokens\n   |           |\n   |           while parsing the\
    \ `match` arm starting here\n18 |         _ => side_sum += a\n   |         ^ unexpected\
    \ token\n\nerror: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found reserved identifier `_`\n  --> /tmp/tmpm2i5sk0d.rs:22:9\n   |\n21 |  \
    \       0 => side_sum += c\n   |           --              - expected one of 8\
    \ possible tokens\n   |           |\n   |           while parsing the `match`\
    \ arm starting here\n22 |         _ => side_sum += b\n   |         ^ unexpected\
    \ token\n\nerror: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found reserved identifier `_`\n  --> /tmp/tmpm2i5sk0d.rs:26:9\n   |\n25 |  \
    \       0 => area_sum += side_sum\n   |           --                     - expected\
    \ one of 8 possible tokens\n   |           |\n   |           while parsing the\
    \ `match` arm starting here\n26 |         _ => area_sum += side_sum * side_sum\n\
    \   |         ^ unexpected token\n\nwarning: unreachable statement\n  --> /tmp/tmpm2i5sk0d.rs:14:5\n\
    \   |\n8  | /     match a + b + c {\n9  |"
  stdout: ''
  timestamp: 1659976620
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n\
    \        0 => 0.0,\n        x => if a + b > c { 1.0 } else { -1.0 },\n       \
    \ y => if a + c > b { 1.0 } else { -1.0 },\n        z => if b + c > a { 1.0 }\
    \ else { -1.0 },\n        _ => -1.0,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.0`,\n right: `6.0`', /tmp/tmp2teli14i.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976621
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n\
    \    if a + b > c {\n        area = area + b * c;\n    }\n    if a + c > b {\n\
    \        area = area + c * b;\n    }\n    if b + c > a {\n        area = area\
    \ + a * c;\n    }\n    area = area / 2.0;\n    area = area.round();\n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpeo4g0mmg.rs:10:21\n\
    \   |\n10 |         area = area + b * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpeo4g0mmg.rs:13:21\n\
    \   |\n13 |         area = area + c * b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpeo4g0mmg.rs:16:21\n\
    \   |\n16 |         area = area + a * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmpeo4g0mmg.rs:19:17\n   |\n19 |     area = area.round();\n\
    \   |        "
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    if a + c > b {\n        return -1.0;\n    }\n\
    \    if b + c > a {\n        return -1.0;\n    }\n    let mut s = (a + b + c)\
    \ / 2.0;\n    let mut area: f64 = 0.0;\n    while s > 0.0 {\n        area += s;\n\
    \        s -= 1.0;\n    }\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmplxb753gd.rs:17:29\n\
    \   |\n17 |     let mut s = (a + b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut area = 0.0;\n   \
    \ area = area + (b * c);\n    area = area + (a * c);\n    area = area + (a * b);\n\
    \    area = area + (b * a);\n    area = area / 3.0;\n    area = round(area as\
    \ f64);\n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp8rf_8llg.rs:23:12\n\
    \   |\n23 |     area = round(area as f64);\n   |            ^^^^^ not found in\
    \ this scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp8rf_8llg.rs:18:17\n\
    \   |\n18 |     area = area + (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp8rf_8llg.rs:19:17\n\
    \   |\n19 |     area = area + (a * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp8rf_8llg.rs:20:17\n\
    \   |\n20 |     area = area + (a * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 othe"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    let area = (a * b + c * a - b * c)\
    \ / (2.0 * a)\n    return area.round()\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmpbzw4722m.rs:17:51\n\
    \   |\n17 |     let area = (a * b + c * a - b * c) / (2.0 * a)\n   |         \
    \                                          ^ help: add `;` here\n18 |     return\
    \ area.round()\n   |     ------ unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpbzw4722m.rs:9:16\n  |\n7 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n  |                                                   ---\
    \ expected `f64` because of return type\n8 |     if a + b > c {\n9 |         return\
    \ -1\n  |                ^^\n  |                |\n  |                expected\
    \ `f64`, found integer\n  |                help: use a float literal: `-1.0`\n\
    \nerror[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpbzw4722m.rs:17:47\n\
    \   |\n17 |     let area = (a * b + c * a - b * c) / (2.0 * a)\n   |         \
    \                                      ^ no implementation for `{float} * isize`\n\
    \   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976620
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    if a + c > b {\n        return 0.0;\n    }\n\
    \    if b + c > a {\n        return 0.0;\n    }\n    let mut area: f64 = 0.0;\n\
    \    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjshkp6ix.rs:18:12\n   |\n\
    17 |     let mut area: f64 = 0.0;\n   |                   --- expected due to\
    \ this type\n18 |     area = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n18 |     area = ((a * b) - (c * a)) as f64;\n   |         \
    \   +                 ++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjshkp6ix.rs:7:51\n\
    \  |\n7 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976620
