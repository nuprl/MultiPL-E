name: HumanEval_97_multiply
language: rs
prompt: "/// Complete the function that takes two integers and returns \n/// the product\
  \ of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
  fn multiply(a: isize, b: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
  \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
  \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
  \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
  \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
completions: ["    let mut product = a.clone();\n    for digit in &b {\n        product\
    \ *= digit as isize;\n    }\n    return product;", "    let mut product = a.clone();\n\
    \    while product < b {\n        product *= 10;\n    }\n    product", "    debug_assert!(a\
    \ <= b);\n    let mut product = a as isize;\n    while b > 0 {\n        product\
    \ *= a % 10;\n        a /= 10;\n        b /= 10;\n    }\n    product", "    debug_assert!(a\
    \ >= 0);\n    debug_assert!(b >= 0);\n    debug_assert!(a < b);\n    debug_assert!(a\
    \ < 10);\n    debug_assert!(b < 10);\n    debug_assert!(a < 100);\n    debug_assert!(b\
    \ < 100);\n    debug_assert!(a < 1000);\n    debug_assert!(b < 1000);\n    debug_assert!(a\
    \ < 10000);\n    debug_assert!(b < 10000);\n    debug_assert!(a < 100000);\n \
    \   debug_assert!(b < 100000);\n    debug_assert!(a < 1000000);\n    debug_assert!(b\
    \ < 1000000);\n    debug_assert!(a < 10000000);\n    debug_assert!(b < 10000000);\n\
    \    debug_assert!(a < 100000000);\n    debug_assert!(b < 100000000);\n    debug_assert!(a\
    \ < 1000000000);\n    debug_assert!(b < 1000000000);\n    debug_assert!(a < 10000000000);\n\
    \    debug_assert!(b < 10000000000);\n    debug_assert!(a < 100000000000);\n \
    \   debug_assert!(b < 100000000000);\n    debug_assert!(a < 1000000000000);\n\
    \    debug_assert!(b < 1000000000000);\n    debug_assert!(a < 10000000000000);\n\
    \    debug_assert!(b < 10000000000000);\n    debug_assert!(a < 100000000000000);\n\
    \    debug_assert!(b < 100000000000000);\n    debug_assert!(a < 1000000000000000);\n\
    \    debug_assert!(b < 1000000000000000);\n    debug_assert!(a < 10000000000000000);\n\
    \    debug_assert!(b < 10000000000000000);\n    debug_assert!(a < 100000000000000000);\n\
    \    debug_assert!(b < 100000000000000000);\n    debug_assert!(a < 1000000000000000000);\n\
    \    debug_assert!(b < 1000000000000000000);\n    debug_assert!(a < 10000000000000000000);\n\
    \    debug_assert!(b < 10000000000000000000);\n    debug_assert!(a < 100000000000000000000);\n\
    \    debug_assert!(b < 100000000000000000000);\n    debug_assert!(a < 1000000000000000000000);\n\
    \    debug_assert!(b < 1000000000000000000000);\n    debug_assert!(a < 10000000000000000000000);\n\
    \    debug_assert!(b < 10000000000000000000000);\n    debug_assert!(a < 100000000000000000000000);\n\
    \    debug_assert!(b < 100000000000000000000000);\n    debug_assert!(a < 1000000000000000000000000);\n\
    \    debug_assert!", "    debug_assert!(a >= 0);\n    debug_assert!(b >= 0);\n\
    \    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n", "    debug_assert!(a\
    \ >= 0);\n    debug_assert!(b >= 0);\n    debug_assert!(a <= b);\n    debug_assert!(b\
    \ <= 10);\n    let mut product: isize = 1;\n    for i in 0..a {\n        product\
    \ *= b;\n    }\n    for i in 0..b {\n        product *= a;\n    }\n    product",
  "    debug_assert!(a > 0);\n    debug_assert!(b > 0);\n    debug_assert!(a < b);\n\
    \    debug_assert!(a < 10);\n    debug_assert!(b < 10);\n    debug_assert!(a <\
    \ 100);\n    debug_assert!(b < 100);\n    debug_assert!(a < 1000);\n    debug_assert!(b\
    \ < 1000);\n    debug_assert!(a < 10000);\n    debug_assert!(b < 10000);\n   \
    \ debug_assert!(a < 100000);\n    debug_assert!(b < 100000);\n    debug_assert!(a\
    \ < 1000000);\n    debug_assert!(b < 1000000);\n    debug_assert!(a < 10000000);\n\
    \    debug_assert!(b < 10000000);\n    debug_assert!(a < 100000000);\n    debug_assert!(b\
    \ < 100000000);\n    debug_assert!(a < 1000000000);\n    debug_assert!(b < 1000000000);\n\
    \    debug_assert!(a < 10000000000);\n    debug_assert!(b < 10000000000);\n  \
    \  debug_assert!(a < 100000000000);\n    debug_assert!(b < 100000000000);\n  \
    \  debug_assert!(a < 1000000000000);\n    debug_assert!(b < 1000000000000);\n\
    \    debug_assert!(a < 10000000000000);\n    debug_assert!(b < 10000000000000);\n\
    \    debug_assert!(a < 100000000000000);\n    debug_assert!(b < 100000000000000);\n\
    \    debug_assert!(a < 1000000000000000);\n    debug_assert!(b < 1000000000000000);\n\
    \    debug_assert!(a < 10000000000000000);\n    debug_assert!(b < 10000000000000000);\n\
    \    debug_assert!(a < 100000000000000000);\n    debug_assert!(b < 100000000000000000);\n\
    \    debug_assert!(a < 1000000000000000000);\n    debug_assert!(b < 1000000000000000000);\n\
    \    debug_assert!(a < 10000000000000000000);\n    debug_assert!(b < 10000000000000000000);\n\
    \    debug_assert!(a < 100000000000000000000);\n    debug_assert!(b < 100000000000000000000);\n\
    \    debug_assert!(a < 1000000000000000000000);\n    debug_assert!(b < 1000000000000000000000);\n\
    \    debug_assert!(a < 10000000000000000000000);\n    debug_assert!(b < 10000000000000000000000);\n\
    \    debug_assert!(a < 100000000000000000000000);\n    debug_assert!(b < 100000000000000000000000);\n\
    \    debug_assert!(a < 1000000000000000000000000);\n    debug_assert!(b < 1000000000000000000000000);\n\
    \    debug_assert!(a < ", "    debug_assert!(a >= 0);\n    debug_assert!(b >=\
    \ 0);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(a <= 10);\n", "    debug_assert!(a\
    \ > 0);\n    debug_assert!(b > 0);\n    debug_assert!(a <= b);\n    let mut product\
    \ = 0;\n    while a > 0 {\n        product *= b;\n        a -= 1;\n        b -=\
    \ 1;\n    }\n    product", "    debug_assert!(a >= 0);\n    debug_assert!(b >=\
    \ 0);\n    debug_assert!(a <= b);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(b <= 10);\n    debug_assert!(a <= 10);\n    debug_assert!(b\
    \ <= 10);\n    debug_assert!(a <= b);\n    debug_assert!(b <= 10);\n", "    debug_assert!(a\
    \ < b);\n    let mut product = a as isize;\n    while b > 0 {\n        product\
    \ *= b as isize;\n        b -= 1;\n    }\n    product", "    match a % b {\n \
    \       0 => 0,\n        1 => 1,\n        _ => a * b / b\n    }", "    let mut\
    \ product = a.checked_mul(b);\n    product.checked_mul(2).unwrap();\n    product",
  "    let mut product = a;\n    while product < b {\n        product *= 10;\n   \
    \ }\n    product", "    let mut product = a as isize;\n    for _ in 0..(b as usize)\
    \ {\n        product *= 10;\n    }\n    product", "    match a % b {\n       \
    \ 0 => 0,\n        _ => a / b * multiply(b, a%b),\n    }", "    match a % b {\n\
    \        0 => 0,\n        1 => 1,\n        _ => a * b / b\n    }", "    match\
    \ a % b {\n        0 => 0,\n        1 => b,\n        _ => a * b / b\n    }", " \
    \   debug_assert!(a >= 0);\n    debug_assert!(b >= 0);\n    debug_assert!(a <=\
    \ b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n    debug_assert!(b <= 10);\n    debug_assert!(a\
    \ <= b);\n    debug_assert!(a <= 10);\n", "    match a % b {\n        0 => 0,\n\
    \        _ => a / b * multiply(b, a%b),\n    }"]
stop_tokens:
- "\n}"
