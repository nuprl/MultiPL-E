language: rs
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n\n    let mut sum = 0;\n    let mut product = 1;\n\n    for n in numbers\
    \ {\n        sum += n;\n        product *= n;\n    }\n\n    (sum, product)\n}\n\
    \nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976560
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)\n}\n\nfn\
    \ main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749579
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>)\
    \ -> (isize, isize) {\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749538
