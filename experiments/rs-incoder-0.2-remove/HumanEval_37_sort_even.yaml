name: HumanEval_37_sort_even
language: rs
prompt: "/// This function takes a list l and returns a list l' such that\n/// l'\
  \ is identical to l in the odd indicies, while its values at the even indicies are\
  \ equal\n/// to the values of the even indicies of l, but sorted.\nfn sort_even(l:\
  \ Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
  \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
  \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
  }\n"
completions: ["    let mut even = l;\n    even.sort_unstable();\n    even", "    let\
    \ mut even = l;\n    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    for i in 0..even.len() {\n        if i % 2 == 0 {\n            even[i] =\
    \ even[even.len() - i - 1];\n        } else {\n            odd[i] = odd[odd.len()\
    \ - i - 1];\n        }\n    }\n    even", "    let mut even = l;\n    let mut\
    \ odd = l;\n    even.sort();\n    odd.sort();\n    for i in 0..even.len() {\n\
    \        if i % 2 == 0 {\n            even[i] = even[even.len() - i - 1];\n  \
    \      } else {\n            odd[i] = odd[odd.len() - i - 1];\n        }\n   \
    \ }\n    even", "    let mut even = l;\n    let mut odd = l;\n    even.sort();\n\
    \    odd.sort();\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n    \
    \        even[i] = even[even.len() - i - 1];\n        } else {\n            odd[i]\
    \ = odd[odd.len() - i - 1];\n        }\n    }\n    even", "    let mut even =\
    \ l;\n    even.sort_unstable();\n    even", "    let mut even = l;\n    even.sort();\n\
    \    let mut odd = even;\n    odd.swap(0, even.len());\n    odd", "    let mut\
    \ even = l;\n    even.sort_unstable();\n    even", "    let mut even = l;\n  \
    \  let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n   \
    \ even.iter_mut().zip(odd.iter_mut()).for_each(|(a,b)| {\n        if a % 2 ==\
    \ 0 {\n            *b = *a;\n        }\n    });\n    even", "    let mut even\
    \ = l;\n    even.sort();\n    let mut odd = l;\n    odd.sort();\n    for i in\
    \ 0..even.len() {\n        if i % 2 == 0 {\n            even[i] = even[i];\n \
    \       } else {\n            odd[i] = odd[i];\n        }\n    }\n    even", " \
    \   let mut even = l;\n    even.sort();\n    even", "    let mut even = l;\n \
    \   even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n    odd",
  "    let mut even = l;\n    even.sort();\n    let mut odd = even;\n    odd.swap(0,\
    \ even.len());\n    odd", "    let mut even = l.clone();\n    even.sort();\n \
    \   even", "    let mut even = l.clone();\n    even.sort();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = even[i / 2];\n        }\n\
    \    }\n    even", "    let mut even = l;\n    even.sort();\n    even.iter().cloned().rev().cloned()",
  "    let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n   \
    \     if i % 2 == 0 {\n            even[i] = even[i];\n        } else {\n    \
    \        odd[i] = odd[i];\n        }\n    }\n    even.sort();\n    odd.sort();\n\
    \    even", "    let mut even = l;\n    let mut odd = l;\n    even.sort();\n \
    \   odd.sort();\n    for i in 0..even.len() {\n        if even[i] != i {\n   \
    \         even[i] = odd[i];\n        }\n    }\n    even", "    let mut even =\
    \ l;\n    even.sort_unstable();\n    even", "    let mut even = l;\n    even.sort_unstable();\n\
    \    even", "    let mut even = l;\n    even.sort();\n    even.iter_mut().for_each(|x|\
    \ *x = *x % 2);\n    even"]
stop_tokens:
- "\n}"
