language: rs
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    let mut sum = 0;\n    for &i\
    \ in nums {\n        sum += i;\n        result.push(i);\n    }\n    result.sort_by_key(|&i|\
    \ {\n        sum - i\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1yza9stp.rs:9:9\n  |\n9 |\
    \     for &i in nums {\n  |         ^^    ---- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_copy {\n            sum\
    \ += n % 10;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpho8rxqb9.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_copy` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpho8rxqb9.rs:8:27\n   |\n8  | \
    \    nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^ immutable\
    \ borrow occurs here\n   |     |         |\n   |     |         mutable borrow\
    \ later used by call\n   |     mutable borrow occurs here\n9  |         let mut\
    \ sum = 0;\n10 |         for &n in &nums_copy {\n   |                    ---------\
    \ second borrow occurs due to use of `nums_copy` in closure\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().iter().sum());\n    nums\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmptxsdcmm_.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().iter().sum());\n  |                            ^^^^^^^^^ method\
    \ not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n        index += 1;\n\
    \    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2u2p75mr.rs:13:66\n   |\n\
    13 |         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x + sum).unwrap());\n\
    \   |                                                                  ^^^^^^^\
    \ expected `bool`, found `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n\
    \    for i in nums_copy {\n        sum += i;\n    }\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum - x;\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_copy`\n   --> /tmp/tmp_nf2jutx.rs:12:5\n\
    \    |\n7   |     let mut nums_copy = nums.clone();\n    |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n8   |     let mut sum = 0;\n9   |     for i in nums_copy {\n\
    \    |              ---------\n    |              |\n    |              `nums_copy`\
    \ moved due to this implicit call to `.into_iter()`\n    |              help:\
    \ consider borrowing to avoid moving into the for loop: `&nums_copy`\n...\n12\
    \  |     nums_copy.sort_by_key(|x| {\n    |     ^^^^^^^^^ value borrowed here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `nums_copy`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by(|a,\
    \ b| {\n        let mut a_digits = a.to_digits();\n        let mut b_digits =\
    \ b.to_digits();\n        a_digits.iter().zip(b_digits.iter()).map(|(a, b)| a\
    \ + b).sum().unwrap()\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmpgy3oxc2s.rs:9:30\n  |\n9 |         let mut\
    \ a_digits = a.to_digits();\n  |                              ^^^^^^^^^ method\
    \ not found in `&isize`\n\nerror[E0599]: no method named `to_digits` found for\
    \ reference `&isize` in the current scope\n  --> /tmp/tmpgy3oxc2s.rs:10:30\n \
    \  |\n10 |         let mut b_digits = b.to_digits();\n   |                   \
    \           ^^^^^^^^^ method not found in `&isize`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_sorted {\n            sum\
    \ += n % 10;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpccfumxt5.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpccfumxt5.rs:8:29\n   |\n8  | \
    \    nums_sorted.sort_by_key(|x| {\n   |     ----------- ----------- ^^^ immutable\
    \ borrow occurs here\n   |     |           |\n   |     |           mutable borrow\
    \ later used by call\n   |     mutable borrow occurs here\n9  |         let mut\
    \ sum = 0;\n10 |         for &n in &nums_sorted {\n   |                    -----------\
    \ second borrow occurs due to use of `nums_sorted` in closure\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_sorted {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `n` is never read\n  --> /tmp/tmpc8aqhnej.rs:12:13\n\
    \   |\n12 |             n /= 10;\n   |             ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ unused variable: `x`\n --> /tmp/tmpc8aqhnej.rs:8:30\n  |\n8 |     nums_sorted.sort_by_key(|x|\
    \ {\n  |                              ^ help: if this is intentional, prefix it\
    \ with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\
    \nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmpc8aqhnej.rs:12:13\n\
    \   |\n10 |         for &n in &nums_sorted {\n   |              -\n   |      \
    \        |\n   |              first assignment to `n`\n   |              help:\
    \ consider making this binding mutable: `mut n`\n11 |             sum += n % 10;\n\
    12 |             n /= 10;\n   |             ^^^^^^^ cannot assign twice to immutable\
    \ variable\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because it\
    \ is also borrowed as mutable\n  --> /tmp/tmpc8aqhnej.rs:8:29\n   |\n8  |    \
    \ nums_sorted.sort_by_key(|x| {\n   |     ----------- ----------- ^^^ immutable\
    \ borrow occurs here\n   |     |           |\n   |     |           mutable borrow\
    \ later used by call\n   |     mutable borrow occurs here\n9  |         let mut\
    \ sum = 0;\n10 |         for &n in &nums_sorted {\n   |                    -----------\
    \ second borrow occurs due to use of `nums_sorted` in closure\n\nerror: aborting\
    \ due to 2 previous errors; 2 warnings emitted\n\nSome errors have detailed explanations:\
    \ E0384, E0502.\nFor more information about an error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ *x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp4yhfmey9.rs:11:20\n\
    \   |\n11 |             sum += *x;\n   |                    ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for n in nums_sorted {\n        sum += n;\n    }\n    let mut nums_sorted_by_sum:\
    \ Vec<isize> = nums_sorted.clone();\n    let mut i = 0;\n    while i < nums_sorted_by_sum.len()\
    \ {\n        let mut j = i;\n        while j < nums_sorted_by_sum.len() && nums_sorted_by_sum[j]\
    \ == sum {\n            j += 1\n        }\n        if j > i {\n            nums_sorted_by_sum.swap(i,\
    \ j);\n            i += 1;\n        }\n    }\n    nums_sorted_by_sum\n}\n\nfn\
    \ main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpqjb5ahym.rs:7:9\n\
    \  |\n7 |     let mut nums_sorted = nums.clone();\n  |         ----^^^^^^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `nums_sorted`\n   -->\
    \ /tmp/tmpqjb5ahym.rs:12:46\n    |\n7   |     let mut nums_sorted = nums.clone();\n\
    \    |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8   |     let mut sum = 0;\n9   |\
    \     for n in nums_sorted {\n    |              -----------\n    |          \
    \    |\n    |              `nums_sorted` moved due to this implicit call to `.into_iter()`\n\
    \    |              help: consider borrowing to avoid moving into the for loop:\
    \ `&nums_sorted`\n...\n12  |     let mut nums_sorted_by_sum: Vec<isize> = nums_sorted.clone();\n\
    \    |                                              ^^^^^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_sorted`\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for &i in nums_sorted {\n        sum += i;\n    }\n    nums_sorted.sort_by_key(|&i|\
    \ {\n        sum - i;\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe61gpvh1.rs:9:9\n  |\n9 |\
    \     for &i in nums_sorted {\n  |         ^^    ----------- this expression has\
    \ type `isize`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &i in &nums {\n            sum += i;\n\
    \        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpm7qje3c2.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums {\n            sum += n\
    \ % 10;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp5dv8fb48.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &mut sorted_nums {\n        \
    \    sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n \
    \   sorted_nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp21peohub.rs:10:13\n   |\n\
    10 |         for &n in &mut sorted_nums {\n   |             ^^    ----------------\
    \ this expression has type `&mut isize`\n   |             |\n   |            \
    \ types differ in mutability\n   |\n   = note: expected mutable reference `&mut\
    \ isize`\n                      found reference `&_`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &i in &nums {\n            sum += i;\n\
    \        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpm7qje3c2.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748326
