language: rs
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    let mut sum = 0;\n    for &i\
    \ in nums {\n        sum += i;\n        result.push(i);\n    }\n    result.sort_by_key(|&i|\
    \ {\n        sum - i\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1yza9stp.rs:9:9\n  |\n9 |\
    \     for &i in nums {\n  |         ^^    ---- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_copy {\n            sum\
    \ += n % 10;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpho8rxqb9.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_copy` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpho8rxqb9.rs:8:27\n   |\n8  | \
    \    nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^ immutable\
    \ borrow occurs here\n   |     |         |\n   |     |         mutable borrow\
    \ later used by call\n   |     mutable borrow occurs here\n9  |         let mut\
    \ sum = 0;\n10 |         for &n in &nums_copy {\n   |                    ---------\
    \ second borrow occurs due to use of `nums_copy` in closure\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().iter().sum());\n    nums\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmptxsdcmm_.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().iter().sum());\n  |                            ^^^^^^^^^ method\
    \ not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n    while index\
    \ < nums_copy.len() {\n        sum += nums_copy[index];\n        nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n        index += 1;\n\
    \    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2u2p75mr.rs:13:66\n   |\n\
    13 |         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x + sum).unwrap());\n\
    \   |                                                                  ^^^^^^^\
    \ expected `bool`, found `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n\
    \    for i in nums_copy {\n        sum += i;\n    }\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum - x;\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_copy`\n   --> /tmp/tmp_nf2jutx.rs:12:5\n\
    \    |\n7   |     let mut nums_copy = nums.clone();\n    |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n8   |     let mut sum = 0;\n9   |     for i in nums_copy {\n\
    \    |              ---------\n    |              |\n    |              `nums_copy`\
    \ moved due to this implicit call to `.into_iter()`\n    |              help:\
    \ consider borrowing to avoid moving into the for loop: `&nums_copy`\n...\n12\
    \  |     nums_copy.sort_by_key(|x| {\n    |     ^^^^^^^^^ value borrowed here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `nums_copy`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by(|a,\
    \ b| {\n        let mut a_digits = a.to_digits();\n        let mut b_digits =\
    \ b.to_digits();\n        a_digits.iter().zip(b_digits.iter()).map(|(a, b)| a\
    \ + b).sum().unwrap()\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmpgy3oxc2s.rs:9:30\n  |\n9 |         let mut\
    \ a_digits = a.to_digits();\n  |                              ^^^^^^^^^ method\
    \ not found in `&isize`\n\nerror[E0599]: no method named `to_digits` found for\
    \ reference `&isize` in the current scope\n  --> /tmp/tmpgy3oxc2s.rs:10:30\n \
    \  |\n10 |         let mut b_digits = b.to_digits();\n   |                   \
    \           ^^^^^^^^^ method not found in `&isize`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_sorted {\n            sum\
    \ += n % 10;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpccfumxt5.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpccfumxt5.rs:8:29\n   |\n8  | \
    \    nums_sorted.sort_by_key(|x| {\n   |     ----------- ----------- ^^^ immutable\
    \ borrow occurs here\n   |     |           |\n   |     |           mutable borrow\
    \ later used by call\n   |     mutable borrow occurs here\n9  |         let mut\
    \ sum = 0;\n10 |         for &n in &nums_sorted {\n   |                    -----------\
    \ second borrow occurs due to use of `nums_sorted` in closure\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_sorted {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `n` is never read\n  --> /tmp/tmpc8aqhnej.rs:12:13\n\
    \   |\n12 |             n /= 10;\n   |             ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ unused variable: `x`\n --> /tmp/tmpc8aqhnej.rs:8:30\n  |\n8 |     nums_sorted.sort_by_key(|x|\
    \ {\n  |                              ^ help: if this is intentional, prefix it\
    \ with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\
    \nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmpc8aqhnej.rs:12:13\n\
    \   |\n10 |         for &n in &nums_sorted {\n   |              -\n   |      \
    \        |\n   |              first assignment to `n`\n   |              help:\
    \ consider making this binding mutable: `mut n`\n11 |             sum += n % 10;\n\
    12 |             n /= 10;\n   |             ^^^^^^^ cannot assign twice to immutable\
    \ variable\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because it\
    \ is also borrowed as mutable\n  --> /tmp/tmpc8aqhnej.rs:8:29\n   |\n8  |    \
    \ nums_sorted.sort_by_key(|x| {\n   |     ----------- ----------- ^^^ immutable\
    \ borrow occurs here\n   |     |           |\n   |     |           mutable borrow\
    \ later used by call\n   |     mutable borrow occurs here\n9  |         let mut\
    \ sum = 0;\n10 |         for &n in &nums_sorted {\n   |                    -----------\
    \ second borrow occurs due to use of `nums_sorted` in closure\n\nerror: aborting\
    \ due to 2 previous errors; 2 warnings emitted\n\nSome errors have detailed explanations:\
    \ E0384, E0502.\nFor more information about an error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ *x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp4yhfmey9.rs:11:20\n\
    \   |\n11 |             sum += *x;\n   |                    ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for n in nums_sorted {\n        sum += n;\n    }\n    let mut nums_sorted_by_sum:\
    \ Vec<isize> = nums_sorted.clone();\n    let mut i = 0;\n    while i < nums_sorted_by_sum.len()\
    \ {\n        let mut j = i;\n        while j < nums_sorted_by_sum.len() && nums_sorted_by_sum[j]\
    \ == sum {\n            j += 1\n        }\n        if j > i {\n            nums_sorted_by_sum.swap(i,\
    \ j);\n            i += 1;\n        }\n    }\n    nums_sorted_by_sum\n}\n\nfn\
    \ main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpqjb5ahym.rs:7:9\n\
    \  |\n7 |     let mut nums_sorted = nums.clone();\n  |         ----^^^^^^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `nums_sorted`\n   -->\
    \ /tmp/tmpqjb5ahym.rs:12:46\n    |\n7   |     let mut nums_sorted = nums.clone();\n\
    \    |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8   |     let mut sum = 0;\n9   |\
    \     for n in nums_sorted {\n    |              -----------\n    |          \
    \    |\n    |              `nums_sorted` moved due to this implicit call to `.into_iter()`\n\
    \    |              help: consider borrowing to avoid moving into the for loop:\
    \ `&nums_sorted`\n...\n12  |     let mut nums_sorted_by_sum: Vec<isize> = nums_sorted.clone();\n\
    \    |                                              ^^^^^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_sorted`\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for &i in nums_sorted {\n        sum += i;\n    }\n    nums_sorted.sort_by_key(|&i|\
    \ {\n        sum - i;\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe61gpvh1.rs:9:9\n  |\n9 |\
    \     for &i in nums_sorted {\n  |         ^^    ----------- this expression has\
    \ type `isize`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &i in &nums {\n            sum += i;\n\
    \        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpm7qje3c2.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums {\n            sum += n\
    \ % 10;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp5dv8fb48.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &mut sorted_nums {\n        \
    \    sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n \
    \   sorted_nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp21peohub.rs:10:13\n   |\n\
    10 |         for &n in &mut sorted_nums {\n   |             ^^    ----------------\
    \ this expression has type `&mut isize`\n   |             |\n   |            \
    \ types differ in mutability\n   |\n   = note: expected mutable reference `&mut\
    \ isize`\n                      found reference `&_`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &i in &nums {\n            sum += i;\n\
    \        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpm7qje3c2.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for i in nums_sorted.iter() {\n        sum += *i;\n    }\n    nums_sorted.sort_by_key(|&i|\
    \ {\n        sum - i\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11, 1, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpa6nlno2a.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut nums_sum = 0;\n    let mut nums_index = 0;\n  \
    \  while nums_index < nums_copy.len() {\n        nums_sum += nums_copy[nums_index];\n\
    \        nums_index += 1;\n        while nums_sum > 0 {\n            nums_sorted[nums_index\
    \ - 1] = nums_sorted[nums_index];\n            nums_sum -= nums_copy[nums_index];\n\
    \            nums_index += 1;\n        }\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpfc6k3ag1.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `&mut isize` to `{integer}`\n  --> /tmp/tmp6w83q15r.rs:11:17\n\
    \   |\n11 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += &mut isize`\n   |\n   = help: the trait `AddAssign<&mut isize>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum: isize = 0;\n \
    \       for &n in &[a, b] {\n            sum += *n as isize;\n        }\n    \
    \    sum\n    });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxh6s7grw.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by(|a,\
    \ b| {\n        let mut a_digit = a.to_digit();\n        let mut b_digit = b.to_digit();\n\
    \        if a_digit > b_digit {\n            1\n        } else if a_digit < b_digit\
    \ {\n            -1\n        } else {\n            0\n        }\n    });\n   \
    \ sorted_nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for reference `&isize` in\
    \ the current scope\n --> /tmp/tmpm2mrgv78.rs:9:29\n  |\n9 |         let mut a_digit\
    \ = a.to_digit();\n  |                             ^^^^^^^^ method not found in\
    \ `&isize`\n\nerror[E0599]: no method named `to_digit` found for reference `&isize`\
    \ in the current scope\n  --> /tmp/tmpm2mrgv78.rs:10:29\n   |\n10 |         let\
    \ mut b_digit = b.to_digit();\n   |                             ^^^^^^^^ method\
    \ not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm2mrgv78.rs:12:13\n\
    \   |\n12 |             1\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm2mrgv78.rs:14:13\n\
    \   |\n14 |             -1\n   |             ^^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm2mrgv78.rs:16:13\n\
    \   |\n16 |             0\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum = 0;\n        for\
    \ &n in &[a, b] {\n            sum += *n as isize;\n        }\n        sum\n \
    \   });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n  \
    \  assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfdppp0x.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for &num in nums_sorted {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|&num|\
    \ {\n        sum - num\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkoyatmyc.rs:9:9\n  |\n9 |\
    \     for &num in nums_sorted {\n  |         ^^^^    ----------- this expression\
    \ has type `Option<isize>`\n  |         |\n  |         expected `isize`, found\
    \ reference\n  |         help: you can probably remove the explicit borrow: `num`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_sorted {\n            sum\
    \ += n.digit();\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digit` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpd6g5y6xr.rs:11:22\n   |\n11 |             sum += n.digit();\n\
    \   |                      ^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum = 0;\n        for\
    \ &n in &[a, b] {\n            sum += *n as isize;\n        }\n        sum\n \
    \   });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n  \
    \  assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfdppp0x.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for i in nums_sorted.iter() {\n        sum += *i;\n        nums_sorted.swap(i,\
    \ nums_sorted.iter().position(|&x| x == sum).unwrap());\n    }\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6a64b3yc.rs:11:26\n   |\n\
    11 |         nums_sorted.swap(i, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \   |                          ^ expected `usize`, found `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &i in &nums_sorted {\n            sum\
    \ += i;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpmt7q1vdv.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpmt7q1vdv.rs:8:29\n   |\n8  | \
    \      nums_sorted.sort_by_key(|x| {\n   |       -           ----------- ^^^ immutable\
    \ borrow occurs here\n   |       |           |\n   |  _____|           mutable\
    \ borrow later used by call\n   | |\n9  | |         let mut sum = 0;\n10 | | \
    \        for &i in &nums_sorted {\n   | |                    ----------- second\
    \ borrow occurs due to use of `nums_sorted` in closure\n11 | |             sum\
    \ += i;\n12 | |         }\n13 | |         sum\n14 | |     });\n   | |______- mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for &n in nums_sorted {\n        sum += n;\n    }\n    nums_sorted.sort_by_key(|&n|\
    \ {\n        sum - n\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplwhwqb6w.rs:9:9\n  |\n9 |\
    \     for &n in nums_sorted {\n  |         ^^    ----------- this expression has\
    \ type `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n       \
    \ for x in &nums {\n            sum += *x;\n        }\n        sum\n    });\n\
    \    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmp35pljkjs.rs:7:23\n  |\n7 |\
    \     nums.sort_by_key(|x| {\n  |                       ^ help: if this is intentional,\
    \ prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0596]: cannot borrow `nums` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmp35pljkjs.rs:7:5\n   |\n6  |   fn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n   |                      ---- help: consider changing\
    \ this to be mutable: `mut nums`\n7  | /     nums.sort_by_key(|x| {\n8  | |  \
    \       let mut sum = 0;\n9  | |         for x in &nums {\n10 | |            \
    \ sum += *x;\n11 | |         }\n12 | |         sum\n13 | |     });\n   | |______^\
    \ cannot borrow as mutable\n\nerror[E0502]: cannot borrow `nums` as immutable\
    \ because it is also borrowed as mutable\n  --> /tmp/tmp35pljkjs.rs:7:22\n   |\n\
    7  |       nums.sort_by_key(|x| {\n   |       -    ----------- ^^^ immutable borrow\
    \ occurs here\n   |       |    |\n   |  _____|    mutable borrow later used by\
    \ call\n   | |\n8  | |         let mut sum = 0;\n9  | |         for x in &nums\
    \ {\n   | |                   ---- second borrow occurs due to use of `nums` in\
    \ closure\n10 | |             sum += *x;\n11 | |         }\n12 | |         sum\n\
    13 | |     });\n   | |______- mutable borrow occurs here\n\nerror: aborting due\
    \ to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0502, E0596.\nFor more information about an error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum = 0;\n        for\
    \ &n in &[a, b] {\n            sum += *n as isize;\n        }\n        sum\n \
    \   });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n  \
    \  assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfdppp0x.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum: isize = 0;\n \
    \       for &n in &[a, b] {\n            sum += *n as isize;\n        }\n    \
    \    sum\n    });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxh6s7grw.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_sorted {\n            sum\
    \ += n.digit();\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digit` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpd6g5y6xr.rs:11:22\n   |\n11 |             sum += n.digit();\n\
    \   |                      ^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by(|a,\
    \ b| {\n        let mut sum = 0;\n        for &n in &nums_sorted {\n         \
    \   sum += n % 10;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn\
    \ main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdj016p8m.rs:13:9\n   |\n\
    13 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut sorted_nums\
    \ = nums_copy.clone();\n    let mut sum_of_digits = nums_copy.iter().map(|&x|\
    \ x as isize).sum();\n    sorted_nums.sort_unstable_by(|a, b| {\n        if sum_of_digits\
    \ == 0 {\n            true\n        } else {\n            sum_of_digits - a.checked_mul(10).unwrap().checked_add(b.checked_mul(10).unwrap()).unwrap()\n\
    \        }\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk8ij6agz.rs:12:13\n   |\n\
    12 |             true\n   |             ^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_copy {\n            sum\
    \ += *n as isize;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmptpaew53s.rs:11:20\n\
    \   |\n11 |             sum += *n as isize;\n   |                    ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ x.checked_mul(10).unwrap());\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -11, -1, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpck9ynx7a.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut sorted_nums\
    \ = nums_copy.clone();\n    let mut sum = 0;\n    for i in nums_copy {\n     \
    \   sum += i;\n        sorted_nums.swap_remove(i);\n    }\n    sorted_nums.sort_unstable_by(|a,\
    \ b| {\n        sum - b\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg4v4wfyi.rs:12:33\n   |\n\
    12 |         sorted_nums.swap_remove(i);\n   |                               \
    \  ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n   |\n12 |         sorted_nums.swap_remove(i.try_into().unwrap());\n\
    \   |                                  ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg4v4wfyi.rs:15:9\n   |\n15 |         sum - b\n   |    \
    \     ^^^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by(|a,\
    \ b| {\n        let mut a_digits = a.to_string().chars().take_while(|c| c != '0').count();\n\
    \        let mut b_digits = b.to_string().chars().take_while(|c| c != '0').count();\n\
    \        if a_digits == b_digits {\n            a.cmp(b)\n        } else {\n \
    \           a_digits.cmp(&b_digits)\n        }\n    });\n    sorted_nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmpj8z04q4f.rs:9:67\n\
    \  |\n9 |         let mut a_digits = a.to_string().chars().take_while(|c| c !=\
    \ '0').count();\n  |                                                         \
    \          ^^ no implementation for `&char == char`\n  |\n  = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n  = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpj8z04q4f.rs:10:67\n   |\n10 |         let mut b_digits = b.to_string().chars().take_while(|c|\
    \ c != '0').count();\n   |                                                   \
    \                ^^ no implementation for `&char == char`\n   |\n   = help: the\
    \ trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum = 0;\n        for\
    \ &n in &[a, b] {\n            sum += *n as usize;\n        }\n        sum\n \
    \   });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n  \
    \  assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4t7biwqx.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n       \
    \ for x in nums {\n            sum += x;\n        }\n        sum\n    });\n  \
    \  nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpwyn51woj.rs:7:23\n  |\n7 |\
    \     nums.sort_by_key(|x| {\n  |                       ^ help: if this is intentional,\
    \ prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums`, a captured variable\
    \ in an `FnMut` closure\n   --> /tmp/tmpwyn51woj.rs:9:18\n    |\n6   |   fn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    |                      ---- captured outer\
    \ variable\n7   |       nums.sort_by_key(|x| {\n    |  ______________________-\n\
    8   | |         let mut sum = 0;\n9   | |         for x in nums {\n    | |   \
    \               ^^^^\n    | |                  |\n    | |                  `nums`\
    \ moved due to this implicit call to `.into_iter()`\n    | |                 \
    \ move occurs because `nums` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n10  | |             sum += x;\n11  | |         }\n12  | |    \
    \     sum\n13  | |     });\n    | |_____- captured by this `FnMut` closure\n \
    \   |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\
    \ to avoid moving into the `for` loop\n    |\n9   |         for x in &nums {\n\
    \    |                  +\n\nerror[E0596]: cannot borrow `nums` as mutable, as\
    \ it is not declared as mutable\n  --> /tmp/tmpwyn51woj.rs:7:5\n   |\n6  |   fn\
    \ order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                    \
    \  ---- help: consider changing this to be mutable: `mut nums`\n7  | /     nums.sort_by_key(|x|\
    \ {\n8  | |         let mut sum = 0;\n9  | |         for x in nums {\n10 | | \
    \            sum += x;\n11 | |         }\n12 | |         sum\n13 | |     });\n\
    \   | |______^ cannot borrow as mutable\n\nerror[E0505]: cannot move out of `nums`\
    \ because it is borrowed\n  --> /tmp/tmpwyn51woj.rs:7:22\n   |\n7  |       nums.sort_by_key(|x|\
    \ {\n   |       -                ^^^ move out of `nums` occurs here\n   |  _____|\n\
    \   | |\n8  | |         let mut sum = 0;\n9  | |         for x in nums {\n   |\
    \ |                  ---- move occu"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_sorted {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `n` is never read\n  --> /tmp/tmpc8aqhnej.rs:12:13\n\
    \   |\n12 |             n /= 10;\n   |             ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ unused variable: `x`\n --> /tmp/tmpc8aqhnej.rs:8:30\n  |\n8 |     nums_sorted.sort_by_key(|x|\
    \ {\n  |                              ^ help: if this is intentional, prefix it\
    \ with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\
    \nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmpc8aqhnej.rs:12:13\n\
    \   |\n10 |         for &n in &nums_sorted {\n   |              -\n   |      \
    \        |\n   |              first assignment to `n`\n   |              help:\
    \ consider making this binding mutable: `mut n`\n11 |             sum += n % 10;\n\
    12 |             n /= 10;\n   |             ^^^^^^^ cannot assign twice to immutable\
    \ variable\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because it\
    \ is also borrowed as mutable\n  --> /tmp/tmpc8aqhnej.rs:8:29\n   |\n8  |    \
    \ nums_sorted.sort_by_key(|x| {\n   |     ----------- ----------- ^^^ immutable\
    \ borrow occurs here\n   |     |           |\n   |     |           mutable borrow\
    \ later used by call\n   |     mutable borrow occurs here\n9  |         let mut\
    \ sum = 0;\n10 |         for &n in &nums_sorted {\n   |                    -----------\
    \ second borrow occurs due to use of `nums_sorted` in closure\n\nerror: aborting\
    \ due to 2 previous errors; 2 warnings emitted\n\nSome errors have detailed explanations:\
    \ E0384, E0502.\nFor more information about an error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort();\n\
    \    sorted_nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -11, -1, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpw49mgde3.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum = 0;\n        for\
    \ &n in &[a, b] {\n            sum += *n as isize;\n        }\n        sum\n \
    \   });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n  \
    \  assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfdppp0x.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += *x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpt6lramyq.rs:8:30\n  |\n8 |\
    \     sorted_nums.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0499]: cannot borrow `sorted_nums` as mutable more than\
    \ once at a time\n  --> /tmp/tmpt6lramyq.rs:8:29\n   |\n8  |       sorted_nums.sort_by_key(|x|\
    \ {\n   |       -           ----------- ^^^ second mutable borrow occurs here\n\
    \   |       |           |\n   |  _____|           first borrow later used by call\n\
    \   | |\n9  | |         let mut sum = 0;\n10 | |         for x in &mut sorted_nums\
    \ {\n   | |                       ----------- second borrow occurs due to use\
    \ of `sorted_nums` in closure\n11 | |             sum += *x;\n12 | |         }\n\
    13 | |         sum\n14 | |     });\n   | |______- first mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for &n in &nums_sorted {\n        sum += n;\n    }\n    let mut nums_sorted_by_sum:\
    \ Vec<isize> = nums_sorted.clone();\n    nums_sorted.sort_by_key(|&n| {\n    \
    \    sum += n;\n        sum\n    });\n    nums_sorted_by_sum.sort_by_key(|&n|\
    \ {\n        sum\n    });\n    nums_sorted_by_sum\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpkqsqi7ta.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_copy {\n            sum\
    \ += *n;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n \
    \   let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpcktnv9w1.rs:11:20\n\
    \   |\n11 |             sum += *n;\n   |                    ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_sorted {\n            sum\
    \ += *n as usize;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpjswl8vvg.rs:11:20\n\
    \   |\n11 |             sum += *n as usize;\n   |                    ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &d in &nums_copy {\n            sum\
    \ += d;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n  \
    \  let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmppboo26vc.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_copy` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmppboo26vc.rs:8:27\n   |\n8  | \
    \      nums_copy.sort_by_key(|x| {\n   |       -         ----------- ^^^ immutable\
    \ borrow occurs here\n   |       |         |\n   |  _____|         mutable borrow\
    \ later used by call\n   | |\n9  | |         let mut sum = 0;\n10 | |        \
    \ for &d in &nums_copy {\n   | |                    --------- second borrow occurs\
    \ due to use of `nums_copy` in closure\n11 | |             sum += d;\n12 | | \
    \        }\n13 | |         sum\n14 | |     });\n   | |______- mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for i in nums_sorted.iter() {\n        sum += i;\n        nums_sorted.swap(i,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n    }\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpibv2i1kt.rs:11:26\n   |\n\
    11 |         nums_sorted.swap(i, nums_sorted.iter().position(|&x| x + sum).unwrap());\n\
    \   |                          ^ expected `usize`, found `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpibv2i1kt.rs:11:62\n   |\n11 |         nums_sorted.swap(i,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n   |                 \
    \                                             ^^^^^^^ expected `bool`, found `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for &n in nums_sorted {\n        sum += n;\n    }\n    nums_sorted.sort_by_key(|&n|\
    \ {\n        sum - n\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplwhwqb6w.rs:9:9\n  |\n9 |\
    \     for &n in nums_sorted {\n  |         ^^    ----------- this expression has\
    \ type `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ x.checked_add(x));\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwl30kxr_.rs:8:47\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| x.checked_add(x));\n  |                    \
    \                           ^ expected `isize`, found `&isize`\n  |\nhelp: consider\
    \ dereferencing the borrow\n  |\n8 |     nums_sorted.sort_by_key(|x| x.checked_add(*x));\n\
    \  |                                               +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_sorted {\n            sum\
    \ += n % 10;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpccfumxt5.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpccfumxt5.rs:8:29\n   |\n8  | \
    \    nums_sorted.sort_by_key(|x| {\n   |     ----------- ----------- ^^^ immutable\
    \ borrow occurs here\n   |     |           |\n   |     |           mutable borrow\
    \ later used by call\n   |     mutable borrow occurs here\n9  |         let mut\
    \ sum = 0;\n10 |         for &n in &nums_sorted {\n   |                    -----------\
    \ second borrow occurs due to use of `nums_sorted` in closure\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for i in nums_sorted.iter() {\n        sum += *i;\n        nums_sorted.swap(i,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n    }\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpumy5ddy3.rs:11:26\n   |\n\
    11 |         nums_sorted.swap(i, nums_sorted.iter().position(|&x| x + sum).unwrap());\n\
    \   |                          ^ expected `usize`, found `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpumy5ddy3.rs:11:62\n   |\n11 |         nums_sorted.swap(i,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n   |                 \
    \                                             ^^^^^^^ expected `bool`, found `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        a.checked_add(b).unwrap()\n\
    \    });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1y3j0pgr.rs:8:23\n  |\n8 |\
    \         a.checked_add(b).unwrap()\n  |                       ^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |     \
    \    a.checked_add(*b).unwrap()\n  |                       +\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1y3j0pgr.rs:8:9\n  |\n8 |         a.checked_add(b).unwrap()\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found\
    \ `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for i in nums_sorted.iter() {\n        sum += *i;\n        nums_sorted.swap(i,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n    }\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpumy5ddy3.rs:11:26\n   |\n\
    11 |         nums_sorted.swap(i, nums_sorted.iter().position(|&x| x + sum).unwrap());\n\
    \   |                          ^ expected `usize`, found `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpumy5ddy3.rs:11:62\n   |\n11 |         nums_sorted.swap(i,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n   |                 \
    \                                             ^^^^^^^ expected `bool`, found `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for num in nums_sorted {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|num|\
    \ {\n        sum - num\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_sorted`\n   --> /tmp/tmpm_bymfht.rs:12:5\n\
    \    |\n7   |       let mut nums_sorted = nums.clone();\n    |           ---------------\
    \ move occurs because `nums_sorted` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n8   |       let mut sum = 0;\n9   |       for num in nums_sorted\
    \ {\n    |                  ----------- `nums_sorted` moved due to this implicit\
    \ call to `.into_iter()`\n...\n12  | /     nums_sorted.sort_by_key(|num| {\n13\
    \  | |         sum - num\n14  | |     });\n    | |______^ value borrowed here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `nums_sorted`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n9   |     for num in &nums_sorted\
    \ {\n    |                +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_copy {\n            sum\
    \ += *n as isize;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmptpaew53s.rs:11:20\n\
    \   |\n11 |             sum += *n as isize;\n   |                    ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n\
    \    for num in nums_copy {\n        sum += num;\n    }\n    let mut nums_sorted\
    \ = nums_copy.clone();\n    nums_sorted.sort();\n    nums_sorted.reverse();\n\
    \    nums_sorted.sort();\n    nums_sorted.reverse();\n    nums_sorted.sort();\n\
    \    nums_sorted.reverse();\n    nums_sorted.sort();\n    nums_sorted.reverse();\n\
    \    nums_sorted.sort();\n    nums_sorted.reverse();\n    nums_sorted.sort();\n\
    \    nums_sorted.reverse();\n    nums_sorted.sort();\n    nums_sorted.reverse();\n\
    \    nums_sorted.sort();\n    nums_sorted.reverse();\n    nums_sorted.sort();\n\
    \    nums_sorted.reverse();\n    nums_sorted.sort();\n    nums_sorted.reverse();\n\
    \    nums_sorted.sort();\n    nums_sorted.reverse();\n    nums_sorted.sort();\n\
    \    nums_sorted.reverse();\n    nums_sorted.sort();\n    nums_sorted.reverse();\n\
    \    nums_sorted.sort();\n    nums_sorted.reverse();\n    nums_sorted.sort();\n\
    \    nums_sorted.reverse();\n    nums_sorted.sort();\n    nums_sorted.reverse();\n\
    \    nums_sorted.sort();\n    nums_sorted.reverse();\n    nums_sorted.sort();\n\
    \    nums_sorted.reverse();\n    nums_sorted.sort();\n    nums_sorted.reverse();\n\
    \    nums_sorted.sort();\n    nums_sorted.reverse();\n    nums_sorted.sort();\n\
    \    nums_sorted.reverse();\n    nums_sorted.sort();\n    nums_sorted.reverse();\n\
    \    nums_sorted.sort();\n    nums_sorted.reverse();\n    nums_sorted.sort();\n\
    \    nums_sorted.reverse();\n    nums_sorted.sort();\n    nums_sorted.reverse();\n\
    \    nums_sorted.sort();\n    nums_sorted.reverse();\n    nums_sorted.sort();\n\
    \    nums_sorted.reverse();\n    nums_sorted.sort();\n    nums_sorted.reverse();\n\
    \    nums_sorted.sort();\n    nums_sorted.reverse();\n    nums_sorted.sort();\n\
    \    nums_sorted.reverse();\n    nums_sorted.sort();\n    nums_sorted.reverse();\n\
    \    nums_sorted.sort();\n    nums_sorted.reverse();\n    nums_sorted.sort();\n\
    \    nums_sorted.reverse();\n    nums_sorted.sort();\n\n}\n\nfn main() {\n   \
    \ let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5azsk68u.rs:6:41\n  |\n6 |\
    \ fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  |    ---------------\
    \                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        a.checked_add(a.checked_mul(10).unwrap()).unwrap()\n\
    \            .checked_add(b.checked_mul(10).unwrap()).unwrap()\n            .partial_cmp(&b.checked_mul(10).unwrap())\n\
    \            .unwrap()\n    })\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn9o9u00j.rs:7:5\n   |\n6\
    \  |   fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |            \
    \                               ---------- expected `Vec<isize>` because of return\
    \ type\n7  | /     nums.sort_by(|a, b| {\n8  | |         a.checked_add(a.checked_mul(10).unwrap()).unwrap()\n\
    9  | |             .checked_add(b.checked_mul(10).unwrap()).unwrap()\n10 | | \
    \            .partial_cmp(&b.checked_mul(10).unwrap())\n11 | |             .unwrap()\n\
    12 | |     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    let mut sum = 0;\n    for n\
    \ in nums {\n        sum += n % 10;\n        result.push(n);\n    }\n    result.sort_by_key(|n|\
    \ sum + n % 10);\n    result\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -1, -11, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpbgmhzla9.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_copy {\n            sum\
    \ += *n % 10;\n            *n /= 10;\n        }\n        sum\n    });\n    nums_copy\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpguuopyzs.rs:11:20\n\
    \   |\n11 |             sum += *n % 10;\n   |                    ^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpguuopyzs.rs:12:13\n   |\n\
    12 |             *n /= 10;\n   |             ^^\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &i in &nums {\n            sum += i;\n\
    \        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpm7qje3c2.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum = 0;\n        for\
    \ &i in &[a, b] {\n            sum += i;\n        }\n        sum\n    });\n  \
    \  nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppb5v_y12.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &i in &nums {\n            sum += i;\n\
    \        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpm7qje3c2.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    for i in nums_copy {\n        sum\
    \ += i;\n        nums_sorted.swap(i, sum);\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpykpl0lho.rs:12:26\n   |\n\
    12 |         nums_sorted.swap(i, sum);\n   |                          ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |         nums_sorted.swap(i.try_into().unwrap(),\
    \ sum);\n   |                           ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpykpl0lho.rs:12:29\n   |\n12 |         nums_sorted.swap(i,\
    \ sum);\n   |                             ^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |         nums_sorted.swap(i, sum.try_into().unwrap());\n\
    \   |                                ++++++++++++++++++++\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ x.checked_add(x).unwrap());\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn2o4goag.rs:8:47\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| x.checked_add(x).unwrap());\n  |           \
    \                                    ^ expected `isize`, found `&isize`\n  |\n\
    help: consider dereferencing the borrow\n  |\n8 |     nums_sorted.sort_by_key(|x|\
    \ x.checked_add(*x).unwrap());\n  |                                          \
    \     +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    for i in nums_copy {\n        sum\
    \ += i;\n        nums_sorted.remove(&i);\n    }\n    nums_sorted.sort_by_key(|&i|\
    \ {\n        sum - i;\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1c2rmhjf.rs:12:28\n   |\n\
    12 |         nums_sorted.remove(&i);\n   |                            ^^ expected\
    \ `usize`, found `&isize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ x.checked_add(x).unwrap());\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn2o4goag.rs:8:47\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| x.checked_add(x).unwrap());\n  |           \
    \                                    ^ expected `isize`, found `&isize`\n  |\n\
    help: consider dereferencing the borrow\n  |\n8 |     nums_sorted.sort_by_key(|x|\
    \ x.checked_add(*x).unwrap());\n  |                                          \
    \     +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut res = vec![];\n\
    \    let mut sum = 0;\n    let mut i = 0;\n    while i < nums_copy.len() {\n \
    \       sum += nums_copy[i];\n        res.push(sum);\n        i += 1;\n    }\n\
    \    res.sort_unstable_by_key(|x| x.0);\n    return res;\n}\n\nfn main() {\n \
    \   let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `0` on type `&isize`\n  --> /tmp/tmpfzocfa4y.rs:16:36\n\
    \   |\n16 |     res.sort_unstable_by_key(|x| x.0);\n   |                     \
    \               ^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0609`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &i in &nums_sorted {\n            sum\
    \ += i;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpmt7q1vdv.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpmt7q1vdv.rs:8:29\n   |\n8  | \
    \      nums_sorted.sort_by_key(|x| {\n   |       -           ----------- ^^^ immutable\
    \ borrow occurs here\n   |       |           |\n   |  _____|           mutable\
    \ borrow later used by call\n   | |\n9  | |         let mut sum = 0;\n10 | | \
    \        for &i in &nums_sorted {\n   | |                    ----------- second\
    \ borrow occurs due to use of `nums_sorted` in closure\n11 | |             sum\
    \ += i;\n12 | |         }\n13 | |         sum\n14 | |     });\n   | |______- mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by(|a,\
    \ b| {\n        let mut a_digits = a.to_digits();\n        let mut b_digits =\
    \ b.to_digits();\n        a_digits.iter().zip(b_digits.iter()).map(|(a, b)| a\
    \ + b).sum().unwrap()\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmpi66867to.rs:9:30\n  |\n9 |         let mut\
    \ a_digits = a.to_digits();\n  |                              ^^^^^^^^^ method\
    \ not found in `&isize`\n\nerror[E0599]: no method named `to_digits` found for\
    \ reference `&isize` in the current scope\n  --> /tmp/tmpi66867to.rs:10:30\n \
    \  |\n10 |         let mut b_digits = b.to_digits();\n   |                   \
    \           ^^^^^^^^^ method not found in `&isize`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum = 0;\n        for\
    \ &n in &[a, b] {\n            sum += *n as isize;\n        }\n        sum\n \
    \   });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n  \
    \  assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfdppp0x.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_copy {\n            sum\
    \ += *n as isize;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmptpaew53s.rs:11:20\n\
    \   |\n11 |             sum += *n as isize;\n   |                    ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &i in &nums_sorted {\n            sum\
    \ += i;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpmt7q1vdv.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpmt7q1vdv.rs:8:29\n   |\n8  | \
    \      nums_sorted.sort_by_key(|x| {\n   |       -           ----------- ^^^ immutable\
    \ borrow occurs here\n   |       |           |\n   |  _____|           mutable\
    \ borrow later used by call\n   | |\n9  | |         let mut sum = 0;\n10 | | \
    \        for &i in &nums_sorted {\n   | |                    ----------- second\
    \ borrow occurs due to use of `nums_sorted` in closure\n11 | |             sum\
    \ += i;\n12 | |         }\n13 | |         sum\n14 | |     });\n   | |______- mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_copy {\n            sum\
    \ += *n % 10;\n            *n /= 10;\n        }\n        sum\n    });\n    nums_copy\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpguuopyzs.rs:11:20\n\
    \   |\n11 |             sum += *n % 10;\n   |                    ^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpguuopyzs.rs:12:13\n   |\n\
    12 |             *n /= 10;\n   |             ^^\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += *x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpt6lramyq.rs:8:30\n  |\n8 |\
    \     sorted_nums.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0499]: cannot borrow `sorted_nums` as mutable more than\
    \ once at a time\n  --> /tmp/tmpt6lramyq.rs:8:29\n   |\n8  |       sorted_nums.sort_by_key(|x|\
    \ {\n   |       -           ----------- ^^^ second mutable borrow occurs here\n\
    \   |       |           |\n   |  _____|           first borrow later used by call\n\
    \   | |\n9  | |         let mut sum = 0;\n10 | |         for x in &mut sorted_nums\
    \ {\n   | |                       ----------- second borrow occurs due to use\
    \ of `sorted_nums` in closure\n11 | |             sum += *x;\n12 | |         }\n\
    13 | |         sum\n14 | |     });\n   | |______- first mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for num in nums_sorted {\n        sum += num;\n    }\n    let mut num_sorted\
    \ = nums_sorted.clone();\n    let mut index = 0;\n    while index < nums_sorted.len()\
    \ {\n        let mut found = false;\n        for num in num_sorted {\n       \
    \     if num > sum {\n                num_sorted.swap(index, num_sorted.len()\
    \ - 1);\n                found = true;\n                break;\n            }\n\
    \            index += 1;\n        }\n        if !found {\n            break;\n\
    \        }\n    }\n    num_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmp3bjil4cq.rs:7:9\n\
    \  |\n7 |     let mut nums_sorted = nums.clone();\n  |         ----^^^^^^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `nums_sorted`\n   -->\
    \ /tmp/tmp3bjil4cq.rs:12:26\n    |\n7   |     let mut nums_sorted = nums.clone();\n\
    \    |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8   |     let mut sum = 0;\n9   |\
    \     for num in nums_sorted {\n    |                ----------- `nums_sorted`\
    \ moved due to this implicit call to `.into_iter()`\n...\n12  |     let mut num_sorted\
    \ = nums_sorted.clone();\n    |                          ^^^^^^^^^^^^^^^^^^^ value\
    \ borrowed here after move\n    |\nnote: this function takes ownership of the\
    \ receiver `self`, which moves `nums_sorted`\nhelp: consider iterating over a\
    \ slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n  \
    \  |\n9   |     for num in &nums_sorted {\n    |                +\n\nerror[E0382]:\
    \ use of moved value: `num_sorted`\n  --> /tmp/tmp3bjil4cq.rs:16:20\n   |\n12\
    \ |     let mut num_sorted = nums_sorted.clone();\n   |         --------------\
    \ move occurs because `num_sorted` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n16 |         for num in num_sorted {\n   |          \
    \          ^^^^^^^^^^ `num_sorted` moved due to this implicit call to `.into_iter()`,\
    \ in previous iteration of loop\n   |\nhelp: consider iterating over a slice of\
    \ the `Vec<isize>`'s content to avoid moving into the `for` loop\n   |\n16 | \
    \        for num in &num_sorted {\n   |                    +\n\nerror[E0502]:\
    \ cannot borrow `num_sorted` as immutable because it is also borrowed as mutable\n\
    \  --> /tmp/tmp3bjil4cq.rs:18:40\n   |\n18 |                 num_sorted.swap(index,\
    \ num_sorted.len() - 1);\n   |                 -----------------------^^^^^^^^^^^^^^^^-----\n\
    \   |                 |          |           |\n   |                 |       \
    \   |           immutable"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ x.checked_add(x).unwrap());\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn2o4goag.rs:8:47\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| x.checked_add(x).unwrap());\n  |           \
    \                                    ^ expected `isize`, found `&isize`\n  |\n\
    help: consider dereferencing the borrow\n  |\n8 |     nums_sorted.sort_by_key(|x|\
    \ x.checked_add(*x).unwrap());\n  |                                          \
    \     +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum = 0;\n        for\
    \ &n in &[a, b] {\n            sum += *n as isize;\n        }\n        sum\n \
    \   });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n  \
    \  assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfdppp0x.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum: isize = 0;\n \
    \       for &n in &[a, b] {\n            sum += *n as isize;\n        }\n    \
    \    sum\n    });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxh6s7grw.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums.clone();\n    let mut sum = 0;\n    for &num in nums_copy {\n       \
    \ sum += num;\n        nums_sorted.remove(num);\n    }\n    nums_sorted.sort();\n\
    \    nums_sorted.reverse();\n    nums_sorted.extend(nums_copy);\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzy4cctpd.rs:10:9\n   |\n\
    10 |     for &num in nums_copy {\n   |         ^^^^    --------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `num`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum: isize = 0;\n \
    \       for i in 0..10 {\n            sum += nums[a] % 10;\n            a /= 10;\n\
    \        }\n        sum - nums[b] % 10\n    });\n    nums\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpi_co07oj.rs:10:20\n\
    \   |\n10 |             sum += nums[a] % 10;\n   |                    ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `/=` cannot be applied to type `&isize`\n  --> /tmp/tmpi_co07oj.rs:11:13\n\
    \   |\n11 |             a /= 10;\n   |             -^^^^^^\n   |             |\n\
    \   |             cannot use `/=` on type `&isize`\n   |\nhelp: `/=` can be used\
    \ on `isize`, you can dereference `a`\n   |\n11 |             *a /= 10;\n   |\
    \             +\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmpi_co07oj.rs:13:15\n   |\n13 |         sum - nums[b] % 10\n   |\
    \               ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut sum = 0;\n    for\
    \ num in nums {\n        sum += num;\n        result.push(num);\n    }\n    result.sort_by_key(|num|\
    \ sum - num);\n    result\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11, 1, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpicwdz93y.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum: isize = 0;\n \
    \       for &n in &[a, b] {\n            sum += *n as isize;\n        }\n    \
    \    sum\n    });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxh6s7grw.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum_of_digits\
    \ = nums.iter().map(|x| x.pow(10).unwrap()).sum();\n    nums_sorted.sort_by_key(|x|\
    \ sum_of_digits - x.pow(10).unwrap());\n    nums_sorted\n}\n\nfn main() {\n  \
    \  let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpa50x2bzi.rs:8:59\n  |\n8 |     let mut sum_of_digits = nums.iter().map(|x|\
    \ x.pow(10).unwrap()).sum();\n  |                                            \
    \               ^^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `unwrap` found for type `isize` in the current scope\n --> /tmp/tmpa50x2bzi.rs:9:59\n\
    \  |\n9 |     nums_sorted.sort_by_key(|x| sum_of_digits - x.pow(10).unwrap());\n\
    \  |                                                           ^^^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `&mut isize` to `{integer}`\n  --> /tmp/tmp6w83q15r.rs:11:17\n\
    \   |\n11 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += &mut isize`\n   |\n   = help: the trait `AddAssign<&mut isize>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += *x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpt6lramyq.rs:8:30\n  |\n8 |\
    \     sorted_nums.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0499]: cannot borrow `sorted_nums` as mutable more than\
    \ once at a time\n  --> /tmp/tmpt6lramyq.rs:8:29\n   |\n8  |       sorted_nums.sort_by_key(|x|\
    \ {\n   |       -           ----------- ^^^ second mutable borrow occurs here\n\
    \   |       |           |\n   |  _____|           first borrow later used by call\n\
    \   | |\n9  | |         let mut sum = 0;\n10 | |         for x in &mut sorted_nums\
    \ {\n   | |                       ----------- second borrow occurs due to use\
    \ of `sorted_nums` in closure\n11 | |             sum += *x;\n12 | |         }\n\
    13 | |         sum\n14 | |     });\n   | |______- first mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum: isize = 0;\n \
    \       for &n in &[a, b] {\n            sum += *n as isize;\n        }\n    \
    \    sum\n    });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxh6s7grw.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `&mut isize` to `{integer}`\n  --> /tmp/tmp6w83q15r.rs:11:17\n\
    \   |\n11 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += &mut isize`\n   |\n   = help: the trait `AddAssign<&mut isize>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_sorted {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `n` is never read\n  --> /tmp/tmpc8aqhnej.rs:12:13\n\
    \   |\n12 |             n /= 10;\n   |             ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ unused variable: `x`\n --> /tmp/tmpc8aqhnej.rs:8:30\n  |\n8 |     nums_sorted.sort_by_key(|x|\
    \ {\n  |                              ^ help: if this is intentional, prefix it\
    \ with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\
    \nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmpc8aqhnej.rs:12:13\n\
    \   |\n10 |         for &n in &nums_sorted {\n   |              -\n   |      \
    \        |\n   |              first assignment to `n`\n   |              help:\
    \ consider making this binding mutable: `mut n`\n11 |             sum += n % 10;\n\
    12 |             n /= 10;\n   |             ^^^^^^^ cannot assign twice to immutable\
    \ variable\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because it\
    \ is also borrowed as mutable\n  --> /tmp/tmpc8aqhnej.rs:8:29\n   |\n8  |    \
    \ nums_sorted.sort_by_key(|x| {\n   |     ----------- ----------- ^^^ immutable\
    \ borrow occurs here\n   |     |           |\n   |     |           mutable borrow\
    \ later used by call\n   |     mutable borrow occurs here\n9  |         let mut\
    \ sum = 0;\n10 |         for &n in &nums_sorted {\n   |                    -----------\
    \ second borrow occurs due to use of `nums_sorted` in closure\n\nerror: aborting\
    \ due to 2 previous errors; 2 warnings emitted\n\nSome errors have detailed explanations:\
    \ E0384, E0502.\nFor more information about an error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum_of_digits\
    \ = nums.iter().map(|x| x.digits()).sum();\n    nums_sorted.sort_by_key(|x| sum_of_digits\
    \ - x.digits());\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for reference `&isize` in\
    \ the current scope\n --> /tmp/tmps8rh4knf.rs:8:51\n  |\n8 |     let mut sum_of_digits\
    \ = nums.iter().map(|x| x.digits()).sum();\n  |                              \
    \                     ^^^^^^ method not found in `&isize`\n\nerror[E0599]: no\
    \ method named `digits` found for reference `&isize` in the current scope\n -->\
    \ /tmp/tmps8rh4knf.rs:9:51\n  |\n9 |     nums_sorted.sort_by_key(|x| sum_of_digits\
    \ - x.digits());\n  |                                                   ^^^^^^\
    \ method not found in `&isize`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum = 0;\n        for\
    \ &i in &nums {\n            sum += i;\n        }\n        sum\n    });\n    nums\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnwejbgch.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += *x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpt6lramyq.rs:8:30\n  |\n8 |\
    \     sorted_nums.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0499]: cannot borrow `sorted_nums` as mutable more than\
    \ once at a time\n  --> /tmp/tmpt6lramyq.rs:8:29\n   |\n8  |       sorted_nums.sort_by_key(|x|\
    \ {\n   |       -           ----------- ^^^ second mutable borrow occurs here\n\
    \   |       |           |\n   |  _____|           first borrow later used by call\n\
    \   | |\n9  | |         let mut sum = 0;\n10 | |         for x in &mut sorted_nums\
    \ {\n   | |                       ----------- second borrow occurs due to use\
    \ of `sorted_nums` in closure\n11 | |             sum += *x;\n12 | |         }\n\
    13 | |         sum\n14 | |     });\n   | |______- first mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum = 0;\n        for\
    \ &n in &[a, b] {\n            sum += *n as isize;\n        }\n        sum\n \
    \   });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n  \
    \  assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfdppp0x.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by(|a,\
    \ b| {\n        let mut a_digits = a.to_digits();\n        let mut b_digits =\
    \ b.to_digits();\n        a_digits.iter().zip(b_digits.iter()).fold(0, |sum, (a,\
    \ b)| {\n            sum + a.checked_add(b).unwrap()\n        });\n    });\n \
    \   sorted_nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmpguygqziz.rs:9:30\n  |\n9 |         let mut\
    \ a_digits = a.to_digits();\n  |                              ^^^^^^^^^ method\
    \ not found in `&isize`\n\nerror[E0599]: no method named `to_digits` found for\
    \ reference `&isize` in the current scope\n  --> /tmp/tmpguygqziz.rs:10:30\n \
    \  |\n10 |         let mut b_digits = b.to_digits();\n   |                   \
    \           ^^^^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpguygqziz.rs:8:32\n   |\n8  |       sorted_nums.sort_by(|a,\
    \ b| {\n   |  ________________________________^\n9  | |         let mut a_digits\
    \ = a.to_digits();\n10 | |         let mut b_digits = b.to_digits();\n11 | | \
    \        a_digits.iter().zip(b_digits.iter()).fold(0, |sum, (a, b)| {\n12 | |\
    \             sum + a.checked_add(b).unwrap()\n13 | |         });\n14 | |    \
    \ });\n   | |_____^ expected enum `std::cmp::Ordering`, found `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for &num in nums_sorted {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|&num|\
    \ {\n        sum - num\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkoyatmyc.rs:9:9\n  |\n9 |\
    \     for &num in nums_sorted {\n  |         ^^^^    ----------- this expression\
    \ has type `Option<isize>`\n  |         |\n  |         expected `isize`, found\
    \ reference\n  |         help: you can probably remove the explicit borrow: `num`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += *x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpt6lramyq.rs:8:30\n  |\n8 |\
    \     sorted_nums.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0499]: cannot borrow `sorted_nums` as mutable more than\
    \ once at a time\n  --> /tmp/tmpt6lramyq.rs:8:29\n   |\n8  |       sorted_nums.sort_by_key(|x|\
    \ {\n   |       -           ----------- ^^^ second mutable borrow occurs here\n\
    \   |       |           |\n   |  _____|           first borrow later used by call\n\
    \   | |\n9  | |         let mut sum = 0;\n10 | |         for x in &mut sorted_nums\
    \ {\n   | |                       ----------- second borrow occurs due to use\
    \ of `sorted_nums` in closure\n11 | |             sum += *x;\n12 | |         }\n\
    13 | |         sum\n14 | |     });\n   | |______- first mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `&mut isize` to `{integer}`\n  --> /tmp/tmp6w83q15r.rs:11:17\n\
    \   |\n11 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += &mut isize`\n   |\n   = help: the trait `AddAssign<&mut isize>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &d in &nums_sorted {\n            sum\
    \ += d;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmph9xz6vyt.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmph9xz6vyt.rs:8:29\n   |\n8  | \
    \      nums_sorted.sort_by_key(|x| {\n   |       -           ----------- ^^^ immutable\
    \ borrow occurs here\n   |       |           |\n   |  _____|           mutable\
    \ borrow later used by call\n   | |\n9  | |         let mut sum = 0;\n10 | | \
    \        for &d in &nums_sorted {\n   | |                    ----------- second\
    \ borrow occurs due to use of `nums_sorted` in closure\n11 | |             sum\
    \ += d;\n12 | |         }\n13 | |         sum\n14 | |     });\n   | |______- mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum = 0;\n        for\
    \ &n in &[a, b] {\n            sum += *n as isize;\n        }\n        sum\n \
    \   });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n  \
    \  assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfdppp0x.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &i in nums_copy {\n            sum\
    \ += i;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n  \
    \  let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpntqci7tj.rs:10:13\n   |\n\
    10 |         for &i in nums_copy {\n   |             ^^    --------- this expression\
    \ has type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `i`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in nums_copy {\n            sum\
    \ += *n as isize;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvxtvhlen.rs:10:13\n   |\n\
    10 |         for &n in nums_copy {\n   |             ^^    --------- this expression\
    \ has type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `n`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for &num in nums_sorted {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|&num|\
    \ {\n        sum - num\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkoyatmyc.rs:9:9\n  |\n9 |\
    \     for &num in nums_sorted {\n  |         ^^^^    ----------- this expression\
    \ has type `Option<isize>`\n  |         |\n  |         expected `isize`, found\
    \ reference\n  |         help: you can probably remove the explicit borrow: `num`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        let mut sum = 0;\n        for\
    \ &n in &[a, b] {\n            sum += *n;\n        }\n        sum\n    });\n \
    \   nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpspep1tz5.rs:12:9\n   |\n\
    12 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut sorted_nums\
    \ = Vec::new();\n    let mut sum = 0;\n    for num in nums_copy {\n        sum\
    \ += num;\n        sorted_nums.push(num);\n    }\n    sorted_nums.sort();\n  \
    \  for num in sorted_nums {\n        nums_copy.swap_remove(num);\n    }\n    nums_copy\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgqk__au3.rs:16:31\n   |\n\
    16 |         nums_copy.swap_remove(num);\n   |                               ^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n16 |         nums_copy.swap_remove(num.try_into().unwrap());\n\
    \   |                                  ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n       \
    \ for &n in &nums {\n            sum += *n as isize;\n        }\n        sum\n\
    \    });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpwb8ixmrz.rs:10:20\n\
    \   |\n10 |             sum += *n as isize;\n   |                    ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &d in &nums_sorted {\n            sum\
    \ += d;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmph9xz6vyt.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmph9xz6vyt.rs:8:29\n   |\n8  | \
    \      nums_sorted.sort_by_key(|x| {\n   |       -           ----------- ^^^ immutable\
    \ borrow occurs here\n   |       |           |\n   |  _____|           mutable\
    \ borrow later used by call\n   | |\n9  | |         let mut sum = 0;\n10 | | \
    \        for &d in &nums_sorted {\n   | |                    ----------- second\
    \ borrow occurs due to use of `nums_sorted` in closure\n11 | |             sum\
    \ += d;\n12 | |         }\n13 | |         sum\n14 | |     });\n   | |______- mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by(|a,\
    \ b| {\n        a.checked_add(b).unwrap()\n    });\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaoil02mb.rs:9:23\n  |\n9 |\
    \         a.checked_add(b).unwrap()\n  |                       ^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |     \
    \    a.checked_add(*b).unwrap()\n  |                       +\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpaoil02mb.rs:9:9\n  |\n9 |         a.checked_add(b).unwrap()\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found\
    \ `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by(|a,\
    \ b| {\n        let mut sum = 0;\n        for &n in &nums {\n            sum +=\
    \ *n as isize;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpohglj0yx.rs:11:20\n\
    \   |\n11 |             sum += *n as isize;\n   |                    ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpohglj0yx.rs:13:9\n   |\n13 |         sum\n \
    \  |         ^^^ expected enum `std::cmp::Ordering`, found integer\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for num in nums_sorted {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|num|\
    \ {\n        sum - num\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_sorted`\n   --> /tmp/tmpm_bymfht.rs:12:5\n\
    \    |\n7   |       let mut nums_sorted = nums.clone();\n    |           ---------------\
    \ move occurs because `nums_sorted` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n8   |       let mut sum = 0;\n9   |       for num in nums_sorted\
    \ {\n    |                  ----------- `nums_sorted` moved due to this implicit\
    \ call to `.into_iter()`\n...\n12  | /     nums_sorted.sort_by_key(|num| {\n13\
    \  | |         sum - num\n14  | |     });\n    | |______^ value borrowed here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `nums_sorted`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n9   |     for num in &nums_sorted\
    \ {\n    |                +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_copy {\n            sum\
    \ += *n % 10;\n            *n /= 10;\n        }\n        sum\n    });\n    nums_copy\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpguuopyzs.rs:11:20\n\
    \   |\n11 |             sum += *n % 10;\n   |                    ^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpguuopyzs.rs:12:13\n   |\n\
    12 |             *n /= 10;\n   |             ^^\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by(|a,\
    \ b| {\n        let mut sum = 0;\n        for &i in &nums {\n            sum +=\
    \ i;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n   \
    \ let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjo1r8dlk.rs:13:9\n   |\n\
    13 |         sum\n   |         ^^^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for num in nums_sorted {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|num|\
    \ {\n        sum - num\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_sorted`\n   --> /tmp/tmpm_bymfht.rs:12:5\n\
    \    |\n7   |       let mut nums_sorted = nums.clone();\n    |           ---------------\
    \ move occurs because `nums_sorted` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n8   |       let mut sum = 0;\n9   |       for num in nums_sorted\
    \ {\n    |                  ----------- `nums_sorted` moved due to this implicit\
    \ call to `.into_iter()`\n...\n12  | /     nums_sorted.sort_by_key(|num| {\n13\
    \  | |         sum - num\n14  | |     });\n    | |______^ value borrowed here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `nums_sorted`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n9   |     for num in &nums_sorted\
    \ {\n    |                +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_copy {\n            sum\
    \ += n % 10;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpho8rxqb9.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_copy` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpho8rxqb9.rs:8:27\n   |\n8  | \
    \    nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^ immutable\
    \ borrow occurs here\n   |     |         |\n   |     |         mutable borrow\
    \ later used by call\n   |     mutable borrow occurs here\n9  |         let mut\
    \ sum = 0;\n10 |         for &n in &nums_copy {\n   |                    ---------\
    \ second borrow occurs due to use of `nums_copy` in closure\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += *x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpt6lramyq.rs:8:30\n  |\n8 |\
    \     sorted_nums.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0499]: cannot borrow `sorted_nums` as mutable more than\
    \ once at a time\n  --> /tmp/tmpt6lramyq.rs:8:29\n   |\n8  |       sorted_nums.sort_by_key(|x|\
    \ {\n   |       -           ----------- ^^^ second mutable borrow occurs here\n\
    \   |       |           |\n   |  _____|           first borrow later used by call\n\
    \   | |\n9  | |         let mut sum = 0;\n10 | |         for x in &mut sorted_nums\
    \ {\n   | |                       ----------- second borrow occurs due to use\
    \ of `sorted_nums` in closure\n11 | |             sum += *x;\n12 | |         }\n\
    13 | |         sum\n14 | |     });\n   | |______- first mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_copy {\n            sum\
    \ += n % 10;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpho8rxqb9.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_copy` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpho8rxqb9.rs:8:27\n   |\n8  | \
    \    nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^ immutable\
    \ borrow occurs here\n   |     |         |\n   |     |         mutable borrow\
    \ later used by call\n   |     mutable borrow occurs here\n9  |         let mut\
    \ sum = 0;\n10 |         for &n in &nums_copy {\n   |                    ---------\
    \ second borrow occurs due to use of `nums_copy` in closure\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort();\n\
    \    sorted_nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -11, -1, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpw49mgde3.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut sum = 0;\n    for\
    \ &i in nums {\n        sum += i;\n        result.push(i);\n    }\n    result.sort_by_key(|&i|\
    \ {\n        sum - i;\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp2bmuqgz.rs:9:9\n  |\n9 |\
    \     for &i in nums {\n  |         ^^    ---- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by(|a, b| {\n        a.checked_add(a.checked_mul(10).unwrap()).unwrap()\n\
    \            .checked_add(b.checked_mul(10).unwrap()).unwrap()\n            .cmp(&b.checked_mul(10).unwrap())\n\
    \    });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `nums` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmp5z4lfc_h.rs:7:5\n   |\n6  |   fn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n   |                      ---- help: consider changing\
    \ this to be mutable: `mut nums`\n7  | /     nums.sort_by(|a, b| {\n8  | |   \
    \      a.checked_add(a.checked_mul(10).unwrap()).unwrap()\n9  | |            \
    \ .checked_add(b.checked_mul(10).unwrap()).unwrap()\n10 | |             .cmp(&b.checked_mul(10).unwrap())\n\
    11 | |     });\n   | |______^ cannot borrow as mutable\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by(|a,\
    \ b| {\n        let mut sum = 0;\n        for &n in &nums_sorted {\n         \
    \   sum += n.digits().sum();\n        }\n        sum\n    });\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpd2tj3jxj.rs:11:22\n   |\n11 |             sum += n.digits().sum();\n\
    \   |                      ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd2tj3jxj.rs:13:9\n   |\n13 |         sum\n \
    \  |         ^^^ expected enum `std::cmp::Ordering`, found integer\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_sorted {\n            sum\
    \ += x;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpjurpkmwk.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_sorted`, a captured\
    \ variable in an `FnMut` closure\n  --> /tmp/tmpjurpkmwk.rs:10:18\n   |\n7  |\
    \     let mut nums_sorted = nums.clone();\n   |         --------------- captured\
    \ outer variable\n...\n10 |         for x in nums_sorted {\n   |             \
    \     ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content\n   |\n10 |         for x in &nums_sorted {\n\
    \   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted` because\
    \ it is borrowed\n  --> /tmp/tmpjurpkmwk.rs:8:29\n   |\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n9  |         let mut sum = 0;\n10 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpjurpkmwk.rs:15:5\n   |\n7  |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8  |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n9  |\
    \         let mut sum = 0;\n10 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n15 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n\
    \    for num in nums_copy {\n        sum += num;\n    }\n    nums_copy.sort_by_key(|num|\
    \ {\n        sum - num\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_copy`\n   --> /tmp/tmp7a0slaf_.rs:12:5\n\
    \    |\n7   |       let mut nums_copy = nums.clone();\n    |           -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n8   |       let mut sum = 0;\n9   |       for num in nums_copy\
    \ {\n    |                  --------- `nums_copy` moved due to this implicit call\
    \ to `.into_iter()`\n...\n12  | /     nums_copy.sort_by_key(|num| {\n13  | | \
    \        sum - num\n14  | |     });\n    | |______^ value borrowed here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `nums_copy`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n9   |     for num in &nums_copy\
    \ {\n    |                +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpz2wy8ijl.rs:8:28\n  |\n8 |\
    \     nums_copy.sort_by_key(|x| {\n  |                            ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0507]: cannot move out of `nums_copy`, a captured variable\
    \ in an `FnMut` closure\n  --> /tmp/tmpz2wy8ijl.rs:10:18\n   |\n7  |     let mut\
    \ nums_copy = nums.clone();\n   |         ------------- captured outer variable\n\
    ...\n10 |         for x in nums_copy {\n   |                  ^^^^^^^^^ move occurs\
    \ because `nums_copy` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\n\
    \   |\n10 |         for x in &nums_copy {\n   |                  +\n\nerror[E0505]:\
    \ cannot move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpz2wy8ijl.rs:8:27\n\
    \   |\n8  |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ move out of `nums_copy` occurs here\n   |     |         |\n   |     |      \
    \   borrow later used by call\n   |     borrow of `nums_copy` occurs here\n9 \
    \ |         let mut sum = 0;\n10 |         for x in nums_copy {\n   |        \
    \          --------- move occurs due to use in closure\n\nerror[E0382]: use of\
    \ moved value: `nums_copy`\n  --> /tmp/tmpz2wy8ijl.rs:15:5\n   |\n7  |     let\
    \ mut nums_copy = nums.clone();\n   |         ------------- move occurs because\
    \ `nums_copy` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8  |     nums_copy.sort_by_key(|x| {\n   |                           --- value\
    \ moved into closure here\n9  |         let mut sum = 0;\n10 |         for x in\
    \ nums_copy {\n   |                  --------- variable moved due to use in closure\n\
    ...\n15 |     nums_copy\n   |     ^^^^^^^^^ value used here after move\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0382, E0505, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by(|a,\
    \ b| {\n        let mut a_digits = a.to_digits();\n        let mut b_digits =\
    \ b.to_digits();\n        let mut sum = 0;\n        while a_digits.len() > 0 ||\
    \ b_digits.len() > 0 {\n            sum += a_digits.len() * b_digits.len();\n\
    \            a_digits = a_digits.tail();\n            b_digits = b_digits.tail();\n\
    \        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmp_ck87uj0.rs:9:30\n  |\n9 |         let mut\
    \ a_digits = a.to_digits();\n  |                              ^^^^^^^^^ method\
    \ not found in `&isize`\n\nerror[E0599]: no method named `to_digits` found for\
    \ reference `&isize` in the current scope\n  --> /tmp/tmp_ck87uj0.rs:10:30\n \
    \  |\n10 |         let mut b_digits = b.to_digits();\n   |                   \
    \           ^^^^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_ck87uj0.rs:17:9\n   |\n17 |         sum\n   |        \
    \ ^^^ expected enum `std::cmp::Ordering`, found integer\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += *x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpt6lramyq.rs:8:30\n  |\n8 |\
    \     sorted_nums.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0499]: cannot borrow `sorted_nums` as mutable more than\
    \ once at a time\n  --> /tmp/tmpt6lramyq.rs:8:29\n   |\n8  |       sorted_nums.sort_by_key(|x|\
    \ {\n   |       -           ----------- ^^^ second mutable borrow occurs here\n\
    \   |       |           |\n   |  _____|           first borrow later used by call\n\
    \   | |\n9  | |         let mut sum = 0;\n10 | |         for x in &mut sorted_nums\
    \ {\n   | |                       ----------- second borrow occurs due to use\
    \ of `sorted_nums` in closure\n11 | |             sum += *x;\n12 | |         }\n\
    13 | |         sum\n14 | |     });\n   | |______- first mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut nums_sorted\
    \ = nums_copy.clone();\n    let mut sum = 0;\n    for i in nums_copy {\n     \
    \   sum += i;\n        nums_sorted.swap(i, sum);\n    }\n    nums_sorted\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_kuu5x83.rs:12:26\n   |\n\
    12 |         nums_sorted.swap(i, sum);\n   |                          ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |         nums_sorted.swap(i.try_into().unwrap(),\
    \ sum);\n   |                           ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_kuu5x83.rs:12:29\n   |\n12 |         nums_sorted.swap(i,\
    \ sum);\n   |                             ^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |         nums_sorted.swap(i, sum.try_into().unwrap());\n\
    \   |                                ++++++++++++++++++++\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &n in &nums_copy {\n            sum\
    \ += *n as isize;\n        }\n        sum\n    });\n    nums_copy\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmptpaew53s.rs:11:20\n\
    \   |\n11 |             sum += *n as isize;\n   |                    ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &d in &x {\n            sum += d;\n\
    \        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&&isize` is not an iterator\n  --> /tmp/tmp8fhx1221.rs:10:19\n\
    \   |\n10 |         for &d in &x {\n   |                   ^^ `&&isize` is not\
    \ an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `&&isize`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &i in &nums_sorted {\n            sum\
    \ += i;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpmt7q1vdv.rs:8:30\n  |\n8 |\
    \     nums_sorted.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpmt7q1vdv.rs:8:29\n   |\n8  | \
    \      nums_sorted.sort_by_key(|x| {\n   |       -           ----------- ^^^ immutable\
    \ borrow occurs here\n   |       |           |\n   |  _____|           mutable\
    \ borrow later used by call\n   | |\n9  | |         let mut sum = 0;\n10 | | \
    \        for &i in &nums_sorted {\n   | |                    ----------- second\
    \ borrow occurs due to use of `nums_sorted` in closure\n11 | |             sum\
    \ += i;\n12 | |         }\n13 | |         sum\n14 | |     });\n   | |______- mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort();\n\
    \    sorted_nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -11, -1, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpw49mgde3.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += *x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpt6lramyq.rs:8:30\n  |\n8 |\
    \     sorted_nums.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0499]: cannot borrow `sorted_nums` as mutable more than\
    \ once at a time\n  --> /tmp/tmpt6lramyq.rs:8:29\n   |\n8  |       sorted_nums.sort_by_key(|x|\
    \ {\n   |       -           ----------- ^^^ second mutable borrow occurs here\n\
    \   |       |           |\n   |  _____|           first borrow later used by call\n\
    \   | |\n9  | |         let mut sum = 0;\n10 | |         for x in &mut sorted_nums\
    \ {\n   | |                       ----------- second borrow occurs due to use\
    \ of `sorted_nums` in closure\n11 | |             sum += *x;\n12 | |         }\n\
    13 | |         sum\n14 | |     });\n   | |______- first mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_copy = nums.clone();\n    let mut sorted_nums\
    \ = nums_copy.clone();\n    let mut sorted_nums_len = nums_copy.len();\n    let\
    \ mut min_sum = 0;\n    let mut max_sum = 0;\n    let mut min_sum_index = 0;\n\
    \    let mut max_sum_index = 0;\n    let mut min_sum_index2 = 0;\n    let mut\
    \ max_sum_index2 = 0;\n    let mut min_sum_index3 = 0;\n    let mut max_sum_index3\
    \ = 0;\n    let mut min_sum_index4 = 0;\n    let mut max_sum_index4 = 0;\n   \
    \ let mut min_sum_index5 = 0;\n    let mut max_sum_index5 = 0;\n    let mut min_sum_index6\
    \ = 0;\n    let mut max_sum_index6 = 0;\n    let mut min_sum_index7 = 0;\n   \
    \ let mut max_sum_index7 = 0;\n    let mut min_sum_index8 = 0;\n    let mut max_sum_index8\
    \ = 0;\n    let mut min_sum_index9 = 0;\n    let mut max_sum_index9 = 0;\n   \
    \ let mut min_sum_index10 = 0;\n    let mut max_sum_index10 = 0;\n    let mut\
    \ min_sum_index11 = 0;\n    let mut max_sum_index11 = 0;\n    let mut min_sum_index12\
    \ = 0;\n    let mut max_sum_index12 = 0;\n    let mut min_sum_index13 = 0;\n \
    \   let mut max_sum_index13 = 0;\n    let mut min_sum_index14 = 0;\n    let mut\
    \ max_sum_index14 = 0;\n    let mut min_sum_index15 = 0;\n    let mut max_sum_index15\
    \ = 0;\n    let mut min_sum_index16 = 0;\n    let mut max_sum_index16 = 0;\n \
    \   let mut min_sum_index17 = 0;\n    let mut max_sum_index17 = 0;\n    let mut\
    \ min_sum_index18 = 0;\n    let mut max_sum_index18 = 0;\n    let mut min_sum_index19\
    \ = 0;\n    let mut max_sum_index19 = 0;\n    let mut min_sum_index20 = 0;\n \
    \   let mut max_sum_index20 = 0;\n    let mut min_sum_index21 = 0;\n    let mut\
    \ max_sum_index21 = 0;\n    let mut min_sum_index22 = 0;\n    let mut max_sum_index22\
    \ = 0;\n    let mut min_sum_index23 = 0;\n    let mut max_sum_index23 = 0;\n \
    \   let mut min_sum_index24 = 0;\n    let mut max_sum_index24 = 0;\n    let mut\
    \ min_sum_index25 = 0;\n    let mut max_sum_index25 = 0;\n    let mut min_sum_index26\
    \ = 0;\n    let mut max_sum_index26 = 0;\n    let mut min_sum_index\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphnv016sm.rs:64:26\n   |\n\
    64 |     let mut min_sum_index\n   |                          ^ help: add `;`\
    \ here\n65 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmphnv016sm.rs:6:41\n  |\n6 | fn order_by_points(nums: Vec<isize>) -> Vec<isize>\
    \ {\n  |    ---------------                      ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for &i in &nums {\n            sum += i;\n\
    \        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpm7qje3c2.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n\
    \    for num in nums_sorted {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|x|\
    \ {\n        sum - x;\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_sorted`\n   --> /tmp/tmpky51rpxz.rs:12:5\n\
    \    |\n7   |       let mut nums_sorted = nums.clone();\n    |           ---------------\
    \ move occurs because `nums_sorted` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n8   |       let mut sum = 0;\n9   |       for num in nums_sorted\
    \ {\n    |                  ----------- `nums_sorted` moved due to this implicit\
    \ call to `.into_iter()`\n...\n12  | /     nums_sorted.sort_by_key(|x| {\n13 \
    \ | |         sum - x;\n14  | |     });\n    | |______^ value borrowed here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `nums_sorted`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n9   |     for num in &nums_sorted\
    \ {\n    |                +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976093
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in &mut sorted_nums {\n         \
    \   sum += *x;\n        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n --> /tmp/tmpt6lramyq.rs:8:30\n  |\n8 |\
    \     sorted_nums.sort_by_key(|x| {\n  |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0499]: cannot borrow `sorted_nums` as mutable more than\
    \ once at a time\n  --> /tmp/tmpt6lramyq.rs:8:29\n   |\n8  |       sorted_nums.sort_by_key(|x|\
    \ {\n   |       -           ----------- ^^^ second mutable borrow occurs here\n\
    \   |       |           |\n   |  _____|           first borrow later used by call\n\
    \   | |\n9  | |         let mut sum = 0;\n10 | |         for x in &mut sorted_nums\
    \ {\n   | |                       ----------- second borrow occurs due to use\
    \ of `sorted_nums` in closure\n11 | |             sum += *x;\n12 | |         }\n\
    13 | |         sum\n14 | |     });\n   | |______- first mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659976092
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.sort_by_key(|x| x.to_digits().sum());\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmppltkjdmg.rs:7:28\n  |\n7 |     nums.sort_by_key(|x|\
    \ x.to_digits().sum());\n  |                            ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748326
