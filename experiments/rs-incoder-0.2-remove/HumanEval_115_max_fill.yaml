name: HumanEval_115_max_fill
language: rs
prompt: "/// You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n/// and\
  \ all buckets have the same capacity.\n/// Your task is to use the buckets to empty\
  \ the wells.\n/// Output the number of times you need to lower the buckets.\n///\
  \ Example 1:\n/// Example 2:\n/// Example 3:\n/// Constraints:\n/// * all wells\
  \ have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1 <= grid[:,1].length\
  \ <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity <= 10\nfn max_fill(grid:\
  \ Vec<Vec<isize>>, capacity: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
  \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
  \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n   \
  \ assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
  \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1,\
  \ 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
completions: ["    let mut cnt = 0;\n    let mut max_cnt = 0;\n    let mut max_well\
    \ = Vec::new();\n    for row in grid.iter() {\n        let mut cnt = 0;\n    \
    \    let mut well = Vec::new();\n        for col in row.iter() {\n           \
    \ if col == 1 {\n                well.push(col);\n                cnt += 1;\n\
    \            } else {\n                if cnt > max_cnt {\n                  \
    \  max_cnt = cnt;\n                    max_well = well;\n                }\n \
    \               well.push(col);\n                cnt = 0;\n            }\n   \
    \     }\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_well\
    \ = well;\n        }\n    }\n    max_cnt", "    let mut cnt = 0;\n    let mut\
    \ max_cnt = 0;\n    let mut max_grid = grid.clone();\n    for row in 0..grid.len()\
    \ {\n        for col in 0..grid[row].len() {\n            if grid[row][col] ==\
    \ 1 {\n                cnt += 1;\n                max_cnt = std::cmp::max(max_cnt,\
    \ cnt);\n                max_grid[row][col] = 0;\n            }\n        }\n \
    \   }\n    for row in 0..grid.len() {\n        for col in 0..grid[row].len() {\n\
    \            if grid[row][col] == 0 {\n                grid[row][col] = 1;\n \
    \               cnt -= 1;\n                max_cnt = std::cmp::max(max_cnt, cnt);\n\
    \                max_grid[row][col] = 1;\n            }\n        }\n    }\n  \
    \  max_cnt", "    let mut cnt = 0;\n    let mut max_cnt = 0;\n    let mut max_well\
    \ = Vec::new();\n    for row in grid.iter() {\n        let mut cnt = 0;\n    \
    \    let mut well = Vec::new();\n        for col in row.iter() {\n           \
    \ if col == 1 {\n                well.push(1);\n            } else {\n       \
    \         well.push(0);\n            }\n            cnt += well[well.len() - 1];\n\
    \        }\n        if cnt > max_cnt {\n            max_cnt = cnt;\n         \
    \   max_well = well;\n        }\n    }\n    for row in grid.iter() {\n       \
    \ let mut cnt = 0;\n        let mut well = Vec::new();\n        for col in row.iter()\
    \ {\n            if col == 1 {\n                well.push(1);\n            } else\
    \ {\n                well.push(0);\n            }\n            cnt += well[well.len()\
    \ - 1];\n        }\n        if cnt > max_cnt {\n            max_cnt = cnt;\n \
    \           max_well = well;\n        }\n    }\n    return max_cnt;", "    let\
    \ mut cnt = 0;\n    let mut max_cnt = 0;\n    let mut max_grid = Vec::new();\n\
    \    for row in grid.iter() {\n        let mut cnt = 0;\n        let mut max_cnt\
    \ = 0;\n        let mut max_row = Vec::new();\n        for col in row.iter() {\n\
    \            if *col == 1 {\n                cnt += 1;\n                if cnt\
    \ > max_cnt {\n                    max_cnt = cnt;\n                    max_row\
    \ = col;\n                }\n            }\n        }\n        cnt += 1;\n   \
    \     if cnt > max_cnt {\n            max_cnt = cnt;\n            max_row = row;\n\
    \        }\n        max_grid.push(max_row);\n    }\n    for row in max_grid.iter()\
    \ {\n        for col in row.iter() {\n            if *col == 0 {\n           \
    \     *col = 1;\n                cnt += 1;\n                if cnt > max_cnt {\n\
    \                    max_cnt = cnt;\n                    max_row = row;\n    \
    \            }\n            }\n        }\n    }\n    return max_cnt;", "    let\
    \ mut ans = isize::MAX;\n    let mut buckets = Vec::new();\n    for row in grid.iter()\
    \ {\n        let mut bucket = Vec::new();\n        for cell in row.iter() {\n\
    \            bucket.push(cell as isize);\n        }\n        buckets.push(bucket);\n\
    \    }\n    for bucket in buckets.iter() {\n        if bucket.len() > 0 {\n  \
    \          ans = bucket.iter().fold(ans, |acc, cell| {\n                if acc\
    \ < cell {\n                    acc += cell;\n                }\n            \
    \    acc\n            });\n        }\n    }\n    ans", "    let mut cnt = 0;\n\
    \    let mut max_cnt = 0;\n    let mut max_grid = grid.clone();\n    for row in\
    \ 0..grid.len() {\n        for col in 0..grid[row].len() {\n            let mut\
    \ cnt = 0;\n            for row in 0..grid.len() {\n                for col in\
    \ 0..grid[row].len() {\n                    if grid[row][col] == 1 {\n       \
    \                 cnt += 1;\n                    }\n                }\n      \
    \      }\n            if cnt > max_cnt {\n                max_cnt = cnt;\n   \
    \             max_grid = grid.clone();\n            }\n        }\n    }\n    for\
    \ row in 0..grid.len() {\n        for col in 0..grid[row].len() {\n          \
    \  if grid[row][col] == 1 {\n                grid[row][col] = 0;\n           \
    \     cnt += 1;\n            }\n        }\n    }\n    for row in 0..grid.len()\
    \ {\n        for col in 0..grid[row].len() {\n            if grid[row][col] ==\
    \ 1 {\n                grid[row][col] = 1;\n                cnt += 1;\n      \
    \      }\n        }\n    }\n    for row in 0..grid.len() {\n        for col in\
    \ 0..grid[row].len() {\n            if grid[row][col] == 1 {\n               \
    \ grid[row][col] = 0;\n                cnt += 1;\n            }\n        }\n \
    \   }\n    for row in 0..grid.len() {\n        for col in 0..grid[row].len() {\n\
    \            if grid[row][col] == 1 {\n                grid[row][col] = 1;\n \
    \               cnt += 1;\n            }\n        }\n    }\n    for row in 0..grid.len()\
    \ {\n        for col in 0..grid[row].len() {\n            if grid[row][col] ==\
    \ 1 {\n                grid[row][col] = 0;\n                cnt += 1;\n      \
    \      }\n        }\n    }\n    for row in 0..grid.len() {\n        for col in\
    \ 0..grid[row].len() {\n            if grid[row][col] == 1 {\n               \
    \ grid[row][col] = 1;\n                cnt += 1;\n            }\n        }\n \
    \   }\n    for row in 0..grid.len() {\n        for col in 0..grid[row].len() {\n\
    \            if grid[row][col] == 1 {\n                grid[row][col] = 0;\n \
    \               cnt += 1;\n            }\n        }\n    }\n    for row in 0..grid.len()\
    \ {\n        for col in 0..grid[row].len() {\n            if grid[row][col] ==\
    \ 1 {\n                grid[row][col] = 1;\n                cnt += 1;\n      \
    \      }\n        }\n    }\n    for row in 0..grid.len() {\n        for col in\
    \ 0..grid[row].len() {\n            if grid[row][col] == 1 {\n               \
    \ grid[row][col] = 0;\n                cnt += 1;\n            }\n        }\n \
    \   }\n    for row in 0..grid.len(", "    let mut cnt = 0;\n    for row in grid.iter()\
    \ {\n        let mut cnt = 0;\n        for col in row.iter() {\n            if\
    \ col == 1 {\n                cnt += 1;\n            }\n        }\n        if\
    \ cnt > capacity {\n            cnt -= 1;\n        }\n        if cnt > 0 {\n \
    \           cnt -= 1;\n        }\n    }\n    cnt", "    let mut cnt = 0;\n   \
    \ let mut max_cnt = 0;\n    let mut max_well = Vec::new();\n    for row in grid.iter()\
    \ {\n        let mut cnt = 0;\n        for col in row.iter() {\n            if\
    \ col == 1 {\n                cnt += 1;\n            }\n        }\n        if\
    \ cnt > max_cnt {\n            max_cnt = cnt;\n            max_well = row;\n \
    \       }\n    }\n    for row in grid.iter() {\n        let mut cnt = 0;\n   \
    \     for col in row.iter() {\n            if col == 0 {\n                cnt\
    \ += 1;\n            }\n        }\n        if cnt > max_cnt {\n            max_cnt\
    \ = cnt;\n            max_well = row;\n        }\n    }\n    if max_cnt > capacity\
    \ {\n        max_cnt = capacity;\n        max_well = Vec::new();\n    }\n    cnt\
    \ = 0;\n    for row in grid.iter() {\n        let mut cnt = 0;\n        for col\
    \ in row.iter() {\n            if col == 1 {\n                cnt += 1;\n    \
    \        }\n        }\n        if cnt > max_cnt {\n            max_cnt = cnt;\n\
    \            max_well = row;\n        }\n    }\n    if max_cnt > capacity {\n\
    \        max_cnt = capacity;\n        max_well = Vec::new();\n    }\n    cnt =\
    \ 0;\n    for row in grid.iter() {\n        let mut cnt = 0;\n        for col\
    \ in row.iter() {\n            if col == 0 {\n                cnt += 1;\n    \
    \        }\n        }\n        if cnt > max_cnt {\n            max_cnt = cnt;\n\
    \            max_well = row;\n        }\n    }\n    if max_cnt > capacity {\n\
    \        max_cnt = capacity;\n        max_well = Vec::new();\n    }\n    cnt =\
    \ 0;\n    for row in grid.iter() {\n        let mut cnt = 0;\n        for col\
    \ in row.iter() {\n            if col == 1 {\n                cnt += 1;\n    \
    \        }\n        }\n        if cnt > max_cnt {\n            max_cnt = cnt;\n\
    \            max_well = row;\n        }\n    }\n    if max_cnt > capacity {\n\
    \        max_cnt = capacity;\n        max_well = Vec::new();\n    }\n    cnt =\
    \ 0;\n    for row in grid.iter() {\n        let mut cnt = 0;\n        for col\
    \ in row.iter() {\n            if col == 0 {\n                cnt += 1;\n    \
    \        }\n        }\n        if cnt > max_cnt {\n            max_cnt = cnt;\n\
    \            max_well = row;\n        }\n    }\n    if max_cnt > capacity {\n\
    \        max_cnt = capacity;\n        max_well = Vec::new();\n    }\n    cnt =\
    \ 0;\n    for row in grid.iter() {\n        let mut cnt = 0;\n        for col\
    \ in row.iter() {\n            if col == 1 {\n", "    let mut cnt = 0;\n    for\
    \ row in grid.iter() {\n        let mut cnt2 = 0;\n        for col in row.iter()\
    \ {\n            if col == 1 {\n                cnt2 += 1;\n            }\n  \
    \      }\n        if cnt2 > capacity {\n            cnt += 1;\n        }\n   \
    \ }\n    cnt", "    let mut cnt = 0;\n    let mut max_cnt = 0;\n    let mut max_well\
    \ = Vec::new();\n    for row in grid.iter() {\n        let mut cnt = 0;\n    \
    \    let mut well = Vec::new();\n        for col in row.iter() {\n           \
    \ if col == 1 {\n                well.push(1);\n                cnt += 1;\n  \
    \          } else {\n                well.push(0);\n            }\n        }\n\
    \        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_well\
    \ = well;\n        }\n    }\n    for row in grid.iter() {\n        let mut cnt\
    \ = 0;\n        let mut well = Vec::new();\n        for col in row.iter() {\n\
    \            if col == 1 {\n                well.push(1);\n                cnt\
    \ += 1;\n            } else {\n                well.push(0);\n            }\n\
    \        }\n        if cnt > max_cnt {\n            max_cnt = cnt;\n         \
    \   max_well = well;\n        }\n    }\n    return max_cnt;", "    let mut ans\
    \ = isize::MAX;\n    let mut buckets = vec![0; capacity];\n    for row in grid.iter()\
    \ {\n        let mut cur_capacity = isize::MAX;\n        for cell in row.iter()\
    \ {\n            if cell == 1 {\n                cur_capacity += 1;\n        \
    \    }\n        }\n        buckets[cur_capacity] += 1;\n        if cur_capacity\
    \ > ans {\n            ans = cur_capacity;\n        }\n    }\n    ans", "    let\
    \ mut cnt = 0;\n    let mut max_cnt = 0;\n    let mut max_grid: Vec<Vec<isize>>\
    \ = vec![];\n    for row in grid.iter() {\n        let mut cnt = 0;\n        let\
    \ mut max_cnt = 0;\n        let mut max_grid: Vec<Vec<isize>> = vec![];\n    \
    \    for row in row.iter() {\n            if *row == 1 {\n                cnt\
    \ += 1;\n                if cnt > max_cnt {\n                    max_cnt = cnt;\n\
    \                    max_grid = row;\n                }\n            }\n     \
    \   }\n        cnt += 1;\n        if cnt > max_cnt {\n            max_cnt = cnt;\n\
    \            max_grid = row;\n        }\n    }\n    if max_cnt == 0 {\n      \
    \  return 0;\n    }\n    for row in max_grid.iter() {\n        for col in row.iter()\
    \ {\n            if *col == 0 {\n                *col = 1;\n                cnt\
    \ += 1;\n                if cnt > max_cnt {\n                    max_cnt = cnt;\n\
    \                    max_grid = row;\n                }\n            }\n     \
    \   }\n    }\n    if max_cnt == 0 {\n        return 0;\n    }\n    for row in\
    \ max_grid.iter() {\n        for col in row.iter() {\n            if *col == 0\
    \ {\n                *col = 0;\n                cnt += 1;\n                if\
    \ cnt > max_cnt {\n                    max_cnt = cnt;\n                    max_grid\
    \ = row;\n                }\n            }\n        }\n    }\n    if max_cnt ==\
    \ 0 {\n        return 0;\n    }\n    for row in max_grid.iter() {\n        for\
    \ col in row.iter() {\n            if *col == 0 {\n                *col = 1;\n\
    \                cnt += 1;\n                if cnt > max_cnt {\n             \
    \       max_cnt = cnt;\n                    max_grid = row;\n                }\n\
    \            }\n        }\n    }\n    if max_cnt == 0 {\n        return 0;\n \
    \   }\n    for row in max_grid.iter() {\n        for col in row.iter() {\n   \
    \         if *col == 0 {\n                *col = 0;\n                cnt += 1;\n\
    \                if cnt > max_cnt {\n                    max_cnt = cnt;\n    \
    \                max_grid = row;\n                }\n            }\n        }\n\
    \    }\n    if max_cnt == 0 {\n        return 0;\n    }\n    for row in max_grid.iter()\
    \ {\n        for col in row.iter() {\n            if *col == 0 {\n           \
    \     *col = 1;\n                cnt += 1;\n                if cnt > max_cnt {\n\
    \                    max_cnt = cnt;\n                    max_grid = row;\n   \
    \             }\n            }\n        }\n    }\n    if max_cnt == 0 {\n    \
    \    return 0;\n    }\n    for row in max_grid.iter() {\n        for col in row.iter()\
    \ {\n            if *col == 0 {\n                *col = 0;\n", "    let mut ans\
    \ = isize::MAX;\n    let mut buckets = vec![Vec::new(); grid.len()];\n    for\
    \ i in 0..grid.len() {\n        for j in 0..grid[i].len() {\n            buckets[i][j]\
    \ = capacity - grid[i][j];\n        }\n    }\n    for i in 0..grid.len() {\n \
    \       for j in 0..grid[i].len() {\n            if buckets[i][j] <= 0 {\n   \
    \             ans = ans.min(buckets[i][j]);\n                buckets[i][j] = 0;\n\
    \            }\n        }\n    }\n    ans", "    let mut cnt = 0;\n    let mut\
    \ max_cnt = 0;\n    let mut max_well = Vec::new();\n    for row in grid.iter()\
    \ {\n        let mut cnt = 0;\n        let mut well = Vec::new();\n        for\
    \ col in row.iter() {\n            if *col == 1 {\n                well.push(col);\n\
    \                cnt += 1;\n            }\n        }\n        if cnt > max_cnt\
    \ {\n            max_cnt = cnt;\n            max_well = well;\n        }\n   \
    \ }\n    for col in max_well.iter() {\n        if *col == 0 {\n            cnt\
    \ += 1;\n        }\n    }\n    if cnt > capacity {\n        cnt\n    } else {\n\
    \        0\n    }", "    let mut cnt = 0;\n    let mut max_cnt = 0;\n    let mut\
    \ max_grid = vec![vec![]; grid.len()];\n    for i in 0..grid.len() {\n       \
    \ for j in 0..grid[i].len() {\n            if grid[i][j] == 0 {\n            \
    \    cnt += 1;\n                max_cnt += 1;\n                max_grid[i][j]\
    \ = cnt;\n            }\n        }\n    }\n    for i in 0..grid.len() {\n    \
    \    for j in 0..grid[i].len() {\n            if max_grid[i][j] > max_cnt {\n\
    \                max_cnt = max_grid[i][j];\n            }\n        }\n    }\n\
    \    return max_cnt;", "    let mut cnt = 0;\n    let mut min_bucket = grid[0].len();\n\
    \    for i in 1..grid.len() {\n        for j in 0..grid[i].len() {\n         \
    \   if grid[i][j] == 1 {\n                cnt += 1;\n                if min_bucket\
    \ > j {\n                    min_bucket = j;\n                }\n            }\n\
    \        }\n    }\n    cnt += min_bucket - capacity;\n    cnt", "    let mut cnt\
    \ = 0;\n    let mut max_cnt = 0;\n    let mut max_well = Vec::new();\n    for\
    \ row in grid.iter() {\n        let mut cnt = 0;\n        let mut well = Vec::new();\n\
    \        for col in row.iter() {\n            if col == 1 {\n                well.push(col);\n\
    \            } else {\n                cnt += 1;\n            }\n        }\n \
    \       if cnt > max_cnt {\n            max_cnt = cnt;\n            max_well =\
    \ well;\n        }\n    }\n    for row in grid.iter() {\n        let mut cnt =\
    \ 0;\n        let mut well = Vec::new();\n        for col in row.iter() {\n  \
    \          if col == 1 {\n                well.push(col);\n            } else\
    \ {\n                cnt += 1;\n            }\n        }\n        if cnt > max_cnt\
    \ {\n            max_cnt = cnt;\n            max_well = well;\n        }\n   \
    \ }\n    for row in grid.iter() {\n        let mut cnt = 0;\n        let mut well\
    \ = Vec::new();\n        for col in row.iter() {\n            if col == 1 {\n\
    \                well.push(col);\n            } else {\n                cnt +=\
    \ 1;\n            }\n        }\n        if cnt > max_cnt {\n            max_cnt\
    \ = cnt;\n            max_well = well;\n        }\n    }\n    for row in grid.iter()\
    \ {\n        let mut cnt = 0;\n        let mut well = Vec::new();\n        for\
    \ col in row.iter() {\n            if col == 1 {\n                well.push(col);\n\
    \            } else {\n                cnt += 1;\n            }\n        }\n \
    \       if cnt > max_cnt {\n            max_cnt = cnt;\n            max_well =\
    \ well;\n        }\n    }\n    for row in grid.iter() {\n        let mut cnt =\
    \ 0;\n        let mut well = Vec::new();\n        for col in row.iter() {\n  \
    \          if col == 1 {\n                well.push(col);\n            } else\
    \ {\n                cnt += 1;\n            }\n        }\n        if cnt > max_cnt\
    \ {\n            max_cnt = cnt;\n            max_well = well;\n        }\n   \
    \ }\n    for row in grid.iter() {\n        let mut cnt = 0;\n        let mut well\
    \ = Vec::new();\n        for col in row.iter() {\n            if col == 1 {\n\
    \                well.push(col);\n            } else {\n                cnt +=\
    \ 1;\n            }\n        }\n        if cnt > max_cnt {\n            max_cnt\
    \ = cnt;\n            max_well = well;\n        }\n    }\n    for row in grid.iter()\
    \ {\n        let mut cnt = 0;\n        let mut well = Vec::new();\n        for\
    \ col in row.iter() {\n            if col == 1 {\n                well.push(col);\n\
    \            } else {\n                cnt += 1;\n            }\n        }\n",
  "    let mut cnt = 0;\n    for row in grid.iter() {\n        let mut cnt2 = 0;\n\
    \        for col in row.iter() {\n            if col == 1 {\n                cnt2\
    \ += 1;\n            }\n        }\n        if cnt2 > capacity {\n            cnt\
    \ += 1;\n        }\n    }\n    cnt", "    let mut cnt = 0;\n    let mut max_cnt\
    \ = 0;\n    let mut max_grid = grid.clone();\n    for row in 0..grid.len() {\n\
    \        for col in 0..grid[row].len() {\n            let mut cnt = 0;\n     \
    \       for r in 0..row.len() {\n                for c in 0..grid[r].len() {\n\
    \                    if grid[r][c] == 1 {\n                        cnt += 1;\n\
    \                    }\n                }\n            }\n            if cnt >\
    \ max_cnt {\n                max_cnt = cnt;\n                max_grid = grid.clone();\n\
    \            }\n            if cnt > capacity {\n                grid[row][col]\
    \ = 0;\n            }\n        }\n    }\n    for row in 0..grid.len() {\n    \
    \    for col in 0..grid[row].len() {\n            if grid[row][col] == 1 {\n \
    \               cnt += 1;\n            }\n        }\n    }\n    if cnt > max_cnt\
    \ {\n        max_cnt = cnt;\n        max_grid = grid.clone();\n    }\n    if cnt\
    \ > capacity {\n        cnt = 0;\n    }\n    cnt", "    let mut cnt = 0;\n   \
    \ let mut max_capacity = 0;\n    let mut max_capacity_row = -1;\n    let mut max_capacity_col\
    \ = -1;\n    let mut max_capacity_row_start = -1;\n    let mut max_capacity_col_start\
    \ = -1;\n    let mut max_capacity_row_end = -1;\n    let mut max_capacity_col_end\
    \ = -1;\n    let mut max_capacity_row_end = -1;\n    let mut max_capacity_col_end\
    \ = -1;\n    let mut max_capacity_row_start = -1;\n    let mut max_capacity_col_start\
    \ = -1;\n    let mut max_capacity_row_end = -1;\n    let mut max_capacity_col_end\
    \ = -1;\n    let mut max_capacity_row_start = -1;\n    let mut max_capacity_col_start\
    \ = -1;\n    let mut max_capacity_row_end = -1;\n    let mut max_capacity_col_end\
    \ = -1;\n    let mut max_capacity_row_start = -1;\n    let mut max_capacity_col_start\
    \ = -1;\n    let mut max_capacity_row_end = -1;\n    let mut max_capacity_col_end\
    \ = -1;\n    let mut max_capacity_row_start = -1;\n    let mut max_capacity_col_start\
    \ = -1;\n    let mut max_capacity_row_end = -1;\n    let mut max_capacity_col_end\
    \ = -1;\n    let mut max_capacity_row_start = -1;\n    let mut max_capacity_col_start\
    \ = -1;\n    let mut max_capacity_row_end = -1;\n    let mut max_capacity_col_end\
    \ = -1;\n    let mut max_capacity_row_start = -1;\n    let mut max_capacity_col_start\
    \ = -1;\n    let mut max_capacity_row_end = -1;\n    let mut max_capacity_col_end\
    \ = -1;\n    let mut max_capacity_row_start = -1;\n    let mut max_capacity_col_start\
    \ = -1;\n    let mut max_capacity_row_end = -1;\n    let mut max_capacity_col_end\
    \ = -1;\n    let mut max_capacity_row_start = -1;\n    let mut max_capacity_col_start\
    \ = -1;\n    let mut max_capacity_row_end = -1;\n    let mut max_capacity_col_end\
    \ = -1;\n    let mut max_capacity_row_start = -1;\n    let mut max_capacity_col_start\
    \ = -1;\n    let mut max_capacity_row_end = -1;\n    let mut max_capacity_col_end\
    \ = -1;\n    let mut max_capacity_row_start = -1;\n    let mut max_capacity_col_start\
    \ = -1;\n    let mut max_capacity_row_end = -1;\n    let mut max_capacity_col_end\
    \ = -1;\n    let mut max_capacity_row_start = -1;\n    let mut max_capacity_col_start\
    \ = -1;\n    let "]
stop_tokens:
- "\n}"
