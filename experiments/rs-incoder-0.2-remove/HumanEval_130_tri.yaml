name: HumanEval_130_tri
language: rs
prompt: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) =\
  \ 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n///\
  \ tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You\
  \ are given a non-negative integer number n, you have to a return a list of the\
  \ \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\nfn tri(n:\
  \ isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
  \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
  \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15,\
  \ 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8),\
  \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2,\
  \ 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15,\
  \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
  \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
completions: ["    let mut result = vec![];\n    if n == 0 {\n        result.push(3);\n\
    \    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n\
    \ - 2);\n        result.push(tri_1 + tri_2);\n        if n % 2 == 1 {\n      \
    \      result.push(tri_1 + tri_2 + tri(n - 1));\n        }\n    }\n    result",
  "    let mut list = vec![];\n    if n % 2 == 0 {\n        list.push(3);\n    }\n\
    \    for i in 1..n / 2 {\n        list.push(i + 1 + n / 2);\n    }\n    for i\
    \ in 1..n / 2 {\n        list.push(i + 1 + n / 2 + 1);\n    }\n    list", "  \
    \  let mut result = vec![0; n + 1];\n    result[0] = 3;\n    for i in 1..=n {\n\
    \        result[i] = result[i-1] + result[i-2];\n    }\n    result", "    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n     \
    \   vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1));\n    }\n    vec", "    let mut result = vec![];\n    if n\
    \ % 2 == 0 {\n        result.push(3);\n        result.push(1 + n / 2);\n    }\
    \ else {\n        result.push(1);\n        result.push(1 + n / 2);\n        result.push(1\
    \ + n / 2);\n    }\n    result", "    let mut result: Vec<isize> = Vec::new();\n\
    \    if n % 2 == 0 {\n        result.push(3);\n        result.push(1);\n     \
    \   result.push(n / 2);\n    } else {\n        result.push(1);\n        result.push(n\
    \ / 2);\n        result.push(3);\n    }\n    result", "    let mut result = vec![];\n\
    \    if n == 0 {\n        result.push(3);\n        return result;\n    }\n   \
    \ if n % 2 == 0 {\n        result.push(1 + n / 2);\n    } else {\n        let\
    \ mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut\
    \ tri_3 = tri(n + 1);\n        result.push(tri_1 + tri_2 + tri_3);\n    }\n  \
    \  result", "    let mut result = vec![];\n    if n % 2 == 0 {\n        result.push(3);\n\
    \        result.push(1);\n        result.push(2);\n    } else {\n        let mut\
    \ tri_1 = vec![];\n        let mut tri_2 = vec![];\n        let mut tri_3 = vec![];\n\
    \        for i in 0..n / 2 {\n            tri_1.push(3);\n            tri_2.push(1);\n\
    \            tri_3.push(2);\n        }\n        for i in 0..n / 2 {\n        \
    \    tri_1.push(tri_1.pop() + tri_2.pop() + tri_3.pop());\n        }\n       \
    \ for i in 0..n / 2 {\n            result.push(tri_1.pop() + tri_2.pop() + tri_3.pop());\n\
    \        }\n    }\n    result", "    let mut list = vec![];\n    if n < 3 {\n\
    \        return list;\n    }\n    let mut tri_1 = 1;\n    let mut tri_2 = 1;\n\
    \    let mut tri_3 = 1;\n    for i in 1..n+1 {\n        list.push(tri_1);\n  \
    \      tri_3 = tri_1 + tri_2;\n        tri_2 = tri_1;\n        tri_1 = tri_3;\n\
    \    }\n    return list;", "    let mut list = vec![];\n    if n % 2 == 0 {\n\
    \        list.push(3);\n    }\n    for i in 1..n / 2 {\n        list.push(list.last().unwrap()\
    \ + list.last().unwrap() + list.last().unwrap());\n    }\n    list", "    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    for i in 1..n {\n     \
    \   if i % 2 == 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap()\
    \ + vec.last().unwrap());\n        } else {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap());\n        }\n    }\n    vec", "    let mut result = vec![];\n\
    \    if n == 0 {\n        result.push(3);\n    } else {\n        let mut tri_1\
    \ = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut tri_3 =\
    \ tri(n - 3);\n        result.push(tri_1 + tri_2 + tri_3);\n    }\n    result",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \    }\n    else {\n        vec.push(1);\n        vec.push(n / 2);\n    }\n  \
    \  for i in 1..n {\n        vec.push(vec[vec.len() - 2] + vec[vec.len() - 1] +\
    \ vec[vec.len() + 1]);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n    }\n    for i in 1..n / 2 {\n \
    \       vec.push(i + n / 2);\n    }\n    for i in 1..n / 2 {\n        vec.push(vec[vec.len()\
    \ - 1] + vec[vec.len() - 2]);\n    }\n    vec", "    let mut list = vec![];\n\
    \    if n <= 2 {\n        list.push(3);\n    } else {\n        let mut tri_1 =\
    \ tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        list.push(tri_1 +\
    \ tri_2);\n        list.push(tri_1 + tri_2 + tri(n - 1));\n    }\n    list", " \
    \   let mut tri_vec: Vec<isize> = vec![];\n    tri_vec.push(3);\n    tri_vec.push(1);\n\
    \    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(4);\n    tri_vec.push(5);\n\
    \    tri_vec.push(6);\n    tri_vec.push(7);\n    tri_vec.push(8);\n    tri_vec.push(9);\n\
    \    tri_vec.push(10);\n    tri_vec.push(11);\n    tri_vec.push(12);\n    tri_vec.push(13);\n\
    \    tri_vec.push(14);\n    tri_vec.push(15);\n    tri_vec.push(16);\n    tri_vec.push(17);\n\
    \    tri_vec.push(18);\n    tri_vec.push(19);\n    tri_vec.push(20);\n    tri_vec.push(21);\n\
    \    tri_vec.push(22);\n    tri_vec.push(23);\n    tri_vec.push(24);\n    tri_vec.push(25);\n\
    \    tri_vec.push(26);\n    tri_vec.push(27);\n    tri_vec.push(28);\n    tri_vec.push(29);\n\
    \    tri_vec.push(30);\n    tri_vec.push(31);\n    tri_vec.push(32);\n    tri_vec.push(33);\n\
    \    tri_vec.push(34);\n    tri_vec.push(35);\n    tri_vec.push(36);\n    tri_vec.push(37);\n\
    \    tri_vec.push(38);\n    tri_vec.push(39);\n    tri_vec.push(40);\n    tri_vec.push(41);\n\
    \    tri_vec.push(42);\n    tri_vec.push(43);\n    tri_vec.push(44);\n    tri_vec.push(45);\n\
    \    tri_vec.push(46);\n    tri_vec.push(47);\n    tri_vec.push(48);\n    tri_vec.push(49);\n\
    \    tri_vec.push(50);\n    tri_vec.push(51);\n    tri_vec.push(52);\n    tri_vec.push(53);\n\
    \    tri_vec.push(54);\n    tri_vec.push(55);\n    tri_vec.push(56);\n    tri_vec.push(57);\n\
    \    tri_vec.push(58);\n    tri_vec.push(59);\n    tri_vec.push(60);\n    tri_vec.push(61);\n\
    \    tri_vec.push(62);\n    tri_vec.push(63);\n    tri_", "    let mut result\
    \ = vec![3, 1];\n    for i in 1..n {\n        result.push(result.last().unwrap()\
    \ + result.last().unwrap() + result.last().unwrap());\n    }\n    result", " \
    \   let mut list = vec![];\n    if n == 0 {\n        list.push(3);\n    } else\
    \ {\n        list.push(1);\n        list.push(n / 2);\n        if n % 2 == 0 {\n\
    \            list.push(1 + n / 2);\n        } else {\n            list.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n    }\n    list", "    let mut\
    \ result: Vec<isize> = vec![];\n    if n == 0 {\n        result.append(3);\n \
    \       return result;\n    }\n    if n % 2 == 0 {\n        result.append(1);\n\
    \        result.append(n / 2);\n    } else {\n        result.append(1);\n    \
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    result",
  "    let mut result = vec![0; n + 1];\n    result[0] = 3;\n    for i in 1..n {\n\
    \        result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n \
    \   result", "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n       \
    \ vec.push(3);\n    } else {\n        vec.push(1 + n / 2);\n        if n % 2 ==\
    \ 0 {\n            vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\
    \ else {\n            vec.push(tri(n - 1) + tri(n - 2));\n        }\n    }\n \
    \   vec", "    let mut vec: Vec<isize> = vec![];\n    let mut tri_sum: isize =\
    \ 0;\n    vec.push(tri_sum);\n    if n % 2 == 0 {\n        tri_sum += n / 2;\n\
    \    }\n    for i in 1..n {\n        tri_sum += i;\n        vec.push(tri_sum);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut list = vec![];\n    if n < 3 {\n        return list;\n    }\n    let\
    \ mut tri_1 = 1;\n    let mut tri_2 = 1;\n    let mut tri_3 = 1;\n    for i in\
    \ 1..n {\n        list.push(tri_1);\n        tri_3 = tri_1 + tri_2;\n        tri_2\
    \ = tri_1;\n        tri_1 = tri_3;\n    }\n    list", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    for i in 1..n+1 {\n        if i % 2 == 0 {\n\
    \            vec.push(i + 1);\n        } else {\n            vec.push(vec.last().unwrap()\
    \ + i + 1);\n        }\n    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n\
    \    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1);\n        vec.push(n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(n - 1);\n      \
    \  vec.push(1 + n / 2);\n    }\n    vec", "    let mut result = vec![3, 1];\n\
    \    for i in 2..n + 1 {\n        let mut current = result[0];\n        for j\
    \ in 1..i {\n            current += result[j];\n        }\n        result.push(current);\n\
    \    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1);\n        vec.push(n / 2);\n    } else\
    \ {\n        vec.push(1);\n        vec.push(n - 1);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut result: Vec<isize> = Vec::new();\n    if\
    \ n == 0 {\n        result.push(3);\n    } else {\n        let mut tri_1 = tri(n\
    \ - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut tri_3 = tri(n +\
    \ 1);\n        result.push(tri_1 + tri_2 + tri_3);\n    }\n    result", "    let\
    \ mut result = vec![0; n + 1];\n    result[0] = 3;\n    for i in 1..=n {\n   \
    \     result[i] = result[i-1] + result[i-2];\n    }\n    result", "    let mut\
    \ result = vec![];\n    if n <= 0 {\n        return result;\n    }\n    let mut\
    \ tri_1 = vec![];\n    let mut tri_2 = vec![];\n    let mut tri_3 = vec![];\n\
    \    tri_1.push(3);\n    tri_2.push(1);\n    tri_3.push(2);\n    for i in 1..n\
    \ {\n        let tri_1_sum = tri_1.iter().sum();\n        let tri_2_sum = tri_2.iter().sum();\n\
    \        let tri_3_sum = tri_3.iter().sum();\n        result.push(tri_1_sum +\
    \ tri_2_sum + tri_3_sum);\n        tri_1.push(tri_2_sum);\n        tri_2.push(tri_1_sum);\n\
    \        tri_3.push(tri_2_sum);\n    }\n    result", "    let mut result = vec![1,\
    \ 1, 1];\n    for i in 1..n + 1 {\n        result.push(result[i] - result[i-2]\
    \ + result[i+1])\n    }\n    result", "    let mut tri_vec: Vec<isize> = Vec::new();\n\
    \    tri_vec.push(3);\n    if n % 2 == 0 {\n        tri_vec.push(1 + n / 2);\n\
    \    } else {\n        tri_vec.push(tri_vec[tri_vec.len() - 1] + tri_vec[tri_vec.len()\
    \ - 2] + tri_vec[tri_vec.len() - 3]);\n    }\n    tri_vec", "    let mut result:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        result.push(3);\n        return\
    \ result;\n    }\n    if n % 2 == 0 {\n        result.push(1 + n / 2);\n    }\
    \ else {\n        result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n\
    \    result", "    let mut list = Vec::new();\n    list.push(3);\n    if n % 2\
    \ == 0 {\n        list.push(1 + n / 2);\n    } else {\n        list.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    list", "    let mut result = vec![];\n\
    \    let mut tri_1 = vec![3];\n    let mut tri_2 = vec![1, 1, 2];\n    let mut\
    \ tri_3 = vec![1, 1, 2, 2, 3, 3];\n    if n % 2 == 0 {\n        result.push(tri_1.clone());\n\
    \    } else {\n        result.push(tri_2.clone());\n    }\n    for i in 1..n /\
    \ 2 {\n        result.push(tri_3.clone());\n    }\n    result", "    let mut result\
    \ = vec![];\n    if n == 0 {\n        result.push(3);\n        return result;\n\
    \    }\n    if n % 2 == 0 {\n        result.push(1 + n / 2);\n    } else {\n \
    \       let mut a = tri(n - 1);\n        let mut b = tri(n - 2);\n        let\
    \ mut c = tri(n + 1);\n        result.push(a + b + c);\n    }\n    result", " \
    \   let mut vec = vec![3, 1 + n / 2, (1 + n) / 2];\n    if n % 2 == 0 {\n    \
    \    vec.push(vec![vec![vec![2], vec![3]], vec![vec![1], vec![2]]]);\n    } else\
    \ {\n        vec.push(vec![vec![vec![2], vec![3]], vec![vec![1], vec![2]]]);\n\
    \    }\n    vec", "    let mut tri_vec: Vec<isize> = Vec::new();\n    tri_vec.push(3);\n\
    \    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n    if n %\
    \ 2 == 0 {\n        tri_vec.push(1);\n        tri_vec.push(2);\n        tri_vec.push(3);\n\
    \    }\n    tri_vec", "    let mut list = Vec::new();\n    list.push(3);\n   \
    \ list.push(1);\n    list.push(2);\n    for i in 1..n+1 {\n        let mut sum\
    \ = 0;\n        for j in 1..i {\n            sum += list[j];\n        }\n    \
    \    list.push(sum);\n    }\n    list", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    for i in 1..n {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + i);\n        } else {\n            vec.push(vec.last().unwrap() + i + vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut result = vec![];\n    if n <= 2 {\n\
    \        result.push(3);\n        return result;\n    }\n    let mut tri_1 = vec![1,\
    \ 1, 1];\n    let mut tri_2 = vec![1, 1, 1];\n    let mut tri_3 = vec![1, 1, 1];\n\
    \    for i in 1..n {\n        tri_1.push(tri_1[0] + tri_1[1] + tri_1[2]);\n  \
    \      tri_2.push(tri_2[0] + tri_2[1] + tri_2[2]);\n        tri_3.push(tri_3[0]\
    \ + tri_3[1] + tri_3[2]);\n    }\n    result.push(tri_1[0] + tri_2[0] + tri_3[0]);\n\
    \    result.push(tri_1[1] + tri_2[1] + tri_3[1]);\n    result.push(tri_1[2] +\
    \ tri_2[2] + tri_3[2]);\n    result", "    let mut result = vec![];\n    if n\
    \ % 2 == 0 {\n        result.push(3);\n    }\n    for i in 1..=n {\n        let\
    \ mut sum = 0;\n        for j in 1..=i {\n            sum += j;\n        }\n \
    \       result.push(sum);\n    }\n    result", "    let mut result = vec![0; n\
    \ + 1];\n    result[0] = 3;\n    for i in 1..=n {\n        result[i] = result[i-1]\
    \ + result[i-2];\n    }\n    result", "    let mut vec: Vec<isize> = Vec::new();\n\
    \    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else\
    \ {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec",
  "    let mut result = vec![];\n    if n == 0 {\n        result.push(3);\n    } else\
    \ {\n        let mut tri_1 = vec![1, 1, 1];\n        let mut tri_2 = vec![1, 1,\
    \ 2];\n        let mut tri_3 = vec![1, 2, 1];\n        for i in 0..n {\n     \
    \       let tri_1_sum = tri_1.iter().sum();\n            let tri_2_sum = tri_2.iter().sum();\n\
    \            let tri_3_sum = tri_3.iter().sum();\n            result.push(tri_1_sum\
    \ + tri_2_sum + tri_3_sum);\n            tri_1.push(tri_1_sum);\n            tri_2.push(tri_2_sum);\n\
    \            tri_3.push(tri_3_sum);\n        }\n    }\n    result", "    let mut\
    \ tri = vec![1, 1, 1];\n    for i in 1..n + 1 {\n        tri.push(tri[tri.len()\
    \ - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let\
    \ mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push(1);\n    for\
    \ i in 1..n {\n        vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n    }\n\
    \    vec", "    let mut vec: Vec<isize> = Vec::new();\n    if n % 2 == 0 {\n \
    \       vec.push(3);\n    }\n    else {\n        let mut tri_1: isize = 1;\n \
    \       let mut tri_2: isize = 2;\n        let mut tri_3: isize = 3;\n       \
    \ for _ in 0..n / 2 {\n            tri_3 = tri_1 + tri_2;\n            tri_2 =\
    \ tri_1;\n            tri_1 = tri_3;\n        }\n        vec.push(tri_1 + tri_2\
    \ + tri_3);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ == 0 {\n        vec.push(3);\n    } else {\n        let mut tri_1 = vec![1,\
    \ 1, 1];\n        let mut tri_2 = vec![1, 1, 2];\n        let mut tri_3 = vec![1,\
    \ 2, 1];\n        let mut tri_4 = vec![1, 2, 2];\n        let mut tri_5 = vec![2,\
    \ 1, 1];\n        let mut tri_6 = vec![2, 1, 2];\n        let mut tri_7 = vec![2,\
    \ 2, 1];\n        let mut tri_8 = vec![2, 2, 2];\n        let mut tri_9 = vec![2,\
    \ 1, 2];\n        let mut tri_10 = vec![2, 2, 1];\n        let mut tri_11 = vec![2,\
    \ 2, 2];\n        let mut tri_12 = vec![1, 2, 2];\n        let mut tri_13 = vec![1,\
    \ 2, 1];\n        let mut tri_14 = vec![1, 2, 1];\n        let mut tri_15 = vec![1,\
    \ 1, 1];\n        let mut tri_16 = vec![1, 1, 2];\n        let mut tri_17 = vec![1,\
    \ 2, 1];\n        let mut tri_18 = vec![1, 2, 2];\n        let mut tri_19 = vec![2,\
    \ 1, 1];\n        let mut tri_20 = vec![2, 1, 2];\n        let mut tri_21 = vec![2,\
    \ 2, 1];\n        let mut tri_22 = vec![2, 2, 2];\n        let mut tri_23 = vec![2,\
    \ 1, 2];\n        let mut tri_24 = vec![2, 2, 1];\n        let mut tri_25 = vec![2,\
    \ 2, 2];\n        let mut tri_26 = vec![1, 2, 2];\n        let mut tri_27 = vec![1,\
    \ 2, 1];\n        let mut tri_28 = vec![1, 2, 1];\n        let mut tri_29 = vec![1,\
    \ 1, 1];\n        let mut tri_30 = vec![1, 1, 2];\n        let mut tri_31 = vec![1,\
    \ 2, 1];\n        let mut tri_32 = vec![1, 2, 2];\n        let mut tri_33 = vec![2,\
    \ 1, 1];\n        let mut tri_34 = vec![2, 1, 2];\n        let mut tri_35 = vec![2,\
    \ 2, 1];\n        let mut tri_36 = vec![2, 2, 2];\n        let mut tri_37 = vec![2,\
    \ 1, 2];\n        let mut tri_38 = vec![2, 2, 1];\n        let mut tri_39 = vec![2,\
    \ 2, 2];\n        let mut tri_40 = vec![1, 2, 2];\n        let mut tri_41 = vec![1,\
    \ 2, 1];\n        let mut tri_42 = vec![1, 2, ", "    let mut list = vec![0; n\
    \ + 1];\n    list[0] = 3;\n    list[1] = 1 + n / 2;\n    if n % 2 == 1 {\n   \
    \     list[2] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }\n    list", "   \
    \ let mut tri_vec: Vec<isize> = Vec::new();\n    tri_vec.push(3);\n    tri_vec.push(1);\n\
    \    tri_vec.push(2);\n    if n % 2 == 0 {\n        tri_vec.push(tri_vec[0] +\
    \ tri_vec[1] + tri_vec[2]);\n    } else {\n        tri_vec.push(tri_vec[0] + tri_vec[1]\
    \ + tri_vec[2] + tri_vec[3]);\n    }\n    tri_vec", "    let mut tri_vec: Vec<isize>\
    \ = vec![];\n    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n\
    \    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n\
    \    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(1);\n\
    \    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n\
    \    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n\
    \    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(1);\n\
    \    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n\
    \    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n\
    \    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(1);\n\
    \    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n\
    \    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n\
    \    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(1);\n\
    \    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n\
    \    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n\
    \    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(1);\n\
    \    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n\
    \    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n\
    \    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(",
  "    let mut tri_vec: Vec<isize> = vec![];\n    if n == 0 {\n        tri_vec.push(3);\n\
    \    } else if n % 2 == 0 {\n        tri_vec.push(1 + n / 2);\n    } else {\n\
    \        tri_vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    tri_vec",
  "    let mut result = Vec::new();\n    if n == 0 {\n        result.push(3);\n  \
    \  } else {\n        result.push(1 + n / 2);\n        if n % 2 == 0 {\n      \
    \      result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n\
    \            result.push(tri(n - 1) + tri(n - 2));\n        }\n    }\n    result",
  "    let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n\
    \    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n   \
    \ vec.push(11);\n    vec.push(12);\n    vec.push(13);\n    vec.push(14);\n   \
    \ vec.push(15);\n    vec.push(16);\n    vec.push(17);\n    vec.push(18);\n   \
    \ vec.push(19);\n    vec.push(20);\n    vec.push(21);\n    vec.push(22);\n   \
    \ vec.push(23);\n    vec.push(24);\n    vec.push(25);\n    vec.push(26);\n   \
    \ vec.push(27);\n    vec.push(28);\n    vec.push(29);\n    vec.push(30);\n   \
    \ vec.push(31);\n    vec.push(32);\n    vec.push(33);\n    vec.push(34);\n   \
    \ vec.push(35);\n    vec.push(36);\n    vec.push(37);\n    vec.push(38);\n   \
    \ vec.push(39);\n    vec.push(40);\n    vec.push(41);\n    vec.push(42);\n   \
    \ vec.push(43);\n    vec.push(44);\n    vec.push(45);\n    vec.push(46);\n   \
    \ vec.push(47);\n    vec.push(48);\n    vec.push(49);\n    vec.push(50);\n   \
    \ vec.push(51);\n    vec.push(52);\n    vec.push(53);\n    vec.push(54);\n   \
    \ vec.push(55);\n    vec.push(56);\n    vec.push(57);\n    vec.push(58);\n   \
    \ vec.push(59);\n    vec.push(60);\n    vec.push(61);\n    vec.push(62);\n   \
    \ vec.push(63);\n    vec.push(64);\n    vec.push(65);\n    vec.push(66);\n   \
    \ vec.push(67);\n    vec.push(68);\n    vec.push(69);\n    vec.push(70);\n   \
    \ vec.push(71);\n    vec.push(72);\n    vec.push(73);\n    vec.push(74);\n   \
    \ vec.push(75);\n    vec.push(76);\n    vec.push(77);\n    vec.push(78);\n   \
    \ vec.push(79);\n    vec.push(80);\n    vec.push(81);\n    vec.push(82);\n   \
    \ vec.push(83);\n    vec.push(84);\n    vec.push(85);\n", "    let mut list =\
    \ vec![];\n    if n % 2 == 0 {\n        list.push(3);\n    }\n    else {\n   \
    \     let mut a = 1;\n        let mut b = 1;\n        for _ in 0..n / 2 {\n  \
    \          list.push(a);\n            list.push(b);\n            a += b;\n   \
    \         b += a;\n        }\n    }\n    list", "    let mut result = vec![0;\
    \ n + 1];\n    result[0] = 3;\n    if n % 2 == 0 {\n        result[1] = 1 + n\
    \ / 2;\n    } else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0\
    \ {\n        vec.push(3);\n    }\n    for i in 1..n / 2 {\n        vec.push(i\
    \ + n / 2);\n    }\n    for i in 1..n / 2 {\n        vec.push(vec[vec.len() -\
    \ 1] + vec[vec.len() - 2]);\n    }\n    vec", "    let mut result = vec![0; n\
    \ + 1];\n    result[0] = 3;\n    for i in 1..=n {\n        result[i] = result[i-1]\
    \ + result[i-2];\n    }\n    result", "    let mut vec: Vec<isize> = Vec::new();\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n    }\n    for i in 1..n / 2 {\n \
    \       vec.push(i + n / 2);\n    }\n    if n % 2 == 1 {\n        vec.push(vec[0]\
    \ + vec[1] + vec[2]);\n    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n\
    \    if n == 0 {\n        vec.push(3);\n    } else {\n        vec.push(1);\n \
    \       vec.push(n / 2);\n        if n % 2 == 1 {\n            vec.push(n / 2\
    \ + n / 2 + n);\n        } else {\n            vec.push(n / 2 + n / 2 + n + n\
    \ / 2);\n        }\n    }\n    vec", "    let mut tri_vec: Vec<isize> = Vec::new();\n\
    \    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n\
    \    tri_vec.push(4);\n    tri_vec.push(5);\n    tri_vec.push(6);\n    tri_vec.push(7);\n\
    \    tri_vec.push(8);\n    tri_vec.push(9);\n    tri_vec.push(10);\n    tri_vec.push(11);\n\
    \    tri_vec.push(12);\n    tri_vec.push(13);\n    tri_vec.push(14);\n    tri_vec.push(15);\n\
    \    tri_vec.push(16);\n    tri_vec.push(17);\n    tri_vec.push(18);\n    tri_vec.push(19);\n\
    \    tri_vec.push(20);\n    tri_vec.push(21);\n    tri_vec.push(22);\n    tri_vec.push(23);\n\
    \    tri_vec.push(24);\n    tri_vec.push(25);\n    tri_vec.push(26);\n    tri_vec.push(27);\n\
    \    tri_vec.push(28);\n    tri_vec.push(29);\n    tri_vec.push(30);\n    tri_vec.push(31);\n\
    \    tri_vec.push(32);\n    tri_vec.push(33);\n    tri_vec.push(34);\n    tri_vec.push(35);\n\
    \    tri_vec.push(36);\n    tri_vec.push(37);\n    tri_vec.push(38);\n    tri_vec.push(39);\n\
    \    tri_vec.push(40);\n    tri_vec.push(41);\n    tri_vec.push(42);\n    tri_vec.push(43);\n\
    \    tri_vec.push(44);\n    tri_vec.push(45);\n    tri_vec.push(46);\n    tri_vec.push(47);\n\
    \    tri_vec.push(48);\n    tri_vec.push(49);\n    tri_vec.push(50);\n    tri_vec.push(51);\n\
    \    tri_vec.push(52);\n    tri_vec.push(53);\n    tri_vec.push(54);\n    tri_vec.push(55);\n\
    \    tri_vec.push(56);\n    tri_vec.push(57);\n    tri_vec.push(58);\n    tri_vec.push(59);\n\
    \    tri_vec.push(60);\n    tri_vec.push(61);\n    tri_vec.push(62);\n    tri_vec.push(63);\n\
    \    tri", "    let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    if\
    \ n % 2 == 0 {\n        vec.push(1);\n    }\n    for i in 2..n {\n        vec.push(vec[i\
    \ - 1] + vec[i - 2] + vec[i - 3]);\n    }\n    vec", "    let mut result = vec![0;\
    \ n + 1];\n    result[0] = 3;\n    for i in 1..=n {\n        result[i] = result[i-1]\
    \ + result[i-2];\n    }\n    result", "    let mut list = vec![3, 1];\n    for\
    \ i in 1..n {\n        list.push(list.last().unwrap() + list.last().unwrap() +\
    \ list.last().unwrap());\n    }\n    list", "    let mut result: Vec<isize> =\
    \ vec![];\n    if n == 0 {\n        result.push(3);\n        return result;\n\
    \    }\n    if n == 1 {\n        result.push(1);\n        return result;\n   \
    \ }\n    if n % 2 == 0 {\n        result.push(tri(n - 1) + tri(n - 2));\n    }\
    \ else {\n        result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n\
    \    result", "    let mut tri_vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        tri_vec.push(3);\n    } else {\n        tri_vec.push(1);\n        tri_vec.push(n\
    \ / 2);\n    }\n    for i in 1..n {\n        tri_vec.push(tri_vec[tri_vec.len()\
    \ - 1] + tri_vec[tri_vec.len() - 2] + tri_vec[tri_vec.len() - 3]);\n    }\n  \
    \  tri_vec", "    let mut vec: Vec<isize> = vec![];\n    let mut tri_vec: Vec<isize>\
    \ = vec![];\n    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n\
    \    for i in 0..n {\n        let mut tri_vec: Vec<isize> = vec![];\n        tri_vec.push(tri_vec[0]\
    \ + tri_vec[1] + tri_vec[2]);\n        tri_vec.push(tri_vec[1] + tri_vec[2] +\
    \ tri_vec[3]);\n        tri_vec.push(tri_vec[2] + tri_vec[3] + tri_vec[4]);\n\
    \        tri_vec.push(tri_vec[3] + tri_vec[4] + tri_vec[5]);\n        tri_vec.push(tri_vec[4]\
    \ + tri_vec[5] + tri_vec[6]);\n        tri_vec.push(tri_vec[5] + tri_vec[6] +\
    \ tri_vec[7]);\n        tri_vec.push(tri_vec[6] + tri_vec[7] + tri_vec[8]);\n\
    \        tri_vec.push(tri_vec[7] + tri_vec[8] + tri_vec[9]);\n        tri_vec.push(tri_vec[8]\
    \ + tri_vec[9] + tri_vec[10]);\n        tri_vec.push(tri_vec[9] + tri_vec[10]\
    \ + tri_vec[11]);\n        tri_vec.push(tri_vec[10] + tri_vec[11] + tri_vec[12]);\n\
    \        tri_vec.push(tri_vec[11] + tri_vec[12] + tri_vec[13]);\n        tri_vec.push(tri_vec[12]\
    \ + tri_vec[13] + tri_vec[14]);\n        tri_vec.push(tri_vec[13] + tri_vec[14]\
    \ + tri_vec[15]);\n        tri_vec.push(tri_vec[14] + tri_vec[15] + tri_vec[16]);\n\
    \        tri_vec.push(tri_vec[15] + tri_vec[16] + tri_vec[17]);\n        tri_vec.push(tri_vec[16]\
    \ + tri_vec[17] + tri_vec[18]);\n        tri_vec.push(tri_vec[17] + tri_vec[18]\
    \ + tri_vec[19]);\n        tri_vec.push(tri_vec[18] + tri_vec[19] + tri_vec[20]);\n\
    \        tri_vec.push(tri_vec[19] + tri_vec[20", "    let mut result: Vec<isize>\
    \ = vec![];\n    if n == 0 {\n        result.push(3);\n    } else {\n        let\
    \ mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut\
    \ tri_3 = tri(n - 3);\n        result.push(tri_1 + tri_2 + tri_3);\n    }\n  \
    \  result", "    let mut list = vec![];\n    if n == 0 {\n        list.push(3);\n\
    \    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n\
    \ - 2);\n        list.push(tri_1 + tri_2);\n        if n % 2 == 0 {\n        \
    \    list.push(tri_1 + tri_2 + tri(n - 1));\n        }\n    }\n    list", "  \
    \  let mut result = vec![];\n    if n == 0 {\n        result.push(3);\n    } else\
    \ {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n\
    \        let mut tri_3 = tri(n - 3);\n        result.push(tri_1 + tri_2 + tri_3);\n\
    \    }\n    result", "    let mut list = vec![];\n    let mut tri_1 = vec![1,\
    \ 1, 1];\n    let mut tri_2 = vec![1, 1, 2];\n    let mut tri_3 = vec![1, 2, 1];\n\
    \    for i in 1..n {\n        list.push(tri_1[i] - tri_2[i] - tri_3[i]);\n   \
    \     tri_1.push(tri_1[i] + tri_2[i]);\n        tri_2.push(tri_2[i] + tri_3[i]);\n\
    \        tri_3.push(tri_3[i] + tri_1[i]);\n    }\n    list", "    let mut vec:\
    \ Vec<isize> = Vec::new();\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n\
    \    else {\n        vec.push(1);\n        vec.push(n / 2);\n    }\n    for i\
    \ in 2..=n {\n        vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n    }\n\
    \    vec", "    let mut result = Vec::new();\n    if n == 0 {\n        result.push(3);\n\
    \        return result;\n    }\n    if n == 1 {\n        result.push(1);\n   \
    \     return result;\n    }\n    if n % 2 == 0 {\n        result.push(1 + n /\
    \ 2);\n        return result;\n    }\n    let mut tri_1 = tri(n - 1);\n    let\
    \ mut tri_2 = tri(n - 2);\n    tri_1.push(tri_1.pop() + tri_2.pop());\n    tri_2.push(tri_1.pop()\
    \ + tri_2.pop() + tri_1.pop());\n    result.push(tri_1.pop() + tri_2.pop());\n\
    \    result", "    let mut list = vec![];\n    if n <= 2 {\n        list.push(n);\n\
    \    } else {\n        list.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n\
    \    list", "    let mut result = vec![0; n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 1 + n / 2;\n    if n % 2 == 0 {\n        result[2] = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1);\n    } else {\n        result[2] = tri(n - 1) + tri(n - 2);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut tri_1 = 1;\n\
    \    let mut tri_2 = 1;\n    let mut tri_3 = 1;\n    for i in 1..n+1 {\n     \
    \   result.push(tri_1);\n        result.push(tri_2);\n        result.push(tri_3);\n\
    \        tri_1 = tri_2;\n        tri_2 = tri_3;\n        tri_3 = tri_1 + tri_2\
    \ + tri_3;\n    }\n    result", "    let mut vec: Vec<isize> = Vec::new();\n \
    \   vec.push(3);\n    for i in 1..n+1 {\n        vec.push(vec[i-1] + vec[i-2]\
    \ + vec[i+1])\n    }\n    vec", "    let mut result = vec![];\n    if n == 0 {\n\
    \        result.push(3);\n        return result;\n    }\n    if n % 2 == 0 {\n\
    \        result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    } else {\n  \
    \      result.push(tri(n - 1) + tri(n - 2));\n    }\n    result", "    let mut\
    \ vec: Vec<isize> = vec![];\n    vec.push(3);\n    for i in 1..n+1 {\n       \
    \ if i % 2 == 0 {\n            vec.push((i + 1) + (i / 2));\n        } else {\n\
    \            vec.push((i + 1) + (i / 2) + tri(n - 1));\n        }\n    }\n   \
    \ vec", "    let mut result = vec![1, 1, 1];\n    if n % 2 == 0 {\n        result[0]\
    \ = result[0] + result[1];\n        result[1] = result[0] + result[2];\n     \
    \   result[2] = result[1] + result[2];\n    }\n    else {\n        result[0] =\
    \ result[0] + result[1];\n        result[1] = result[0] + result[2];\n       \
    \ result[2] = result[1] + result[2];\n        result[3] = result[0] + result[1];\n\
    \    }\n    result", "    let mut vec: Vec<isize> = Vec::new();\n    if n % 2\
    \ == 0 {\n        vec.push(3);\n    }\n    else {\n        vec.push(1);\n    \
    \    vec.push(n / 2);\n    }\n    for i in 2..=n {\n        vec.push(vec[i - 1]\
    \ + vec[i - 2] + vec[i - 3]);\n    }\n    vec", "    let mut vec: Vec<isize> =\
    \ Vec::new();\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n    vec.push(7);\n    vec.push(8);\n\
    \    vec.push(9);\n    vec.push(10);\n    vec.push(11);\n    vec.push(12);\n \
    \   vec.push(13);\n    vec.push(14);\n    vec.push(15);\n    vec.push(16);\n \
    \   vec.push(17);\n    vec.push(18);\n    vec.push(19);\n    vec.push(20);\n \
    \   vec.push(21);\n    vec.push(22);\n    vec.push(23);\n    vec.push(24);\n \
    \   vec.push(25);\n    vec.push(26);\n    vec.push(27);\n    vec.push(28);\n \
    \   vec.push(29);\n    vec.push(30);\n    vec.push(31);\n    vec.push(32);\n \
    \   vec.push(33);\n    vec.push(34);\n    vec.push(35);\n    vec.push(36);\n \
    \   vec.push(37);\n    vec.push(38);\n    vec.push(39);\n    vec.push(40);\n \
    \   vec.push(41);\n    vec.push(42);\n    vec.push(43);\n    vec.push(44);\n \
    \   vec.push(45);\n    vec.push(46);\n    vec.push(47);\n    vec.push(48);\n \
    \   vec.push(49);\n    vec.push(50);\n    vec.push(51);\n    vec.push(52);\n \
    \   vec.push(53);\n    vec.push(54);\n    vec.push(55);\n    vec.push(56);\n \
    \   vec.push(57);\n    vec.push(58);\n    vec.push(59);\n    vec.push(60);\n \
    \   vec.push(61);\n    vec.push(62);\n    vec.push(63);\n    vec.push(64);\n \
    \   vec.push(65);\n    vec.push(66);\n    vec.push(67);\n    vec.push(68);\n \
    \   vec.push(69);\n    vec.push(70);\n    vec.push(71);\n    vec.push(72);\n \
    \   vec.push(73);\n    vec.push(74);\n    vec.push(75);\n    vec.push(76);\n \
    \   vec.push(77);\n    vec.push(78);\n    vec.push(79);\n    vec.push(80);\n \
    \   vec.push(81);\n    vec.push(82);\n    vec.push(83);\n    vec.push(84);\n \
    \   vec.push(85);\n", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    for i in 1..n {\n        vec.push(vec[i\
    \ - 1] + vec[i - 2] + vec[i - 3]);\n    }\n    vec", "    let mut result = Vec::new();\n\
    \    if n == 0 {\n        result.push(3);\n    } else {\n        let mut tri_1\
    \ = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut tri_3 =\
    \ tri(n - 3);\n        result.push(tri_1 + tri_2 + tri_3);\n    }\n    result",
  "    let mut list = vec![];\n    list.push(3);\n    list.push(1);\n    list.push(2);\n\
    \    list.push(1);\n    list.push(1);\n    list.push(2);\n    list.push(3);\n\
    \    list.push(3);\n    list.push(5);\n    list.push(8);\n    list.push(13);\n\
    \    list.push(21);\n    list.push(34);\n    list.push(55);\n    list.push(89);\n\
    \    list.push(144);\n    list.push(233);\n    list.push(377);\n    list.push(610);\n\
    \    list.push(987);\n    list.push(1597);\n    list.push(2584);\n    list.push(4181);\n\
    \    list.push(6765);\n    list.push(10946);\n    list.push(17711);\n    list.push(28657);\n\
    \    list.push(46368);\n    list.push(75025);\n    list.push(121393);\n    list.push(196418);\n\
    \    list.push(317811);\n    list.push(514229);\n    list.push(832040);\n    list.push(1346269);\n\
    \    list.push(2178309);\n    list.push(3524578);\n    list.push(5702887);\n \
    \   list.push(9227465);\n    list.push(14930352);\n    list.push(24157817);\n\
    \    list.push(39088169);\n    list.push(63245986);\n    list.push(102334155);\n\
    \    list.push(165580141);\n    list.push(267914296);\n    list.push(433494437);\n\
    \    list.push(701408733);\n    list.push(1134903170);\n    list.push(1836311903);\n\
    \    list.push(3078998699);\n    list.push(4951760392);\n    list.push(8065155330);\n\
    \    list.push(13049695457);\n    list.push(21114850779);\n    list.push(34164641375);\n\
    \    list.push(55279397008);\n    list.push(89443943259);\n    list.push(14472339019);\n\
    \    list.push(23416728692);\n    list.push(37889062373);\n    list.push(61766557137);\n\
    \    list.push(96982712691);\n    list.push(15368709123);\n    list.push(24111357474);\n\
    \    list.push(39530675148);\n    list.push(", "    let mut list = Vec::new();\n\
    \    list.push(3);\n    list.push(1);\n    list.push(2);\n    for i in 2..n+1\
    \ {\n        list.push(list.last().unwrap() + list.last().unwrap() + list.last().unwrap());\n\
    \    }\n    list", "    let mut result = Vec::new();\n    if n == 0 {\n      \
    \  result.push(3);\n    } else {\n        let mut tri_1 = tri(n - 1);\n      \
    \  let mut tri_2 = tri(n - 2);\n        let mut tri_3 = tri(n + 1);\n        result.push(tri_1\
    \ + tri_2 + tri_3);\n    }\n    result", "    let mut result = Vec::new();\n \
    \   if n == 0 {\n        result.push(3);\n    } else {\n        let mut tri_1\
    \ = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        result.push(tri_1\
    \ + tri_2);\n        if n % 2 == 0 {\n            result.push(tri_1 + tri_2 +\
    \ tri(n - 1));\n        }\n    }\n    result", "    let mut result = vec![];\n\
    \    if n == 0 {\n        result.push(3);\n        return result;\n    }\n   \
    \ if n % 2 == 0 {\n        result.push(1 + n / 2);\n    } else {\n        let\
    \ mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut\
    \ tri_3 = tri(n + 1);\n        result.push(tri_1 + tri_2 + tri_3);\n    }\n  \
    \  result", "    let mut result: Vec<isize> = vec![];\n    if n < 3 {\n      \
    \  result.resize(1);\n        result[0] = n;\n        return result;\n    }\n\
    \    if n % 2 == 0 {\n        result.resize(1);\n        result[0] = n;\n    \
    \    result.push(1);\n        result.push(n / 2);\n    } else {\n        result.resize(1);\n\
    \        result[0] = n;\n        result.push(1);\n        result.push(n - 1);\n\
    \        result.push(1 + n / 2);\n    }\n    result", "    let mut tri_vec: Vec<isize>\
    \ = vec![];\n    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n\
    \    tri_vec.push(3);\n    tri_vec.push(4);\n    tri_vec.push(5);\n    tri_vec.push(6);\n\
    \    tri_vec.push(7);\n    tri_vec.push(8);\n    tri_vec.push(9);\n    tri_vec.push(10);\n\
    \    tri_vec.push(11);\n    tri_vec.push(12);\n    tri_vec.push(13);\n    tri_vec.push(14);\n\
    \    tri_vec.push(15);\n    tri_vec.push(16);\n    tri_vec.push(17);\n    tri_vec.push(18);\n\
    \    tri_vec.push(19);\n    tri_vec.push(20);\n    tri_vec.push(21);\n    tri_vec.push(22);\n\
    \    tri_vec.push(23);\n    tri_vec.push(24);\n    tri_vec.push(25);\n    tri_vec.push(26);\n\
    \    tri_vec.push(27);\n    tri_vec.push(28);\n    tri_vec.push(29);\n    tri_vec.push(30);\n\
    \    tri_vec.push(31);\n    tri_vec.push(32);\n    tri_vec.push(33);\n    tri_vec.push(34);\n\
    \    tri_vec.push(35);\n    tri_vec.push(36);\n    tri_vec.push(37);\n    tri_vec.push(38);\n\
    \    tri_vec.push(39);\n    tri_vec.push(40);\n    tri_vec.push(41);\n    tri_vec.push(42);\n\
    \    tri_vec.push(43);\n    tri_vec.push(44);\n    tri_vec.push(45);\n    tri_vec.push(46);\n\
    \    tri_vec.push(47);\n    tri_vec.push(48);\n    tri_vec.push(49);\n    tri_vec.push(50);\n\
    \    tri_vec.push(51);\n    tri_vec.push(52);\n    tri_vec.push(53);\n    tri_vec.push(54);\n\
    \    tri_vec.push(55);\n    tri_vec.push(56);\n    tri_vec.push(57);\n    tri_vec.push(58);\n\
    \    tri_vec.push(59);\n    tri_vec.push(60);\n    tri_vec.push(61);\n    tri_vec.push(62);\n\
    \    tri_vec.push(63);\n    tri_", "    let mut vec: Vec<isize> = vec![];\n  \
    \  if n % 2 == 0 {\n        vec.push(3);\n    }\n    if n % 2 == 1 {\n       \
    \ vec.push(1);\n    }\n    for i in 1..n / 2 {\n        vec.push(vec[i-2] + vec[i-1]\
    \ + vec[i]);\n    }\n    vec", "    let mut result = vec![3, 1];\n    for i in\
    \ 1..n + 1 {\n        let mut current = result[0];\n        result[0] = result[1]\
    \ + result[2];\n        result[1] = current;\n    }\n    result", "    let mut\
    \ result = vec![1, 1, 1];\n    for i in 1..n {\n        let mut current = result[0];\n\
    \        let mut next = result[1];\n        let mut last = result[2];\n      \
    \  result[0] = last + current;\n        result[1] = next + last;\n        result[2]\
    \ = current + next;\n    }\n    result", "    let mut result = vec![];\n    if\
    \ n % 2 == 0 {\n        result.push(3);\n    }\n    for i in 1..n / 2 {\n    \
    \    result.push(result.last().unwrap() + result.last().unwrap() + result.last().unwrap());\n\
    \    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0\
    \ {\n        vec.push(3);\n    }\n    for i in 1..n / 2 {\n        vec.push(i\
    \ + n / 2);\n    }\n    for i in 1..n / 2 {\n        vec.push(vec[vec.len() -\
    \ 1] + vec[vec.len() - 2]);\n    }\n    vec", "    let mut result = Vec::new();\n\
    \    let mut tri_1 = vec![1, 1, 1];\n    let mut tri_2 = vec![1, 1, 2];\n    let\
    \ mut tri_3 = vec![1, 2, 1];\n    let mut tri_4 = vec![1, 2, 2];\n    let mut\
    \ tri_5 = vec![2, 1, 1];\n    let mut tri_6 = vec![2, 1, 2];\n    let mut tri_7\
    \ = vec![2, 2, 1];\n    let mut tri_8 = vec![2, 2, 2];\n    let mut tri_9 = vec![2,\
    \ 1, 3];\n    let mut tri_10 = vec![2, 2, 3];\n    let mut tri_11 = vec![1, 2,\
    \ 3];\n    let mut tri_12 = vec![1, 2, 4];\n    let mut tri_13 = vec![1, 2, 5];\n\
    \    let mut tri_14 = vec![1, 2, 6];\n    let mut tri_15 = vec![1, 2, 7];\n  \
    \  let mut tri_16 = vec![1, 2, 8];\n    let mut tri_17 = vec![1, 2, 9];\n    let\
    \ mut tri_18 = vec![1, 2, 10];\n    let mut tri_19 = vec![1, 2, 11];\n    let\
    \ mut tri_20 = vec![1, 2, 12];\n    let mut tri_21 = vec![1, 2, 13];\n    let\
    \ mut tri_22 = vec![1, 2, 14];\n    let mut tri_23 = vec![1, 2, 15];\n    let\
    \ mut tri_24 = vec![1, 2, 16];\n    let mut tri_25 = vec![1, 2, 17];\n    let\
    \ mut tri_26 = vec![1, 2, 18];\n    let mut tri_27 = vec![1, 2, 19];\n    let\
    \ mut tri_28 = vec![1, 2, 20];\n    let mut tri_29 = vec![1, 2, 21];\n    let\
    \ mut tri_30 = vec![1, 2, 22];\n    let mut tri_31 = vec![1, 2, 23];\n    let\
    \ mut tri_32 = vec![1, 2, 24];\n    let mut tri_33 = vec![1, 2, 25];\n    let\
    \ mut tri_34 = vec![1, 2, 26];\n    let mut tri_35 = vec![1, 2, 27];\n    let\
    \ mut tri_36 = vec![1, 2, 28];\n    let mut tri_37 = vec![1, 2, 29];\n    let\
    \ mut tri_38 = vec![1, 2, 30];\n    let mut tri_39 = vec![1, 2, 31];\n    let\
    \ mut tri_40 = vec![1, 2, 32];\n    let mut tri", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n    for i in 1..n\
    \ / 2 {\n        vec.push(vec![vec![1], vec![2]]);\n    }\n    for i in 2..n /\
    \ 2 {\n        vec.push(vec![vec![2], vec![3]]);\n    }\n    for i in 3..n / 2\
    \ {\n        vec.push(vec![vec![3], vec![4]]);\n    }\n    for i in 4..n / 2 {\n\
    \        vec.push(vec![vec![4], vec![5]]);\n    }\n    for i in 5..n / 2 {\n \
    \       vec.push(vec![vec![5], vec![6]]);\n    }\n    for i in 6..n / 2 {\n  \
    \      vec.push(vec![vec![6], vec![7]]);\n    }\n    for i in 7..n / 2 {\n   \
    \     vec.push(vec![vec![7], vec![8]]);\n    }\n    for i in 8..n / 2 {\n    \
    \    vec.push(vec![vec![8], vec![9]]);\n    }\n    for i in 9..n / 2 {\n     \
    \   vec.push(vec![vec![9], vec![10]]);\n    }\n    for i in 10..n / 2 {\n    \
    \    vec.push(vec![vec![10], vec![11]]);\n    }\n    for i in 11..n / 2 {\n  \
    \      vec.push(vec![vec![11], vec![12]]);\n    }\n    for i in 12..n / 2 {\n\
    \        vec.push(vec![vec![12], vec![13]]);\n    }\n    for i in 13..n / 2 {\n\
    \        vec.push(vec![vec![13], vec![14]]);\n    }\n    for i in 14..n / 2 {\n\
    \        vec.push(vec![vec![14], vec![15]]);\n    }\n    for i in 15..n / 2 {\n\
    \        vec.push(vec![vec![15], vec![16]]);\n    }\n    for i in 16..n / 2 {\n\
    \        vec.push(vec![vec![16], vec![17]]);\n    }\n    for i in 17..n / 2 {\n\
    \        vec.push(vec![vec![17], vec![18]]);\n    }\n    for i in 18..n / 2 {\n\
    \        vec.push(vec![vec![18], vec![19]]);\n    }\n    for i in 19..n / 2 {\n\
    \        vec.push(vec![vec![19], vec![20]]);\n    }\n    for i in 20..n / 2 {\n\
    \        vec.push(vec![vec![20], vec![21]]);\n    }\n    for i in 21..n / 2 {\n\
    \        vec.", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    for i\
    \ in 1..n+1 {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n    }\n\
    \    vec", "    let mut result = vec![];\n    if n % 2 == 0 {\n        result.push(3);\n\
    \    }\n    for i in 1..n / 2 {\n        result.push(1 + i / 2);\n    }\n    for\
    \ i in 1..n / 2 {\n        result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \    }\n    result", "    let mut list = vec![0; n + 1];\n    list[0] = 3;\n \
    \   list[1] = 1;\n    list[2] = 1;\n    list[3] = 1;\n    for i in 2..n + 1 {\n\
    \        list[i] = list[(i - 1)] + list[(i - 2)] + list[(i - 3)];\n    }\n   \
    \ list", "    let mut result = Vec::new();\n    if n == 0 {\n        result.push(3);\n\
    \    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n\
    \ - 2);\n        let mut tri_3 = tri(n + 1);\n        result.push(tri_1 + tri_2\
    \ + tri_3);\n    }\n    result", "    let mut list = vec![];\n    if n % 2 ==\
    \ 0 {\n        list.push(3);\n    }\n    for i in 1..n / 2 {\n        list.push(list.last().unwrap()\
    \ + list.last().unwrap() + list.last().unwrap());\n    }\n    list", "    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    for i\
    \ in 1..n+1 {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() + vec.last().unwrap());\n        } else {\n          \
    \  vec.push(vec.last().unwrap() + vec.last().unwrap());\n        }\n    }\n  \
    \  vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    for i in\
    \ 1..n+1 {\n        if i % 2 == 0 {\n            vec.push(i + 1);\n        } else\
    \ {\n            vec.push(vec[vec.len() - 1] + vec[vec.len() - 2] + vec[vec.len()\
    \ - 3]);\n        }\n    }\n    vec", "    let mut result = vec![];\n    if n\
    \ == 0 {\n        result.push(3);\n        return result;\n    }\n    if n % 2\
    \ == 0 {\n        result.push(1 + n / 2);\n    } else {\n        let mut tri_1\
    \ = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        result.push(tri_1\
    \ + tri_2);\n    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1);\n        vec.push(n / 2);\n    } else\
    \ {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n\
    \        let mut tri_3 = tri(n - 3);\n        tri_1.push(tri_2.pop() + tri_3.pop());\n\
    \        tri_2.push(tri_1.pop() + tri_3.pop());\n        tri_3.push(tri_1.pop()\
    \ + tri_2.pop());\n        vec.push(tri_1.pop());\n        vec.push(tri_2.pop());\n\
    \        vec.push(tri_3.pop());\n    }\n    vec", "    let mut list = vec![];\n\
    \    if n == 0 {\n        list.push(3);\n        return list;\n    }\n    if n\
    \ % 2 == 0 {\n        list.push(1 + n / 2);\n    } else {\n        let mut tri_1\
    \ = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        tri_1.push(tri_2.pop()\
    \ + tri_1.pop());\n        list.push(tri_1.pop());\n    }\n    list", "    let\
    \ mut vec = vec![3, 1];\n    for i in 2..n + 1 {\n        vec.push(vec[i - 1]\
    \ + vec[i - 2] + vec[i - 3])\n    }\n    vec", "    let mut tri = vec![3, 1];\n\
    \    for i in 1..n {\n        tri.push(tri.last().unwrap() + tri.last().unwrap()\
    \ + tri.last().unwrap());\n    }\n    tri", "    let mut result = vec![];\n  \
    \  if n % 2 == 0 {\n        result.push(3);\n    }\n    for i in 1..n / 2 {\n\
    \        result.push(1 + i / 2);\n    }\n    for i in 1..n / 2 {\n        result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    result", "    let mut tri_vec:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        tri_vec.push(3);\n        return\
    \ tri_vec;\n    }\n    if n % 2 == 0 {\n        tri_vec.push(tri(n - 1) + tri(n\
    \ - 2));\n    } else {\n        tri_vec.push(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n    }\n    return tri_vec;", "    let mut result = Vec::new();\n    if\
    \ n == 0 {\n        result.push(3);\n    } else {\n        let mut tri_1 = tri(n\
    \ - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut tri_3 = tri(n +\
    \ 1);\n        result.push(tri_1 + tri_2 + tri_3);\n    }\n    result", "    let\
    \ mut tri = vec![3, 1];\n    for i in 2..n + 1 {\n        tri.push(tri.last().unwrap()\
    \ + tri.last().unwrap() + tri.last().unwrap());\n    }\n    tri", "    let mut\
    \ result = Vec::new();\n    if n % 2 == 0 {\n        result.push(3);\n    }\n\
    \    for i in 1..n / 2 {\n        result.push(1 + i / 2);\n    }\n    for i in\
    \ 1..n / 2 {\n        result.push(result.last().unwrap() + result.last().unwrap()\
    \ + i);\n    }\n    result", "    let mut result: Vec<isize> = vec![];\n    if\
    \ n == 0 {\n        result.push(3);\n    } else {\n        let mut tri_1: isize\
    \ = 1;\n        let mut tri_2: isize = 2;\n        let mut tri_3: isize = 3;\n\
    \        for _ in 0..n {\n            result.push(tri_1 + tri_2 + tri_3);\n  \
    \          tri_1 = tri_2;\n            tri_2 = tri_3;\n            tri_3 = tri_1\
    \ + tri_2 + tri_3;\n        }\n    }\n    result", "    let mut list = vec![0;\
    \ n + 1];\n    list[0] = 3;\n    list[1] = 1;\n    list[2] = 2;\n    list[3] =\
    \ 1;\n    list[4] = 1;\n    list[5] = 1;\n    list[6] = 1;\n    list[7] = 1;\n\
    \    list[8] = 1;\n    list[9] = 1;\n    list[10] = 1;\n    list[11] = 1;\n  \
    \  list[12] = 1;\n    list[13] = 1;\n    list[14] = 1;\n    list[15] = 1;\n  \
    \  list[16] = 1;\n    list[17] = 1;\n    list[18] = 1;\n    list[19] = 1;\n  \
    \  list[20] = 1;\n    list[21] = 1;\n    list[22] = 1;\n    list[23] = 1;\n  \
    \  list[24] = 1;\n    list[25] = 1;\n    list[26] = 1;\n    list[27] = 1;\n  \
    \  list[28] = 1;\n    list[29] = 1;\n    list[30] = 1;\n    list[31] = 1;\n  \
    \  list[32] = 1;\n    list[33] = 1;\n    list[34] = 1;\n    list[35] = 1;\n  \
    \  list[36] = 1;\n    list[37] = 1;\n    list[38] = 1;\n    list[39] = 1;\n  \
    \  list[40] = 1;\n    list[41] = 1;\n    list[42] = 1;\n    list[43] = 1;\n  \
    \  list[44] = 1;\n    list[45] = 1;\n    list[46] = 1;\n    list[47] = 1;\n  \
    \  list[48] = 1;\n    list[49] = 1;\n    list[50] = 1;\n    list[51] = 1;\n  \
    \  list[52] = 1;\n    list[53] = 1;\n    list[54] = 1;\n    list[55] = 1;\n  \
    \  list[56] = 1;\n    list[57] = 1;\n    list[58] = 1;\n    list[59] = 1;\n  \
    \  list[60] = 1;\n    list[61] = 1;\n    list[62] = 1;\n    list[63] = 1;\n  \
    \  list[64] = 1;\n    list[65] = 1;\n    list[66] = 1;\n    list[67] = 1;\n  \
    \  list[68] = 1;\n    list[69] = 1;\n    list[70] = 1;\n    list[71] = 1;\n  \
    \  list[72] = 1;\n    list[73] = 1;\n    list[74] = 1;\n    list[75] = 1;\n  \
    \  list[76] = 1;\n    list[77] = 1;\n    list[78] = 1;\n    list[79] = 1;\n  \
    \  list[80] = 1;\n    list[81] = 1;\n    list[82] = 1;\n    list[83] = 1;\n  \
    \  ", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \    }\n    for i in 1..n / 2 {\n        vec.push(i + n / 2);\n    }\n    for\
    \ i in 1..n / 2 {\n        vec.push(i + n / 2 + 1);\n    }\n    vec", "    let\
    \ mut list = vec![];\n    if n <= 2 {\n        list.push(3);\n    } else {\n \
    \       let mut tri_1 = 1;\n        let mut tri_2 = 1;\n        let mut tri_3\
    \ = 1;\n        for i in 1..n {\n            tri_1 = tri_1 + i;\n            tri_2\
    \ = tri_2 + i;\n            tri_3 = tri_3 + i;\n            list.push(tri_1);\n\
    \            list.push(tri_2);\n            list.push(tri_3);\n        }\n   \
    \ }\n    list", "    let mut result = vec![1, 1, 1];\n    for i in 1..n + 1 {\n\
    \        let mut tmp = result[0];\n        result[0] = result[1];\n        result[1]\
    \ = result[2] + tmp;\n        result[2] = tmp;\n    }\n    result", "    let mut\
    \ vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n        return\
    \ vec;\n    }\n    if n == 1 {\n        vec.push(1);\n        return vec;\n  \
    \  }\n    if n % 2 == 0 {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n    } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n    }\n    return vec;", "    let mut tri = vec![3,\
    \ 1];\n    for i in 2..n + 1 {\n        tri.push(tri[tri.len() - 1] + tri[tri.len()\
    \ - 2] + tri[tri.len() + 1]);\n    }\n    tri", "    let mut vec: Vec<isize> =\
    \ vec![0; n + 1];\n    vec[0] = 3;\n    for i in 1..n {\n        vec[i] = vec[i\
    \ - 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec", "    let mut result = vec![];\n\
    \    if n < 3 {\n        result.push(n);\n        return result;\n    }\n    let\
    \ mut tri_1 = vec![1, 1, 1];\n    let mut tri_2 = vec![1, 1, 1];\n    let mut\
    \ tri_3 = vec![1, 1, 1];\n    for i in 1..n {\n        tri_1.push(tri_1.pop()\
    \ + tri_2.pop() + tri_3.pop());\n        tri_2.push(tri_1.pop() + tri_2.pop()\
    \ + tri_3.pop());\n        tri_3.push(tri_1.pop() + tri_2.pop() + tri_3.pop());\n\
    \        result.push(tri_1.pop() + tri_2.pop() + tri_3.pop());\n    }\n    result",
  "    let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push(1);\n\
    \    for i in 2..n+1 {\n        if i % 2 == 0 {\n            vec.push(i + 1);\n\
    \        } else {\n            vec.push(vec.last().unwrap() + i + 1);\n      \
    \  }\n    }\n    vec", "    let mut list = Vec::new();\n    list.push(3);\n  \
    \  if n % 2 == 0 {\n        list.push(1 + n / 2);\n    } else {\n        let mut\
    \ tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        tri_1.push(tri_2.pop()\
    \ + tri_1.pop());\n        list.push(tri_1);\n    }\n    list", "    let mut vec:\
    \ Vec<isize> = Vec::new();\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n\
    \    else {\n        let mut tri_1: isize = 1;\n        let mut tri_2: isize =\
    \ 2;\n        let mut tri_3: isize = 3;\n        while tri_3 <= n {\n        \
    \    vec.push(tri_1 + tri_2 + tri_3);\n            tri_1 = tri_2;\n          \
    \  tri_2 = tri_3;\n            tri_3 += 1;\n        }\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n    }\
    \ else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n -\
    \ 2);\n        tri_1.push(tri_1.pop() + tri_2.pop());\n        tri_2.push(tri_1.pop()\
    \ + tri_2.pop() + tri_1.pop());\n        vec.push(tri_1.pop() + tri_2.pop());\n\
    \    }\n    vec", "    let mut result: Vec<isize> = vec![];\n    if n == 0 {\n\
    \        result.append(3);\n    } else {\n        let mut tri_1 = tri(n - 1);\n\
    \        let mut tri_2 = tri(n - 2);\n        let mut tri_3 = tri(n + 1);\n  \
    \      result.push(tri_1 + tri_2 + tri_3);\n    }\n    result", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n        return\
    \ vec;\n    }\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n\
    \        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    return vec;",
  "    let mut tri = vec![1, 1, 1];\n    for i in 1..n + 1 {\n        tri.push(tri[tri.len()\
    \ - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let\
    \ mut vec = vec![3, 1 + n / 2, (1 + n) / 2];\n    if n % 2 == 0 {\n        vec.push(vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec",
  "    let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push(1);\n\
    \    for i in 1..n {\n        vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n    if n == 0 {\n\
    \        vec.push(3);\n    } else {\n        let mut tri_1: isize = 3;\n     \
    \   let mut tri_2: isize = 1;\n        let mut tri_3: isize = 2;\n        for\
    \ i in 1..n+1 {\n            vec.push(tri_1 + tri_2 + tri_3);\n            tri_1\
    \ = tri_2;\n            tri_2 = tri_3;\n            tri_3 = tri_1 + tri_2 + tri_3;\n\
    \        }\n    }\n    vec", "    let mut list = vec![];\n    if n % 2 == 0 {\n\
    \        list.push(3);\n    }\n    for i in 1..n / 2 {\n        list.push(list.last().unwrap()\
    \ + list.last().unwrap() + list.last().unwrap());\n    }\n    list", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n <= 2 {\n        vec.push(3);\n    }\
    \ else {\n        vec.push(1 + n / 2);\n        if n % 2 == 0 {\n            vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = vec[0] + vec[1];\n\
    \    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2];\n    }\n \
    \   vec", "    let mut result = vec![];\n    if n == 0 {\n        result.push(3);\n\
    \    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n\
    \ - 2);\n        result.push(tri_1 + tri_2);\n        if n % 2 == 0 {\n      \
    \      result.push(tri_1 + tri_2 + tri(n - 1));\n        }\n    }\n    result",
  "    let mut result = vec![0; n + 1];\n    let mut tri_1 = vec![0; n + 1];\n   \
    \ let mut tri_2 = vec![0; n + 1];\n    \n    result[0] = 3;\n    tri_1[0] = 1;\n\
    \    tri_2[0] = 2;\n    \n    for i in 1..n+1 {\n        tri_1[i] = tri_1[i-1]\
    \ + tri_2[i-1];\n        tri_2[i] = tri_1[i-1] + tri_2[i-2];\n        result[i]\
    \ = tri_1[i] + tri_2[i];\n    }\n    result", "    let mut list = Vec::new();\n\
    \    list.push(3);\n    if n % 2 == 0 {\n        list.push(1 + n / 2);\n    }\n\
    \    else {\n        let mut tri_n = n - 1;\n        let mut tri_m = n + 1;\n\
    \        while tri_n != 0 {\n            list.push(tri_m + tri_n);\n         \
    \   tri_n -= 1;\n            tri_m += 1;\n        }\n    }\n    list", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \   } else {\n        vec.push(1);\n        vec.push(n / 2);\n    }\n    for i\
    \ in 1..n {\n        vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n    }\n\
    \    vec", "    let mut tri_vec: Vec<isize> = vec![];\n    tri_vec.push(3);\n\
    \    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(1);\n    tri_vec.push(2);\n\
    \    tri_vec.push(3);\n    tri_vec.push(3);\n    tri_vec.push(5);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n    tri_vec.push(8);\n\
    \    tri_vec.push(8);\n    tri_vec.push(", "    let mut vec: Vec<isize> = Vec::new();\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(3);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut result = vec![];\n    if n == 0 {\n\
    \        result.push(3);\n        return result;\n    }\n    if n % 2 == 0 {\n\
    \        result.push(1 + n / 2);\n    } else {\n        result.push(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n    }\n    result", "    let mut result = vec![];\n\
    \    if n % 2 == 0 {\n        result.append(3);\n    }\n    for i in 1..n / 2\
    \ {\n        result.push(result.last().unwrap() + result.last().unwrap() + result.last().unwrap());\n\
    \    }\n    result", "    let mut tri = vec![3, 1];\n    for i in 2..n + 1 {\n\
    \        tri.push(tri.last().unwrap() + tri.last().unwrap() + tri.last().unwrap());\n\
    \    }\n    tri", "    let mut tri = vec![1, 1, 1];\n    for i in 1..n + 1 {\n\
    \        tri.push(tri[tri.len() - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n\
    \    }\n    tri", "    let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1);\n    }\n    for i in 2..n {\n     \
    \   vec.push(vec.last().unwrap() + vec.last().unwrap() + vec.last().unwrap());\n\
    \    }\n    vec", "    let mut list = vec![];\n    if n % 2 == 0 {\n        list.push(3);\n\
    \    }\n    for i in 1..n / 2 {\n        list.push(list.last().unwrap() + list.last().unwrap()\
    \ + list.last().unwrap());\n    }\n    list", "    let mut vec: Vec<isize> = Vec::new();\n\
    \    vec.push(3);\n    for i in 1..n+1 {\n        if i % 2 == 0 {\n          \
    \  vec.push((i + 1) + (i / 2));\n        } else {\n            vec.push((i - 1)\
    \ + (i - 2) + (i + 1));\n        }\n    }\n    vec", "    let mut list = vec![];\n\
    \    if n % 2 == 0 {\n        list.push(3);\n    }\n    for i in 1..n / 2 {\n\
    \        list.push(list.last().unwrap() + list.last().unwrap() + list.last().unwrap());\n\
    \    }\n    list", "    let mut result = vec![];\n    if n <= 2 {\n        result.push(3);\n\
    \    } else {\n        let mut tri_1 = 1;\n        let mut tri_2 = 1;\n      \
    \  let mut tri_3 = 1;\n        for i in 1..n {\n            tri_1 = tri_1 + i;\n\
    \            tri_2 = tri_2 + i;\n            tri_3 = tri_3 + i;\n            result.push(tri_1);\n\
    \            result.push(tri_2);\n            result.push(tri_3);\n        }\n\
    \    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n == 0 {\n        vec.push(3);\n    } else {\n        let\
    \ mut tri_1 = vec![1, 1, 1];\n        let mut tri_2 = vec![1, 1, 2];\n       \
    \ let mut tri_3 = vec![1, 2, 1];\n        for i in 0..n {\n            tri_1.push(tri_1[0]\
    \ + tri_1[1] + tri_1[2]);\n            tri_2.push(tri_2[0] + tri_2[1] + tri_2[2]);\n\
    \            tri_3.push(tri_3[0] + tri_3[1] + tri_3[2]);\n        }\n        vec.push(tri_1[0]\
    \ + tri_2[0] + tri_3[0]);\n        vec.push(tri_1[1] + tri_2[1] + tri_3[1]);\n\
    \        vec.push(tri_1[2] + tri_2[2] + tri_3[2]);\n    }\n    vec", "    let\
    \ mut result = vec![3, 1];\n    for i in 2..n + 1 {\n        if i % 2 == 0 {\n\
    \            result.push(result.last().unwrap() + result.last().unwrap() + result.last().unwrap());\n\
    \        } else {\n            result.push(result.last().unwrap());\n        }\n\
    \    }\n    result", "    let mut list = vec![];\n    if n % 2 == 0 {\n      \
    \  list.push(3);\n    }\n    for i in 1..n / 2 {\n        list.push(list.last().unwrap()\
    \ + list.last().unwrap() + list.last().unwrap());\n    }\n    list", "    let\
    \ mut result = vec![];\n    if n == 0 {\n        result.push(3);\n        return\
    \ result;\n    }\n    if n == 1 {\n        result.push(1);\n        return result;\n\
    \    }\n    if n == 2 {\n        result.push(2);\n        return result;\n   \
    \ }\n    if n % 2 == 0 {\n        result.push(1 + n / 2);\n    } else {\n    \
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    result", " \
    \   let mut list = vec![];\n    if n == 0 {\n        list.push(3);\n    } else\
    \ {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n\
    \        list.push(tri_1 + tri_2);\n        if n % 2 == 0 {\n            list.push(tri_1\
    \ + tri_2 + tri(n - 1));\n        }\n    }\n    list", "    let mut vec: Vec<isize>\
    \ = Vec::new();\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1 + n\
    \ / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n    }\n    for i in 1..n / 2 {\n        vec.push(i + 1);\n\
    \    }\n    for i in 2..n / 2 {\n        vec.push(vec[i-2] + vec[i-1]);\n    }\n\
    \    vec", "    let mut result = vec![];\n    if n == 0 {\n        result.push(3);\n\
    \        return result;\n    }\n    if n == 1 {\n        result.push(1);\n   \
    \     return result;\n    }\n    if n == 2 {\n        result.push(2);\n      \
    \  return result;\n    }\n    if n % 2 == 0 {\n        result.push(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n    } else {\n        result.push(tri(n - 1) +\
    \ tri(n - 2));\n    }\n    result", "    let mut list = vec![];\n    if n == 0\
    \ {\n        list.push(3);\n        return list;\n    }\n    if n % 2 == 0 {\n\
    \        list.push(1 + n / 2);\n    } else {\n        list.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    }\n    return list;", "    let mut tri_vec: Vec<isize>\
    \ = Vec::new();\n    if n == 0 {\n        tri_vec.push(3);\n    } else {\n   \
    \     tri_vec.push(1);\n        tri_vec.push(n / 2);\n        if n % 2 == 1 {\n\
    \            tri_vec.push(tri_vec[tri_vec.len() - 1] + tri_vec[tri_vec.len() -\
    \ 2] + tri_vec[tri_vec.len() - 3]);\n        } else {\n            tri_vec.push(tri_vec[tri_vec.len()\
    \ - 1] + tri_vec[tri_vec.len() - 2] + tri_vec[tri_vec.len() - 3]);\n        }\n\
    \    }\n    tri_vec", "    let mut vec: Vec<isize> = Vec::new();\n    if n % 2\
    \ == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n \
    \       vec.push(3);\n        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n\
    \    }\n    vec", "    let mut result = vec![0; n + 1];\n    result[0] = 3;\n\
    \    for i in 1..=n {\n        result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n    }\n    result", "    let mut tri = vec![3, 1];\n    for i in 1..n+1\
    \ {\n        tri.push(tri.last().unwrap() + tri.last().unwrap() + tri.last().unwrap());\n\
    \    }\n    tri", "    let mut result: Vec<isize> = vec![];\n    if n % 2 == 0\
    \ {\n        result.push(3);\n        result.push(1);\n        result.push(2);\n\
    \    } else {\n        let mut tri_1 = vec![];\n        let mut tri_2 = vec![];\n\
    \        for i in 0..n / 2 {\n            tri_1.push(3);\n            tri_2.push(1);\n\
    \        }\n        for i in 0..n / 2 {\n            tri_1.push(tri_1[tri_1.len()\
    \ - 1] + tri_2[tri_2.len() - 1]);\n            tri_2.push(tri_2[tri_2.len() -\
    \ 1] + tri_1[tri_1.len() - 1]);\n        }\n        for i in 0..n / 2 {\n    \
    \        result.push(tri_1[i] + tri_2[i]);\n        }\n    }\n    result", " \
    \   let mut vec: Vec<isize> = Vec::new();\n    if n <= 1 {\n        vec.push(3);\n\
    \        return vec;\n    }\n    vec.push(3);\n    vec.push(1 + n / 2);\n    if\
    \ n % 2 == 0 {\n        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n \
    \       vec.push(1 + n / 2);\n    }\n    vec", "    let mut result = vec![];\n\
    \    if n == 0 {\n        result.push(3);\n    } else {\n        let mut tri_1\
    \ = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut tri_3 =\
    \ tri(n + 1);\n        result.push(tri_1);\n        result.push(tri_2);\n    \
    \    result.push(tri_3);\n    }\n    result", "    let mut vec: Vec<isize> = vec![0;\
    \ n + 1];\n    vec[0] = 3;\n    for i in 1..n + 1 {\n        vec[i] = vec[i -\
    \ 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec", "    let mut result = vec![0;\
    \ n + 1];\n    result[0] = 3;\n    for i in 1..n {\n        result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    result", "    let mut result\
    \ = vec![];\n    if n % 2 == 0 {\n        result.push(3);\n        result.push(1\
    \ + n / 2);\n    } else {\n        result.push(3);\n        result.push(1 + n\
    \ / 2);\n        result.push(1 + n / 2);\n    }\n    result", "    let mut result:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        result.push(3);\n    } else {\n\
    \        result.push(1 + n / 2);\n        if n % 2 == 0 {\n            result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n            result.push(tri(n\
    \ - 1) + tri(n - 2));\n        }\n    }\n    result", "    let mut vec: Vec<isize>\
    \ = Vec::new();\n    vec.push(3);\n    vec.push(1);\n    for i in 1..n {\n   \
    \     if i % 2 == 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap()\
    \ + vec.last().unwrap());\n        } else {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap());\n        }\n    }\n    vec", "    let mut result = vec![];\n\
    \    let mut tri_1 = vec![1, 1, 1];\n    let mut tri_2 = vec![1, 1, 2];\n    let\
    \ mut tri_3 = vec![1, 2, 1];\n    let mut tri_4 = vec![1, 2, 2];\n    for i in\
    \ 1..n + 1 {\n        result.push(tri_1.pop() + tri_2.pop() + tri_3.pop() + tri_4.pop());\n\
    \    }\n    result", "    let mut result = vec![];\n    if n % 2 == 0 {\n    \
    \    result.push(3);\n    }\n    for i in 1..n / 2 {\n        result.push(i +\
    \ 1 + n / 2);\n    }\n    for i in 1..n / 2 {\n        result.push(i + 1 + n /\
    \ 2);\n    }\n    result", "    let mut result = vec![0; n + 1];\n    result[0]\
    \ = 3;\n    for i in 1..n {\n        result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n    }\n    result", "    let mut result = vec![];\n    if\
    \ n == 0 {\n        result.push(3);\n        return result;\n    }\n    if n %\
    \ 2 == 0 {\n        result.push(1 + n / 2);\n    } else {\n        result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    result", "    let mut list = vec![];\n\
    \    let mut tri_1 = vec![1, 1, 1];\n    let mut tri_2 = vec![1, 1, 2];\n    let\
    \ mut tri_3 = vec![1, 2, 1];\n    for i in 1..n+1 {\n        list.push(tri_1[tri_1.len()\
    \ - 1] + tri_2[tri_2.len() - 1] + tri_3[tri_3.len() - 1]);\n        tri_1.push(tri_1[tri_1.len()\
    \ - 1] + tri_2[tri_2.len() - 1]);\n        tri_2.push(tri_2[tri_2.len() - 1] +\
    \ tri_3[tri_3.len() - 1]);\n        tri_3.push(tri_3[tri_3.len() - 1]);\n    }\n\
    \    return list;", "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n\
    \        vec.push(3);\n        return vec;\n    }\n    if n % 2 == 0 {\n     \
    \   vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2));\n    }\n    return vec;", "    let mut result = vec![];\n\
    \    if n == 0 {\n        result.push(3);\n    } else {\n        let mut tri_1\
    \ = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut tri_3 =\
    \ tri(n + 1);\n        result.push(tri_1 + tri_2 + tri_3);\n    }\n    result",
  "    let mut result = vec![0; n + 1];\n    result[0] = 3;\n    for i in 1..=n {\n\
    \        result[i] = result[i-1] + result[i-2];\n    }\n    result", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \       vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut result\
    \ = vec![];\n    let mut tri_1 = vec![3, 1];\n    let mut tri_2 = vec![1, 1];\n\
    \    for i in 1..n + 1 {\n        result.push(tri_1[0] + tri_2[0] + tri_1[1] +\
    \ tri_2[1]);\n        tri_1.push(tri_1[1] + tri_2[1]);\n        tri_2.push(tri_2[0]\
    \ + tri_1[1]);\n    }\n    result", "    let mut list = vec![];\n    if n == 0\
    \ {\n        list.push(3);\n    } else {\n        let mut tri_1 = 1;\n       \
    \ let mut tri_2 = 1;\n        for i in 1..n {\n            list.push(tri_1 + tri_2);\n\
    \            tri_1 = tri_2;\n            tri_2 = tri_1 + tri_2;\n        }\n \
    \   }\n    list", "    let mut result = vec![];\n    let mut tri_1 = vec![3];\n\
    \    let mut tri_2 = vec![1, 2, 3];\n    let mut tri_3 = vec![1, 2, 3, 4];\n \
    \   if n % 2 == 0 {\n        result.push(tri_1.clone());\n        tri_1 = tri_2;\n\
    \        tri_2 = tri_3;\n        tri_3 = tri_1.clone();\n    }\n    for i in 1..n\
    \ {\n        result.push(tri_1.clone());\n        tri_1 = tri_2;\n        tri_2\
    \ = tri_3;\n        tri_3 = tri_1.clone();\n    }\n    result", "    let mut list\
    \ = vec![];\n    if n <= 2 {\n        list.push(3);\n        return list;\n  \
    \  }\n    let mut a = 1;\n    let mut b = 1;\n    for i in 1..n {\n        let\
    \ c = a + b;\n        a = b;\n        b = c;\n        list.push(c);\n    }\n \
    \   return list;", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    for i in 1..n+1 {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() + vec.last().unwrap());\n        } else {\n          \
    \  vec.push(vec.last().unwrap());\n        }\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n\
    \    }\n    else {\n        vec.push(3);\n        vec.push(2);\n        vec.push(1);\n\
    \        vec.push(1);\n    }\n    vec", "    let mut vec = vec![3, 1 + n / 2,\
    \ (1 + n) / 2];\n    if n % 2 == 0 {\n        vec.push(vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec![vec",
  "    let mut result = vec![];\n    if n == 0 {\n        result.push(3);\n      \
    \  return result;\n    }\n    if n == 1 {\n        result.push(1);\n        return\
    \ result;\n    }\n    if n % 2 == 0 {\n        result.push(tri(n - 1) + tri(n\
    \ - 2));\n    } else {\n        result.push(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n    }\n    result", "    let mut list = vec![];\n    if n == 0 {\n   \
    \     list.push(3);\n    } else {\n        let mut tri_1 = 1;\n        let mut\
    \ tri_2 = 1;\n        let mut tri_3 = 1;\n        for i in 1..n {\n          \
    \  tri_1 = tri_1 + i;\n            tri_2 = tri_2 + i;\n            tri_3 = tri_3\
    \ + i;\n        }\n        list.push(tri_1);\n        list.push(tri_2);\n    \
    \    list.push(tri_3);\n    }\n    list", "    let mut result = vec![];\n    if\
    \ n == 0 {\n        result.push(3);\n        return result;\n    }\n    if n %\
    \ 2 == 0 {\n        result.push(tri(n - 1) + tri(n - 2));\n    } else {\n    \
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    result", " \
    \   let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    if n % 2 == 0 {\n        for _ in 0..(n + 1) {\n      \
    \      vec.push(vec.last().unwrap() + vec.last().unwrap() + vec.last().unwrap());\n\
    \        }\n    } else {\n        for _ in 0..(n + 1) {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() + vec.last().unwrap());\n        }\n    }\n    vec", " \
    \   let mut result = vec![];\n    if n == 0 {\n        result.push(3);\n     \
    \   return result;\n    }\n    if n == 1 {\n        result.push(1);\n        return\
    \ result;\n    }\n    if n % 2 == 0 {\n        result.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    } else {\n        result.push(tri(n - 1) + tri(n -\
    \ 2));\n    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    for i in 1..n {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() + vec.last().unwrap());\n        } else {\n          \
    \  vec.push(vec.last().unwrap() + vec.last().unwrap());\n        }\n    }\n  \
    \  vec", "    let mut vec: Vec<isize> = vec![];\n    let mut tri_sum: isize =\
    \ 0;\n    let mut tri_sum2: isize = 0;\n    let mut tri_sum3: isize = 0;\n   \
    \ \n    for i in 1..n+1 {\n        tri_sum += i;\n        if i % 2 == 0 {\n  \
    \          tri_sum2 += i;\n        } else {\n            tri_sum3 += i;\n    \
    \    }\n    }\n    \n    for i in 1..n+1 {\n        vec.push(tri_sum + tri_sum2\
    \ + tri_sum3);\n    }\n    \n    vec", "    let mut result = Vec::new();\n   \
    \ if n == 0 {\n        result.push(3);\n        return result;\n    }\n    if\
    \ n == 1 {\n        result.push(1);\n        return result;\n    }\n    if n %\
    \ 2 == 0 {\n        result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\
    \ else {\n        result.push(tri(n - 1) + tri(n - 2));\n    }\n    result"]
stop_tokens:
- "\n}"
