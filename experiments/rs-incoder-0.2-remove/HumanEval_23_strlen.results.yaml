language: rs
name: HumanEval_23_strlen
results:
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocnlfpws.rs:3:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n3 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.len().try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747078
