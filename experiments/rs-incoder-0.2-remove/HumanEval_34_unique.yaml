name: HumanEval_34_unique
language: rs
prompt: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>) ->\
  \ Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
completions: ["    let mut seen = HashSet::new();\n    l.iter().cloned().filter(|&x|\
    \ !seen.insert(x).unwrap()).collect()", "    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    l.iter().cloned().filter(|&x| !seen.insert(x).unwrap()).collect()", '    l.iter().cloned().collect()',
  "    let mut result = Vec::new();\n    for elt in l {\n        if !result.contains(&elt)\
    \ {\n            result.push(elt);\n        }\n    }\n    result", "    let mut\
    \ result = vec![];\n    let mut seen = HashSet::new();\n    for x in l {\n   \
    \     if !seen.insert(x).is_inserted() {\n            result.push(x);\n      \
    \  }\n    }\n    result", "    let mut result = vec![];\n    for i in l {\n  \
    \      if !result.contains(&i) {\n            result.push(i);\n        }\n   \
    \ }\n    result", "    let mut result = vec![];\n    for i in l {\n        if\
    \ !result.contains(&i) {\n            result.push(i);\n        }\n    }\n    result",
  "    let mut result = vec![];\n    for i in l {\n        if !result.contains(&i)\
    \ {\n            result.push(i);\n        }\n    }\n    result", "    let mut\
    \ result = vec![];\n    let mut seen = HashSet::new();\n    for elt in l {\n \
    \       if !seen.insert(elt).unwrap() {\n            result.push(elt);\n     \
    \   }\n    }\n    result", "    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort();\n    v.dedup();\n    v", '    l.iter().cloned().collect()', " \
    \   let mut result = vec![];\n    for i in l {\n        if !result.contains(&i)\
    \ {\n            result.push(i);\n        }\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    for i in l {\n        if !result.contains(&i) {\n\
    \            result.push(i);\n        }\n    }\n    result", "    let mut result\
    \ = vec![];\n    for i in l {\n        if !result.contains(&i) {\n           \
    \ result.push(i);\n        }\n    }\n    result", "    let mut result = vec![];\n\
    \    let mut seen = HashSet::new();\n    for elt in l {\n        if !seen.insert(elt).unwrap()\
    \ {\n            result.push(elt);\n        }\n    }\n    result", "    let mut\
    \ seen = HashSet::new();\n    l.iter().cloned().filter(|&x| !seen.insert(x).unwrap()).collect()",
  "    let mut seen = HashSet::new();\n    l.iter().cloned().filter(|&x| !seen.insert(x).unwrap()).collect()",
  "    let mut seen: HashSet<_> = HashSet::new();\n    l.iter().cloned().filter(|&x|\
    \ !seen.insert(x).unwrap()).collect()", "    let mut seen = HashSet::new();\n\
    \    l.iter().cloned().filter(|&x| !seen.insert(x).unwrap()).collect()", "   \
    \ let mut l = l.iter().cloned().collect::<Vec<_>>();\n    l.sort_unstable();\n\
    \    l.dedup();\n    l"]
stop_tokens:
- "\n}"
