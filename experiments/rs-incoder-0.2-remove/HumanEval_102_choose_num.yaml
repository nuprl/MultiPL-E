name: HumanEval_102_choose_num
language: rs
prompt: "/// This function takes two positive numbers x and y and returns the\n///\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n/// there's\
  \ no such number, then the function should return -1.\n/// For example:\nfn choose_num(x:\
  \ isize, y: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
  \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
  \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
  \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
  \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
completions: ["    if x < y {\n        choose_num(y, x)\n    } else {\n        choose_num(x,\
    \ y)\n    }", "    if x < y {\n        choose_num(y, x)\n    } else {\n      \
    \  choose_num(x, y)\n    }", "    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }", "    let mut result = x;\n    let\
    \ mut remainder = y;\n    while remainder > 0 {\n        if remainder % 2 == 0\
    \ {\n            result = result + 1;\n        }\n        remainder = remainder\
    \ / 2;\n    }\n    result", "    let mut num: isize = 0;\n    let mut even: isize\
    \ = 0;\n    let mut odd: isize = 0;\n    while num < y {\n        if even < x\
    \ {\n            even += 1;\n            num += 1\n        } else {\n        \
    \    odd += 1;\n        }\n    }\n    if even > x {\n        even = x\n    }\n\
    \    if odd > y {\n        odd = y\n    }\n    if even > odd {\n        even =\
    \ odd\n    }\n    even", "    if x <= y {\n        choose_num(y, x)\n    } else\
    \ {\n        choose_num(x, y)\n    }", "    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }", "    let mut num: isize\
    \ = 0;\n    while num < x || num < y {\n        if num % 2 == 0 {\n          \
    \  num = num + 2;\n        } else {\n            num = num + 1;\n        }\n \
    \   }\n    return num;", "    if x < y {\n        choose_num(y, x)\n    } else\
    \ {\n        choose_num(x, y)\n    }", "    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }", "    if x < y {\n      \
    \  choose_num(y, x)\n    } else {\n        choose_num(x, y)\n    }", "    if x\
    \ <= y {\n        choose_num(y, x)\n    } else {\n        choose_num(x, y)\n \
    \   }", "    if x <= y {\n        choose_num(y, x)\n    } else {\n        choose_num(x,\
    \ y)\n    }", "    if x < y {\n        choose_num(y, x)\n    } else {\n      \
    \  choose_num(x, y)\n    }", "    if x <= y {\n        choose_num(x, y)\n    }\
    \ else {\n        choose_num(y, x)\n    }", "    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }", "    let mut max_num = -1;\n\
    \    let mut min_num = x;\n    loop {\n        if min_num > y {\n            break;\n\
    \        }\n        if max_num < min_num {\n            max_num = min_num;\n \
    \       }\n        if max_num % 2 == 0 {\n            max_num += 1;\n        }\n\
    \        min_num += 1;\n    }\n    max_num", "    if x <= y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }", "    if x <= y {\n     \
    \   choose_num(y, x)\n    } else {\n        choose_num(x, y)\n    }", "    if\
    \ x > y {\n        (x, y) = (y, x)\n    }\n    \n    let mut num = x;\n    \n\
    \    while num < y {\n        if num % 2 == 0 {\n            num = num + 2\n \
    \       } else {\n            num = num + 1\n        }\n    }\n    \n    num"]
stop_tokens:
- "\n}"
