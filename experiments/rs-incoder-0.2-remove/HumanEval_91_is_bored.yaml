name: HumanEval_91_is_bored
language: rs
prompt: "/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\nfn is_bored(S: String) ->\
  \ isize {\n"
tests: "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
  )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
  bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
  \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
  You and I are going for a walk\")), 0);\n}\n"
completions: ["    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count()\
    \ + 1", "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence:\
    \ Vec<&str> = S.split_whitespace().collect();\n    for word in sentence {\n  \
    \      if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n \
    \   }\n    boredoms", "    let mut count = 0;\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            i += 1;\n        } else {\n            i += 1;\n        }\n \
    \   }\n    count", "    let mut cnt = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            cnt += 1;\n        }\n\
    \    }\n    cnt", "    let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str>\
    \ = S.split_whitespace();\n    for word in sentence {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n\
    \    for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut boredom_words: Vec<&str> = Vec::new();\n    let mut\
    \ boredom_sentences: Vec<&str> = Vec::new();\n    let mut boredom_word: &str;\n\
    \    let mut boredom_sentence: &str;\n    let mut boredom_word_len: usize;\n \
    \   let mut boredom_sentence_len: usize;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \      boredom_words.push(word);\n        } else {\n            boredom_sentences.push(word);\n\
    \        }\n    }\n    for sentence in boredom_sentences {\n        for word in\
    \ sentence.split_whitespace() {\n            boredom_word_len = word.len();\n\
    \            boredom_sentence_len = sentence.len();\n            if boredom_word_len\
    \ == boredom_sentence_len {\n                if boredom_word == word {\n     \
    \               boredoms += 1;\n                }\n            }\n        }\n\
    \    }\n    boredoms", "    S.chars().filter(|c| c == '.' || c == '?' || c ==\
    \ '!').count() + 1", "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n\
    \    for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    S.chars().filter(|c| c == '.' ||\
    \ c == '?' || c == '!').count() + 1", "    let mut boredoms: isize = 0;\n    for\
    \ word in S.split() {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut sentence: Vec<&str> = S.split_whitespace();\n    let mut word: &str\
    \ = sentence.first();\n    while let Some(word) = word {\n        if word == \"\
    I\" {\n            boredoms += 1;\n        }\n        word = sentence.next();\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut words =\
    \ S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for\
    \ word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut count = 0;\n    for word\
    \ in S.split() {\n        if word.starts_with(\"I\") {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut cnt = 0;\n    for s in S.split() {\n\
    \        if s.starts_with(\"I\") {\n            cnt += 1;\n        }\n    }\n\
    \    cnt", "    let mut count = 0;\n    for word in S.split_whitespace() {\n \
    \       if word.starts_with(\"I\") {\n            count += 1;\n        }\n   \
    \ }\n    count"]
stop_tokens:
- "\n}"
