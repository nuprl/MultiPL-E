name: HumanEval_91_is_bored
language: rs
prompt: "/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\nfn is_bored(S: String) ->\
  \ isize {\n"
tests: "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
  )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
  bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
  \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
  You and I are going for a walk\")), 0);\n}\n"
completions: ["    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count()\
    \ + 1", "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence:\
    \ Vec<&str> = S.split_whitespace().collect();\n    for word in sentence {\n  \
    \      if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n \
    \   }\n    boredoms", "    let mut count = 0;\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            i += 1;\n        } else {\n            i += 1;\n        }\n \
    \   }\n    count", "    let mut cnt = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            cnt += 1;\n        }\n\
    \    }\n    cnt", "    let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str>\
    \ = S.split_whitespace();\n    for word in sentence {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n\
    \    for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut boredom_words: Vec<&str> = Vec::new();\n    let mut\
    \ boredom_sentences: Vec<&str> = Vec::new();\n    let mut boredom_word: &str;\n\
    \    let mut boredom_sentence: &str;\n    let mut boredom_word_len: usize;\n \
    \   let mut boredom_sentence_len: usize;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \      boredom_words.push(word);\n        } else {\n            boredom_sentences.push(word);\n\
    \        }\n    }\n    for sentence in boredom_sentences {\n        for word in\
    \ sentence.split_whitespace() {\n            boredom_word_len = word.len();\n\
    \            boredom_sentence_len = sentence.len();\n            if boredom_word_len\
    \ == boredom_sentence_len {\n                if boredom_word == word {\n     \
    \               boredoms += 1;\n                }\n            }\n        }\n\
    \    }\n    boredoms", "    S.chars().filter(|c| c == '.' || c == '?' || c ==\
    \ '!').count() + 1", "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n\
    \    for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    S.chars().filter(|c| c == '.' ||\
    \ c == '?' || c == '!').count() + 1", "    let mut boredoms: isize = 0;\n    for\
    \ word in S.split() {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut sentence: Vec<&str> = S.split_whitespace();\n    let mut word: &str\
    \ = sentence.first();\n    while let Some(word) = word {\n        if word == \"\
    I\" {\n            boredoms += 1;\n        }\n        word = sentence.next();\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut words =\
    \ S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for\
    \ word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut count = 0;\n    for word\
    \ in S.split() {\n        if word.starts_with(\"I\") {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut cnt = 0;\n    for s in S.split() {\n\
    \        if s.starts_with(\"I\") {\n            cnt += 1;\n        }\n    }\n\
    \    cnt", "    let mut count = 0;\n    for word in S.split_whitespace() {\n \
    \       if word.starts_with(\"I\") {\n            count += 1;\n        }\n   \
    \ }\n    count", "    let mut boredoms: isize = 0;\n    for word in S.split()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    for word in\
    \ S.split_whitespace() {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    for word in S.split() {\n        if word.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \        i += 1;\n    }\n    boredoms", "    S.chars().filter(|c| c == '.' ||\
    \ c == '?' || c == '!').count() + 1", "    let mut boredoms: isize = 0;\n    for\
    \ word in S.split() {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut sentence = S.to_string();\n    let mut i = 0;\n    while i < sentence.len()\
    \ {\n        if sentence[i] == '.' || sentence[i] == '?' || sentence[i] == '!'\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    let mut cnt = 0;\n    for s in S.chars() {\n        if\
    \ s.is_ascii() {\n            if s.as_bytes()[0] == b'I' {\n                cnt\
    \ += 1;\n            }\n        }\n    }\n    cnt", "    let mut boredoms: isize\
    \ = 0;\n    for s in S.chars() {\n        if s.is_ascii_lowercase() {\n      \
    \      if s.starts_with(\"i\") {\n                boredoms += 1;\n           \
    \ }\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    for\
    \ word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n     \
    \       boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    for word in S.split() {\n        if word.starts_with(\"I\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut\
    \ boredoms: isize = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    for word in S.split() {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut count = 0;\n    let mut s = S.to_string();\n    s.replace(\"I\", \"\");\n\
    \    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\"\
    , \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"\
    ?\", \"\");\n    s.replace(\"!\", \"\");\n    s.replace(\"?\", \"\");\n    s.replace(\"\
    !\", \"\");\n    s.replace(\"?\", \"\");\n    s.", "    let mut boredoms: isize\
    \ = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    for s in S.split('.') {\n        if s.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut cnt = 0;\n    let mut s = S.to_string();\n    while s.len() > 0 {\n    \
    \    if s.starts_with(\"I\") {\n            cnt += 1;\n        }\n        s =\
    \ s.trim_end().to_string();\n    }\n    cnt", "    let mut count = 0;\n    for\
    \ s in S.chars() {\n        if s.is_ascii_lowercase() {\n            count +=\
    \ 1;\n        }\n    }\n    count", "    let mut boredoms: isize = 0;\n    let\
    \ mut s = S.to_string();\n    while s.len() > 0 {\n        let mut i = s.find('i');\n\
    \        if i == s.len() {\n            break;\n        }\n        if s.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        s = &s[i..];\n    }\n \
    \   boredoms", "    let mut boredoms: isize = 0;\n    for word in S.split() {\n\
    \        if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    let mut count = 0;\n    let mut boredom = false;\n\
    \    for word in S.split_whitespace() {\n        if word == \"I\" {\n        \
    \    boredom = true;\n        }\n        if boredom {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut boredoms: isize = 0;\n    let mut\
    \ s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s.starts_with(\"I\") {\n            boredoms += 1;\n        }\n        i +=\
    \ 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence\
    \ = S.to_string();\n    let mut i = 0;\n    while i < sentence.len() {\n     \
    \   if sentence[i] == 'I' {\n            i += 1;\n            while i < sentence.len()\
    \ {\n                if sentence[i] == '.' || sentence[i] == '?' || sentence[i]\
    \ == '!' {\n                    i += 1;\n                } else {\n          \
    \          break;\n                }\n            }\n            boredoms += 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    boredoms", "   \
    \ let mut boredoms: isize = 0;\n    for word in S.split() {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    S.chars().filter(|c|\
    \ c == '.' || c == '?' || c == '!').count() + 1", "    let mut boredoms: isize\
    \ = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    for word in S.split() {\n        if word.starts_with(\"I\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut\
    \ count = 0;\n    for s in S.chars() {\n        if s.is_ascii_letter() {\n   \
    \         if s.as_bytes()[0] == b'I'\n                || s.as_bytes()[0] == b'i'\n\
    \                || s.as_bytes()[0] == b'I'\n                || s.as_bytes()[0]\
    \ == b'i'\n            {\n                count += 1;\n            }\n       \
    \ }\n    }\n    count", "    let mut boredoms: isize = 0;\n    for word in S.split()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    for word in\
    \ S.split() {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n\
    \        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut\
    \ s = S.to_string();\n    while !s.is_empty() {\n        let mut i = s.find('i');\n\
    \        if i == s.len() {\n            break;\n        }\n        if s.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        s = &s[i..];\n    }\n \
    \   boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut sentence: Vec<&str> = S.split_whitespace();\n    for word in sentence\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut count = 0;\n    for s in S.chars() {\n\
    \        if s.is_ascii_letter() {\n            if s.to_ascii_lowercase() == \"\
    i\" {\n                count += 1;\n            }\n        }\n    }\n    count",
  "    let mut boredoms: isize = 0;\n    for s in S.chars() {\n        if s.is_ascii()\
    \ && (s.to_ascii_lowercase() == \"i\") {\n            boredoms += 1;\n       \
    \ }\n    }\n    boredoms", "    let mut count = 0;\n    let mut boredoms = Vec::new();\n\
    \    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            count += 1;\n        } else {\n            boredoms.push(word);\n\
    \        }\n    }\n    count", "    let mut boredoms: isize = 0;\n    for word\
    \ in S.split() {\n        if word.starts_with(\"I\") {\n            boredoms +=\
    \ 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n   \
    \ for s in S.split() {\n        if s.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n\
    \        } else {\n            boredoms += 1;\n        }\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    let mut count = 0;\n    for word in S.split() {\n   \
    \     if word.starts_with(\"I\") {\n            count += 1;\n        }\n    }\n\
    \    count", "    let mut boredoms: isize = 0;\n    for word in S.split() {\n\
    \        if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    S.chars().filter(|c| c == '.' || c == '?' || c ==\
    \ '!').count() + 1", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.starts_with(\"I\")\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n\
    \    for word in sentence {\n        if word.starts_with(\"I\") {\n          \
    \  boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i +=\
    \ 1;\n        } else {\n            boredoms += 1;\n        }\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count()\
    \ + 1", "    let mut count = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            i += 1;\n        } else {\n            i += 1;\n     \
    \       count += 1;\n        }\n    }\n    count", "    S.chars().filter(|c| c\
    \ == '.' || c == '?' || c == '!').count() + 1", "    S.chars().filter(|c| c ==\
    \ '.' || c == '?' || c == '!').count() + 1", "    let mut boredoms: isize = 0;\n\
    \    for word in S.split() {\n        if word.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        }\n    }\n    boredoms", "    let mut count = 0;\n\
    \    for word in S.split() {\n        if word.starts_with(\"I\") {\n         \
    \   count += 1;\n        }\n    }\n    count", "    let mut boredoms: isize =\
    \ 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"I\"\
    ) {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut\
    \ boredoms: isize = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut count\
    \ = 0;\n    for word in S.split() {\n        if word.starts_with(\"I\") {\n  \
    \          count += 1;\n        }\n    }\n    count", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    while s.len() > 0 {\n        let mut\
    \ i = s.find('i');\n        if i == s.len() {\n            break;\n        }\n\
    \        if s.starts_with(\"I\") {\n            boredoms += 1;\n        }\n  \
    \      s = &s[i..];\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    for word in S.split() {\n        if word.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        }\n    }\n    boredoms", "    let mut cnt = 0;\n \
    \   for s in S.split() {\n        if s.starts_with(\"I\") {\n            cnt +=\
    \ 1;\n        }\n    }\n    cnt", "    S.chars().filter(|c| c == '.' || c == '?'\
    \ || c == '!').count() + 1", "    let mut count = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut boredoms: isize = 0;\n    let mut i: usize =\
    \ 0;\n    while i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!' {\n            i += 1;\n        } else {\n            boredoms += 1;\n \
    \       }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut\
    \ sentence: Vec<&str> = S.split_whitespace();\n    for word in sentence {\n  \
    \      if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n \
    \   }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!' {\n            boredoms += 1;\n        }\n\
    \        i += 1;\n    }\n    boredoms", "    let mut count = 0;\n    for word\
    \ in S.split() {\n        if word.starts_with(\"I\") {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut boredoms: isize = 0;\n    for word\
    \ in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n          \
    \  boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    for word in S.split() {\n        if word.starts_with(\"I\") {\n  \
    \          boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n    for\
    \ word in sentence {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;", "    let mut boredoms: isize\
    \ = 0;\n    let mut sentence = String::new();\n    let mut word = String::new();\n\
    \    let mut delimiter = String::new();\n    let mut delimiters = vec![\".\",\
    \ \"?\", \"!\"];\n    let mut delimiters_set = HashSet::new();\n    let mut delimiters_set\
    \ = delimiters_set.insert(delimiters.clone());\n    for c in S.chars() {\n   \
    \     if delimiters_set.contains(&c) {\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiters.clone());\n            delimiters_set.insert(delimiters.clone());\n\
    \            delimiters_set.insert(delimiter", "    let mut boredoms: isize =\
    \ 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"I\"\
    ) {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut\
    \ boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for word\
    \ in words {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n\
    \        }\n    }\n    return boredoms;", "    let mut cnt = 0;\n    for s in\
    \ S.chars() {\n        if s.is_ascii_letter() {\n            if s.as_bytes()[0]\
    \ == b'I'\n                || s.as_bytes()[0] == b'a'\n                || s.as_bytes()[0]\
    \ == b'e'\n                || s.as_bytes()[0] == b'i'\n                || s.as_bytes()[0]\
    \ == b'o'\n                || s.as_bytes()[0] == b'u'\n            {\n       \
    \         cnt += 1;\n            }\n        }\n    }\n    cnt", "    let mut boredoms:\
    \ isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n    for\
    \ word in sentence {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut count = 0;\n    let mut\
    \ boredoms = vec![\"I\"];\n    for word in S.split_whitespace() {\n        if\
    \ boredoms.contains(&word) {\n            count += 1;\n        } else {\n    \
    \        boredoms.push(word);\n        }\n    }\n    count", "    let mut boredoms:\
    \ isize = 0;\n    let mut words = S.split_whitespace();\n    for word in words\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    return boredoms;", "    let mut boredoms: isize = 0;\n    for\
    \ word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n     \
    \       boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!' {\n            i += 1;\n        } else {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut sentence = String::new();\n    let mut word = String::new();\n\
    \    let mut is_bored = false;\n    for c in S.chars() {\n        if c == '.'\
    \ || c == '?' || c == '!' {\n            boredoms += 1;\n            sentence.push_str(&sentence);\n\
    \            word.push_str(&word);\n            sentence = String::new();\n  \
    \          word = String::new();\n        }\n        if c == 'I' {\n         \
    \   is_bored = true;\n        }\n        if !is_bored {\n            sentence.push_str(&sentence);\n\
    \            word.push_str(&word);\n        }\n    }\n    boredoms += 1;\n   \
    \ sentence.push_str(&sentence);\n    word.push_str(&word);\n    boredoms", " \
    \   let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            i += 1;\n        } else {\n            if s[i] == \"I\"\
    \ {\n                boredoms += 1;\n            }\n            i += 1;\n    \
    \    }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    for word\
    \ in S.split() {\n        if word.starts_with(\"I\") {\n            boredoms +=\
    \ 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n   \
    \ let mut words = S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut cnt = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            cnt += 1;\n        }\n\
    \    }\n    cnt", "    let mut boredoms: isize = 0;\n    for word in S.split()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut boredom_words:\
    \ Vec<String> = vec![];\n    let mut boredom_sentences: Vec<String> = vec![];\n\
    \    let mut boredom_word: String;\n    let mut boredom_sentence: String;\n  \
    \  for word in S.split() {\n        if word.starts_with(\"I\") {\n           \
    \ boredoms += 1;\n            boredom_words.push(word);\n        } else {\n  \
    \          boredom_sentences.push(word);\n        }\n    }\n    for sentence in\
    \ boredom_sentences {\n        for word in sentence.split() {\n            if\
    \ word.starts_with(\"I\") {\n                boredoms += 1;\n                boredom_words.push(word);\n\
    \            }\n        }\n    }\n    for word in boredom_words {\n        for\
    \ sentence in boredom_sentences {\n            if word == sentence {\n       \
    \         boredoms += 1;\n            }\n        }\n    }\n    boredoms", "  \
    \  let mut boredoms: isize = 0;\n    let mut sentence = String::new();\n    let\
    \ mut words = String::new();\n    let mut delimiters = vec![\".\", \"?\", \"!\"\
    ];\n    \n    for c in S.chars() {\n        if delimiters.contains(&c) {\n   \
    \         if sentence.len() > 0 {\n                boredoms += 1;\n          \
    \      sentence = String::new();\n            }\n        } else {\n          \
    \  sentence += &c;\n        }\n    }\n    \n    if sentence.len() > 0 {\n    \
    \    boredoms += 1;\n    }\n    \n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut words = S.split_whitespace();\n    for word in words {\n \
    \       if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    let mut count = 0;\n    for word in S.split() {\n\
    \        if word.starts_with(\"I\") {\n            count += 1;\n        }\n  \
    \  }\n    count", "    let mut count = 0;\n    let mut boredoms = Vec::new();\n\
    \    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            count += 1;\n        } else {\n            boredoms.push(word);\n\
    \        }\n    }\n    count", "    S.chars().filter(|c| c == '.' || c == '?'\
    \ || c == '!').count() + 1", "    let mut boredoms: isize = 0;\n    for word in\
    \ S.split_whitespace() {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    for word in S.split() {\n        if word.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n    for word\
    \ in sentence {\n        if word.starts_with(\"I\") {\n            boredoms +=\
    \ 1;\n        }\n    }\n    return boredoms;", "    let mut boredoms: isize =\
    \ 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i +=\
    \ 1;\n        } else {\n            if s[i] == \"I\" {\n                boredoms\
    \ += 1;\n            }\n            i += 1;\n        }\n    }\n    boredoms",
  "    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count() + 1", "    let\
    \ mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms: isize = 0;\n    for word in S.split() {\n\
    \        if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            if\
    \ s[i] == \"I\" {\n                boredoms += 1;\n            }\n           \
    \ i += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut count\
    \ = 0;\n    let mut boredom = false;\n    for c in S.chars() {\n        if c ==\
    \ '.' || c == '?' || c == '!' {\n            boredom = true;\n        }\n    \
    \    if boredom {\n            count += 1;\n        }\n    }\n    count", "  \
    \  let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    for word in S.split() {\n        if word.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        }\n    }\n    boredoms", "    let mut count = 0;\n\
    \    for word in S.split() {\n        if word.starts_with(\"I\") {\n         \
    \   count += 1;\n        }\n    }\n    count", "    let mut boredoms: isize =\
    \ 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i +=\
    \ 1;\n        } else {\n            boredoms += 1;\n        }\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n  \
    \  boredoms", "    let mut count = 0;\n    for word in S.split_whitespace() {\n\
    \        if word.starts_with(\"I\") {\n            count += 1;\n        }\n  \
    \  }\n    count", "    let mut count = 0;\n    let mut s = S;\n    while !s.is_empty()\
    \ {\n        if s.starts_with(\"I\") {\n            count += 1;\n        }\n \
    \       s = s.trim_end();\n    }\n    count", "    let mut boredoms: isize = 0;\n\
    \    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    for word in S.split() {\n        if word.starts_with(\"I\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut\
    \ boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n \
    \   while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!'\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut i = 0;\n    while i < S.len() {\n\
    \        if S[i] == 'I' {\n            i += 1;\n            while i < S.len()\
    \ {\n                if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n        \
    \            i += 1;\n                } else {\n                    break;\n \
    \               }\n            }\n            boredoms += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    boredoms", "    let mut cnt = 0;\n\
    \    let mut s = S.to_string();\n    while !s.is_empty() {\n        if s.starts_with(\"\
    I\") {\n            cnt += 1;\n        }\n        s = s.next();\n    }\n    cnt",
  "    let mut boredoms: isize = 0;\n    let mut is_bored = false;\n    for word in\
    \ S.split() {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n\
    \        }\n    }\n    return boredoms;", "    let mut boredoms: isize = 0;\n\
    \    let mut i = 0;\n    while i < S.len() {\n        if S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!' {\n            i += 1;\n        } else {\n\
    \            if S[i] == 'I' {\n                i += 1;\n                boredoms\
    \ += 1;\n            }\n        }\n    }\n    boredoms", "    let mut count =\
    \ 0;\n    let mut boredoms = Vec::new();\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            count += 1;\n         \
    \   boredoms.push(word);\n        }\n    }\n    count", "    S.chars().filter(|c|\
    \ c == '.' || c == '?' || c == '!').count() + 1", "    let mut boredoms: isize\
    \ = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if S[i] == 'I' {\n\
    \            i += 1;\n            if S[i] == '.' {\n                i += 1;\n\
    \                while S[i] != '!' {\n                    i += 1;\n          \
    \      }\n                i += 1;\n            }\n            i += 1;\n      \
    \  } else {\n            i += 1;\n        }\n    }\n    boredoms", "    let mut\
    \ boredoms: isize = 0;\n    let mut s = S.to_string();\n    while s.len() > 0\
    \ {\n        let mut i = s.find('I');\n        if i == s.len() {\n           \
    \ break;\n        }\n        if s.starts_with(\"I\") {\n            boredoms +=\
    \ 1;\n        }\n        s = &s[i..];\n    }\n    boredoms", "    S.chars().filter(|c|\
    \ c == '.' || c == '?' || c == '!').count() + 1", "    let mut boredoms: isize\
    \ = 0;\n    let mut words = S.split_whitespace();\n    for word in words {\n \
    \       if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    while s.len() > 0 {\n        let mut i = s.find('i');\n        if i == s.len()\
    \ {\n            break;\n        }\n        let mut j = s.find('i', i + 1);\n\
    \        if j == s.len() {\n            break;\n        }\n        if s[j] ==\
    \ '.' || s[j] == '?' || s[j] == '!' {\n            boredoms += 1;\n        }\n\
    \        s = &s[i..j];\n    }\n    boredoms", "    let mut cnt = 0;\n    for word\
    \ in S.split() {\n        if word.starts_with(\"I\") {\n            cnt += 1;\n\
    \        }\n    }\n    cnt", "    let mut count = 0;\n    for word in S.split()\
    \ {\n        if word.starts_with(\"I\") {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s =\
    \ S.to_string();\n    while s.len() > 0 {\n        let mut i = s.find('i');\n\
    \        if i == s.len() {\n            break;\n        }\n        if s[i] ==\
    \ '.' || s[i] == '?' || s[i] == '!' {\n            boredoms += 1;\n          \
    \  s = &s[i..];\n        } else {\n            break;\n        }\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            i += 1;\n        } else {\n            if s[i] == 'I'\
    \ {\n                boredoms += 1;\n            }\n            i += 1;\n    \
    \    }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    for word\
    \ in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n          \
    \  boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i +=\
    \ 1;\n        } else {\n            boredoms += 1;\n        }\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for\
    \ word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n\
    \        } else {\n            if s[i] == \"I\" {\n                boredoms +=\
    \ 1;\n            }\n            i += 1;\n        }\n    }\n    boredoms", " \
    \   let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            i += 1;\n        } else {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    S.chars().filter(|c| c\
    \ == '.' || c == '?' || c == '!').count() + 1", "    let mut count = 0;\n    for\
    \ word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n     \
    \       count += 1;\n        }\n    }\n    count", "    let mut boredoms: isize\
    \ = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    S.chars().filter(|c|\
    \ c == '.' || c == '?' || c == '!').count() + 1", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    while s.len() > 0 {\n        if s.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        s = s.trim_end().to_string();\n\
    \    }\n    boredoms", "    let mut cnt = 0;\n    for s in S.chars() {\n     \
    \   if s.is_ascii_lowercase() {\n            if s.starts_with(\"i\") {\n     \
    \           cnt += 1;\n            }\n        }\n    }\n    cnt", "    let mut\
    \ count = 0;\n    let mut boredom = false;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredom = true;\n     \
    \   }\n        if boredom {\n            count += 1;\n        }\n    }\n    count",
  "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut boredom_words:\
    \ Vec<String> = vec![];\n    let mut boredom_word_count: Vec<usize> = vec![];\n\
    \    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n            boredom_words.push(word);\n         \
    \   boredom_word_count.push(1);\n        } else {\n            boredom_word_count[boredom_words.iter().position(|&x|\
    \ x == word).unwrap()] += 1;\n        }\n    }\n    boredoms * boredom_word_count.iter().sum::<usize>()",
  "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    for word in\
    \ S.split_whitespace() {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    for word in S.split() {\n        if word.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut sentence = S.to_string();\n    let mut i = 0;\n    while i\
    \ < sentence.len() {\n        if sentence[i] == '.' || sentence[i] == '?' || sentence[i]\
    \ == '!' {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n  \
    \  boredoms", "    let mut count = 0;\n    for word in S.split_whitespace() {\n\
    \        if word.starts_with(\"I\") {\n            count += 1;\n        }\n  \
    \  }\n    count", "    let mut boredoms: isize = 0;\n    let mut is_bored = false;\n\
    \    for word in S.split() {\n        if word.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        } else {\n            is_bored = true;\n        }\n\
    \    }\n    if is_bored {\n        boredoms\n    } else {\n        0\n    }",
  "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count()\
    \ + 1", "    let mut boredoms: isize = 0;\n    for word in S.split() {\n     \
    \   if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n\
    \    return boredoms;", "    let mut count = 0;\n    for word in S.split() {\n\
    \        if word.starts_with(\"I\") {\n            count += 1;\n        }\n  \
    \  }\n    count", "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s =\
    \ S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n        if s[i]\
    \ == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n        } else\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    for word in S.split() {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut cnt = 0;\n    for word in S.split_whitespace() {\n\
    \        if word.starts_with(\"I\") {\n            cnt += 1;\n        }\n    }\n\
    \    cnt", "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut cnt = 0;\n    for w in S.split_whitespace()\
    \ {\n        if w == \"I\" {\n            cnt += 1;\n        }\n    }\n    cnt",
  "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    for word in\
    \ S.split_whitespace() {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n    let\
    \ mut i: usize = 0;\n    while i < sentence.len() {\n        if sentence[i] ==\
    \ \"I\" {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n   \
    \ boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count()\
    \ + 1", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n  \
    \  let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            if\
    \ s[i] == \"I\" {\n                boredoms += 1;\n            }\n           \
    \ i += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut sentence = String::new();\n    let mut word = String::new();\n  \
    \  let mut delimiter = String::new();\n    let mut i = 0;\n    while i < S.len()\
    \ {\n        sentence = S.split_whitespace()[i];\n        word = sentence.split_whitespace()[0];\n\
    \        delimiter = word.split_whitespace()[1];\n        if delimiter == \"?\"\
    \ || delimiter == \"!\" {\n            boredoms += 1;\n        }\n        i +=\
    \ 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    for s in S.split()\
    \ {\n        if s.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms"]
stop_tokens:
- "\n}"
