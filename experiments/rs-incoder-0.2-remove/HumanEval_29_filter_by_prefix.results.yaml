language: rs
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkdz56fll.rs:5:51\n  |\n5 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                                                   ^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                                                   |\n  |                \
    \                                   expected an implementor of trait `Pattern<'_>`\n\
    \  |                                                   help: consider borrowing\
    \ here: `&prefix.to_lowercase()`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkdz56fll.rs:5:25\n\
    \  |\n5 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected enum `Option`,\
    \ found `bool`\n  |                         help: try using a variant of the expected\
    \ enum: `Some(s.to_lowercase().contains(prefix.to_lowercase()))`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkdz56fll.rs:5:51\n  |\n5 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                                                   ^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                                                   |\n  |                \
    \                                   expected an implementor of trait `Pattern<'_>`\n\
    \  |                                                   help: consider borrowing\
    \ here: `&prefix.to_lowercase()`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkdz56fll.rs:5:25\n\
    \  |\n5 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected enum `Option`,\
    \ found `bool`\n  |                         help: try using a variant of the expected\
    \ enum: `Some(s.to_lowercase().contains(prefix.to_lowercase()))`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkdz56fll.rs:5:51\n  |\n5 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                                                   ^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                                                   |\n  |                \
    \                                   expected an implementor of trait `Pattern<'_>`\n\
    \  |                                                   help: consider borrowing\
    \ here: `&prefix.to_lowercase()`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkdz56fll.rs:5:25\n\
    \  |\n5 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected enum `Option`,\
    \ found `bool`\n  |                         help: try using a variant of the expected\
    \ enum: `Some(s.to_lowercase().contains(prefix.to_lowercase()))`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkdz56fll.rs:5:51\n  |\n5 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                                                   ^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                                                   |\n  |                \
    \                                   expected an implementor of trait `Pattern<'_>`\n\
    \  |                                                   help: consider borrowing\
    \ here: `&prefix.to_lowercase()`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkdz56fll.rs:5:25\n\
    \  |\n5 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected enum `Option`,\
    \ found `bool`\n  |                         help: try using a variant of the expected\
    \ enum: `Some(s.to_lowercase().contains(prefix.to_lowercase()))`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmph8xxswgf.rs:5:39\n     |\n5    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n5    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmph8xxswgf.rs:5:25\n  |\n5 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n5 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkdz56fll.rs:5:51\n  |\n5 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                                                   ^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                                                   |\n  |                \
    \                                   expected an implementor of trait `Pattern<'_>`\n\
    \  |                                                   help: consider borrowing\
    \ here: `&prefix.to_lowercase()`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkdz56fll.rs:5:25\n\
    \  |\n5 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected enum `Option`,\
    \ found `bool`\n  |                         help: try using a variant of the expected\
    \ enum: `Some(s.to_lowercase().contains(prefix.to_lowercase()))`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxqjpw46d.rs:5:54\n     |\n5    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n5    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxqjpw46d.rs:5:25\n  |\n5 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n5 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
- exit_code: 1
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpe91ct_7b.rs:5:35\n  |\n5 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n --> /tmp/tmpe91ct_7b.rs:6:10\n\
    \  |\n6 |         .collect()\n  |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n  |\n  = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747373
