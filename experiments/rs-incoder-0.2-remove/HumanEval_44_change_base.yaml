name: HumanEval_44_change_base
language: rs
prompt: "/// Change numerical base of input number x to base.\n/// return string representation\
  \ after the conversion.\n/// base numbers are less than 10.\nfn change_base(x: isize,\
  \ base: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
  \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
  ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
  \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
  1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
  \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
  ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
  \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
  ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
completions: ["    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base10 = base.to_string();\n    let mut digits_base = digits.chars().collect::<Vec<_>>();\n\
    \    let mut base10_base = base10.chars().collect::<Vec<_>>();\n    let mut base10_digits\
    \ = base10_base.len();\n    let mut base10_digits_base = base10_digits.chars().collect::<Vec<_>>();\n\
    \    let mut base10_digits_base2 = base10_digits_base.len();\n    let mut base10_digits_base3\
    \ = base10_digits_base2.chars().collect::<Vec<_>>();\n    let mut base10_digits_base4\
    \ = base10_digits_base3.chars().collect::<Vec<_>>();\n    let mut base10_digits_base5\
    \ = base10_digits_base4.chars().collect::<Vec<_>>();\n    let mut base10_digits_base6\
    \ = base10_digits_base5.chars().collect::<Vec<_>>();\n    let mut base10_digits_base7\
    \ = base10_digits_base6.chars().collect::<Vec<_>>();\n    let mut base10_digits_base8\
    \ = base10_digits_base7.chars().collect::<Vec<_>>();\n    let mut base10_digits_base9\
    \ = base10_digits_base8.chars().collect::<Vec<_>>();\n    let mut base10_digits_base10\
    \ = base10_digits_base9.chars().collect::<Vec<_>>();\n    let mut base10_digits_base11\
    \ = base10_digits_base10.chars().collect::<Vec<_>>();\n    let mut base10_digits_base12\
    \ = base10_digits_base11.chars().collect::<Vec<_>>();\n    let mut base10_digits_base13\
    \ = base10_digits_base12.chars().collect::<Vec<_>>();\n    let mut base10_digits_base14\
    \ = base10_digits_base13.chars().collect::<Vec<_>>();\n    let mut base10_digits_base15\
    \ = base10_digits_base14.chars().collect::<Vec<_>>();\n    let mut base10_digits_base16\
    \ = base10_digits_base15.chars().collect::<Vec<_>>();\n    let mut base10_digits_base17\
    \ = base10_digits_base16.chars().collect::<Vec<_>>();\n    let mut base10_digits_base18\
    \ = base10_digits_base17.chars().collect", "    let mut s = String::new();\n \
    \   let mut digits = String::new();\n    let mut remainder = 0;\n    let mut i\
    \ = 0;\n    while i < x.len() {\n        let digit = x.chars().nth(i).unwrap();\n\
    \        if digit < '0' || digit > '9' {\n            break;\n        }\n    \
    \    remainder = digit - '0';\n        if base == 10 {\n            digits.push_str(&format!(\"\
    {}\", remainder));\n        } else {\n            digits.push_str(&format!(\"\
    {}{}\", remainder, base));\n        }\n        i += 1;\n    }\n    s += digits;\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut power = 1;\n    while power.is_positive() {\n        if digits.len()\
    \ > base.to_digits().len() {\n            digits.truncate(base.to_digits().len());\n\
    \        }\n        if digits.len() < base.to_digits().len() {\n            digits\
    \ = digits.pad(base.to_digits().len());\n        }\n        let mut digit = digits.chars().nth(base.to_digits().len()).unwrap();\n\
    \        if digit >= '0' && digit <= '9' {\n            digit -= '0';\n      \
    \  } else {\n            digit -= 'a' - 10;\n        }\n        power = power.pow(base);\n\
    \        s += digit.to_string();\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digits, digit.to_string());\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = 0;\n    while digits.len() > 0 {\n        let digit =\
    \ digits.chars().nth(digits.length() - 1).unwrap();\n        if base == 10 {\n\
    \            s.push_str(&digit);\n        } else {\n            let mut new_digit\
    \ = digit;\n            if digit == '0' {\n                remainder = 0;\n  \
    \          } else {\n                remainder = digit as isize - base;\n    \
    \            new_digit = digit as isize;\n            }\n            s.push_str(&new_digit.to_string());\n\
    \        }\n        digits = digits.chars().nth(digits.length() - 1).unwrap();\n\
    \    }\n    if remainder != 0 {\n        s.push_str(&remainder.to_string());\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.size() {\n        if base == 0 {\n            s.push_str(&digits[i]);\n\
    \            i += 1;\n        } else {\n            let mut j = i;\n         \
    \   while j < digits.size() && base == 0 {\n                s.push_str(&digits[j]);\n\
    \                j += 1;\n            }\n            let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned();\n            base = base.iter().cloned().collect::<Vec<_>>();\n\
    \            base = base.to_owned", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    while digits.len() > base {\n        digits = &digits[..(digits.len()\
    \ - base)];\n    }\n    s += &digits[..];\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    while digits.len() > 0 {\n        let\
    \ digit = digits.chars().nth(base).unwrap();\n        digits = digits.chars().nth(base\
    \ - 1).unwrap() + digit;\n        s += digit;\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string();\n    while digits.len()\
    \ > 0 {\n        let mut digit = digits.chars().nth(digits.len() - 1);\n     \
    \   if digit < '0' {\n            digit += '0';\n        }\n        if digit >\
    \ '9' {\n            digit += '0';\n        }\n        digits = digits.chars().nth(digits.len()\
    \ - 1);\n        s += digit;\n    }\n    let mut digits = base.to_string();\n\
    \    while digits.len() > 0 {\n        let mut digit = digits.chars().nth(digits.len()\
    \ - 1);\n        if digit < '0' {\n            digit += '0';\n        }\n    \
    \    if digit > '9' {\n            digit += '0';\n        }\n        digits =\
    \ digits.chars().nth(digits.len() - 1);\n        s += digit;\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ power = 1;\n    while digits.len() > 0 {\n        if digits.len() > base {\n\
    \            digits = &digits[..(digits.len() - base)];\n            power = power\
    \ * base;\n        }\n        s += digits[digits.len() - 1];\n        digits =\
    \ &digits[..digits.len() - 1];\n    }\n    format!(\"{}\", power)", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut power =\
    \ 1;\n    while digits.len() > 0 {\n        let mut digit = digits.pop().unwrap();\n\
    \        if digit >= base {\n            digit -= base;\n            power = 1;\n\
    \        } else {\n            power <<= 1;\n        }\n        s += digit.to_string();\n\
    \    }\n    format!(\"{}\", power)", "    let mut s = String::new();\n    let\
    \ mut digits = String::new();\n    let mut remainder = 0;\n    while x >= base\
    \ {\n        remainder = x % base;\n        digits.push(format!(\"{}\", remainder));\n\
    \        x = x / base;\n    }\n    digits.push(format!(\"{}\", x));\n    s +=\
    \ digits.clone();\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = 0;\n    while x >= base {\n        remainder += x % base;\n        x /= base;\n\
    \    }\n    if x > 0 {\n        remainder += x;\n    }\n    s += format!(\"{}\"\
    , remainder);\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = x;\n    let mut i = 0;\n    while remainder > 0 {\n \
    \       remainder = remainder % base;\n        digits.push(&format!(\"{}\", remainder));\n\
    \        i += 1;\n    }\n    digits.push(&format!(\"{}\", remainder));\n    s\
    \ += &digits[..i];\n    s += &digits[..i].to_string();\n    s", "    let mut s\
    \ = String::new();\n    let mut digits = String::new();\n    let mut remainder\
    \ = x;\n    let mut quotient = x;\n    while remainder > 0 {\n        remainder\
    \ /= base;\n        digits.push_str(&format!(\"{}\", quotient));\n        quotient\
    \ *= base;\n    }\n    digits.push_str(&format!(\"{}\", quotient));\n    s +=\
    \ &digits;\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    for digit in digits {\n        s.push(digit);\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base10: Vec<_> = digits.iter().map(|x| x.to_digit(base)).collect();\n\
    \    let mut base10_len = base10.len();\n    let mut base10_pow = base10_len.powf(base);\n\
    \    let mut base10_pow2 = base10_pow.clone();\n    let mut base10_pow2_len =\
    \ base10_pow2.len();\n    let mut base10_pow2_pow = base10_pow2.powf(2);\n   \
    \ let mut base10_pow2_pow2 = base10_pow2_pow.clone();\n    let mut base10_pow2_pow2_len\
    \ = base10_pow2_pow2.len();\n    let mut base10_pow2_pow2_pow = base10_pow2_pow2.powf(2);\n\
    \    let mut base10_pow2_pow2_pow2 = base10_pow2_pow2_pow.clone();\n    let mut\
    \ base10_pow2_pow2_pow2_len = base10_pow2_pow2_pow2.len();\n    let mut base10_pow2_pow2_pow2_pow\
    \ = base10_pow2_pow2_pow2.powf(2);\n    let mut base10_pow2_pow2_pow2_pow2 = base10_pow2_pow2_pow2_pow.clone();\n\
    \    let mut base10_pow2_pow2_pow2_pow2_len = base10_pow2_pow2_pow2_pow2.len();\n\
    \    let mut base10_pow2_pow2_pow2_pow2_pow = base10_pow2_pow2_pow2_pow2.powf(2);\n\
    \    let mut base10_pow2_pow2_pow2_pow2_pow2 = base10_pow2_pow2_pow2_pow2_pow.clone();\n\
    \    let mut base10_pow2_pow2_pow2_pow2_pow2_len = base10_pow2_pow2_pow2_pow2_pow2.len();\n\
    \    let mut base10_pow2_pow2_pow2_pow2_pow2_pow = base10_pow2_pow2_pow2_pow2_pow2.powf(2);\n\
    \    let mut base10_pow2_pow2_pow2_pow2_pow2_pow2 = base10_pow2_pow2_pow2_pow2_pow2_pow.clone();\n\
    \    let mut base10_pow2_pow2_pow2_pow2_pow2_pow2_len = base10_pow2_pow2_pow2_pow2_pow2_pow2.len();\n\
    \    let mut base10_pow2_pow2_pow2_pow2_pow2_pow2_pow = ", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        digits.push(format!(\"{}\"\
    , remainder));\n        x = x / base;\n    }\n    digits.push(format!(\"{}\",\
    \ x));\n    s += digits.clone();\n    s", "    let mut s = String::new();\n  \
    \  let mut digits = x.to_string();\n    let mut base = base.to_string();\n   \
    \ while base.len() > 0 {\n        let digit = digits.chars().nth(base.len() -\
    \ 1).unwrap();\n        s += digit;\n        digits = digits.chars().skip_while(|c|\
    \ c != digit).collect();\n        base = base.chars().skip_while(|c| c != digit).collect();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    s += digits[remainder];\n    while x > 0 {\n \
    \       remainder += x % base;\n        x /= base;\n        s += digits[remainder];\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = x;\n    let mut digit = 0;\n    while remainder > 0 {\n\
    \        digit = remainder % base;\n        remainder = remainder / base;\n  \
    \      digits.push_str(&format!(\"{}\", digit));\n    }\n    digits.push_str(&format!(\"\
    {}\", digit));\n    s += &digits;\n    while remainder > 0 {\n        digit =\
    \ remainder % base;\n        remainder = remainder / base;\n        digits.push_str(&format!(\"\
    {}\", digit));\n    }\n    digits.push_str(&format!(\"{}\", digit));\n    s +=\
    \ &digits;\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    while digits.len() > 0 {\n        let mut digit = digits.remove(0);\n\
    \        if digit == \"0\" {\n            digits.push('1');\n        } else {\n\
    \            digits.push('0');\n        }\n    }\n    s + digits.to_string()",
  "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut basedigits = base.to_string().chars().collect::<Vec<_>>();\n    let\
    \ mut i = 0;\n    while i < digits.len() {\n        if digits[i] >= basedigits[i]\
    \ {\n            s.push_str(&basedigits[digits[i] - basedigits[i]]);\n       \
    \     i += 1;\n        } else {\n            s.push_str(&digits[i]);\n       \
    \     i += 1;\n        }\n    }\n    s", "    let mut s = String::new();\n   \
    \ let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digits, digit);\n    }\n    s", "   \
    \ let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut digits_len = digits.length();\n    let\
    \ mut base_len = base.length();\n    let mut i = 0;\n    while i < digits_len\
    \ {\n        if digits[i] > base {\n            digits = digits.chars().filter(|&c|\
    \ c != '0').collect();\n            base = base.chars().filter(|&c| c != '0').collect();\n\
    \            digits_len = digits.length();\n            base_len = base.length();\n\
    \        }\n        i += 1;\n    }\n    digits = digits.chars().filter(|&c| c\
    \ != '0').collect();\n    s = digits.join(\"\");\n    s = s.chars().filter(|&c|\
    \ c != '0').collect();\n    s = s.join(\"\");\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        if base == 1 {\n            s.push('1');\n\
    \            i += 1;\n            continue;\n        }\n        if base == 10\
    \ {\n            s.push('0');\n            i += 1;\n            continue;\n  \
    \      }\n        if base == 16 {\n            s.push('x');\n            i +=\
    \ 1;\n            continue;\n        }\n        if base == 8 {\n            s.push('b');\n\
    \            i += 1;\n            continue;\n        }\n        if base == 2 {\n\
    \            s.push('o');\n            i += 1;\n            continue;\n      \
    \  }\n        if base == 16 {\n            s.push('h');\n            i += 1;\n\
    \            continue;\n        }\n        if base == 8 {\n            s.push('o');\n\
    \            i += 1;\n            continue;\n        }\n        if base == 2 {\n\
    \            s.push('l');\n            i += 1;\n            continue;\n      \
    \  }\n        if base == 16 {\n            s.push('l');\n            i += 1;\n\
    \            continue;\n        }\n        if base == 8 {\n            s.push('l');\n\
    \            i += 1;\n            continue;\n        }\n        if base == 2 {\n\
    \            s.push('l');\n            i += 1;\n            continue;\n      \
    \  }\n        if base == 16 {\n            s.push('l');\n            i += 1;\n\
    \            continue;\n        }\n        if base == 8 {\n            s.push('l');\n\
    \            i += 1;\n            continue;\n        }\n        if base == 2 {\n\
    \            s.push('l');\n            i += 1;\n            continue;\n      \
    \  }\n        if base == 16 {\n            s.push('l');\n            i += 1;\n\
    \            continue;\n        }\n        if base == 8 {\n            s.push('l');\n\
    \            i += 1;\n            continue;\n        }\n        if base == 2 {\n\
    \            s.push('l');\n            i += 1;\n            continue;\n      \
    \  }\n        if base == 16 {\n            s.push('l');\n            i += 1;\n\
    \            continue;\n        }\n        if base == 8 {\n            s.push('l');\n\
    \            i += 1;\n            continue;\n        }\n        if base == 2 {\n\
    \            s.push('l');\n            i += 1;\n            continue;\n      \
    \  }\n        if base == 16 {\n            s.push('l');\n            i += 1;\n\
    \            continue;\n        }\n        if base == 8 {\n            s.push('l');\n\
    \            i += 1;\n            continue;\n        }\n        if base == ",
  "    let mut s = String::new();\n    let mut digits = String::new();\n    let mut\
    \ remainder = 0;\n    while x >= base {\n        remainder += x / base;\n    \
    \    digits.push(format!(\"{}\", remainder));\n        x %= base;\n    }\n   \
    \ digits.push(format!(\"{}\", x));\n    s += digits.clone();\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string();\n    let mut power\
    \ = 1;\n    while digits.len() > 0 {\n        if digits.len() > base {\n     \
    \       digits = &digits[..(digits.len() - base)];\n            power = power\
    \ / base;\n        }\n        s += digits[digits.len() - 1];\n        digits =\
    \ &digits[..digits.len() - 1];\n    }\n    format!(\"{}\", power)", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        s = format!(\"{}{}\", digits, digit.to_string());\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        digits.push(format!(\"{}\", remainder));\n        x = x / base;\n   \
    \ }\n    digits.push(format!(\"{}\", x));\n    s += &digits;\n    s", "    let\
    \ mut s = String::new();\n    let mut remainder = x;\n    while remainder > 0\
    \ {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digit);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut power =\
    \ 1;\n    while digits.len() > 0 {\n        let mut digit = digits.chars().nth(digits.len()\
    \ - 1);\n        if digit == '0' {\n            digits.pop();\n        } else\
    \ {\n            digit = digit.to_string();\n        }\n        if digit < base.to_string()\
    \ {\n            digit += '0';\n        }\n        s += digit;\n        power\
    \ *= base;\n    }\n    format!(\"{}\", power)", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = 0;\n    while digits.len()\
    \ > 0 {\n        let digit = digits.chars().nth(digits.length() - 1).unwrap();\n\
    \        remainder = remainder * base + digit;\n        digits = digits.chars().nth(digits.length()\
    \ - 1).unwrap();\n    }\n    remainder.to_string()", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = 1;\n    while remainder > 0\
    \ {\n        remainder %= base;\n        digits += 1;\n    }\n    for _ in 0..digits\
    \ {\n        s.push('0');\n    }\n    s.push((x as usize).to_string());\n    String::from(s)",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    while\
    \ digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len() - 1);\n\
    \        if digit == '0' {\n            digits.pop();\n        } else {\n    \
    \        s.push_str(&digits[digits.len() - 1]);\n            digits.truncate(digits.len()\
    \ - 1);\n        }\n    }\n    let mut digits = base.to_string();\n    while digits.len()\
    \ > 0 {\n        let digit = digits.chars().nth(digits.len() - 1);\n        if\
    \ digit == '0' {\n            digits.pop();\n        } else {\n            s.push_str(&digits[digits.len()\
    \ - 1]);\n            digits.truncate(digits.len() - 1);\n        }\n    }\n \
    \   s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    let mut digits_len = digits.length();\n    while\
    \ remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digits, digit);\n       \
    \ digits_len -= 1;\n    }\n    if digits_len > 0 {\n        s = format!(\"{}\"\
    , digits);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut remainder = x;\n    let mut i = 0;\n    while\
    \ remainder > 0 {\n        remainder %= base;\n        s.push((digits[i as usize]\
    \ as char) + char::from_digit(base as u8, remainder as u8));\n        i += 1;\n\
    \        remainder /= base;\n    }\n    s.push((digits[i as usize] as char) +\
    \ char::from_digit(base as u8, 0));\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder /= base;\n        s.push((digits[..1] as char).to_string()\
    \ + &\"0\".to_string());\n    }\n    s.push((digits[..1] as char).to_string()\
    \ + &\"0\".to_string());\n    &s", "    let mut s = String::new();\n    let mut\
    \ digits = String::new();\n    let mut remainder = 0;\n    let mut quotient =\
    \ 0;\n    let mut remainder_digits = String::new();\n    let mut quotient_digits\
    \ = String::new();\n    let mut digits_len = String::new();\n    let mut remainder_digits_len\
    \ = String::new();\n    let mut quotient_digits_len = String::new();\n    let\
    \ mut digits_len = String::new();\n    let mut remainder_digits_len = String::new();\n\
    \    let mut quotient_digits_len = String::new();\n    let mut digits_len = String::new();\n\
    \    let mut remainder_digits_len = String::new();\n    let mut quotient_digits_len\
    \ = String::new();\n    let mut digits_len = String::new();\n    let mut remainder_digits_len\
    \ = String::new();\n    let mut quotient_digits_len = String::new();\n    let\
    \ mut digits_len = String::new();\n    let mut remainder_digits_len = String::new();\n\
    \    let mut quotient_digits_len = String::new();\n    let mut digits_len = String::new();\n\
    \    let mut remainder_digits_len = String::new();\n    let mut quotient_digits_len\
    \ = String::new();\n    let mut digits_len = String::new();\n    let mut remainder_digits_len\
    \ = String::new();\n    let mut quotient_digits_len = String::new();\n    let\
    \ mut digits_len = String::new();\n    let mut remainder_digits_len = String::new();\n\
    \    let mut quotient_digits_len = String::new();\n    let mut digits_len = String::new();\n\
    \    let mut remainder_digits_len = String::new();\n    let mut quotient_digits_len\
    \ = String::new();\n    let mut digits_len = String::new();\n    let mut remainder_digits_len\
    \ = String::new();\n    let mut quotient_digits_len = String::new();\n    let\
    \ mut digits_len = String::new();\n    let mut remainder_digits_len = String::new();\n\
    \    let mut quotient_digits_len = String::new();\n    let mut digits_len = String::new();\n\
    \    let mut remainder_digits_len = String::new();\n    let mut quotient_digits_len\
    \ = String::new();\n    let mut digits_len = String::new();\n", "    let mut s\
    \ = String::new();\n    let mut remainder = x;\n    while remainder > 0 {\n  \
    \      let digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", s, digit);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digit.len() - 1);\n   \
    \     digit = digit.to_string().chars().nth(digit.len() - 1);\n        digit =\
    \ digit.to_string().chars().nth(digit.len() - 1);\n        digit = digit.to_string().chars().nth(digit.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digit.len() - 1);\n   \
    \     digit = digit.to_string().chars().nth(digit.len() - 1);\n        digit =\
    \ digit.to_string().chars().nth(digit.len() - 1);\n        digit = digit.to_string().chars().nth(digit.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digit.len() - 1);\n   \
    \     digit = digit.to_string().chars().nth(digit.len() - 1);\n        digit =\
    \ digit.to_string().chars().nth(digit.len() - 1);\n        digit = digit.to_string().chars().nth(digit.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digit.len() - 1);\n   \
    \     digit = digit.to_string().chars().nth(digit.len() - 1);\n        digit =\
    \ digit.to_string().chars().nth(digit.len() - 1);\n        digit = digit.to_string().chars().nth(digit.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digit.len() - 1);\n   \
    \     digit = digit.to_string().chars().nth(digit.len() - 1);\n        digit =\
    \ digit.to_string().chars().nth(digit.len() - 1);\n        digit = digit.to_string().chars().nth(digit.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digit.len() - 1);\n   \
    \     digit = digit.to_string().chars().nth(digit.len() - 1);\n        digit =\
    \ digit.to_string().chars().nth(digit.len() - 1);\n        digit = digit.to_string().chars().nth(digit.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digit.len() - 1);\n   \
    \     digit = digit.to_string().chars().nth(digit.len() - 1);\n        digit =\
    \ digit.to_string().chars().nth(digit.len() - 1);\n        digit = digit.to_string",
  "    let mut s = String::new();\n    let mut digits = vec![0; 10];\n    let mut\
    \ carry = 0;\n    while x >= base {\n        digits[10 - base] += 1;\n       \
    \ x -= base;\n    }\n    digits[10 - base] += 1;\n    for d in digits {\n    \
    \    s += if carry > 0 {\n            '0'\n        } else {\n            '1'\n\
    \        };\n        carry = d / 10;\n        d %= 10;\n    }\n    s += if carry\
    \ > 0 {\n        '0'\n    } else {\n        '1'\n    };\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = vec![0u8;\
    \ base];\n    let mut x = x;\n    while x >= base {\n        digits[x - base]\
    \ = 1;\n        x /= base;\n    }\n    while x >= 10 {\n        digits[x - 10]\
    \ = 1;\n        x /= 10;\n    }\n    digits[x - 1] = 0;\n    for i in 0..digits.len()\
    \ {\n        s += &format!(\"{}\", digits[i]);\n    }\n    s", "    let mut s\
    \ = String::new();\n    let mut digits = x.to_string();\n    let mut base = base.to_string();\n\
    \    let mut digits_base = digits.chars().collect::<Vec<_>>();\n    let mut base_base\
    \ = base.chars().collect::<Vec<_>>();\n    let mut digits_base_base = digits_base.iter().zip(base_base.iter()).map(|(a,\
    \ b)| {\n        a.to_digits() + b.to_digits()\n    }).collect::<Vec<_>>();\n\
    \    let mut digits_base_base_iter = digits_base_base.iter();\n    let mut digits_base_base_iter\
    \ = digits_base_base_iter.map(|&(a, b)| {\n        a.to_digits() + b.to_digits()\n\
    \    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(a,\
    \ b)| {\n        a.to_digits() + b.to_digits()\n    });\n    let mut digits_base_base_iter\
    \ = digits_base_base_iter.map(|&(a, b)| {\n        a.to_digits() + b.to_digits()\n\
    \    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(a,\
    \ b)| {\n        a.to_digits() + b.to_digits()\n    });\n    let mut digits_base_base_iter\
    \ = digits_base_base_iter.map(|&(a, b)| {\n        a.to_digits() + b.to_digits()\n\
    \    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(a,\
    \ b)| {\n        a.to_digits() + b.to_digits()\n    });\n    let mut digits_base_base_iter\
    \ = digits_base_base_iter.map(|&(a, b)| {\n        a.to_digits() + b.to_digits()\n\
    \    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(a,\
    \ b)| {\n        a.to_digits() + b.to_digits()\n    });\n    let mut digits_base_base_iter\
    \ = digits_base_base_iter.map(|&(a, b)| {\n        a.to_digits() + b.to_digits()\n\
    \    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(a,\
    \ b)| {\n        a.to_digits() + b.to_digits()\n    });\n    let mut digits_base_base_iter\
    \ = digits_base_base_iter.map(|&(a, b)| {\n        a.to_digits() + b.to_digits()\n\
    \    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(a,\
    \ b)| {\n        a.to_digits() + b.to_digits()\n", "    let mut s = String::new();\n\
    \    let mut digits = vec![0u8; 10];\n    let mut carry = 0;\n    while x >= base\
    \ {\n        digits[10 - base] += 1;\n        x -= base;\n    }\n    while x >=\
    \ 10 {\n        digits[10] += 1;\n        x -= 10;\n    }\n    while carry !=\
    \ 0 {\n        digits[10] += 1;\n        carry += 1;\n    }\n    for &d in &digits[0..10]\
    \ {\n        s += char::from_u32(d as u32).unwrap();\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = String::new();\n    let mut power\
    \ = 1;\n    while x >= base {\n        digits.push(format!(\"{}\", x % base));\n\
    \        x /= base;\n        power += 1;\n    }\n    if x != 0 {\n        digits.push(format!(\"\
    {}\", x));\n    }\n    for i in 0..power {\n        s.push('0');\n    }\n    for\
    \ i in 0..digits.len() {\n        s.push(digits[i]);\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string();\n    let mut base\
    \ = base.to_string();\n    let mut i = 0;\n    while i < digits.length() {\n \
    \       if base < 10 {\n            s.push_str(&digits[i..i + 1]);\n         \
    \   i += 1;\n        } else {\n            let mut new_base = base.to_string();\n\
    \            new_base.push_str(&digits[i..i + 1]);\n            s.push_str(&new_base);\n\
    \            i += 1;\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut digits_len = String::new();\n\
    \    let mut digits_len2 = String::new();\n    let mut digits_len3 = String::new();\n\
    \    let mut digits_len4 = String::new();\n    let mut digits_len5 = String::new();\n\
    \    let mut digits_len6 = String::new();\n    let mut digits_len7 = String::new();\n\
    \    let mut digits_len8 = String::new();\n    let mut digits_len9 = String::new();\n\
    \    let mut digits_len10 = String::new();\n    let mut digits_len11 = String::new();\n\
    \    let mut digits_len12 = String::new();\n    let mut digits_len13 = String::new();\n\
    \    let mut digits_len14 = String::new();\n    let mut digits_len15 = String::new();\n\
    \    let mut digits_len16 = String::new();\n    let mut digits_len17 = String::new();\n\
    \    let mut digits_len18 = String::new();\n    let mut digits_len19 = String::new();\n\
    \    let mut digits_len20 = String::new();\n    let mut digits_len21 = String::new();\n\
    \    let mut digits_len22 = String::new();\n    let mut digits_len23 = String::new();\n\
    \    let mut digits_len24 = String::new();\n    let mut digits_len25 = String::new();\n\
    \    let mut digits_len26 = String::new();\n    let mut digits_len27 = String::new();\n\
    \    let mut digits_len28 = String::new();\n    let mut digits_len29 = String::new();\n\
    \    let mut digits_len30 = String::new();\n    let mut digits_len31 = String::new();\n\
    \    let mut digits_len32 = String::new();\n    let mut digits_len33 = String::new();\n\
    \    let mut digits_len34 = String::new();\n    let mut digits_len35 = String::new();\n\
    \    let mut digits_len36 = String::new();\n    let mut digits_len37 = String::new();\n\
    \    let mut digits_len38 = String::new();\n    let mut digits_len39 = String::new();",
  "    let mut s = String::new();\n    let mut digits = String::new();\n    let mut\
    \ remainder = 0;\n    while x >= base {\n        remainder += x % base;\n    \
    \    x /= base;\n    }\n    digits.push(&remainder);\n    while x > 0 {\n    \
    \    remainder += x % base;\n        x /= base;\n        digits.push(&remainder);\n\
    \    }\n    s += digits.reverse();\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = 0;\n    while digits.len()\
    \ > 0 {\n        remainder = digits.len() % base;\n        s = format!(\"{}{}\"\
    , s, digits[..(remainder as usize)].to_string());\n        digits = &digits[(remainder\
    \ as usize)..];\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = x;\n    while remainder > 0 {\n  \
    \      let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", digits, digit.to_string());\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n\
    \        remainder = remainder / base;\n        s = format!(\"{}{}\", digits,\
    \ digit.to_string());\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut power = 1;\n    while digits.len()\
    \ > 0 {\n        let digit = digits.chars().nth(digits.len() - 1);\n        let\
    \ digit = digit.to_string();\n        if digit == \"0\" {\n            power =\
    \ 1;\n        } else {\n            power = power * base;\n        }\n       \
    \ s += digit;\n        digits = digits.chars().skip_while(|c| c != '0').collect();\n\
    \    }\n    power.to_string()", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut basedigits = digits.chars().map(|c| c as char).collect::<Vec<_>>();\n\
    \    basedigits = basedigits.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < basedigits.len() {\n        let mut digit = basedigits[i];\n\
    \        if digit == '0' {\n            digit = digits[(i + 1) % basedigits.len()].to_string();\n\
    \        }\n        i += 1;\n        if digit == '0' {\n            digit = digits[(i\
    \ + 1) % basedigits.len()].to_string();\n        }\n        i += 1;\n        if\
    \ digit == '0' {\n            digit = digits[(i + 1) % basedigits.len()].to_string();\n\
    \        }\n        i += 1;\n        if digit == '0' {\n            digit = digits[(i\
    \ + 1) % basedigits.len()].to_string();\n        }\n        i += 1;\n        if\
    \ digit == '0' {\n            digit = digits[(i + 1) % basedigits.len()].to_string();\n\
    \        }\n        i += 1;\n        if digit == '0' {\n            digit = digits[(i\
    \ + 1) % basedigits.len()].to_string();\n        }\n        i += 1;\n        if\
    \ digit == '0' {\n            digit = digits[(i + 1) % basedigits.len()].to_string();\n\
    \        }\n        i += 1;\n        if digit == '0' {\n            digit = digits[(i\
    \ + 1) % basedigits.len()].to_string();\n        }\n        i += 1;\n        if\
    \ digit == '0' {\n            digit = digits[(i + 1) % basedigits.len()].to_string();\n\
    \        }\n        i += 1;\n        if digit == '0' {\n            digit = digits[(i\
    \ + 1) % basedigits.len()].to_string();\n        }\n        i += 1;\n        if\
    \ digit == '0' {\n            digit = digits[(i + 1) % basedigits.len()].to_string();\n\
    \        }\n        i += 1;\n        if digit == '0' {\n            digit = digits[(i\
    \ + 1) % basedigits.len()].to_string();\n        }\n        i += 1;\n        if\
    \ digit == '0' {\n            digit = digits[(i + 1) % basedigits.len()].to_string();\n\
    \        }\n        i += 1;\n        if digit == '0' {\n            digit = digits[(i\
    \ + 1) % basedigits.len()].to_string();\n        }\n        i += 1;\n        if\
    \ digit == '0' {\n            digit = digits[(i + 1) % basedigits.len()].to_string();\n\
    \        }\n        i += 1;\n        if digit == '0' {\n            digit = digit",
  "    let mut s = String::new();\n    let mut digits = String::new();\n    let mut\
    \ power = 1;\n    let mut digit = x;\n    while digit > 0 {\n        digits.push_str(&format!(\"\
    {:0>2}\", digit));\n        digit /= base;\n        power += 1;\n    }\n    digits.push_str(&format!(\"\
    {:0>2}\", power));\n    digits.push_str(\"1\");\n    s += &digits;\n    s += &\"\
    0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n\
    \    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s\
    \ += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"\
    0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n\
    \    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s\
    \ += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"\
    0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n\
    \    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s\
    \ += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"\
    0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n\
    \    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s\
    \ += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"\
    0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n    s += &\"0\";\n\
    \    s += &\"0\";\n    s += &\"0\";\n    s += &", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder /= base;\n        s += &digits[..(remainder as usize)];\n\
    \    }\n    s += &digits[..(remainder as usize)];\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        digits.insert(0, base.to_string());\n\
    \    }\n    digits.insert(0, remainder.to_string());\n    s += &digits;\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digits, digit.to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut bases = base.to_string();\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        if digits[i] == bases[i]\
    \ {\n            i += 1;\n        } else {\n            s.push_str(&digits[i]);\n\
    \            i += 1;\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut power = 1;\n    while digits.len()\
    \ > 0 {\n        let digit = digits[digits.len() - 1];\n        if digit < '0'\
    \ {\n            power = power / base;\n        }\n        if digit >= '0' &&\
    \ digit < '9' {\n            power = power * base + digit - '0';\n        }\n\
    \        digits = &digits[..digits.len() - 1];\n    }\n    if power < 10 {\n \
    \       s = format!(\"{}\", power);\n    } else {\n        s = format!(\"{}\"\
    , power);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    while digits.len() > base {\n        digits = &digits[..(digits.len()\
    \ - base)];\n    }\n    s += &digits[..digits.len() - base];\n    s += &digits[digits.len()\
    \ - base..];\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digits, digit.to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder /= base;\n        s.push((digits[..1] as char).to_string()\
    \ + &\"0\".to_string());\n    }\n    s.push((digits[..1] as char).to_string()\
    \ + &\"0\".to_string());\n    &s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        if digits[i] > base\
    \ {\n            digits[i] -= base;\n        } else {\n            digits[i] +=\
    \ base;\n        }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n \
    \       s += digits[i].to_string();\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut digits_base = digits.chars().collect::<Vec<_>>();\n    let mut base_base\
    \ = base.chars().collect::<Vec<_>>();\n    let mut digits_base_base = digits_base.chars().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < digits_base.len() {\n        let mut digit\
    \ = digits_base[i];\n        let mut base = base_base[i];\n        if base < 10\
    \ {\n            digit = digit.to_string().to_digit(base).unwrap();\n        }\n\
    \        i += 1;\n        if digit < 10 {\n            s.push_str(&digit.to_string());\n\
    \        } else {\n            s.push_str(&digit.to_string().to_digit(10).unwrap());\n\
    \        }\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut basedigits = digits.chars().map(|c| c as char).collect::<Vec<_>>();\n\
    \    basedigits.reverse();\n    let mut i = 0;\n    while i < basedigits.len()\
    \ {\n        let mut j = i;\n        while j < basedigits.len() && basedigits[j]\
    \ == basedigits[i] {\n            j += 1\n        }\n        if j == basedigits.len()\
    \ {\n            break;\n        }\n        let mut digit = basedigits[i];\n \
    \       basedigits[i] = basedigits[j];\n        basedigits[j] = digit;\n     \
    \   i += 1;\n    }\n    basedigits.reverse();\n    for i in basedigits.iter()\
    \ {\n        if i > 0 {\n            s.push_str(&format!(\"{}\", i));\n      \
    \  }\n    }\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        digits.push(format!(\"{}\", remainder));\n        x = x / base;\n   \
    \ }\n    digits.push(format!(\"{}\", x));\n    s += digits.clone();\n    s", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ digits_base = digits.clone();\n    let mut digits_base2 = digits.clone();\n\
    \    let mut digits_base3 = digits.clone();\n    let mut digits_base4 = digits.clone();\n\
    \    let mut digits_base5 = digits.clone();\n    let mut digits_base6 = digits.clone();\n\
    \    let mut digits_base7 = digits.clone();\n    let mut digits_base8 = digits.clone();\n\
    \    let mut digits_base9 = digits.clone();\n    let mut digits_base10 = digits.clone();\n\
    \    let mut digits_base11 = digits.clone();\n    let mut digits_base12 = digits.clone();\n\
    \    let mut digits_base13 = digits.clone();\n    let mut digits_base14 = digits.clone();\n\
    \    let mut digits_base15 = digits.clone();\n    let mut digits_base16 = digits.clone();\n\
    \    let mut digits_base17 = digits.clone();\n    let mut digits_base18 = digits.clone();\n\
    \    let mut digits_base19 = digits.clone();\n    let mut digits_base20 = digits.clone();\n\
    \    let mut digits_base21 = digits.clone();\n    let mut digits_base22 = digits.clone();\n\
    \    let mut digits_base23 = digits.clone();\n    let mut digits_base24 = digits.clone();\n\
    \    let mut digits_base25 = digits.clone();\n    let mut digits_base26 = digits.clone();\n\
    \    let mut digits_base27 = digits.clone();\n    let mut digits_base28 = digits.clone();\n\
    \    let mut digits_base29 = digits.clone();\n    let mut digits_base30 = digits.clone();\n\
    \    let mut digits_base31 = digits.clone();\n    let mut digits_base32 = digits.clone();\n\
    \    let mut digits_base33 = digits.clone();\n    let mut digits_base34 = digits.clone();\n\
    \    let mut digits_base35 = digits.clone();\n    let mut digits_base36 = digits.clone();\n\
    \    let mut digits_base37 = digits.clone();\n    let mut digits_base38 = digits.clone();\n\
    \    let mut digits_base39 = digits.clone();\n    let mut digits_base40 = digits.clone();\n\
    \    let mut digits_base41 = digits.clone();\n    let mut digits_base42 = digits.clone();\n\
    \    let mut digits_base43 = digits.clone();\n    let mut digits_base44 = digits.clone();\n\
    \    let mut digits_base45 = digits.clone();\n    let mut digits_base46 = digits.clone();\n\
    \    let ", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut power = 1;\n    while digits.len() > 0 {\n        let digit = digits.remove(0);\n\
    \        power = power.pow(base);\n        if digit < base {\n            s +=\
    \ digit.to_string();\n        } else {\n            s += digit.to_string() + &format!(\"\
    {}\", power);\n        }\n    }\n    s", "    let mut s = String::new();\n   \
    \ let mut digits = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    while digits.length()\
    \ > 0 {\n        let digit = digits.pop().unwrap();\n        if digit != \"0\"\
    .to_string() {\n            s.push(digit);\n        }\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string();\n    let mut base\
    \ = base.to_string();\n    let mut digits_len = digits.length();\n    let mut\
    \ base_len = base.length();\n    while digits_len > 0 && base_len > 0 {\n    \
    \    let mut digit = digits[digits_len - 1];\n        let mut base = base[base_len\
    \ - 1];\n        if digit == base {\n            digits.pop();\n            base_len\
    \ -= 1;\n        } else {\n            s += digit.to_string();\n            digits_len\
    \ -= 1;\n            base_len -= 1;\n        }\n    }\n    if base_len > 0 {\n\
    \        s += base.to_string();\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder /= base;\n        s.push((digits[remainder as usize]\
    \ as char).to_string());\n    }\n    s.push((digits[remainder as usize] as char).to_string());\n\
    \    String::from(s)", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut power = 1;\n    let mut i = 0;\n    while i < digits.len() {\n  \
    \      let mut digit = digits[i] - '0';\n        if digit >= base {\n        \
    \    digit -= base;\n        }\n        s += digit.to_string();\n        power\
    \ = power * base;\n        i += 1;\n    }\n    format!(\"{}\", power)", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        s = format!(\"{}{}\", digits, digit.to_string());\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        let digit = digits.chars().nth(i).unwrap();\n        if base == 10\
    \ {\n            s.push_str(digit);\n            i += 1;\n        } else {\n \
    \           let mut digit = digit.to_string();\n            let mut digit = digit.chars().nth(digit.len()\
    \ - 1).unwrap();\n            digit = digit.to_string();\n            s.push_str(digit);\n\
    \            i += 1;\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        digits.push(format!(\"{}\"\
    , remainder));\n        x = x / base;\n    }\n    digits.push(format!(\"{}\",\
    \ x));\n    s += digits.clone();\n    s", "    let mut s = String::new();\n  \
    \  let mut digits = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    for digit in digits.iter()\
    \ {\n        s.push(*digit);\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    for digit in digits.iter()\
    \ {\n        s.push(*digit);\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        digits.push(format!(\"{}\"\
    , remainder));\n        x = x / base;\n    }\n    digits.push(format!(\"{}\",\
    \ x));\n    for d in digits.chars() {\n        if d == '0' {\n            continue;\n\
    \        }\n        s += &d;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = vec![0u8; 10];\n    let mut carry = 0;\n    let mut digit\
    \ = x;\n    while digit > 0 {\n        digits[digit] = digit % base;\n       \
    \ digit /= base;\n    }\n    for digit in digits {\n        if digit > 0 {\n \
    \           s.push_str(&format!(\"{}\", digit));\n        }\n    }\n    if carry\
    \ != 0 {\n        s.push_str(&format!(\"{}\", carry));\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = String::new();\n    let mut remainder\
    \ = x;\n    let mut i = 0;\n    while remainder > 0 {\n        remainder, remainder\
    \ = remainder / base, &remainder % base;\n        digits.push(&format!(\"{}\"\
    , i));\n        i += 1;\n    }\n    digits.push(&format!(\"{}\", i));\n    s +=\
    \ digits.clone();\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len()\
    \ - 1);\n        if digit >= '0' && digit <= '9' {\n            s.push_str(&digit\
    \ - '0');\n        } else {\n            s.push_str(&digit - 'a' + 10);\n    \
    \    }\n        digits = digits.chars().nth(digits.len() - 1);\n    }\n    if\
    \ base < 10 {\n        s.push_str(&base + '0');\n    } else {\n        s.push_str(&base\
    \ + 'a');\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = 0;\n    while digits.len() > 0 {\n\
    \        let digit = digits.pop().unwrap();\n        remainder *= base;\n    \
    \    remainder += digit;\n    }\n    if remainder < 10 {\n        remainder *=\
    \ base;\n        remainder += 1;\n    }\n    format!(\"{}\", remainder)", "  \
    \  let mut s = String::new();\n    let mut digits = x.to_string();\n    while\
    \ digits.len() > 0 {\n        let digit = digits[digits.length() - 1];\n     \
    \   if digit >= base {\n            digits.remove(digits.length() - 1);\n    \
    \    } else {\n            s += digit;\n            break;\n        }\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut bases = base.to_string();\n    while digits.len() > 0 {\n       \
    \ let mut digit = digits.chars().nth(digits.len() - 1);\n        if digit == bases.chars().nth(bases.len()\
    \ - 1) {\n            digits.remove(digits.len() - 1);\n            bases.remove(bases.len()\
    \ - 1);\n        } else {\n            digits.remove(digits.len() - 1);\n    \
    \    }\n        s += digit;\n    }\n    s += bases", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut digits_len = String::new();\n\
    \    let mut digits_len_len = String::new();\n    let mut digits_len_len_len =\
    \ String::new();\n    let mut digits_len_len_len_len = String::new();\n    let\
    \ mut digits_len_len_len_len_len = String::new();\n    let mut digits_len_len_len_len_len_len\
    \ = String::new();\n    let mut digits_len_len_len_len_len_len_len = String::new();\n\
    \    let mut digits_len_len_len_len_len_len_len_len = String::new();\n    let\
    \ mut digits_len_len_len_len_len_len_len_len_len = String::new();\n    let mut\
    \ digits_len_len_len_len_len_len_len_len_len_len = String::new();\n    let mut\
    \ digits_len_len_len_len_len_len_len_len_len_len = String::new();\n    let mut\
    \ digits_len_len_len_len_len_len_len_len_len_len_len = String::new();\n    let\
    \ mut digits_len_len_len_len_len_len_len_len_len_len_len_len = String::new();\n\
    \    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len = String::new();\n\
    \    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len = String::new();\n\
    \    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len = String::new();\n\
    \    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len =\
    \ String::new();\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mu", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut digits_base = digits.chars().nth(base);\n\
    \    let mut digits_base_len = digits_base.len();\n    let mut digits_base_len\
    \ = digits_base_len.saturating_sub(1);\n    let mut digits_base_len = digits_base_len.saturating_sub(1);\n\
    \    let mut digits_base_len = digits_base_len.saturating_sub(1);\n    let mut\
    \ digits_base_len = digits_base_len.saturating_sub(1);\n    let mut digits_base_len\
    \ = digits_base_len.saturating_sub(1);\n    let mut digits_base_len = digits_base_len.saturating_sub(1);\n\
    \    let mut digits_base_len = digits_base_len.saturating_sub(1);\n    let mut\
    \ digits_base_len = digits_base_len.saturating_sub(1);\n    let mut digits_base_len\
    \ = digits_base_len.saturating_sub(1);\n    let mut digits_base_len = digits_base_len.saturating_sub(1);\n\
    \    let mut digits_base_len = digits_base_len.saturating_sub(1);\n    let mut\
    \ digits_base_len = digits_base_len.saturating_sub(1);\n    let mut digits_base_len\
    \ = digits_base_len.saturating_sub(1);\n    let mut digits_base_len = digits_base_len.saturating_sub(1);\n\
    \    let mut digits_base_len = digits_base_len.saturating_sub(1);\n    let mut\
    \ digits_base_len = digits_base_len.saturating_sub(1);\n    let mut digits_base_len\
    \ = digits_base_len.saturating_sub(1);\n    let mut digits_base_len = digits_base_len.saturating_sub(1);\n\
    \    let mut digits_base_len = digits_base_len.saturating_sub(1);\n    let mut\
    \ digits_base_len = digits_base_len.saturating_sub(1);\n    let mut digits_base_len\
    \ = digits_base_len.saturating_sub(1);\n    let mut digits_base_len = digits_base_len.saturating_sub(1);\n\
    \    let mut digits_base_len = digits_base_len.saturating_sub(1);\n    let mut\
    \ digits_base_len = digits_base_len.saturating_sub(1);\n    let mut digits_base_len\
    \ = digits_base_len.saturating_sub(1);\n    let mut digits_base_len = digits_base_len.saturating_sub(1);\n\
    \    let mut digits_base_len = digits_base_len.saturating_sub(1);\n    let mut\
    \ digits_base_len = digit", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut remainder = x;\n    let mut quotient = 0;\n  \
    \  while remainder > 0 {\n        quotient = remainder / base;\n        remainder\
    \ = remainder % base;\n        digits.push(match quotient {\n            0 =>\
    \ \"0\",\n            1 => \"1\",\n            2 => \"10\",\n            _ =>\
    \ \"100\",\n        });\n    }\n    s += digits;\n    s += \"0\";\n    s[s.len()\
    \ - 1]", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder /=\
    \ base;\n        s.push((digits[..1] as char).to_string());\n    }\n    s.push((digits[..1]\
    \ as char).to_string());\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digits, digit.to_string());\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digits, digit.to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = vec![0u8; 10];\n    let mut carry = 0;\n    while x >= base\
    \ {\n        digits[10] = x % base;\n        x /= base;\n        carry += 1;\n\
    \    }\n    digits[10] = x;\n    for i in 0..10 {\n        s += char::from_u32(digits[i]).unwrap();\n\
    \    }\n    if carry > 0 {\n        s += char::from_u32(digits[10]).unwrap();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut power = 1;\n    while x >= base {\n        digits.push(format!(\"\
    {}\", x % base));\n        x /= base;\n        power += 1;\n    }\n    digits.push(format!(\"\
    {}\", x));\n    s += digits.into_owned();\n    s += \"^\" + format!(\"{}\", power);\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len()\
    \ - 1);\n        if digit >= '0' && digit <= '9' {\n            s += digit;\n\
    \        } else {\n            if base == 2 {\n                s += '0';\n   \
    \         }\n            s += '0';\n        }\n        digits = digits.chars().nth(digits.len()\
    \ - 1);\n    }\n    s", "    let mut s = String::new();\n    let mut digits =\
    \ x.to_string();\n    let mut remainder = x;\n    while remainder > 0 {\n    \
    \    let digit = remainder % base;\n        remainder = remainder / base;\n  \
    \      s = format!(\"{}{}\", digits, digit.to_string());\n    }\n    s", "   \
    \ let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ power = 1;\n    while digits.len() > 0 {\n        if digits.len() > base {\n\
    \            digits = &digits[..(digits.len() - base)];\n            power = power\
    \ / base;\n        }\n        s += digits[digits.len() - 1];\n        digits =\
    \ &digits[..digits.len() - 1];\n    }\n    format!(\"{}\", power)", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut power =\
    \ 1;\n    while digits.len() > 0 {\n        let mut digit = digits.pop().unwrap();\n\
    \        if digit >= base {\n            digit -= base;\n            power = power\
    \ * base;\n        }\n        s.push((digit as char).to_string());\n    }\n  \
    \  format!(\"{}\", power)", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = x;\n    while remainder > base {\n\
    \        remainder /= base;\n        s.push((digits[remainder as usize] as char).to_string());\n\
    \    }\n    s.push((digits[remainder as usize] as char).to_string());\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n\
    \        remainder = remainder / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digits, digit.to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digits, digit.to_string());\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base10 = digits.parse::<usize>().unwrap();\n    let mut remainder\
    \ = base10;\n    while remainder > base {\n        remainder -= base;\n      \
    \  s.push('0');\n    }\n    s.push(remainder.to_string());\n    String::from(s)",
  "    let mut s = String::new();\n    let mut digits = String::new();\n    let mut\
    \ remainder = 0;\n    while x >= base {\n        remainder = x % base;\n     \
    \   digits.push(format!(\"{}\", remainder));\n        x /= base;\n    }\n    digits.push(format!(\"\
    {}\", x));\n    s += digits.into_owned();\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1);\n        if digit == '0' {\n            digit = digits.chars().nth(base.len()\
    \ - 2);\n        }\n        s += digit;\n        base = base.chars().nth(base.len()\
    \ - 1);\n    }\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        s = format!(\"{}{}\", s, digit);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        if base == 10 {\n            s.push_str(&digits[i]);\n          \
    \  i += 1;\n        } else {\n            let mut digit = digits[i];\n       \
    \     if digit == '0' {\n                digit = digits[i - 1];\n            }\n\
    \            s.push_str(&digit.to_string());\n        }\n        if i == digits.length()\
    \ {\n            break;\n        }\n        let mut next = digits[i];\n      \
    \  if next == '0' {\n            base = base.to_string();\n            digits.remove_suffix(i);\n\
    \            i += 1;\n        } else {\n            base = base.to_string();\n\
    \            digits.remove_suffix(i);\n            i += 1;\n        }\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut power = 1;\n    while x != 0 {\n        digits.push(format!(\"{}\"\
    , x % base));\n        x /= base;\n        power += 1;\n    }\n    for _ in 0..power\
    \ {\n        s.push('0');\n    }\n    s.push((&digits[..]).to_owned());\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > base {\n        remainder -= base;\n \
    \       digits.insert(0, remainder.to_string());\n    }\n    digits.insert(0,\
    \ remainder.to_string());\n    s += &digits[..];\n    s", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        let digit = x.chars().nth(i).unwrap();\n\
    \        let mut remainder = remainder % base;\n        remainder = remainder\
    \ / base;\n        if digit == '0' {\n            digits.push('0');\n        }\
    \ else {\n            digits.push(digit.to_string());\n        }\n        remainder\
    \ = remainder % base;\n        i += 1;\n    }\n    if remainder == 0 {\n     \
    \   digits.push('0');\n    }\n    while digits[digits.len() - 1] == '0' {\n  \
    \      digits.pop();\n    }\n    for i in 0..digits.len() {\n        if digits[i]\
    \ == '0' {\n            digits.pop();\n        }\n    }\n    for i in 0..digits.len()\
    \ {\n        if digits[i] == '0' {\n            digits.pop();\n        }\n   \
    \ }\n    for i in 0..digits.len() {\n        if digits[i] == '0' {\n         \
    \   digits.pop();\n        }\n    }\n    for i in 0..digits.len() {\n        if\
    \ digits[i] == '0' {\n            digits.pop();\n        }\n    }\n    for i in\
    \ 0..digits.len() {\n        if digits[i] == '0' {\n            digits.pop();\n\
    \        }\n    }\n    for i in 0..digits.len() {\n        if digits[i] == '0'\
    \ {\n            digits.pop();\n        }\n    }\n    for i in 0..digits.len()\
    \ {\n        if digits[i] == '0' {\n            digits.pop();\n        }\n   \
    \ }\n    for i in 0..digits.len() {\n        if digits[i] == '0' {\n         \
    \   digits.pop();\n        }\n    }\n    for i in 0..digits.len() {\n        if\
    \ digits[i] == '0' {\n            digits.pop();\n        }\n    }\n    for i in\
    \ 0..digits.len() {\n        if digits[i] == '0' {\n            digits.pop();\n\
    \        }\n    }\n    for i in 0..digits.len() {\n        if digits[i] == '0'\
    \ {\n            digits.pop();\n        }\n    }\n    for i in 0..digits.len()\
    \ {\n        if digits[i] == '0' {\n            digits.pop();\n        }\n   \
    \ }\n    for i in 0..digits.len() {\n        if digits[i] == '0' {\n         \
    \   digits.pop();\n        }\n    }\n    for i in 0..digits.len() {\n        if\
    \ digits[i] == '0' {\n            digits.pop();\n        }\n    }\n    for i in\
    \ 0..digits.len() {\n        if digits[i] == '0' {\n            digits.pop();\n\
    \        }\n    }\n    for i in 0..digits.len() {\n        if digits[i] == '0'\
    \ {\n            digits.pop();\n        }\n    }\n    for i in 0.", "    let mut\
    \ s = String::new();\n    let mut digits = String::new();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    while digits.length() > 0 {\n        s.push((digits.pop() + digits.pop()).to_string());\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    for digit in digits {\n        s += digit;\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = String::new();\n    let mut remainder\
    \ = 0;\n    while x >= base {\n        remainder = x % base;\n        digits.push(format!(\"\
    {}\", remainder));\n        x = x / base;\n    }\n    digits.push(format!(\"{}\"\
    , x));\n    s += &digits;\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = String::new();\n    let mut remainder = x;\n    let mut i = 0;\n  \
    \  while remainder > 0 {\n        remainder %= base;\n        digits.push((remainder\
    \ as char).to_string());\n        i += 1;\n    }\n    digits.push(format!(\"0\"\
    , base));\n    s += digits.join(\"\");\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = 0;\n    while !digits.is_empty() {\n\
    \        let digit = digits.chars().nth(base).unwrap();\n        remainder +=\
    \ digit as isize;\n        s = format!(\"{}{}\", s, digit);\n        digits =\
    \ digits.chars().skip_while(|c| c != digit).collect();\n    }\n    if remainder\
    \ != 0 {\n        s = format!(\"{}{}\", s, remainder);\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string();\n    while digits.len()\
    \ > base {\n        digits = &digits[..(digits.len() - base)];\n    }\n    s +=\
    \ &digits[..digits.len() - base];\n    s += &digits[digits.len() - base..];\n\
    \    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    for digit in digits.iter() {\n        s.push(digit);\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut digits = String::new();\n    let mut\
    \ remainder = 0;\n    while x >= base {\n        remainder = x % base;\n     \
    \   digits.push(format!(\"{}\", remainder));\n        x /= base;\n    }\n    digits.push(format!(\"\
    {}\", x));\n    for digit in digits.chars() {\n        s += digit;\n    }\n  \
    \  s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = x;\n    let mut i = 0;\n    while remainder > 0 {\n \
    \       remainder %= base;\n        digits.push((remainder as char).to_string());\n\
    \        i += 1;\n    }\n    for digit in digits {\n        s += digit;\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base10 = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ digits_base = digits.clone();\n    let mut base10_base = base10.clone();\n \
    \   let mut base10_digits = base10_base.clone();\n    let mut base10_digits_base\
    \ = base10_digits.clone();\n    let mut base10_digits_base2 = base10_digits_base.clone();\n\
    \    let mut base10_digits_base3 = base10_digits_base2.clone();\n    let mut base10_digits_base4\
    \ = base10_digits_base3.clone();\n    let mut base10_digits_base5 = base10_digits_base4.clone();\n\
    \    let mut base10_digits_base6 = base10_digits_base5.clone();\n    let mut base10_digits_base7\
    \ = base10_digits_base6.clone();\n    let mut base10_digits_base8 = base10_digits_base7.clone();\n\
    \    let mut base10_digits_base9 = base10_digits_base8.clone();\n    let mut base10_digits_base10\
    \ = base10_digits_base9.clone();\n    let mut base10_digits_base11 = base10_digits_base10.clone();\n\
    \    let mut base10_digits_base12 = base10_digits_base11.clone();\n    let mut\
    \ base10_digits_base13 = base10_digits_base12.clone();\n    let mut base10_digits_base14\
    \ = base10_digits_base13.clone();\n    let mut base10_digits_base15 = base10_digits_base14.clone();\n\
    \    let mut base10_digits_base16 = base10_digits_base15.clone();\n    let mut\
    \ base10_digits_base17 = base10_digits_base16.clone();\n    let mut base10_digits_base18\
    \ = base10_digits_base17.clone();\n    let mut base10_digits_base19 = base10_digits_base18.clone();\n\
    \    let mut base10_digits_base20 = base10_digits_base19.clone();\n    let mut\
    \ base10_digits_base21 = base10_digits_base20.clone();\n    let mut base10_digits_base22\
    \ = base10_digits_base21.clone();\n    let mut base10_digits_base23 = base10_digits_base22.clone();\n\
    \    let mut base10_digits_base24 = base10_digits_base23.clone();\n    let mut\
    \ base10_digits_base25 = base10_digits_base24.clone();\n    let mut ", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut bases = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    let mut i = 0;\n    while i < digits.size() {\n        let digit\
    \ = digits[i];\n        let base = bases[i];\n        if digit == '0' {\n    \
    \        digits.remove(&i);\n            bases.remove(&i);\n            i += 1;\n\
    \            continue;\n        }\n        if digit == '1' {\n            digits.remove(&i);\n\
    \            bases.remove(&i);\n            i += 1;\n            continue;\n \
    \       }\n        let digit = digit as char;\n        let base = base as char;\n\
    \        let mut new_digit = digit as char;\n        let mut new_base = base as\
    \ char;\n        if digit == '9' {\n            new_digit += '0';\n          \
    \  new_base += '0';\n        }\n        if digit == 'A' {\n            new_digit\
    \ += '0';\n            new_base += 'A' - 10;\n        }\n        if digit == 'B'\
    \ {\n            new_digit += '0';\n            new_base += 'B' - 10;\n      \
    \  }\n        if digit == 'C' {\n            new_digit += '0';\n            new_base\
    \ += 'C' - 10;\n        }\n        if digit == 'D' {\n            new_digit +=\
    \ '0';\n            new_base += 'D' - 10;\n        }\n        if digit == 'E'\
    \ {\n            new_digit += '0';\n            new_base += 'E' - 10;\n      \
    \  }\n        if digit == 'F' {\n            new_digit += '0';\n            new_base\
    \ += 'F' - 10;\n        }\n        if digit == 'G' {\n            new_digit +=\
    \ '0';\n            new_base += 'G' - 10;\n        }\n        if digit == 'H'\
    \ {\n            new_digit += '0';\n            new_base += 'H' - 10;\n      \
    \  }\n        if digit == 'I' {\n            new_digit += '0';\n            new_base\
    \ += 'I' - 10;\n        }\n        if digit == 'J' {\n            new_digit +=\
    \ '0';\n            new_base += 'J' - 10;\n        }\n        if digit == 'K'\
    \ {\n            new_digit += '0';\n            new_base += 'K' - 10;\n      \
    \  }\n        if digit == 'L' {\n            new_digit += '0';\n            new_base\
    \ += 'L' - 10;\n        }\n        if digit == 'M' {\n            new_digit +=\
    \ '0';\n            new_base += 'M' - 10;\n        }\n        if digit == 'N'\
    \ {\n            new_digit += '0';\n            new_base += 'N' - 10;\n      \
    \  }\n        if digit == 'O' {\n            new_digit += '0';\n            new_base\
    \ += 'O' - 10;\n        }\n", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = x;\n    while remainder > base {\n\
    \        remainder /= base;\n        s.push((&digits[..]).to_digit(base).unwrap());\n\
    \    }\n    s.push((&digits[..]).to_digit(base).unwrap());\n    String::from(s)",
  "    let mut s = String::new();\n    let mut digits = String::new();\n    let mut\
    \ remainder = x;\n    let mut digit = 0;\n    while remainder > 0 {\n        digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    digits.reverse();\n    for i in 0..digits.len() {\n        s += digits[i];\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digits[digit].to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder /= base;\n        s.push((digits[remainder as usize]\
    \ as char).to_string());\n    }\n    s.push((digits[remainder as usize] as char).to_string());\n\
    \    String::from(s)", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut power = 1;\n    let mut i = 0;\n    while i < digits.len() {\n  \
    \      if digits.len() - i < base {\n            power = 1;\n        } else {\n\
    \            power = power * base;\n        }\n        i += base;\n    }\n   \
    \ while power > 0 {\n        digits = digits.chars().map(|c| if c >= '0' && c\
    \ <= '9' { c - '0' } else { c }).collect::<String>();\n        power = power /\
    \ base;\n    }\n    s = digits.reverse().collect();\n    s", "    let mut s =\
    \ String::new();\n    let mut remainder = x;\n    while remainder > 0 {\n    \
    \    let digit = remainder % base;\n        remainder = remainder / base;\n  \
    \      s = format!(\"{}{}\", s, digit);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1);\n        if digit == '0' {\n            digit = digits.chars().nth(base.len()\
    \ - 2);\n        }\n        s += digit;\n        digits.remove(digit);\n     \
    \   base /= 10;\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = x;\n    while remainder > 0 {\n  \
    \      let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", digits, digit.to_string());\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut digits_len = digits.len();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base_len = base.len();\n    let mut i = 0;\n    while i < digits_len\
    \ {\n        if digits[i] >= base[base_len - 1] {\n            digits_len -= 1;\n\
    \            base_len -= 1;\n        } else {\n            digits_len -= 1;\n\
    \        }\n        i += 1;\n    }\n    while base_len > 0 {\n        digits.push(0);\n\
    \        base_len -= 1;\n    }\n    digits.reverse();\n    for i in 0..digits_len\
    \ {\n        s += &base[base_len - 1].to_string()[digits[i] - base[base_len -\
    \ 1]];\n    }\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    digits.push(remainder);\n    while x != 0 {\n\
    \        remainder += x % base;\n        x /= base;\n        s.push(char::from_u32(x\
    \ as u32).unwrap().to_string());\n    }\n    digits.reverse();\n    format!(\"\
    {}{}\", digits, s)", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len()\
    \ - 1);\n        if digit >= '0' && digit <= '9' {\n            s.push_str(digit.to_string());\n\
    \        } else {\n            s.push_str(\"0\");\n        }\n        digits =\
    \ digits.chars().nth(digits.len() - 1);\n    }\n    s.push_str(&base.to_string());\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits.insert(0,\
    \ digit.to_string());\n    }\n    digits.insert(0, remainder.to_string());\n \
    \   s += &digits;\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = x;\n    while remainder > 0 {\n  \
    \      let digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", digits, digit.to_string());\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut remainder = x;\n    while remainder > 0 {\n\
    \        let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", digit, s);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = 0;\n    while digits.len()\
    \ > 0 {\n        remainder = digits[digits.len() - 1] % base;\n        digits\
    \ = &digits[..digits.len() - 1];\n        s = format!(\"{}{}\", s, remainder);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    digits.push(remainder.to_string());\n    digits.reverse();\n    for\
    \ digit in digits {\n        s += digit;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut basedigits = digits.chars().nth(base);\n\
    \    while basedigits.len() > 0 {\n        s += &basedigits[..];\n        basedigits\
    \ = basedigits.chars().nth(base);\n    }\n    s += &digits[..];\n    s", "   \
    \ let mut s = String::new();\n    let mut remainder = 0;\n    while x >= base\
    \ {\n        remainder += x % base;\n        x /= base;\n    }\n    s += &format!(\"\
    {}\", remainder);\n    s += &format!(\"{}\", x);\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base10 = base.to_string();\n\
    \    let mut base10_digits = base10.to_string();\n    let mut base10_digits_len\
    \ = base10_digits.length();\n    let mut base10_digits_len = base10_digits_len.to_string();\n\
    \    let mut base10_digits_len = base10_digits_len.to_string();\n    let mut base10_digits_len\
    \ = base10_digits_len.to_string();\n    let mut base10_digits_len = base10_digits_len.to_string();\n\
    \    let mut base10_digits_len = base10_digits_len.to_string();\n    let mut base10_digits_len\
    \ = base10_digits_len.to_string();\n    let mut base10_digits_len = base10_digits_len.to_string();\n\
    \    let mut base10_digits_len = base10_digits_len.to_string();\n    let mut base10_digits_len\
    \ = base10_digits_len.to_string();\n    let mut base10_digits_len = base10_digits_len.to_string();\n\
    \    let mut base10_digits_len = base10_digits_len.to_string();\n    let mut base10_digits_len\
    \ = base10_digits_len.to_string();\n    let mut base10_digits_len = base10_digits_len.to_string();\n\
    \    let mut base10_digits_len = base10_digits_len.to_string();\n    let mut base10_digits_len\
    \ = base10_digits_len.to_string();\n    let mut base10_digits_len = base10_digits_len.to_string();\n\
    \    let mut base10_digits_len = base10_digits_len.to_string();\n    let mut base10_digits_len\
    \ = base10_digits_len.to_string();\n    let mut base10_digits_len = base10_digits_len.to_string();\n\
    \    let mut base10_digits_len = base10_digits_len.to_string();\n    let mut base10_digits_len\
    \ = base10_digits_len.to_string();\n    let mut base10_digits_len = base10_digits_len.to_string();\n\
    \    let mut base10_digits_len = base10_digits_len.to_string();\n    let mut base10_digits_len\
    \ = base10_digits_len.to_string();\n    let mut base10_digits_len = base10_digits_len.to_string();\n\
    \    let mut base10_digits_len = base10_digits_len.to_string();\n    let mut base10_digits_len\
    \ = base10_digits_len.to_string();\n", "    let mut s = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut base = base.to_string();\n    let mut\
    \ power = 1;\n    let mut i = 0;\n    while i < digits.size() {\n        if digits[i]\
    \ > base {\n            power = 1;\n            i += 1;\n        } else {\n  \
    \          power += 1;\n        }\n    }\n    while power > 0 {\n        if power\
    \ % 2 == 0 {\n            s.push_str(&base);\n        } else {\n            s.push_str(&base);\n\
    \            s.push_str(&base);\n        }\n        power /= 2;\n        base\
    \ /= base;\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut power = 1;\n    while x != 0 {\n        digits.push_str(&format!(\"\
    {}\", x % base));\n        x /= base;\n        power += 1;\n    }\n    digits.push_str(&format!(\"\
    {}\", power));\n    s += &digits;\n    s", "    let mut s = String::new();\n \
    \   let mut digits = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    for digit in digits\
    \ {\n        s += digit;\n    }\n    s", "    let mut s = String::new();\n   \
    \ let mut digits = x.to_string();\n    let mut bases = base.to_string();\n   \
    \ let mut i = 0;\n    while i < digits.length() {\n        if digits[i] > bases.chars().last().unwrap()\
    \ {\n            s.push_str(&bases.chars().nth(i).unwrap());\n            bases\
    \ = bases.chars().nth(i + 1).unwrap();\n        } else {\n            s.push_str(&digits.chars().nth(i).unwrap());\n\
    \            digits = digits.chars().nth(i + 1).unwrap();\n        }\n       \
    \ i += 1;\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut remainder = 0;\n    let mut digit = x;\n    while\
    \ digit > 0 {\n        remainder = digit % base;\n        digit = digit / base;\n\
    \        digits.push(remainder);\n    }\n    for digit in digits {\n        s.push((digit\
    \ as char).to_string());\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut power = 1;\n    while digits.len()\
    \ > 0 {\n        let digit = digits.chars().nth(digits.length() - 1);\n      \
    \  if digit == '0' {\n            power = 1;\n        } else {\n            power\
    \ = power * base;\n        }\n        digits = digits.chars().nth(digits.length()\
    \ - 1);\n    }\n    power.to_string().to_string() + digits", "    let mut s =\
    \ String::new();\n    let mut remainder = x;\n    let mut quotient = x;\n    while\
    \ quotient > 0 {\n        let remainder = quotient % base;\n        quotient =\
    \ quotient / base;\n        s = format!(\"{}{}\", s, remainder);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    while base.len() > 0 {\n        let mut digit\
    \ = digits.chars().nth(base.len() - 1);\n        digit = digit.to_string().chars().nth(digits.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digits.len() - 1);\n  \
    \      digit = digit.to_string().chars().nth(digits.len() - 1);\n        digit\
    \ = digit.to_string().chars().nth(digits.len() - 1);\n        digit = digit.to_string().chars().nth(digits.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digits.len() - 1);\n  \
    \      digit = digit.to_string().chars().nth(digits.len() - 1);\n        digit\
    \ = digit.to_string().chars().nth(digits.len() - 1);\n        digit = digit.to_string().chars().nth(digits.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digits.len() - 1);\n  \
    \      digit = digit.to_string().chars().nth(digits.len() - 1);\n        digit\
    \ = digit.to_string().chars().nth(digits.len() - 1);\n        digit = digit.to_string().chars().nth(digits.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digits.len() - 1);\n  \
    \      digit = digit.to_string().chars().nth(digits.len() - 1);\n        digit\
    \ = digit.to_string().chars().nth(digits.len() - 1);\n        digit = digit.to_string().chars().nth(digits.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digits.len() - 1);\n  \
    \      digit = digit.to_string().chars().nth(digits.len() - 1);\n        digit\
    \ = digit.to_string().chars().nth(digits.len() - 1);\n        digit = digit.to_string().chars().nth(digits.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digits.len() - 1);\n  \
    \      digit = digit.to_string().chars().nth(digits.len() - 1);\n        digit\
    \ = digit.to_string().chars().nth(digits.len() - 1);\n        digit = digit.to_string().chars().nth(digits.len()\
    \ - 1);\n        digit = digit.to_string().chars().nth(digits.len() - 1);\n  \
    \      digit = digit.to_string().chars().nth(digits.len() - 1);\n        digit\
    \ = digit.to_string().chars().nth(digits.len() - 1);\n        digit = digit.to_string().chars().nth(digits.len()\
    \ - 1);\n        ", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder /=\
    \ base;\n        s += &digits[..(remainder as usize)];\n    }\n    s += &digits[..(remainder\
    \ as usize)];\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        digits.push(&format!(\"{}\", remainder));\n        x = x / base;\n  \
    \  }\n    digits.push(&format!(\"{}\", x));\n    s += &digits;\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = 0;\n    while !digits.is_empty() {\n        let digit = digits.chars().nth(base).unwrap();\n\
    \        remainder *= base;\n        remainder += digit;\n        digits = digits.chars().skip_while(|c|\
    \ c != digit).collect();\n    }\n    format!(\"{}\", remainder)", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        s = format!(\"{}{}\", digits, digit.to_string());\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        digits.push(format!(\"{}\", remainder));\n        x = x / base;\n   \
    \ }\n    digits.push(format!(\"{}\", x));\n    s = digits.join(\"\");\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ digits_len = digits.length();\n    let mut remainder = 0;\n    while digits_len\
    \ > 0 {\n        let mut digit = digits[digits_len - 1];\n        let mut digits_len\
    \ -= 1;\n        while digits_len > 0 && digit >= base {\n            digit /=\
    \ base;\n            digits_len -= 1;\n        }\n        remainder += digit as\
    \ isize;\n        digits = &digits[digits_len..];\n    }\n    if remainder > 0\
    \ {\n        s += &format!(\"{}\", remainder);\n    }\n    s", "    let mut s\
    \ = String::new();\n    let mut digits = x.to_string();\n    let mut base = base.to_string();\n\
    \    while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        digit = digit.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut digits_len = digits.length();\n\
    \    let mut power = 1;\n    let mut i = 0;\n    while i < digits_len {\n    \
    \    if digits[i] > base {\n            digits = digits.insert(i, 0);\n      \
    \      digits_len = digits.length();\n        } else {\n            digits = digits.insert(i,\
    \ digits[i] / power);\n            digits_len = digits.length();\n           \
    \ power = power * base;\n        }\n        i += 1;\n    }\n    s = digits.to_string();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut digits_len = digits.length();\n    let mut remainder = 0;\n    while\
    \ digits_len > 0 {\n        let mut digit = digits[digits_len - 1];\n        if\
    \ digit >= base {\n            digit = digit - base;\n            digits_len -=\
    \ 1;\n        } else {\n            digit = digit + base;\n            digits_len\
    \ -= 1;\n        }\n        digits = &digits[digits_len..];\n        remainder\
    \ = remainder + digit.to_string();\n    }\n    s = format!(\"{}\", remainder)\
    \ + s;\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if base < 10 {\n            s.push_str(&digits[i..i+1]);\n      \
    \      i += 1;\n        } else {\n            s.push_str(&digits[i..i+base.len()]);\n\
    \            i += base.len();\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    let mut digits = x.to_string();\n    while !digits.is_empty()\
    \ {\n        let digit = digits.chars().nth(base).unwrap();\n        remainder\
    \ += digit as isize;\n        digits = digits.chars().skip_while(|c| c != digit).collect();\n\
    \    }\n    if remainder > 0 {\n        s += &format!(\"{}\", remainder);\n  \
    \  }\n    s += digits", "    let mut s = String::new();\n    let mut digits =\
    \ String::new();\n    let mut power = 1;\n    let mut remainder = 0;\n    while\
    \ x >= base {\n        remainder = x % base;\n        x /= base;\n        power\
    \ = power + 1;\n    }\n    while x != 0 {\n        remainder = remainder + x %\
    \ base;\n        x /= base;\n        power = power + 1;\n    }\n    while power\
    \ != 0 {\n        digits = format!(\"{}{}\", digits, power);\n        power =\
    \ power - 1;\n    }\n    s = format!(\"{}{}\", s, digits);\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = String::new();\n    let mut remainder\
    \ = 0;\n    while x >= base {\n        remainder = x % base;\n        digits.push(format!(\"\
    {}\", remainder));\n        x = x / base;\n    }\n    digits.push(format!(\"{}\"\
    , x));\n    s += digits.clone();\n    s", "    let mut s = String::new();\n  \
    \  let mut digits = x.to_string();\n    let mut power = 1;\n    while digits.len()\
    \ > 0 {\n        if digits.len() < base {\n            power = power * 10;\n \
    \       }\n        let digit = digits.chars().nth(digits.len() - 1);\n       \
    \ if digit == '0' {\n            power = power * 10;\n        } else {\n     \
    \       power = power * base;\n        }\n        s = format!(\"{}{}\", s, digit);\n\
    \        digits = &digits[digits.len() - 1];\n    }\n    format!(\"{}\", power)",
  "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] >= base[0] {\n  \
    \          s.push_str(&base[digits[i] - base[0]]);\n            i += 1;\n    \
    \    } else {\n            s.push_str(&digits[i]);\n            i += 1;\n    \
    \    }\n    }\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = 0;\n    while x >= base {\n        remainder = x % base;\n        x /= base;\n\
    \        s.push((remainder as char).to_string());\n    }\n    s.push((x as char).to_string());\n\
    \    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        digits.push_str(&format!(\"\
    {}\", digit));\n    }\n    digits.push_str(&format!(\"{}\", remainder));\n   \
    \ s += &digits;\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = 0;\n    while x >= base {\n        remainder += x / base;\n        x %= base;\n\
    \        s += remainder.to_string();\n        remainder = 0;\n    }\n    s +=\
    \ x.to_string();\n    s += remainder.to_string();\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digits, digit.to_string());\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    while base.len() > 0 {\n        let\
    \ mut digit = digits.chars().nth(base.len() - 1).unwrap();\n        if digit <\
    \ '0' {\n            digit += '0';\n        }\n        s += digit;\n        digits\
    \ = digits.chars().skip_while(|c| c < '0').collect();\n        base = base.chars().skip_while(|c|\
    \ c < '0').collect();\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut digits = String::new();\n    let mut power = 1;\n    let mut digit = x;\n\
    \    while digit > 0 {\n        digits.push(digit % base);\n        digit /= base;\n\
    \        power += 1;\n    }\n    digits.reverse();\n    for digit in digits {\n\
    \        if power > 0 {\n            s.push_str(&format!(\"{}{}\", digit, base**power));\n\
    \        } else {\n            s.push_str(&digit);\n        }\n        power -=\
    \ 1;\n    }\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x / base;\n\
    \        digits.push(format!(\"{}\", remainder));\n        x = x % base;\n   \
    \ }\n    digits.push(format!(\"{}\", x));\n    s += &digits;\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string();\n    let mut base\
    \ = base.to_string();\n    let mut digits_len = digits.length();\n    let mut\
    \ base_len = base.length();\n    let mut i = 0;\n    while i < digits_len {\n\
    \        if digits[i] > base {\n            digits[i] = digits[i] - base;\n  \
    \          i += 1;\n        } else {\n            digits[i] = digits[i] - base\
    \ + 10;\n            i += 1;\n        }\n    }\n    while i < base_len {\n   \
    \     digits.push('0');\n        i += 1;\n    }\n    s += digits.to_string();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut power = 1;\n    while digits.len() > 0 {\n        let digit = digits.remove(0);\n\
    \        power = power * base;\n        if power > 10 {\n            power = 1;\n\
    \            digits.insert(0, digit);\n        }\n    }\n    format!(\"{}\", power)",
  "    let mut s = String::new();\n    let mut digits = String::new();\n    let mut\
    \ remainder = 0;\n    while x >= base {\n        remainder = x % base;\n     \
    \   digits.push(format!(\"{}\", remainder));\n        x = x / base;\n    }\n \
    \   digits.push(format!(\"{}\", x));\n    s += &digits;\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut power =\
    \ 1;\n    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.length()\
    \ - 1).unwrap();\n        if digit == '0' {\n            power = 1;\n        }\
    \ else {\n            power = power as isize;\n        }\n        if power > base\
    \ {\n            power = 1;\n        } else {\n            power = power as isize;\n\
    \        }\n        s.push((digit as char).to_string());\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        if base == \"10\" {\n            s += &digits[i ..].to_string();\n\
    \            break;\n        }\n        if base == \"0\" && digits[i] == \"0\"\
    \ {\n            s += &digits[i ..].to_string();\n            break;\n       \
    \ }\n        if base == \"0\" && digits[i] == \"1\" {\n            s += &digits[i\
    \ ..].to_string();\n            break;\n        }\n        if base == \"1\" &&\
    \ digits[i] == \"0\" {\n            s += &digits[i ..].to_string();\n        \
    \    break;\n        }\n        if base == \"1\" && digits[i] == \"1\" {\n   \
    \         s += &digits[i ..].to_string();\n            break;\n        }\n   \
    \     if base == \"2\" && digits[i] == \"0\" {\n            s += &digits[i ..].to_string();\n\
    \            break;\n        }\n        if base == \"2\" && digits[i] == \"1\"\
    \ {\n            s += &digits[i ..].to_string();\n            break;\n       \
    \ }\n        if base == \"3\" && digits[i] == \"0\" {\n            s += &digits[i\
    \ ..].to_string();\n            break;\n        }\n        if base == \"3\" &&\
    \ digits[i] == \"1\" {\n            s += &digits[i ..].to_string();\n        \
    \    break;\n        }\n        if base == \"4\" && digits[i] == \"0\" {\n   \
    \         s += &digits[i ..].to_string();\n            break;\n        }\n   \
    \     if base == \"4\" && digits[i] == \"1\" {\n            s += &digits[i ..].to_string();\n\
    \            break;\n        }\n        if base == \"5\" && digits[i] == \"0\"\
    \ {\n            s += &digits[i ..].to_string();\n            break;\n       \
    \ }\n        if base == \"5\" && digits[i] == \"1\" {\n            s += &digits[i\
    \ ..].to_string();\n            break;\n        }\n        if base == \"6\" &&\
    \ digits[i] == \"0\" {\n            s += &digits[i ..].to_string();\n        \
    \    break;\n        }\n        if base == \"6\" && digits[i] == \"1\" {\n   \
    \         s += &digits[i ..].to_string();\n            break;\n        }\n   \
    \     if base == \"7\" && digits[i] == \"0\" {\n            s += &digits[i ..].to_string();\n\
    \            break;\n        }\n        if base == \"7\" && digits[i] == \"1\"\
    \ {\n            s += &digits[i ..].to_string();\n            break;\n       \
    \ }\n        if base == \"8\" && digits[i] == \"0\" {\n            s += &digits[i\
    \ ..].to_string();\n            break;\n        }\n        if base == \"8\" &&\
    \ digits[i] == \"1\" {\n", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut remainder = 0;\n    while x >= base {\n      \
    \  remainder = x % base;\n        digits.push(format!(\"{}\", remainder));\n \
    \       x = x / base;\n    }\n    digits.push(format!(\"{}\", x));\n    s += digits.clone();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        digits.insert(0, '0');\n    }\n    digits.insert(0, remainder.to_string());\n\
    \    s = &digits[..];\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut remainder = 0;\n    while x >= base {\n      \
    \  remainder = x % base;\n        digits.push(format!(\"{}\", remainder));\n \
    \       x = x / base;\n    }\n    digits.push(format!(\"{}\", x));\n    s += &digits[..digits.len()\
    \ - 1];\n    s", "    let mut s = String::new();\n    let mut remainder = 0;\n\
    \    while x >= base {\n        remainder += x / base;\n        x -= base;\n \
    \   }\n    remainder += x;\n    s += &format!(\"{}\", remainder);\n    s", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base10: Vec<isize> = digits.iter().map(|x| x as isize).collect();\n\
    \    base10.push(0);\n    let mut base10_iter = base10.iter();\n    let mut base10_len\
    \ = base10_iter.len();\n    let mut base10_digits = base10_iter.peekable().peek().unwrap();\n\
    \    let mut base10_digit = base10_digits.peek().unwrap();\n    let mut base10_digit_len\
    \ = base10_digit.len();\n    let mut base10_digit_digit = base10_digit.peek().unwrap();\n\
    \    let mut base10_digit_digit_len = base10_digit_digit.len();\n    let mut base10_digit_digit_digit\
    \ = base10_digit_digit.peek().unwrap();\n    let mut base10_digit_digit_digit_len\
    \ = base10_digit_digit_digit.len();\n    let mut base10_digit_digit_digit_digit\
    \ = base10_digit_digit_digit.peek().unwrap();\n    let mut base10_digit_digit_digit_len\
    \ = base10_digit_digit_digit_digit.len();\n    let mut base10_digit_digit_digit_digit\
    \ = base10_digit_digit_digit_digit.peek().unwrap();\n    let mut base10_digit_digit_digit_digit_len\
    \ = base10_digit_digit_digit_digit_digit.len();\n    let mut base10_digit_digit_digit_digit_digit\
    \ = base10_digit_digit_digit_digit_digit.peek().unwrap();\n    let mut base10_digit_digit_digit_digit_len\
    \ = base10_digit_digit_digit_digit_digit.len();\n    let mut base10_digit_digit_digit_digit_digit\
    \ = base10_digit_digit_digit_digit_digit.peek().unwrap();\n    let mut base10_digit_digit_digit_digit_len\
    \ = base10_digit_digit_digit_digit_digit.len();\n    let mut base10_digit_digit_digit_digit_digit\
    \ = base10_digit_digit_digit_digit_digit.peek().unwrap();\n    let mut base10_digit_digit_digit_digit_digit_len\
    \ = base10_digit_digit_digit_digit_digit_digit.len();\n    let mut base10_digit_digit_digit_digit_digit_digit\
    \ = base10_digit_digit_digit_digit_digit_digit.peek().unwrap();\n    let mut base10_digit_digit_digit_digit_digit_len\
    \ = base10_digit_digit_digit_digit_digit_digit.len();\n    let mut base10_digit_digit_digit_digit_digit_digit\
    \ = base10_digit_digit_digit_digit_digit_digit.peek().unwrap();\n    let mut base10_digit_digit_digit_digit_digit_len\
    \ = base10_digit_digit_digit_digit_digit_digit", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        digits.push(format!(\"{}\"\
    , remainder));\n        x = x / base;\n    }\n    digits.push(format!(\"{}\",\
    \ x));\n    s += &digits;\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = String::new();\n    let mut remainder = x;\n    while remainder > 0\
    \ {\n        let digit = remainder % base;\n        remainder = remainder / base;\n\
    \        digits.push(digit.to_string());\n    }\n    for digit in digits.iter()\
    \ {\n        s.push(digit);\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder += x % base;\n        x /= base;\n    }\n    digits.push(&remainder);\n\
    \    while x > 0 {\n        remainder += x % base;\n        x /= base;\n     \
    \   s.push(&remainder);\n    }\n    digits.reverse();\n    format!(\"{}\", digits)",
  "    let mut s = String::new();\n    let mut digits = String::new();\n    let mut\
    \ remainder = x;\n    let mut i = 0;\n    while remainder > 0 {\n        digits.push(format!(\"\
    {}\", remainder % base));\n        remainder = remainder / base;\n        i +=\
    \ 1;\n    }\n    while i < 10 {\n        digits.push('0');\n        i += 1;\n\
    \    }\n    s += digits.reverse();\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut remainder = x;\n    while remainder > 0 {\n  \
    \      let digit = remainder % base;\n        remainder = remainder / base;\n\
    \        digits.push(digit.to_string());\n    }\n    for digit in digits.drain(..)\
    \ {\n        s.push(digit);\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut digits_base = digits.chars().collect::<Vec<_>>();\n\
    \    let mut digits_base2 = digits.chars().collect::<Vec<_>>();\n    let mut digits_base3\
    \ = digits.chars().collect::<Vec<_>>();\n    let mut digits_base4 = digits.chars().collect::<Vec<_>>();\n\
    \    let mut digits_base5 = digits.chars().collect::<Vec<_>>();\n    let mut digits_base6\
    \ = digits.chars().collect::<Vec<_>>();\n    let mut digits_base7 = digits.chars().collect::<Vec<_>>();\n\
    \    let mut digits_base8 = digits.chars().collect::<Vec<_>>();\n    let mut digits_base9\
    \ = digits.chars().collect::<Vec<_>>();\n    let mut digits_base10 = digits.chars().collect::<Vec<_>>();\n\
    \    let mut digits_base11 = digits.chars().collect::<Vec<_>>();\n    let mut\
    \ digits_base12 = digits.chars().collect::<Vec<_>>();\n    let mut digits_base13\
    \ = digits.chars().collect::<Vec<_>>();\n    let mut digits_base14 = digits.chars().collect::<Vec<_>>();\n\
    \    let mut digits_base15 = digits.chars().collect::<Vec<_>>();\n    let mut\
    \ digits_base16 = digits.chars().collect::<Vec<_>>();\n    let mut digits_base17\
    \ = digits.chars().collect::<Vec<_>>();\n    let mut digits_base18 = digits.chars().collect::<Vec<_>>();\n\
    \    let mut digits_base19 = digits.chars().collect::<Vec<_>>();\n    let mut\
    \ digits_base20 = digits.chars().collect::<Vec<_>>();\n    let mut digits_base21\
    \ = digits.chars().collect::<Vec<_>>();\n    let mut digits_base22 = digits.chars().collect::<Vec<_>>();\n\
    \    let mut digits_base23 = digits.chars().collect::<Vec<_>>();\n    let mut\
    \ digits_base24 = digits.chars().collect::<Vec<_>>();\n    let mut digits_base25\
    \ = digits.chars().collect::<Vec<_>>();\n    let mut digits_base26 = digits.chars().collect::<Vec<_>>();\n\
    \    let mut digits_base27 = digits.chars().collect::", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base10 = digits.chars().nth(base).unwrap();\n\
    \    let mut base10_digits = base10.to_string();\n    let mut base10_digits_len\
    \ = base10_digits.len();\n    let mut base10_digits_pow = base10_digits_len.powf(2);\n\
    \    let mut base10_digits_pow_len = base10_digits_pow.len();\n    let mut base10_digits_pow_pow_len\
    \ = base10_digits_pow_len.powf(2);\n    let mut base10_digits_pow_pow_pow_len\
    \ = base10_digits_pow_pow_len.powf(2);\n    let mut base10_digits_pow_pow_pow_len\
    \ = base10_digits_pow_pow_pow_len.powf(2);\n    let mut base10_digits_pow_pow_pow_pow_len\
    \ = base10_digits_pow_pow_pow_pow_len.powf(2);\n    let mut base10_digits_pow_pow_pow_pow_pow_len\
    \ = base10_digits_pow_pow_pow_pow_pow_len.powf(2);\n    let mut base10_digits_pow_pow_pow_pow_pow_len\
    \ = base10_digits_pow_pow_pow_pow_pow_len.powf(2);\n    let mut base10_digits_pow_pow_pow_pow_pow_len\
    \ = base10_digits_pow_pow_pow_pow_pow_pow_len.powf(2);\n    let mut base10_digits_pow_pow_pow_pow_pow_pow_len\
    \ = base10_digits_pow_pow_pow_pow_pow_pow_pow_len.powf(2);\n    let mut base10_digits_pow_pow_pow_pow_pow_pow_pow_len\
    \ = base10_digits_pow_pow_pow_pow_pow_pow_pow_len.powf(2);\n    let mut base10_digits_pow_pow_pow_pow_pow_pow_pow_len\
    \ = base10_digits_pow_pow_pow_pow_pow_pow_pow_len.powf(2);\n    let mut base10_digits_pow_pow_pow_pow_pow_pow_pow_len\
    \ = base10_digits_pow_pow_pow_pow_pow_pow_pow_pow_len.powf(2);\n    let mut base10_digits_pow_pow_pow_pow_pow_pow_pow_pow_len\
    \ = base10_digits_pow_pow_pow_pow_pow_pow_pow_pow_pow_len.powf(2);\n    let mut\
    \ base10_digits_pow_pow_pow_pow_pow_pow_pow_pow_len = base10_digits_pow_pow_pow_pow_pow_pow_pow_pow_pow_len.powf(2);\n\
    \    let mut base10_digits_pow_pow_pow_pow_pow_pow_pow_pow_len = base10_digits_pow_pow_pow_pow_pow_pow_pow_pow_pow_len.powf(2);\n\
    \    let mut base", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base10 = base.to_string();\n    while base10.len() > 0 {\n      \
    \  let digit = digits.chars().nth(base10.len() - 1).unwrap();\n        s = format!(\"\
    {}{}\", s, digit);\n        base10 = base10.repeat(digit.len_utf8());\n      \
    \  digits = digits.chars().nth(digits.len() - 1);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = 0;\n    while remainder < base {\n        remainder += base;\n        digits\
    \ = digits.chars().nth(digits.len() - 1);\n    }\n    while remainder > 0 {\n\
    \        remainder -= base;\n        digits = digits.chars().nth(digits.len()\
    \ - 1);\n    }\n    s += digits;\n    s", "    let mut s = String::new();\n  \
    \  let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit.to_string());\n    }\n    s", "    let mut s = String::new();\n   \
    \ let mut digits = vec![0u8; base];\n    let mut carry = 0;\n    while x >= base\
    \ {\n        let digit = x % base;\n        digits[digit] += 1;\n        x /=\
    \ base;\n        carry += 1;\n    }\n    while carry > 0 {\n        digits[digits[digits.len()\
    \ - 1]] += 1;\n        carry -= 1;\n    }\n    for digit in digits.iter().rev()\
    \ {\n        s += char::from_u32(digit as u32).unwrap();\n    }\n    s", "   \
    \ let mut s = String::new();\n    let mut digits = String::new();\n    let mut\
    \ remainder = 0;\n    while x >= base {\n        remainder = x % base;\n     \
    \   digits.push(format!(\"{}\", remainder));\n        x = x / base;\n    }\n \
    \   digits.push(format!(\"{}\", x));\n    s += &digits;\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        s = format!(\"{}{}\", digits, digit);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut digits_base = digits.chars().collect::<Vec<_>>();\n\
    \    let mut base_base = base.chars().collect::<Vec<_>>();\n    let mut digits_base_base\
    \ = digits_base.iter().zip(base_base.iter()).collect::<Vec<_>>();\n    let mut\
    \ digits_base_base_iter = digits_base_base.iter();\n    let mut digits_base_base_iter\
    \ = digits_base_base_iter.zip(0..).collect::<Vec<_>>();\n    let mut digits_base_base_iter\
    \ = digits_base_base_iter.map(|&(digit, base)| {\n        if digit == 0 {\n  \
    \          digit\n        } else {\n            digit + base * (digits_base_base_iter.next().unwrap()\
    \ - 1)\n        }\n    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(digit,\
    \ base)| {\n        if digit == 0 {\n            digit\n        } else {\n   \
    \         digit + base * (digits_base_base_iter.next().unwrap() - 1)\n       \
    \ }\n    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(digit,\
    \ base)| {\n        if digit == 0 {\n            digit\n        } else {\n   \
    \         digit + base * (digits_base_base_iter.next().unwrap() - 1)\n       \
    \ }\n    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(digit,\
    \ base)| {\n        if digit == 0 {\n            digit\n        } else {\n   \
    \         digit + base * (digits_base_base_iter.next().unwrap() - 1)\n       \
    \ }\n    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(digit,\
    \ base)| {\n        if digit == 0 {\n            digit\n        } else {\n   \
    \         digit + base * (digits_base_base_iter.next().unwrap() - 1)\n       \
    \ }\n    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(digit,\
    \ base)| {\n        if digit == 0 {\n            digit\n        } else {\n   \
    \         digit + base * (digits_base_base_iter.next().unwrap() - 1)\n       \
    \ }\n    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(digit,\
    \ base)| {\n        if digit == 0 {\n            digit\n        } else {\n   \
    \         digit + base * (digits_base_base_iter.next().unwrap() - 1)\n       \
    \ }\n    });\n    let mut digits_base_base_iter = digits_base_base_iter.map(|&(digit,\
    \ base)| {\n        if ", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut remainder = 0;\n    while x >= base {\n      \
    \  remainder = x % base;\n        digits.push(format!(\"{}\", remainder));\n \
    \       x = x / base;\n    }\n    digits.push(format!(\"{}\", x));\n    s += digits.clone();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        digits.push_str(&format!(\"{}\", remainder));\n    }\n    digits.push_str(&format!(\"\
    {}\", x));\n    s += &digits;\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    s += remainder.to_string();\n    s += \"0\".to_string();\n\
    \    s"]
stop_tokens:
- "\n}"
