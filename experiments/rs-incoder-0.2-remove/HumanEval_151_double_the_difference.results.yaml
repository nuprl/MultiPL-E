language: rs
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            if num % 2 == 1 {\n                sum += num;\n            }\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:8:20\n\
    \  |\n8 |             if num % 2 == 1 {\n  |                    ^ no implementation\
    \ for `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n8\
    \ |             if num % 2.0 == 1 {\n  |                       ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:9:21\n  |\n\
    9 |                 sum += num;\n  |                     ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            if num % 2 == 1 {\n                sum += num;\n            }\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:8:20\n\
    \  |\n8 |             if num % 2 == 1 {\n  |                    ^ no implementation\
    \ for `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n8\
    \ |             if num % 2.0 == 1 {\n  |                       ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:9:21\n  |\n\
    9 |                 sum += num;\n  |                     ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: f64 = 0.0;\n    for num in lst {\n        if num\
    \ > 0.0 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp54ybgwql.rs:11:5\n   |\n\
    4  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    11 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: f64 = 0.0;\n    for num in lst {\n        if num\
    \ > 0.0 {\n            sum += num;\n        }\n    }\n    sum * sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnlu7_pb_.rs:11:5\n   |\n\
    4  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    11 |     sum * sum\n   |     ^^^^^^^^^ expected `isize`, found `f64`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            if num % 2 == 1 {\n                sum += num;\n            }\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:8:20\n\
    \  |\n8 |             if num % 2 == 1 {\n  |                    ^ no implementation\
    \ for `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n8\
    \ |             if num % 2.0 == 1 {\n  |                       ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:9:21\n  |\n\
    9 |                 sum += num;\n  |                     ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0 {\n\
    \            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7r9he0f9.rs:7:18\n  |\n7 |\
    \         if num > 0 {\n  |                  ^\n  |                  |\n  |  \
    \                expected `f64`, found integer\n  |                  help: use\
    \ a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \ --> /tmp/tmp7r9he0f9.rs:8:17\n  |\n8 |             sum += num * num;\n  |  \
    \               ^^ no implementation for `{integer} += f64`\n  |\n  = help: the\
    \ trait `AddAssign<f64>` is not implemented for `{integer}`\n  = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n            <f32 as AddAssign<&f32>>\n\
    \            <f32 as AddAssign>\n            <f64 as AddAssign<&f64>>\n      \
    \      <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n          \
    \  <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n            <i16\
    \ as AddAssign>\n          and 20 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for n in lst {\n        if n % 2 ==\
    \ 1 {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpdgqzs5xg.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdgqzs5xg.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            if num % 2 == 1 {\n                sum += num;\n            }\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:8:20\n\
    \  |\n8 |             if num % 2 == 1 {\n  |                    ^ no implementation\
    \ for `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n8\
    \ |             if num % 2.0 == 1 {\n  |                       ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:9:21\n  |\n\
    9 |                 sum += num;\n  |                     ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpvzqqstld.rs:10:14\n\
    \   |\n10 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n10 |         if x % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpvzqqstld.rs:11:17\n  \
    \ |\n11 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: f64 = 0.0;\n    for n in lst {\n        if n %\
    \ 2 == 1 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpvoqesxfj.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvoqesxfj.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n    while i < lst.len() {\n        if lst[i] %\
    \ 2 == 1 {\n            sum += lst[i];\n            i += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpvjsc816v.rs:12:19\n\
    \   |\n12 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n12 |         if lst[i] % 2.0 == 1 {\n   |                      ++\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpvjsc816v.rs:13:17\n\
    \   |\n13 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum = 0;\n    let mut num_odd = 1;\n\n    for n in lst {\n        if n % 2 ==\
    \ 1 {\n            sum += n;\n            num_odd += 1;\n        }\n    }\n\n\
    \    if num_odd > 1 {\n        sum -= num_odd * num_odd;\n    }\n\n    sum\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpix5ohzuo.rs:13:14\n\
    \   |\n13 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n13 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpix5ohzuo.rs:14:17\n  \
    \ |\n14 |             sum += n;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n    while i < lst.len() {\n        if lst[i] %\
    \ 2 == 1 {\n            sum += lst[i];\n            i += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpvjsc816v.rs:12:19\n\
    \   |\n12 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n12 |         if lst[i] % 2.0 == 1 {\n   |                      ++\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpvjsc816v.rs:13:17\n\
    \   |\n13 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            if num % 2.0 == 0.0 {\n                sum += num;\n        \
    \    }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpo9opiqrg.rs:9:21\n\
    \  |\n9 |                 sum += num;\n  |                     ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmp47gh491z.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp47gh491z.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmp47gh491z.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp47gh491z.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n    let mut sum\
    \ = 0;\n    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpzfun3v09.rs:10:14\n\
    \   |\n10 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n10 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpzfun3v09.rs:11:17\n  \
    \ |\n11 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0 {\n\
    \            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7r9he0f9.rs:7:18\n  |\n7 |\
    \         if num > 0 {\n  |                  ^\n  |                  |\n  |  \
    \                expected `f64`, found integer\n  |                  help: use\
    \ a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \ --> /tmp/tmp7r9he0f9.rs:8:17\n  |\n8 |             sum += num * num;\n  |  \
    \               ^^ no implementation for `{integer} += f64`\n  |\n  = help: the\
    \ trait `AddAssign<f64>` is not implemented for `{integer}`\n  = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n            <f32 as AddAssign<&f32>>\n\
    \            <f32 as AddAssign>\n            <f64 as AddAssign<&f64>>\n      \
    \      <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n          \
    \  <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n            <i16\
    \ as AddAssign>\n          and 20 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmp47gh491z.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp47gh491z.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            if num % 2.0 == 0.0 {\n                sum += num;\n        \
    \    }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpo9opiqrg.rs:9:21\n\
    \  |\n9 |                 sum += num;\n  |                     ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n    let mut sum\
    \ = 0;\n    let mut i = 0;\n    while i < lst.len() {\n        if lst[i] % 2 ==\
    \ 1 {\n            sum += lst[i];\n            i += 1;\n        } else {\n   \
    \         i += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp5qhhvc_x.rs:11:19\n\
    \   |\n11 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n11 |         if lst[i] % 2.0 == 1 {\n   |                      ++\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp5qhhvc_x.rs:12:17\n\
    \   |\n12 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmp47gh491z.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp47gh491z.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0 {\n\
    \            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7r9he0f9.rs:7:18\n  |\n7 |\
    \         if num > 0 {\n  |                  ^\n  |                  |\n  |  \
    \                expected `f64`, found integer\n  |                  help: use\
    \ a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \ --> /tmp/tmp7r9he0f9.rs:8:17\n  |\n8 |             sum += num * num;\n  |  \
    \               ^^ no implementation for `{integer} += f64`\n  |\n  = help: the\
    \ trait `AddAssign<f64>` is not implemented for `{integer}`\n  = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n            <f32 as AddAssign<&f32>>\n\
    \            <f32 as AddAssign>\n            <f64 as AddAssign<&f64>>\n      \
    \      <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n          \
    \  <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n            <i16\
    \ as AddAssign>\n          and 20 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for n in lst {\n        if n % 2 ==\
    \ 1 {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpdgqzs5xg.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdgqzs5xg.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n    let mut sum\
    \ = 0;\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp569v4i7o.rs:10:16\n\
    \   |\n10 |         if num % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n10 |         if num % 2.0 == 1 {\n   |                   ++\n\n\
    error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp569v4i7o.rs:11:17\n\
    \   |\n11 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x.is_integer()\
    \ {\n            sum += x;\n        } else {\n            sum += x * x;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpkyu8i7qr.rs:7:14\n  |\n7 |         if x.is_integer()\
    \ {\n  |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpkyu8i7qr.rs:8:17\n  |\n8 |   \
    \          sum += x;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpkyu8i7qr.rs:10:17\n   |\n10 |\
    \             sum += x * x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n    while i < lst.len() {\n        if lst[i] %\
    \ 2 == 1 {\n            sum += lst[i];\n        }\n        i += 1;\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp3i86ej5x.rs:12:19\n\
    \   |\n12 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n12 |         if lst[i] % 2.0 == 1 {\n   |                      ++\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp3i86ej5x.rs:13:17\n\
    \   |\n13 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n    let mut sum\
    \ = 0;\n    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpzfun3v09.rs:10:14\n\
    \   |\n10 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n10 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpzfun3v09.rs:11:17\n  \
    \ |\n11 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            if num % 2 == 1 {\n                sum += num;\n            }\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:8:20\n\
    \  |\n8 |             if num % 2 == 1 {\n  |                    ^ no implementation\
    \ for `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n8\
    \ |             if num % 2.0 == 1 {\n  |                       ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:9:21\n  |\n\
    9 |                 sum += num;\n  |                     ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            if num % 2 == 1 {\n                sum += num;\n            }\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:8:20\n\
    \  |\n8 |             if num % 2 == 1 {\n  |                    ^ no implementation\
    \ for `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n8\
    \ |             if num % 2.0 == 1 {\n  |                       ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:9:21\n  |\n\
    9 |                 sum += num;\n  |                     ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            if num % 2.0 == 0.0 {\n                sum += num;\n        \
    \    }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpo9opiqrg.rs:9:21\n\
    \  |\n9 |                 sum += num;\n  |                     ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpqf14z5f5.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpqf14z5f5.rs:8:17\n  |\n8 |             sum\
    \ += n;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for n in lst {\n        if n % 2 ==\
    \ 1 {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpdgqzs5xg.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdgqzs5xg.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for n in lst {\n        if n % 2 ==\
    \ 1 {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpdgqzs5xg.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdgqzs5xg.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0 {\n\
    \            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7r9he0f9.rs:7:18\n  |\n7 |\
    \         if num > 0 {\n  |                  ^\n  |                  |\n  |  \
    \                expected `f64`, found integer\n  |                  help: use\
    \ a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \ --> /tmp/tmp7r9he0f9.rs:8:17\n  |\n8 |             sum += num * num;\n  |  \
    \               ^^ no implementation for `{integer} += f64`\n  |\n  = help: the\
    \ trait `AddAssign<f64>` is not implemented for `{integer}`\n  = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n            <f32 as AddAssign<&f32>>\n\
    \            <f32 as AddAssign>\n            <f64 as AddAssign<&f64>>\n      \
    \      <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n          \
    \  <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n            <i16\
    \ as AddAssign>\n          and 20 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for n in lst {\n        if n % 2 ==\
    \ 1 {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpdgqzs5xg.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdgqzs5xg.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for n in lst {\n        if n % 2 ==\
    \ 1 {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpdgqzs5xg.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdgqzs5xg.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpqf14z5f5.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpqf14z5f5.rs:8:17\n  |\n8 |             sum\
    \ += n;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x.is_integer()\
    \ {\n            sum += x;\n        } else {\n            sum += x * x;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpkyu8i7qr.rs:7:14\n  |\n7 |         if x.is_integer()\
    \ {\n  |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpkyu8i7qr.rs:8:17\n  |\n8 |   \
    \          sum += x;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpkyu8i7qr.rs:10:17\n   |\n10 |\
    \             sum += x * x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            if num % 2 == 1 {\n                sum += num;\n            }\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:8:20\n\
    \  |\n8 |             if num % 2 == 1 {\n  |                    ^ no implementation\
    \ for `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n8\
    \ |             if num % 2.0 == 1 {\n  |                       ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:9:21\n  |\n\
    9 |                 sum += num;\n  |                     ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum = 0;\n    let mut even = 0;\n    let mut odd = 1;\n\n    for n in lst {\n\
    \        if n % 2 == 0 {\n            sum += n;\n            even += n;\n    \
    \    } else {\n            sum += n;\n            odd += n;\n        }\n    }\n\
    \n    sum * sum - even * even\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp3zanz5oa.rs:14:14\n\
    \   |\n14 |         if n % 2 == 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n14 |         if n % 2.0 == 0 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp3zanz5oa.rs:15:17\n  \
    \ |\n15 |             sum += n;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp3zanz5oa.rs:16:18\n\
    \   |\n16 |             even += n;\n   |                  ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: can"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x.is_integer()\
    \ {\n            sum += x;\n        } else {\n            sum += x * x;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpkyu8i7qr.rs:7:14\n  |\n7 |         if x.is_integer()\
    \ {\n  |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpkyu8i7qr.rs:8:17\n  |\n8 |   \
    \          sum += x;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpkyu8i7qr.rs:10:17\n   |\n10 |\
    \             sum += x * x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for n in lst {\n        if n % 2 ==\
    \ 1 {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpdgqzs5xg.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdgqzs5xg.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum: f64 = 0.0;\n    let mut i: isize = 0;\n    while i < lst.len() {\n    \
    \    if lst[i] % 2 == 1 {\n            sum += lst[i];\n            i += 1;\n \
    \       } else {\n            i += 1;\n        }\n    }\n\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi852tooo.rs:11:15\n   |\n\
    11 |     while i < lst.len() {\n   |               ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |     while i < lst.len().try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[f64]` cannot be indexed by `isize`\n  --> /tmp/tmpi852tooo.rs:12:12\n   |\n\
    12 |         if lst[i] % 2 == 1 {\n   |            ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[f64]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<f64>`\n\nerror[E0277]: the type `[f64]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpi852tooo.rs:13:20\n   |\n13 |             sum += lst[i];\n\
    \   |                    ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[f64]>` is not implemented for\
    \ `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<f64>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi852tooo.rs:20:5\n\
    \   |\n4  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n20 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum = 0;\n    for num in lst {\n        if num > 0 {\n            sum += num\
    \ * num;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp30bv1_1h.rs:11:18\n   |\n\
    11 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp30bv1_1h.rs:12:17\n   |\n12 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x.is_integer()\
    \ {\n            sum += x;\n        } else {\n            sum += x * x;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpkyu8i7qr.rs:7:14\n  |\n7 |         if x.is_integer()\
    \ {\n  |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpkyu8i7qr.rs:8:17\n  |\n8 |   \
    \          sum += x;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpkyu8i7qr.rs:10:17\n   |\n10 |\
    \             sum += x * x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmp47gh491z.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp47gh491z.rs:11:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n11 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n\n    while i < lst.len() {\n        if lst[i]\
    \ % 2 == 1 {\n            sum += lst[i];\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpi7l1vaqi.rs:13:19\n\
    \   |\n13 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n13 |         if lst[i] % 2.0 == 1 {\n   |                      ++\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpi7l1vaqi.rs:14:17\n\
    \   |\n14 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x.is_integer()\
    \ {\n            sum += x;\n        } else {\n            sum += x * x;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpkyu8i7qr.rs:7:14\n  |\n7 |         if x.is_integer()\
    \ {\n  |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpkyu8i7qr.rs:8:17\n  |\n8 |   \
    \          sum += x;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpkyu8i7qr.rs:10:17\n   |\n10 |\
    \             sum += x * x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            if num % 2 == 1 {\n                sum += num;\n            }\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:8:20\n\
    \  |\n8 |             if num % 2 == 1 {\n  |                    ^ no implementation\
    \ for `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n8\
    \ |             if num % 2.0 == 1 {\n  |                       ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpnvxhh1l9.rs:9:21\n  |\n\
    9 |                 sum += num;\n  |                     ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpqf14z5f5.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpqf14z5f5.rs:8:17\n  |\n8 |             sum\
    \ += n;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x.is_integer()\
    \ {\n            sum += x;\n        } else {\n            sum += x * x;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpkyu8i7qr.rs:7:14\n  |\n7 |         if x.is_integer()\
    \ {\n  |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpkyu8i7qr.rs:8:17\n  |\n8 |   \
    \          sum += x;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpkyu8i7qr.rs:10:17\n   |\n10 |\
    \             sum += x * x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0 {\n\
    \            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7r9he0f9.rs:7:18\n  |\n7 |\
    \         if num > 0 {\n  |                  ^\n  |                  |\n  |  \
    \                expected `f64`, found integer\n  |                  help: use\
    \ a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \ --> /tmp/tmp7r9he0f9.rs:8:17\n  |\n8 |             sum += num * num;\n  |  \
    \               ^^ no implementation for `{integer} += f64`\n  |\n  = help: the\
    \ trait `AddAssign<f64>` is not implemented for `{integer}`\n  = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n            <f32 as AddAssign<&f32>>\n\
    \            <f32 as AddAssign>\n            <f64 as AddAssign<&f64>>\n      \
    \      <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n          \
    \  <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n            <i16\
    \ as AddAssign>\n          and 20 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n    let mut sum\
    \ = 0;\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp569v4i7o.rs:10:16\n\
    \   |\n10 |         if num % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n10 |         if num % 2.0 == 1 {\n   |                   ++\n\n\
    error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp569v4i7o.rs:11:17\n\
    \   |\n11 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for x in lst {\n        if x.is_integer()\
    \ {\n            sum += x;\n        } else {\n            sum += x * x;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n --> /tmp/tmp25zgmvby.rs:7:14\n  |\n7 |         if x.is_integer()\
    \ {\n  |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp25zgmvby.rs:13:5\n   |\n4  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n13 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 ==\
    \ 1 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpv5lbtnul.rs:7:16\n\
    \  |\n7 |         if num % 2 == 1 {\n  |                ^ no implementation for\
    \ `f64 % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |         if num % 2.0 == 1 {\n  |                   ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n --> /tmp/tmpv5lbtnul.rs:8:17\n  |\n8 |   \
    \          sum += num;\n  |                 ^^ no implementation for `{integer}\
    \ += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ajva8rz.rs:11:5\n   |\n\
    4  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    11 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n\n    while i < lst.len() {\n        if lst[i]\
    \ % 2 == 1 {\n            sum += lst[i];\n        }\n        i += 1;\n    }\n\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp0tghh7xl.rs:13:19\n\
    \   |\n13 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n13 |         if lst[i] % 2.0 == 1 {\n   |                      ++\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp0tghh7xl.rs:14:17\n\
    \   |\n14 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0 {\n\
    \            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7r9he0f9.rs:7:18\n  |\n7 |\
    \         if num > 0 {\n  |                  ^\n  |                  |\n  |  \
    \                expected `f64`, found integer\n  |                  help: use\
    \ a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \ --> /tmp/tmp7r9he0f9.rs:8:17\n  |\n8 |             sum += num * num;\n  |  \
    \               ^^ no implementation for `{integer} += f64`\n  |\n  = help: the\
    \ trait `AddAssign<f64>` is not implemented for `{integer}`\n  = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n            <f32 as AddAssign<&f32>>\n\
    \            <f32 as AddAssign>\n            <f64 as AddAssign<&f64>>\n      \
    \      <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n          \
    \  <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n            <i16\
    \ as AddAssign>\n          and 20 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n    let mut sum\
    \ = 0;\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp569v4i7o.rs:10:16\n\
    \   |\n10 |         if num % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n10 |         if num % 2.0 == 1 {\n   |                   ++\n\n\
    error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp569v4i7o.rs:11:17\n\
    \   |\n11 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x % 2 == 1\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpihxzei_i.rs:7:14\n\
    \  |\n7 |         if x % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if x % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpihxzei_i.rs:8:17\n  |\n8 |             sum\
    \ += x;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmprjwoleru.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmprjwoleru.rs:8:17\n  |\n8 |             sum\
    \ += n * n;\n  |                 ^^ no implementation for `{integer} += f64`\n\
    \  |\n  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n % 2 == 1\
    \ {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n --> /tmp/tmpqf14z5f5.rs:7:14\n\
    \  |\n7 |         if n % 2 == 1 {\n  |              ^ no implementation for `f64\
    \ % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Rem<Rhs>`:\n   \
    \         <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n         \
    \   <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a\
    \ i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as\
    \ Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \       if n % 2.0 == 1 {\n  |                 ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n --> /tmp/tmpqf14z5f5.rs:8:17\n  |\n8 |             sum\
    \ += n;\n  |                 ^^ no implementation for `{integer} += f64`\n  |\n\
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \    <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64\
    \ as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n\
    \            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n     \
    \       <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015802
- exit_code: 1
  program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if num > 0.0\
    \ {\n            sum += num * num;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n --> /tmp/tmpfrun1_p9.rs:8:17\n\
    \  |\n8 |             sum += num * num;\n  |                 ^^ no implementation\
    \ for `{integer} += f64`\n  |\n  = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015801
