language: rs
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = vec![0;\
    \ n + 1];\n    pile[0] += 1;\n    for i in 1..=n {\n        if i % 2 == 0 {\n\
    \            pile[i] += 1;\n        } else {\n            pile[i] += pile[i -\
    \ 2];\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg3y9u6kl.rs:10:28\n   |\n\
    10 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n10 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpg3y9u6kl.rs:14:13\n   |\n14 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpg3y9u6kl.rs:16:13\n\
    \   |\n16 |             pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpg3y9u6kl.rs:16:24\n\
    \   |\n16 |             pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = Vec::new();\n\
    \    let mut levels = Vec::new();\n    let mut level = 1;\n    while n != 0 {\n\
    \        pile.push(n);\n        levels.push_back(level);\n        if n % 2 ==\
    \ 0 {\n            n = n / 2;\n        } else {\n            n = (3 * n) + 1;\n\
    \        }\n        level += 1;\n    }\n    levels.reverse();\n    pile\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpwh2ap7ux.rs:15:16\n   |\n15 |         levels.push_back(level);\n\
    \   |                ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    if n == 0 {\n   \
    \     return vec![0];\n    }\n    let mut pile = vec![0];\n    if n % 2 == 0 {\n\
    \        pile.push(n / 2);\n    }\n    for i in 1..n / 2 {\n        pile.push(i\
    \ + 1);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[3, 5, 7]`', /tmp/tmp1_sc69c1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = vec![];\n\
    \    if n % 2 == 0 {\n        pile.push(n / 2);\n    }\n    for i in 1..n / 2\
    \ {\n        pile.push(i + 1);\n    }\n    for i in 2..n / 2 {\n        pile.push(i\
    \ * 2);\n    }\n    for i in 3..n / 2 {\n        pile.push(i * 3);\n    }\n  \
    \  for i in 4..n / 2 {\n        pile.push(i * 4);\n    }\n    for i in 5..n /\
    \ 2 {\n        pile.push(i * 5);\n    }\n    for i in 6..n / 2 {\n        pile.push(i\
    \ * 6);\n    }\n    for i in 7..n / 2 {\n        pile.push(i * 7);\n    }\n  \
    \  for i in 8..n / 2 {\n        pile.push(i * 8);\n    }\n    for i in 9..n /\
    \ 2 {\n        pile.push(i * 9);\n    }\n    for i in 10..n / 2 {\n        pile.push(i\
    \ * 10);\n    }\n    for i in 11..n / 2 {\n        pile.push(i * 11);\n    }\n\
    \    for i in 12..n / 2 {\n        pile.push(i * 12);\n    }\n    for i in 13..n\
    \ / 2 {\n        pile.push(i * 13);\n    }\n    for i in 14..n / 2 {\n       \
    \ pile.push(i * 14);\n    }\n    for i in 15..n / 2 {\n        pile.push(i * 15);\n\
    \    }\n    for i in 16..n / 2 {\n        pile.push(i * 16);\n    }\n    for i\
    \ in 17..n / 2 {\n        pile.push(i * 17);\n    }\n    for i in 18..n / 2 {\n\
    \        pile.push(i * 18);\n    }\n    for i in 19..n / 2 {\n        pile.push(i\
    \ * 19);\n    }\n    for i in 20..n / 2 {\n        pile.push(i * 20);\n    }\n\
    \    for i in 21..n / 2 {\n        pile.push(i * 21);\n    }\n    for i in 22..n\
    \ / 2 {\n        pile.push(i * 22);\n    }\n    for i in 23..n / 2 {\n       \
    \ pile.push(i * 23);\n    }\n    for i in 24..n / 2 {\n        pile.push(i * 24);\n\
    \    }\n    for i in 25..n / 2 {\n        pile.push(i * 25);\n    }\n    for i\
    \ in 26..n / 2 {\n        pile.push(i * 26);\n    }\n    for i in 27..n / 2 {\n\
    \        pile.push(i * 27);\n    }\n    for i in 28..n / 2 {\n        pile.push(i\
    \ * 28);\n    }\n    for i in 29\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmpfittvh1j.rs:99:1\n   |\n\
    99 | }\n   | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = vec![0;\
    \ n + 1];\n    pile[0] = n;\n    for i in 1..=n {\n        if i % 2 == 0 {\n \
    \           pile[i] = pile[i / 2] + 1;\n        } else {\n            pile[i]\
    \ = pile[i / 2] + 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzfidnqr5.rs:10:28\n   |\n\
    10 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n10 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpzfidnqr5.rs:14:13\n   |\n14 |            \
    \ pile[i] = pile[i / 2] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzfidnqr5.rs:14:23\n   |\n14 |  \
    \           pile[i] = pile[i / 2] + 1;\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzfidnqr5.rs:16:13\n\
    \   |\n16 |             pile[i] = pile[i / 2] + 2;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzfidnqr5.rs:16:23\n\
    \   |\n16 |             pile[i] = pile[i / 2] + 2;\n   |                     \
    \  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 5 p"
  stdout: ''
  timestamp: 1659747323
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = vec![];\n\
    \    if n % 2 == 0 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n\
    \ - 2);\n    }\n    for i in 1..n {\n        pile.push((i + 1) * (i + 1));\n \
    \   }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 9]`,\n right: `[3, 5, 7]`', /tmp/tmphogx5gjx.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = Vec::new();\n\
    \    pile.push(n);\n    if n % 2 == 0 {\n        pile.push(n - 1);\n    }\n  \
    \  pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmp4d1b2njl.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = vec![0;\
    \ n + 1];\n    pile[0] += 1;\n    for i in 1..=n {\n        if i % 2 == 0 {\n\
    \            pile[i] += 1;\n        } else {\n            pile[i] += 2;\n    \
    \    }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ruth_2d.rs:10:28\n   |\n\
    10 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n10 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp2ruth_2d.rs:14:13\n   |\n14 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp2ruth_2d.rs:16:13\n\
    \   |\n16 |             pile[i] += 2;\n   |             ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = vec![];\n\
    \    pile.push(n);\n    if n % 2 == 0 {\n        pile.push(n - 1);\n    } else\
    \ {\n        pile.push(n - 2);\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpwwojz9fi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = vec![0;\
    \ n + 1];\n    pile[0] += 1;\n    for i in 1..=n {\n        if i % 2 == 0 {\n\
    \            pile[i] += 1;\n        } else {\n            pile[i] += pile[i -\
    \ 1];\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxbxfuxdx.rs:10:28\n   |\n\
    10 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n10 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpxbxfuxdx.rs:14:13\n   |\n14 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxbxfuxdx.rs:16:13\n\
    \   |\n16 |             pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxbxfuxdx.rs:16:24\n\
    \   |\n16 |             pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = vec![];\n\
    \    if n % 2 == 0 {\n        for _ in 0..n {\n            pile.push(n - 1);\n\
    \        }\n    } else {\n        for _ in 0..n {\n            pile.push(n - 1);\n\
    \        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpyc_chs1l.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = Vec::new();\n\
    \    if n % 2 == 1 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n\
    \ - 1);\n        pile.push(n - 2);\n    }\n    for i in 0..n / 2 {\n        pile.push(n\
    \ - 2 * i);\n    }\n    for i in 0..n / 2 {\n        pile.push(n - 2 * i + 1);\n\
    \    }\n    for i in 0..n / 2 {\n        pile.push(n - 2 * i + 2);\n    }\n  \
    \  for i in 0..n / 2 {\n        pile.push(n - 2 * i + 3);\n    }\n    for i in\
    \ 0..n / 2 {\n        pile.push(n - 2 * i + 4);\n    }\n    for i in 0..n / 2\
    \ {\n        pile.push(n - 2 * i + 5);\n    }\n    for i in 0..n / 2 {\n     \
    \   pile.push(n - 2 * i + 6);\n    }\n    for i in 0..n / 2 {\n        pile.push(n\
    \ - 2 * i + 7);\n    }\n    for i in 0..n / 2 {\n        pile.push(n - 2 * i +\
    \ 8);\n    }\n    for i in 0..n / 2 {\n        pile.push(n - 2 * i + 9);\n   \
    \ }\n    for i in 0..n / 2 {\n        pile.push(n - 2 * i + 10);\n    }\n    for\
    \ i in 0..n / 2 {\n        pile.push(n - 2 * i + 11);\n    }\n    for i in 0..n\
    \ / 2 {\n        pile.push(n - 2 * i + 12);\n    }\n    for i in 0..n / 2 {\n\
    \        pile.push(n - 2 * i + 13);\n    }\n    for i in 0..n / 2 {\n        pile.push(n\
    \ - 2 * i + 14);\n    }\n    for i in 0..n / 2 {\n        pile.push(n - 2 * i\
    \ + 15);\n    }\n    for i in 0..n / 2 {\n        pile.push(n - 2 * i + 16);\n\
    \    }\n    for i in 0..n / 2 {\n        pile.push(n - 2 * i + 17);\n    }\n \
    \   for i in 0..n / 2 {\n        pile.push(n - 2 * i + 18);\n    }\n    for i\
    \ in 0..n / 2 {\n        pile.push(n - 2 * i + 19);\n    }\n    for i in 0..n\
    \ / 2 {\n        pile.push(n - 2 * i + 20);\n    }\n    for i in 0..n / 2 {\n\
    \        pile.push(n - 2 * i + 21);\n    }\n    for i in 0..n / 2 {\n        pile.push(n\
    \ - 2 * i + 22);\n    }\n    for i in 0..n / 2 {\n        pile.push(n - 2 * i\
    \ + 23);\n    }\n    for i in 0..n / 2 {\n        pile.push(n - 2 * i + 24);\n\
    \    }\n    for i in 0..n / 2 {\n        pile.push(n - 2 * i + 25);\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpv4bbums0.rs:103:3\n\
    \    |\n9   | fn make_a_pile(n: isize) -> Vec<isize> {\n    |                \
    \                        - unclosed delimiter\n...\n92  |     for i in 0..n /\
    \ 2 {\n    |                       - this delimiter might not be properly closed...\n\
    93  |         pile.push(n - 2 * i + 25);\n94  | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n103 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpv4bbums0.rs:9:29\n  |\n9 | fn make_a_pile(n: isize) -> Vec<isize>\
    \ {\n  |    -----------              ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit\
    \ type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = Vec::new();\n\
    \    let mut next_odd_level = 0;\n    let mut next_even_level = 0;\n    for i\
    \ in 0..n {\n        if i % 2 == 0 {\n            pile.push(next_even_level);\n\
    \            next_even_level += 1;\n        } else {\n            pile.push(next_odd_level);\n\
    \            next_odd_level += 1;\n        }\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 1]`,\n right: `[3, 5, 7]`', /tmp/tmphxn6mtjr.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = vec![];\n\
    \    for i in 0..n {\n        if i % 2 == 0 {\n            pile.push(i as isize);\n\
    \        } else {\n            pile.push((i + 1) + (i as isize));\n        }\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpqkp1w2qf.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = vec![0;\
    \ n + 1];\n    pile[0] += 1;\n    pile[1..].iter().cloned().for_each(|x| {\n \
    \       if x.is_odd() {\n            pile[2] += x;\n        } else {\n       \
    \     pile[2] += x;\n            pile[3] += x;\n        }\n    });\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzxswj8tm.rs:10:28\n   |\n\
    10 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n10 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no method named `is_odd` found\
    \ for type `{integer}` in the current scope\n  --> /tmp/tmpzxswj8tm.rs:13:14\n\
    \   |\n13 |         if x.is_odd() {\n   |              ^^^^^^ method not found\
    \ in `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = Vec::new();\n\
    \    for i in 0..n {\n        if i % 2 == 0 {\n            pile.push(i + 1);\n\
    \        } else {\n            pile.push(n - i);\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpivmsi7d2.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = Vec::new();\n\
    \    pile.push(n);\n    if n % 2 == 0 {\n        pile.push(n - 1);\n    } else\
    \ {\n        pile.push(n - 2);\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpifco5li0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = vec![0;\
    \ n + 1];\n    pile[0] += 1;\n    if n % 2 == 0 {\n        pile[1] += 1;\n   \
    \ }\n    for i in 2..=n {\n        pile[i] += pile[i - 1];\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9nj_6uup.rs:10:28\n   |\n\
    10 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n10 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp9nj_6uup.rs:16:9\n   |\n16 |         pile[i]\
    \ += pile[i - 1];\n   |         ^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp9nj_6uup.rs:16:20\n   |\n16 |  \
    \       pile[i] += pile[i - 1];\n   |                    ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    if n % 2 == 0 {\n\
    \        vec![n, n - 1]\n    } else {\n        vec![n, 2 * n - 1]\n    }\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmp_5rwpzed.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747323
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfn make_a_pile(n: isize) -> Vec<isize> {\n    let mut pile = vec![0;\
    \ n];\n    let mut i = 0;\n    while i < n {\n        pile[i] = i + 1;\n     \
    \   if n % 2 == 0 {\n            i += 2;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6jmtddtt.rs:10:28\n   |\n\
    10 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                            ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6jmtddtt.rs:13:9\n\
    \   |\n13 |         pile[i] = i + 1;\n   |         ^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747323
