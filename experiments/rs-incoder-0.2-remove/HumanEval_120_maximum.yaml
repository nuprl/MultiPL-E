name: HumanEval_120_maximum
language: rs
prompt: "/// Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n///\
  \ Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array will be\
  \ in the range of [1, 1000].\n/// 2. The elements in the array will be in the range\
  \ of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
  \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
  \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n \
  \   assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
  \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
  \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0,\
  \ 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n\
  \    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
  \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
  \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
  }\n"
completions: ["    let mut max_so_far = vec![0; k];\n    let mut max_so_far_len =\
    \ k;\n    let mut max_so_far_pos = 0;\n    let mut max_so_far_max_pos = 0;\n \
    \   let mut max_so_far_max_neg = 0;\n    let mut max_so_far_max_neg2 = 0;\n  \
    \  let mut max_so_far_max_neg3 = 0;\n    let mut max_so_far_max_neg4 = 0;\n  \
    \  let mut max_so_far_max_neg5 = 0;\n    let mut max_so_far_max_neg6 = 0;\n  \
    \  let mut max_so_far_max_neg7 = 0;\n    let mut max_so_far_max_neg8 = 0;\n  \
    \  let mut max_so_far_max_neg9 = 0;\n    let mut max_so_far_max_neg10 = 0;\n \
    \   let mut max_so_far_max_neg11 = 0;\n    let mut max_so_far_max_neg12 = 0;\n\
    \    let mut max_so_far_max_neg13 = 0;\n    let mut max_so_far_max_neg14 = 0;\n\
    \    let mut max_so_far_max_neg15 = 0;\n    let mut max_so_far_max_neg16 = 0;\n\
    \    let mut max_so_far_max_neg17 = 0;\n    let mut max_so_far_max_neg18 = 0;\n\
    \    let mut max_so_far_max_neg19 = 0;\n    let mut max_so_far_max_neg20 = 0;\n\
    \    let mut max_so_far_max_neg21 = 0;\n    let mut max_so_far_max_neg22 = 0;\n\
    \    let mut max_so_far_max_neg23 = 0;\n    let mut max_so_far_max_neg24 = 0;\n\
    \    let mut max_so_far_max_neg25 = 0;\n    let mut max_so_far_max_neg26 = 0;\n\
    \    let mut max_so_far_max_neg27 = 0;\n    let mut max_so_far_max_neg28 = 0;\n\
    \    let mut max_so_far_max_neg29 = 0;\n    let mut max_so_far_max_neg30 = 0;\n\
    \    let mut max_so_far_max_neg31 = 0;\n    let mut max_so_far_max_neg32 = 0;\n\
    \    let mut max_so_far_max_neg33 = 0;\n    let mut max_so_far_max_neg34 = 0;\n\
    \    let mut max_so_far_max_neg35 = 0;\n    let mut max_so_far_max_neg36 = 0;\n\
    \    let mut max_so_far_max_neg37 = 0;\n    let mut max_so_far_max_neg38 = 0;\n\
    \    let mut max_so_far_max_neg39 = 0;\n    let mut max_", "    let mut max_arr\
    \ = vec![vec![0]; k];\n    let mut max_idx = 0;\n    for i in 0..arr.len() {\n\
    \        if max_arr[k-1][i] > arr[i] {\n            max_arr[k-1][i] = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    max_arr.iter().cloned().take(k).collect()",
  "    let mut max_arr = vec![vec![0]; k];\n    for i in 0..k {\n        max_arr[i]\
    \ = arr[i];\n    }\n    for i in 0..k {\n        for j in (i + 1)..k {\n     \
    \       if max_arr[i] > max_arr[j] {\n                max_arr[i] = max_arr[j];\n\
    \            }\n        }\n    }\n    for i in 0..k {\n        arr[i] = max_arr[i];\n\
    \    }\n    arr", "    if k == 0 || arr.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut max_arr = vec![];\n    let mut max_k = k;\n    let mut max_val\
    \ = arr[0];\n    for &x in arr {\n        if x > max_val {\n            max_val\
    \ = x;\n        }\n        if max_k == 0 {\n            max_arr.push(max_val);\n\
    \            break;\n        }\n        if x > max_val {\n            max_arr.push(max_val);\n\
    \            max_k -= 1;\n        }\n        if max_k == 0 {\n            max_arr.push(max_val);\n\
    \            break;\n        }\n        if x > max_val {\n            max_arr.push(max_val);\n\
    \            max_k -= 1;\n        }\n    }\n    max_arr", "    let mut max_arr\
    \ = vec![0; k];\n    let mut max_idx = k;\n    let mut max_value = arr[0];\n \
    \   for &x in arr {\n        if x > max_value {\n            max_value = x;\n\
    \            max_idx = k;\n        }\n        max_arr[max_idx] = x;\n        max_idx--;\n\
    \    }\n    max_arr", "    let mut max_arr = vec![vec![0]; k];\n    let mut max_num\
    \ = vec![0];\n    for i in 0..k {\n        max_arr[i] = max_num.iter().max().unwrap();\n\
    \        max_num[i] = arr[i];\n    }\n    for i in 0..k {\n        max_arr[i]\
    \ = max_num[i] - max_arr[i];\n    }\n    max_arr", "    let mut max_arr = vec![vec![0];\
    \ k];\n    let mut max_idx = k;\n    for &x in arr {\n        if x > max_arr[k\
    \ - 1][0] {\n            max_arr[k - 1][0] = x;\n            max_arr[k - 1][1]\
    \ = x;\n        } else {\n            max_arr[k - 1][1] = x;\n        }\n    \
    \    k += 1;\n    }\n    max_arr.sort_by_key(|&x| x.0);\n    max_arr", "    let\
    \ mut max_arr = vec![vec![0]; k];\n    for i in 0..k {\n        max_arr[i] = arr[i];\n\
    \    }\n    for i in 0..k {\n        max_arr[i] = max_arr[i].max();\n    }\n \
    \   for i in 0..k {\n        max_arr[i] = max_arr[i].unwrap();\n    }\n    for\
    \ i in 0..k {\n        arr[i] = max_arr[i];\n    }\n    arr", "    let mut max_arr\
    \ = vec![];\n    let mut max_k = k;\n    let mut max_i = arr.len();\n    while\
    \ max_i < max_k {\n        if max_arr.len() < max_k {\n            max_arr.push(arr[max_i]);\n\
    \        }\n        max_i -= 1;\n    }\n    max_arr.sort();\n    max_arr", " \
    \   let mut max = arr[0];\n    for i in 1..k {\n        if max < arr[i] {\n  \
    \          max = arr[i];\n        }\n    }\n    vec![max]", "    if arr.len()\
    \ <= k {\n        return arr;\n    }\n    let mut max_arr = vec![vec![0]; k];\n\
    \    for i in 0..k {\n        max_arr[i] = arr[i];\n    }\n    for i in 0..k {\n\
    \        let mut max_i = i;\n        for j in (i + 1)..k {\n            if max_arr[j]\
    \ > max_arr[j - 1] {\n                max_i = j;\n            }\n        }\n \
    \       max_arr[i] = max_arr[max_i];\n    }\n    max_arr", "    if k == 0 || arr.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut max_arr = vec![];\n    let\
    \ mut max_num = arr[0];\n    for i in 1..k {\n        if arr[i] > max_num {\n\
    \            max_num = arr[i];\n        }\n    }\n    for i in 0..k {\n      \
    \  if arr[i] > max_num {\n            max_arr.push(max_num);\n            max_num\
    \ = arr[i];\n        }\n    }\n    max_arr.push(max_num);\n    max_arr", "   \
    \ let mut max_arr = vec![vec![0]; k];\n    for i in 0..k {\n        max_arr[i]\
    \ = arr[i];\n    }\n    for i in 0..k {\n        let mut max_num = max_arr[i];\n\
    \        let mut max_pos = i;\n        for j in (i + 1)..k {\n            if max_arr[j]\
    \ > max_num {\n                max_num = max_arr[j];\n                max_pos\
    \ = j;\n            }\n        }\n        max_arr[max_pos] = max_num;\n    }\n\
    \    max_arr", "    let mut max_arr = vec![];\n    let mut max_num = arr[0];\n\
    \    for i in 1..k {\n        if arr[i] > max_num {\n            max_num = arr[i];\n\
    \        }\n    }\n    for i in 0..k {\n        if arr[i] > max_num {\n      \
    \      max_arr.push(arr[i]);\n        }\n    }\n    max_arr", "    let mut max_arr\
    \ = vec![0; k];\n    let mut max_idx = k;\n    let mut max_val = arr[0];\n   \
    \ for &i in arr {\n        if i > max_val {\n            max_val = i;\n      \
    \  }\n        if i == max_val {\n            max_arr[k - 1] = i;\n        }\n\
    \        if i > max_val {\n            max_arr[k - 1] = i;\n        }\n      \
    \  if i == max_val {\n            max_arr[k - 1] = i;\n        }\n        if i\
    \ > max_val {\n            max_arr[k - 1] = i;\n        }\n        if i == max_val\
    \ {\n            max_arr[k - 1] = i;\n        }\n        if i > max_val {\n  \
    \          max_arr[k - 1] = i;\n        }\n        if i == max_val {\n       \
    \     max_arr[k - 1] = i;\n        }\n        if i > max_val {\n            max_arr[k\
    \ - 1] = i;\n        }\n        if i == max_val {\n            max_arr[k - 1]\
    \ = i;\n        }\n        if i > max_val {\n            max_arr[k - 1] = i;\n\
    \        }\n        if i == max_val {\n            max_arr[k - 1] = i;\n     \
    \   }\n        if i > max_val {\n            max_arr[k - 1] = i;\n        }\n\
    \        if i == max_val {\n            max_arr[k - 1] = i;\n        }\n     \
    \   if i > max_val {\n            max_arr[k - 1] = i;\n        }\n        if i\
    \ == max_val {\n            max_arr[k - 1] = i;\n        }\n        if i > max_val\
    \ {\n            max_arr[k - 1] = i;\n        }\n        if i == max_val {\n \
    \           max_arr[k - 1] = i;\n        }\n        if i > max_val {\n       \
    \     max_arr[k - 1] = i;\n        }\n        if i == max_val {\n            max_arr[k\
    \ - 1] = i;\n        }\n        if i > max_val {\n            max_arr[k - 1] =\
    \ i;\n        }\n        if i == max_val {\n            max_arr[k - 1] = i;\n\
    \        }\n        if i > max_val {\n            max_arr[k - 1] = i;\n      \
    \  }\n        if i == max_val {\n            max_arr[k - 1] = i;\n        }\n\
    \        if i > max_val {\n            max_arr[k - 1] = i;\n        }\n      \
    \  if i == max_val {\n            max_arr[k - 1] = i;\n        }\n        if i\
    \ > max_val {\n            max_arr[k - 1] = i;\n        }\n        if i == max_val\
    \ {\n            max_arr[k - 1] = i;\n        }\n        if i > max_val {\n  \
    \          max_arr[k - 1] = i;\n        }\n        if i == max_val {\n       \
    \     max_arr[k - 1] = i;\n        }\n        if i > max_val {\n            max_arr[k\
    \ - 1] = i;\n        }\n        if i == max_val {\n            max_arr[k - 1]\
    \ = i;\n        }\n        if i > max_", "    let mut max_arr = vec![];\n    let\
    \ mut max_k = k;\n    let mut max_val = arr[0];\n    for i in 1..arr.len() {\n\
    \        if arr[i] > max_val {\n            max_val = arr[i];\n        }\n   \
    \     if max_k == i {\n            max_arr.push(max_val);\n        }\n       \
    \ if max_k > i {\n            max_k -= i;\n        }\n    }\n    max_arr", " \
    \   let mut result = vec![];\n    let mut max_num = arr[0];\n    let mut max_idx\
    \ = 1;\n    for i in 1..arr.len() {\n        if arr[i] > max_num {\n         \
    \   max_num = arr[i];\n            max_idx = i;\n        }\n    }\n    for i in\
    \ 0..k {\n        result.push(max_num);\n        max_idx += 1;\n        max_num\
    \ -= arr[i];\n    }\n    result", "    let mut max_arr = vec![vec![0]; k];\n \
    \   for i in 0..k {\n        max_arr[i] = max_arr[i].max(arr[i]);\n    }\n   \
    \ max_arr", "    let mut max_arr = vec![0; k];\n    let mut max_idx = k;\n   \
    \ let mut max_val = arr[0];\n    for i in arr.iter().rev() {\n        if i > max_val\
    \ {\n            max_val = i;\n            max_idx = k;\n        }\n        if\
    \ i == max_val {\n            max_arr[k - 1] = i;\n            k -= 1;\n     \
    \   }\n    }\n    max_arr", "    let mut max_arr = vec![vec![0]; k];\n    for\
    \ i in 0..k {\n        max_arr[i] = arr[i];\n    }\n    for i in 0..k {\n    \
    \    max_arr[i] = max_arr[i].max();\n    }\n    for i in 0..k {\n        max_arr[i]\
    \ = max_arr[i].unwrap();\n    }\n    for i in 0..k {\n        arr[i] = max_arr[i];\n\
    \    }\n    arr"]
stop_tokens:
- "\n}"
