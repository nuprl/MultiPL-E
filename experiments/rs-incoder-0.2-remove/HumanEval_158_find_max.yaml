name: HumanEval_158_find_max
language: rs
prompt: "/// Write a function that accepts a list of strings.\n/// The list contains\
  \ different words. Return the word with maximum number\n/// of unique characters.\
  \ If multiple strings have maximum number of unique\n/// characters, return the\
  \ one which comes first in lexicographical order.\nfn find_max(words: Vec<String>)\
  \ -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = find_max;\n    assert_eq!(candidate(vec![String::from(\"\
  name\"), String::from(\"of\"), String::from(\"string\")]), String::from(\"string\"\
  ));\n    assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"enam\"\
  ), String::from(\"game\")]), String::from(\"enam\"));\n    assert_eq!(candidate(vec![String::from(\"\
  aaaaaaa\"), String::from(\"bb\"), String::from(\"cc\")]), String::from(\"aaaaaaa\"\
  ));\n    assert_eq!(candidate(vec![String::from(\"abc\"), String::from(\"cba\")]),\
  \ String::from(\"abc\"));\n    assert_eq!(candidate(vec![String::from(\"play\"),\
  \ String::from(\"this\"), String::from(\"game\"), String::from(\"of\"), String::from(\"\
  footbott\")]), String::from(\"footbott\"));\n    assert_eq!(candidate(vec![String::from(\"\
  we\"), String::from(\"are\"), String::from(\"gonna\"), String::from(\"rock\")]),\
  \ String::from(\"gonna\"));\n    assert_eq!(candidate(vec![String::from(\"we\"),\
  \ String::from(\"are\"), String::from(\"a\"), String::from(\"mad\"), String::from(\"\
  nation\")]), String::from(\"nation\"));\n    assert_eq!(candidate(vec![String::from(\"\
  this\"), String::from(\"is\"), String::from(\"a\"), String::from(\"prrk\")]), String::from(\"\
  this\"));\n    assert_eq!(candidate(vec![String::from(\"b\")]), String::from(\"\
  b\"));\n    assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"play\"\
  ), String::from(\"play\")]), String::from(\"play\"));\n}\n"
completions: ["    let mut max_count = std::collections::HashSet::new();\n    let\
    \ mut max_word = String::new();\n    for word in words {\n        let mut count\
    \ = std::collections::HashSet::new();\n        for c in word.chars() {\n     \
    \       count.insert(*c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_chars = String::new();\n    let mut max_word\
    \ = String::new();\n    let mut max_word_len = String::new();\n    for word in\
    \ words {\n        let mut chars = String::new();\n        for char in word.chars()\
    \ {\n            chars.push_str(char);\n        }\n        if chars.len() > max_chars.len()\
    \ {\n            max_chars = chars;\n            max_word = word;\n          \
    \  max_word_len = word.len();\n        }\n    }\n    if max_chars.len() == max_word_len\
    \ {\n        max_word\n    } else {\n        find_max(vec![max_word, String::new()])\n\
    \    }", "    let mut max_count = std::collections::HashSet::new();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        let count = word.chars().filter(|c|\
    \ !c.is_whitespace()).count();\n        if count > max_count.len() {\n       \
    \     max_count = count;\n            max_word = word;\n        }\n    }\n   \
    \ max_word", "    let mut max_count = words[0].chars().count();\n    let mut max_word\
    \ = words[0];\n    for word in words.iter() {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = words.iter().filter(|word|\
    \ word.chars().count() == max_count).max().unwrap();\n    let mut max_index =\
    \ words.iter().filter(|word| word.chars().count() == max_count).count();\n   \
    \ let mut max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_index = words.iter().filter(|word| word.chars().count() == max_count).count();\n\
    \    let mut max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_index = words.iter().filter(|word| word.chars().count() == max_count).count();\n\
    \    let mut max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_index = words.iter().filter(|word| word.chars().count() == max_count).count();\n\
    \    let mut max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_index = words.iter().filter(|word| word.chars().count() == max_count).count();\n\
    \    let mut max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_index = words.iter().filter(|word| word.chars().count() == max_count).count();\n\
    \    let mut max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_index = words.iter().filter(|word| word.chars().count() == max_count).count();\n\
    \    let mut max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_index = words.iter().filter(|word| word.chars().count() == max_count).count();\n\
    \    let mut max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_index = words.iter().filter(|word| word.chars().count() == max_count).count();\n\
    \    let mut max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_index = words.iter().filter(|word| word.chars().count() == max_count).count();\n\
    \    let mut max_word = words.iter().filter(|", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter_mut() {\n\
    \        if v > max_counters.len() {\n            max_counters = HashMap::new();\n\
    \            max_key = String::new();\n        }\n        max_key = max_key.to_string();\n\
    \    }\n    max_key", "    let mut counter = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for (_, value) in counter {\n        if\
    \ value == max_value {\n            max_key = String::from(\"\\\"\");\n      \
    \  }\n    }\n    max_key.push_str(\"\\\"\");\n    max_key", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_key = String::new();\n   \
    \ for (_, v) in max_counters.iter() {\n        if v > max_counters.get(&max_key).unwrap()\
    \ {\n            max_counters.insert(max_key, v);\n            max_key = String::new();\n\
    \        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in max_counters.keys() {\n        if\
    \ max_counters[c] > max_counters.len() {\n            max_counters = HashMap::new();\n\
    \            max_word = String::new();\n        }\n        if max_counters[c]\
    \ > 0 {\n            max_counters.entry(c).or_insert(0) -= 1;\n            if\
    \ max_counters[c] == 0 {\n                max_word = word;\n            }\n  \
    \      }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_word_len = String::new();\n \
    \   for c in max_counters.keys() {\n        if max_counters[c] > max_counters.len()\
    \ {\n            max_counters = HashMap::new();\n            max_word = String::new();\n\
    \            max_word_len = String::new();\n        }\n        if max_counters[c]\
    \ > max_counters.len() {\n            max_counters = HashMap::new();\n       \
    \     max_word = String::new();\n            max_word_len = String::new();\n \
    \       }\n        if max_counters[c] > max_counters.len() {\n            max_counters\
    \ = HashMap::new();\n            max_word = String::new();\n            max_word_len\
    \ = String::new();\n        }\n        if max_counters[c] > max_counters.len()\
    \ {\n            max_counters = HashMap::new();\n            max_word = String::new();\n\
    \            max_word_len = String::new();\n        }\n        if max_counters[c]\
    \ > max_counters.len() {\n            max_counters = HashMap::new();\n       \
    \     max_word = String::new();\n            max_word_len = String::new();\n \
    \       }\n        if max_counters[c] > max_counters.len() {\n            max_counters\
    \ = HashMap::new();\n            max_word = String::new();\n            max_word_len\
    \ = String::new();\n        }\n        if max_counters[c] > max_counters.len()\
    \ {\n            max_counters = HashMap::new();\n            max_word = String::new();\n\
    \            max_word_len = String::new();\n        }\n        if max_counters[c]\
    \ > max_counters.len() {\n            max_counters = HashMap::new();\n       \
    \     max_word = String::new();\n            max_word_len = String::new();\n \
    \       }\n        if max_counters[c] > max_counters.len() {\n            max_counters\
    \ = HashMap::new();\n            max_word = String::new();\n            max_word_len\
    \ = String::new();\n        }\n        if max_counters[c] > max_counters.len()\
    \ {\n            max_counters = HashMap::new();\n            max_word = String::new();\n\
    \            max_word_len = String::new();\n        }\n        if max_counters[c]\
    \ > max_counters.len() {\n            max_counters = HashMap::new();\n       \
    \     max_word = String::new();\n            max_word_len = String::new();\n \
    \       }\n        if max_counters[c] > max_counters.len() {\n            max_counters\
    \ = Hash", "    let mut max_count = words[0].chars().count();\n    let mut max_word\
    \ = words[0];\n    for word in words.iter() {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for (_, value) in counter {\n        if\
    \ value == max_value {\n            max_key = String::from(char::from(u8::from(c)));\n\
    \        }\n    }\n    max_key", "    let mut max_chars = String::new();\n   \
    \ let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ chars = String::new();\n        for char in word.chars() {\n            chars.push_str(char);\n\
    \        }\n        if chars.len() > max_chars.len() {\n            max_chars\
    \ = chars;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (key, val) in max_counters {\n       \
    \ if val > max_counters.len() {\n            max_counters = HashMap::new();\n\
    \            max_key = key;\n        }\n    }\n    max_key", "    let mut counter\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = counter.iter().max_by_key(|&(_,\
    \ v)| v);\n    while let Some(key) = max_value {\n        if counter[key] == max_value.1\
    \ {\n            max_value = counter.iter().max_by_key(|&(_, v)| v);\n       \
    \ } else {\n            max_key = key;\n            max_value = counter.iter().max_by_key(|&(_,\
    \ v)| v);\n        }\n    }\n    max_key", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = words.iter().filter(|word|\
    \ word.chars().count() == max_count).next();\n    while let Some(word) = max_word\
    \ {\n        max_count = word.chars().count();\n        max_word = words.iter().filter(|word|\
    \ word.chars().count() == max_count).next();\n    }\n    max_word", "    let mut\
    \ max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = words.iter().filter(|word|\
    \ word.chars().count() == max_count).count().unwrap();\n    loop {\n        if\
    \ max_count < words.iter().filter(|word| word.chars().count() == max_count).count()\
    \ {\n            max_word = words.iter().filter(|word| word.chars().count() ==\
    \ max_count).max().unwrap();\n            max_count = words.iter().filter(|word|\
    \ word.chars().count() == max_count).count().unwrap();\n        } else {\n   \
    \         break;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, count) in max_counters.iter() {\n\
    \        if count > max_counters.get(&max_key).unwrap() {\n            max_counters.insert(max_key,\
    \ count);\n            max_key = String::new();\n        }\n    }\n    max_key",
  "    let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    for (key, value) in max_counters {\n        if value ==\
    \ words.len() {\n            max_key = key;\n        }\n    }\n    max_key", " \
    \   let mut counter = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n       \
    \ }\n    }\n    let mut max_key = counter.keys().iter().max().unwrap();\n    let\
    \ mut max_value = counter.values().iter().max().unwrap();\n    let mut max_word\
    \ = String::new();\n    for k in &mut max_key {\n        if counter[k] == max_value\
    \ {\n            max_word = word.clone();\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter() {\n        let count = word.chars().count();\n \
    \       if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_word_len = String::new();\n \
    \   for (k, v) in max_counters.iter() {\n        if v > max_counters.get(&k).unwrap()\
    \ {\n            max_counters.insert(k, v);\n            max_word = k;\n     \
    \       max_word_len = v;\n        }\n    }\n    if max_word_len > 1 {\n     \
    \   max_word\n    } else {\n        String::from(\"\")\n    }", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_count.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_count = max_", "  \
    \  let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    for (key, val) in counters {\n        if val > max_counters.get(&key).unwrap()\
    \ {\n            max_counters.insert(key, val);\n            max_key = key;\n\
    \        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in counters.keys() {\n     \
    \   if counters[c] == max_counter {\n            max_word = word;\n          \
    \  break;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = counter.keys().iter().max().unwrap();\n\
    \    let mut max_value = counter.values().iter().max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for k in &mut max_key {\n        if counter[k]\
    \ == max_value {\n            max_word = words[*k].clone();\n        }\n    }\n\
    \    max_word", "    let mut counter = HashMap::new();\n    for word in words\
    \ {\n        for c in word.chars() {\n            counter.insert(c, counter.get(c).unwrap()\
    \ + 1);\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.get(&max_key).unwrap();\n    for (_, value) in counter.iter() {\n\
    \        if value > max_value {\n            max_value = value;\n            max_key\
    \ = String::new();\n        }\n        max_key.push_str(&value.to_string());\n\
    \    }\n    max_key", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            if let\
    \ Some(count) = counters.get(c) {\n                counters.insert(c, count +\
    \ 1);\n            } else {\n                counters.insert(c, 1);\n        \
    \    }\n        }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for (c, count) in counters {\n   \
    \     if count == max_count {\n            max_word.push(c);\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_word.clone();\n\
    \    let mut max_word = max_word.clone();\n    let mut max_word = max_", "   \
    \ let mut counters = HashMap::new();\n    for word in words {\n        for c in\
    \ word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n        }\n\
    \    }\n    let mut max_counters = counters.clone();\n    let mut max_key = String::new();\n\
    \    let mut max_value = String::new();\n    for k in counters.keys() {\n    \
    \    if *k > max_counters.get(k).unwrap() {\n            max_counters.insert(k,\
    \ *k);\n            max_key = k;\n            max_value = max_counters.get(k).unwrap();\n\
    \        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (key, _) in max_counters {\n        if\
    \ *max_counters.entry(key).or_insert(0) > *max_counters.entry(max_key).or_insert(0)\
    \ {\n            max_counters = key;\n            max_key = key;\n        }\n\
    \    }\n    max_key", "    let mut counter = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            if let Some(count) = counter.entry(c).or_insert(0)\
    \ {\n                *count += 1;\n            }\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = -1;\n    for (key, value)\
    \ in counter.iter() {\n        if *value > max_value {\n            max_value\
    \ = *value;\n            max_key = key;\n        }\n    }\n    max_key", "   \
    \ let mut counter = HashMap::new();\n    for word in words {\n        for c in\
    \ word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n        }\n\
    \    }\n    let mut max_key = counter.keys().max_by_key(|&key| counter[key]);\n\
    \    if counter[&max_key] > 1 {\n        max_key = max_key.to_owned();\n    }\n\
    \    max_key", "    let mut counter = HashMap::new();\n    for word in words {\n\
    \        for c in word.chars() {\n            counter.entry(c).or_insert(0) +=\
    \ 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for (_, value) in counter {\n        if\
    \ value == max_value {\n            max_key = String::new();\n            max_value\
    \ = value;\n        }\n        if value == 1 {\n            break;\n        }\n\
    \    }\n    max_key", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter() {\n    \
    \    if v > max_counters.get(&max_key).unwrap() {\n            max_counters.insert(max_key,\
    \ v);\n            max_key = String::new();\n        }\n    }\n    max_key", " \
    \   let mut max_count = std::collections::HashSet::new();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert(c);\n        }\n  \
    \      if count.len() > max_count.len() {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_key = String::new();\n   \
    \ for k in counters.keys() {\n        if counters[k] > max_counters[k] {\n   \
    \         max_counters = counters.clone();\n            max_key = k.to_string();\n\
    \        }\n    }\n    max_key", "    let mut counter = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = counter.keys().iter().max().unwrap();\n\
    \    let mut max_value = counter.values().iter().max().unwrap();\n    if max_value\
    \ == 1 {\n        return max_key;\n    }\n    for k in counter.keys() {\n    \
    \    if counter.value(k) == max_value {\n            max_key = k;\n        }\n\
    \    }\n    return max_key;", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert(*c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words[0].chars().count();\n  \
    \  let mut max_word = words[0];\n    for word in words.iter() {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    for k in counters.keys() {\n        if counters[k] > max_counters[k]\
    \ {\n            max_counters[k] = counters[k];\n            max_key = k;\n  \
    \      }\n    }\n    max_key", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in counters.keys() {\n     \
    \   if counters[c] == max_counter {\n            max_word = word;\n          \
    \  break;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for (_, value) in counter {\n        if\
    \ value == max_value {\n            max_key = String::from(\"\");\n        }\n\
    \        if value == max_value {\n            max_key = String::from(\" \");\n\
    \        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for k in counters.keys() {\n        if counters[k]\
    \ > max_counters[k] {\n            max_counters[k] = counters[k];\n          \
    \  max_key = k;\n        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (key, _) in max_counters {\n        if\
    \ *max_counters.entry(key).or_insert(0) >= *counters.entry(key).or_insert(0) {\n\
    \            max_counters.entry(key).or_insert(0) = *counters.entry(key).or_insert(0);\n\
    \            max_key = key;\n        }\n    }\n    max_key", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counter = counters.iter().max().unwrap();\n    let mut max_word = String::new();\n\
    \    for c in counters.keys() {\n        if counters[c] == max_counter {\n   \
    \         max_word = word;\n            break;\n        }\n    }\n    max_word",
  "    let mut max_count = words[0].len();\n    let mut max_word = words[0];\n   \
    \ for word in words {\n        if word.len() > max_count {\n            max_count\
    \ = word.len();\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_count = std::collections::HashSet::new();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert(c);\n        }\n  \
    \      if count.len() > max_count.len() {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut counter\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = counter.iter().max().unwrap();\n\
    \    for c in max_value.keys().cloned() {\n        if counter[c] > max_value.value()\
    \ {\n            max_value = counter[c];\n            max_key = c;\n        }\n\
    \    }\n    max_key", "    let mut counter = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = counter.clone();\n    let\
    \ mut max_key = String::new();\n    for (key, val) in max_counter {\n        if\
    \ val > max_counter.values().nth(0) {\n            max_counter = HashMap::new();\n\
    \            max_key = key;\n        }\n    }\n    max_key", "    let mut counter\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = counter.iter().max().unwrap();\n\
    \    for (_, value) in counter {\n        if value == max_value {\n          \
    \  max_key = String::new();\n            max_value = value;\n        }\n     \
    \   if value == 1 {\n            break;\n        }\n    }\n    max_key", "   \
    \ let mut counter = HashMap::new();\n    for word in words {\n        for c in\
    \ word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n        }\n\
    \    }\n    let mut max_key = counter.keys().iter().max().unwrap();\n    let mut\
    \ max_value = counter.values().iter().max().unwrap();\n    let mut max_word =\
    \ String::new();\n    for k in &mut max_key {\n        if counter[k] == max_value\
    \ {\n            max_word = word.clone();\n            break;\n        }\n   \
    \ }\n    max_word", "    let mut counters = HashMap::new();\n    for word in words\
    \ {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys() {\n        if counters[c]\
    \ > max_counters[c] {\n            max_counters[c] = counters[c];\n          \
    \  max_word = word;\n        }\n    }\n    max_word", "    let mut counters =\
    \ HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_word = String::new();\n  \
    \  let mut max_key = String::new();\n    for (_, count) in max_counters.iter()\
    \ {\n        if count > max_counters.get(&max_key).unwrap() {\n            max_counters.insert(max_key,\
    \ count);\n            max_key = String::new();\n        }\n    }\n    if max_counters.get(&max_key).unwrap()\
    \ > 1 {\n        max_counters.remove(&max_key);\n    }\n    if max_counters.len()\
    \ == 0 {\n        return String::new();\n    }\n    let mut max_key = String::new();\n\
    \    for (_, count) in max_counters.iter() {\n        if count == 1 {\n      \
    \      max_key = String::new();\n        }\n        if count > max_counters.get(&max_key).unwrap()\
    \ {\n            max_counters.insert(max_key, count);\n            max_key = String::new();\n\
    \        }\n    }\n    if max_counters.get(&max_key).unwrap() > 1 {\n        max_counters.remove(&max_key);\n\
    \    }\n    if max_counters.len() == 0 {\n        return String::new();\n    }\n\
    \    let mut max_key = String::new();\n    for (_, count) in max_counters.iter()\
    \ {\n        if count > max_counters.get(&max_key).unwrap() {\n            max_counters.insert(max_key,\
    \ count);\n            max_key = String::new();\n        }\n    }\n    if max_counters.get(&max_key).unwrap()\
    \ > 1 {\n        max_counters.remove(&max_key);\n    }\n    if max_counters.len()\
    \ == 0 {\n        return String::new();\n    }\n    let mut max_key = String::new();\n\
    \    for (_, count) in max_counters.iter() {\n        if count > max_counters.get(&max_key).unwrap()\
    \ {\n            max_counters.insert(max_key, count);\n            max_key = String::new();\n\
    \        }\n    }\n    if max_counters.get(&max_key).unwrap() > 1 {\n        max_counters.remove(&max_key);\n\
    \    }\n    if max_counters.len() == 0 {\n        return String::new();\n    }\n\
    \    let mut max_key = String::new();\n    for (_, count) in max_counters.iter()\
    \ {\n        if count > max_counters.get(&max_key).unwrap() {\n            max_counters.insert(max_key,\
    \ count);\n            max_key = String::new();\n        }\n    }\n    if max_counters.get(&max_key).unwrap()\
    \ > 1 {\n        max_counters.remove(&max_key);\n    }\n    if max_counters.len()\
    \ == ", "    let mut counters = HashMap::new();\n    for word in words {\n   \
    \     for c in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n\
    \        }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    for k in counters.keys() {\n        if *k > max_counters.get(&k).unwrap()\
    \ {\n            max_counters.insert(k, *k);\n            max_key = k;\n     \
    \   }\n    }\n    max_key", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in counters.keys() {\n     \
    \   if counters[c] == max_counter {\n            max_counter = counters[c];\n\
    \            max_word = c.to_string();\n        }\n    }\n    max_word", "   \
    \ let mut max_count = std::collections::HashSet::new();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert(c);\n        }\n  \
    \      if count.len() > max_count.len() {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter() {\n        let count = word.chars().count();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n  \
    \  for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter() {\n    \
    \    if v > max_counters.len() {\n            max_counters = HashMap::new();\n\
    \            max_key = String::new();\n        }\n        max_key = max_key.to_owned()\
    \ + c.to_string();\n    }\n    max_key", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = words[0];\n  \
    \  for word in words.iter() {\n        if word.chars().count() > max_count {\n\
    \            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n  \
    \  for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter() {\n    \
    \    if v > max_counters.get(&'z').unwrap() {\n            max_counters.insert(&'z',\
    \ v);\n            max_key = String::new();\n        }\n        max_key.push_str(&*max_counters.get(&'z').unwrap());\n\
    \    }\n    max_key", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_word_index = -1;\n    for (i,\
    \ word) in counters.iter().enumerate() {\n        if *word > max_counters.entry(*word).or_insert(0)\
    \ {\n            max_counters = max_counters.entry(*word).or_insert(0);\n    \
    \        max_word = word;\n            max_word_index = i;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = words.iter().filter(|word| word.chars().count() == max_count).next();\n\
    \    while max_word.chars().count() > max_count {\n        max_count = max_word.chars().count();\n\
    \        max_word = max_word.next();\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_word_len = max_word.chars().count();\n    let mut max_word_index\
    \ = words.iter().position(|word| word.chars().count() == max_word_len);\n    while\
    \ max_word_index != words.len() {\n        max_word_index += 1;\n        max_word_len\
    \ = words.iter().position(|word| word.chars().count() == max_word_len).unwrap();\n\
    \    }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counters.iter().max().unwrap();\n    for (_, value) in counters {\n      \
    \  if value == max_value {\n            max_key = String::from(word);\n      \
    \  }\n    }\n    max_key", "    let mut counters = HashMap::new();\n    for word\
    \ in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = counters.iter().max().unwrap();\n\
    \    let mut max_key = counters.iter().keys().max().unwrap();\n    let mut max_word\
    \ = String::new();\n    for c in max_key.chars() {\n        if counters[c] > max_counter\
    \ {\n            max_counter = counters[c];\n            max_key = c;\n      \
    \      max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_key = String::new();\n   \
    \ for (_, v) in max_counters.iter() {\n        if v > max_counters.len() {\n \
    \           max_counters = v;\n            max_key = String::new();\n        }\n\
    \    }\n    max_key", "    let mut max_count = words.iter().map(|w| w.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for w in words {\n        if w.chars().count()\
    \ > max_count {\n            max_count = w.chars().count();\n            max_word\
    \ = w;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, count) in max_counters.iter_mut()\
    \ {\n        if *count > max_counters.len() {\n            max_counters = HashMap::new();\n\
    \            max_key = String::new();\n        }\n    }\n    for (_, count) in\
    \ max_counters.iter_mut() {\n        *count -= 1;\n        if *count == 0 {\n\
    \            max_key = max_key.clone();\n        }\n    }\n    max_key", "   \
    \ let mut counters = HashMap::new();\n    for word in words {\n        for c in\
    \ word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n        }\n\
    \    }\n    let mut max_counters = counters.clone();\n    let mut max_key = String::new();\n\
    \    for k in counters.keys() {\n        if counters[k] > max_counters[k] {\n\
    \            max_counters[k] = counters[k];\n            max_key = k.to_string();\n\
    \        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    max_counters.retain(|_,\
    \ count| count > 1);\n    let mut max_key = max_counters.keys().next().unwrap();\n\
    \    for (_, max_count) in max_counters {\n        if max_count > 1 {\n      \
    \      break;\n        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (key, value) in max_counters {\n     \
    \   if value == words.len() {\n            max_key = key;\n        }\n    }\n\
    \    max_key", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter() {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for k in &mut counter {\n        if *k\
    \ > max_value {\n            max_value = *k;\n            max_key = k.0;\n   \
    \     }\n    }\n    max_key", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n\n    for word in words {\n        let\
    \ mut count = std::collections::HashSet::new();\n        for c in word.chars()\
    \ {\n            count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n\n    max_word", "    let mut counters = HashMap::new();\n    for word\
    \ in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter() {\n    \
    \    if v > max_counters.len() {\n            max_counters = v;\n            max_key\
    \ = String::new();\n        }\n    }\n    max_key", "    let mut max_chars = String::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ chars = String::new();\n        for char in word.chars() {\n            chars.push_str(&char);\n\
    \        }\n        if chars.len() > max_chars.len() {\n            max_chars\
    \ = chars;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counter = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n       \
    \ }\n    }\n    let mut max_key = String::new();\n    let mut max_value = counter.iter().max_by_key(|&(_,\
    \ count)| count).unwrap();\n    let mut max_key = max_key.chars().collect::<Vec<_>>();\n\
    \    let mut max_value = max_value.iter().max_by_key(|&(_, count)| count).unwrap();\n\
    \    let mut max_key = max_key.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ max_value = max_value.iter().cloned().collect::<Vec<_>>();\n    let mut max_key\
    \ = max_key.iter().cloned().collect::<Vec<_>>();\n    let mut max_value = max_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_key = max_key.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ max_value = max_value.iter().cloned().collect::<Vec<_>>();\n    let mut max_key\
    \ = max_key.iter().cloned().collect::<Vec<_>>();\n    let mut max_value = max_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_key = max_key.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ max_value = max_value.iter().cloned().collect::<Vec<_>>();\n    let mut max_key\
    \ = max_key.iter().cloned().collect::<Vec<_>>();\n    let mut max_value = max_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_key = max_key.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ max_value = max_value.iter().cloned().collect::<Vec<_>>();\n    let mut max_key\
    \ = max_key.iter().cloned().collect::<Vec<_>>();\n    let mut max_value = max_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_key = max_key.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ max_value = max_value.iter().cloned().collect::<Vec<_>>();\n    let mut max_key\
    \ = max_key.iter().cloned().collect::<Vec<_>>();\n    let mut max_value = max_value.iter().cloned().collect::<Vec<_>>();\n",
  "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_index = -1;\n    for (i,\
    \ word) in words.iter().enumerate() {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n            max_index = i;\n        }\n    }\n    max_word", "    let\
    \ mut counters = HashMap::new();\n    for word in words {\n        for c in word.chars()\
    \ {\n            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let\
    \ mut max_counters = counters.clone();\n    let mut max_key = String::new();\n\
    \    for (_, v) in max_counters.iter_mut().enumerate() {\n        if v > max_counters.len()\
    \ {\n            max_counters = v;\n            max_key = String::new();\n   \
    \     }\n    }\n    max_key", "    let mut counter = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counter.insert(c,\
    \ counter.entry(c).or_insert(0) +1);\n        }\n    }\n    let mut max_key =\
    \ counter.keys().iter().max().unwrap();\n    let mut max_value = counter.values().iter().max().unwrap();\n\
    \    if max_value == 1 {\n        return max_key;\n    }\n    for k in max_key.chars()\
    \ {\n        if counter.values().iter().any(|v| v == max_value) {\n          \
    \  return k;\n        }\n    }\n    \"\".to_string()", "    let mut max_count\
    \ = std::collections::HashSet::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert((*c).to_ascii_lowercase());\n\
    \        }\n        if count.len() > max_count.len() {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter() {\n        let count = word.chars().count();\n \
    \       if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter() {\n        let\
    \ count = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = std::collections::HashSet::new();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let count = word.chars().filter(|c|\
    \ !c.is_whitespace()).count();\n        if count.is_max(&mut max_count) {\n  \
    \          max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter() {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = words.iter().position(|word| word.chars().count() > max_count);\n\
    \    while max_index != words.len() {\n        max_word = words[max_index];\n\
    \        max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \        max_index = words.iter().position(|word| word.chars().count() > max_count);\n\
    \    }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for k in counters.keys() {\n        if counters[k]\
    \ > max_counters[k] {\n            max_counters[k] = counters[k];\n          \
    \  max_key = k;\n        }\n    }\n    max_key", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for k in counters.keys() {\n        if counters[k]\
    \ > max_counters[k] {\n            max_counters[k] = counters[k];\n          \
    \  max_key = k;\n        }\n    }\n    max_key", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = words.iter().filter(|word|\
    \ word.chars().count() == max_count).max().unwrap();\n    let mut max_word_index\
    \ = words.iter().position(|word| word.chars().count() == max_count).unwrap();\n\
    \    if max_word_index == words.len() {\n        return max_word;\n    }\n   \
    \ for i in 0..max_word_index {\n        if words[i].chars().count() > max_count\
    \ {\n            max_count = words[i].chars().count();\n            max_word =\
    \ words[i];\n        }\n    }\n    max_word", "    let mut max_chars = String::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ chars = String::new();\n        for char in word.chars() {\n            chars.push_str(&char);\n\
    \        }\n        if chars.len() > max_chars.len() {\n            max_chars\
    \ = chars;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, count) in max_counters.iter() {\n\
    \        if count > max_counters.get(&max_key).unwrap() {\n            max_counters.insert(max_key,\
    \ count);\n            max_key = String::new();\n        }\n    }\n    max_key",
  "    let mut max_chars = String::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut chars = String::new();\n        for\
    \ char in word.chars() {\n            if chars.contains(&char) {\n           \
    \     chars.insert(char);\n            } else {\n                chars.insert(char.to_ascii_lowercase());\n\
    \            }\n        }\n        if chars.len() > max_chars.len() {\n      \
    \      max_chars = chars;\n            max_word = word;\n        }\n    }\n  \
    \  max_word", "    let mut counters = HashMap::new();\n    for word in words {\n\
    \        for c in word.chars() {\n            counters.entry(c).or_insert(0) +=\
    \ 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counters.iter().max().unwrap();\n    for (_, value) in counters {\n      \
    \  if value == max_value {\n            max_key = String::new();\n           \
    \ max_value = value;\n        }\n        if value == 1 {\n            break;\n\
    \        }\n    }\n    max_key", "    let mut counter = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = counter.keys().max_by_key(|&k|\
    \ counter[k]);\n    if counter[&max_key] > 1 {\n        max_key\n    } else {\n\
    \        \"\".to_string()\n    }", "    let mut counters = HashMap::new();\n \
    \   for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_key = String::new();\n    for\
    \ entry in &mut counters {\n        if *entry > max_counters.entry(*max_key).or_insert(0)\
    \ {\n            max_counters = entry;\n            max_key = entry.key();\n \
    \           max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counter = counters.iter().max().unwrap();\n    let mut max_word = String::new();\n\
    \    for c in counters.keys() {\n        if counters[c] == max_counter {\n   \
    \         max_word = c.to_string();\n            break;\n        }\n    }\n  \
    \  max_word", "    let mut counters = HashMap::new();\n    for word in words {\n\
    \        for c in word.chars() {\n            if let Some(count) = counters.entry(c).or_insert(0)\
    \ {\n                *count += 1;\n            }\n        }\n    }\n    let mut\
    \ max_count = counters.iter().max().unwrap();\n    let mut max_key = String::new();\n\
    \    for (key, _) in counters {\n        if *key == max_count {\n            max_key\
    \ = key;\n        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (key, _) in max_counters {\n        if\
    \ *max_counters.entry(key).or_insert(0) >= *counters.entry(key).or_insert(0) {\n\
    \            max_counters.entry(key).or_insert(0) = *counters.entry(key).or_insert(0);\n\
    \            max_key = key;\n        }\n    }\n    max_key", "    let mut max_count\
    \ = std::i32::MAX;\n    let mut max_word = String::new();\n    for word in words\
    \ {\n        let mut count = std::i32::MAX;\n        for c in word.chars() {\n\
    \            count += 1;\n        }\n        if count > max_count {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_count = std::collections::HashSet::new();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert(c);\n        }\n  \
    \      if count.len() > max_count.len() {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut counter\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = counter.iter().max().unwrap();\n\
    \    for (_, value) in counter {\n        if value == max_value {\n          \
    \  max_key = String::from(\"\");\n        }\n        if value == max_value {\n\
    \            max_key = String::from(\"\");\n        }\n    }\n    max_key", " \
    \   let mut counter = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n       \
    \ }\n    }\n    let mut max_key = String::new();\n    let mut max_value = counter.iter().max_by_key(|&(_,\
    \ v)| v).unwrap();\n    for (_, v) in counter.iter_mut() {\n        if v == max_value\
    \ {\n            max_key = String::new();\n            max_value = v;\n      \
    \  }\n        max_key.push_str(&c.to_string());\n    }\n    max_key", "    let\
    \ mut max_count = std::collections::HashSet::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert(c);\n        }\n  \
    \      if count.len() > max_count.len() {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = std::collections::HashSet::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let count = word.chars().filter(|c| !c.is_whitespace()).count();\n\
    \        if count.is_max(&mut max_count) {\n            max_count = count;\n \
    \           max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n\n    for word in words {\n        let\
    \ mut count = std::collections::HashSet::new();\n        for c in word.chars()\
    \ {\n            count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n\n    max_word", "    let mut counter = HashMap::new();\n    for word\
    \ in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for c in counter.keys() {\n        if\
    \ counter[c] > max_value {\n            max_value = counter[c];\n            max_key\
    \ = c;\n        }\n    }\n    max_key", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut i = 0;\n    while i < words.len() && max_count > 0 {\n        if\
    \ words[i].chars().count() > max_count {\n            max_count = words[i].chars().count();\n\
    \            max_word = words[i];\n        }\n        i += 1;\n    }\n    max_word",
  "    let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter() {\n        if word.chars().count() > max_count {\n\
    \            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (key, value) in counter.iter() {\n        if value\
    \ > max_value.len() {\n            max_value = key;\n            max_key = key;\n\
    \        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    let mut max_value = String::new();\n    for\
    \ k in counters.keys() {\n        if counters[k] > max_counters[k] {\n       \
    \     max_counters[k] = counters[k];\n            max_key = k;\n            max_value\
    \ = max_key.to_string();\n        }\n    }\n    max_value", "    let mut max_count\
    \ = std::collections::HashSet::new();\n    let mut max_word = String::new();\n\
    \n    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert((c, 1));\n        }\n\
    \        if count.len() > max_count.len() {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counter\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = counter.iter().max().unwrap();\n\
    \    for k in counter.keys() {\n        if counter[k] == max_value {\n       \
    \     max_key = k.to_string();\n        }\n    }\n    max_key", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_key = String::new();\n   \
    \ for k in counters.keys() {\n        if counters[k] > max_counters[k] {\n   \
    \         max_counters[k] = counters[k];\n            max_key = k;\n        }\n\
    \    }\n    max_key", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter() {\n    \
    \    if v > max_counters.len() {\n            max_counters = v;\n            max_key\
    \ = String::new();\n        }\n        max_key.push_str(&*max_counters.keys().nth(v));\n\
    \    }\n    max_key", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter() {\n    \
    \    if v > max_counters.len() {\n            max_counters = v;\n            max_key\
    \ = String::new();\n        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_key = String::new();\n    for\
    \ (_, v) in max_counters.iter() {\n        if v > max_counters.len() {\n     \
    \       max_counters = v;\n            max_word = word;\n            max_key =\
    \ c;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().filter(|c| !c.is_whitespace()).count();\n        if count.is_some()\
    \ && count.unwrap() > max_count.unwrap() {\n            max_count = count;\n \
    \           max_word = word;\n        }\n    }\n    max_word", "    let mut counter\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = counter.iter().max().unwrap();\n\
    \    for (_, value) in counter {\n        if value == max_value {\n          \
    \  max_key = String::new();\n            max_value = value;\n        }\n     \
    \   if value == 1 {\n            break;\n        }\n    }\n    max_key", "   \
    \ let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter() {\n        let count = word.chars().count();\n \
    \       if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for k in counters.keys() {\n        if counters[k]\
    \ > max_counters[k] {\n            max_counters[k] = counters[k];\n          \
    \  max_key = k;\n        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (key, val) in counters {\n        if val\
    \ > max_counters.get(&key).unwrap() {\n            max_counters.insert(key, val);\n\
    \            max_key = key;\n        }\n    }\n    max_key", "    let mut counter\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = counter.iter().max().unwrap();\n\
    \    for (_, value) in counter {\n        if value == max_value {\n          \
    \  max_key = String::new();\n        }\n        if value > max_value {\n     \
    \       max_value = value;\n            max_key = String::new();\n        }\n\
    \    }\n    max_key", "    let mut max_count = words[0].chars().count();\n   \
    \ let mut max_word = words[0];\n    for word in words.iter() {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter() {\n        let count = word.chars().count();\n \
    \       if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for k in counters.keys() {\n        if counters[k]\
    \ > max_counters[k] {\n            max_counters[k] = counters[k];\n          \
    \  max_key = k;\n        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter() {\n    \
    \    if v > max_counters.get(&max_key).unwrap() {\n            max_counters.insert(max_key,\
    \ v);\n            max_key = String::new();\n        }\n    }\n    if max_counters.len()\
    \ == 1 {\n        max_key\n    } else {\n        let mut max_key = String::new();\n\
    \        let mut max_value = max_counters.get(&max_key).unwrap();\n        for\
    \ (_, v) in max_counters.iter() {\n            if v > max_value {\n          \
    \      max_value = v;\n                max_key = String::new();\n            }\n\
    \        }\n        max_key\n    }", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in counters.keys() {\n     \
    \   if counters[c] == max_counter {\n            max_word = word;\n          \
    \  break;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().rev() {\n    \
    \    let count = word.chars().count();\n        if count > max_count {\n     \
    \       max_count = count;\n            max_word = word;\n        }\n    }\n \
    \   max_word", "    let mut counters = HashMap::new();\n    for word in words\
    \ {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for k in counters.keys() {\n        if counters[k]\
    \ > max_counters[k] {\n            max_counters[k] = counters[k];\n          \
    \  max_key = k.to_string();\n        }\n    }\n    max_key", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().count();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut counter = HashMap::new();\n    for word in words\
    \ {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = counter.keys().iter().max().unwrap();\n\
    \    let mut max_value = counter.values().iter().max().unwrap();\n    for k in\
    \ &mut max_key {\n        if counter[k] == max_value {\n            max_value\
    \ = counter[k];\n            max_key = k;\n        }\n    }\n    max_key", " \
    \   let mut counter = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n       \
    \ }\n    }\n    let mut max_key = String::new();\n    let mut max_value = counter.iter().max().unwrap();\n\
    \    for (_, value) in counter {\n        if value == max_value {\n          \
    \  max_key = String::from(char::from_u32(max_value).unwrap());\n        }\n  \
    \  }\n    max_key", "    let mut counters = HashMap::new();\n    for word in words\
    \ {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    let mut max_value = String::new();\n    for\
    \ (key, value) in max_counters.iter() {\n        if value > max_value {\n    \
    \        max_value = value;\n            max_key = key;\n        }\n    }\n  \
    \  max_key", "    let mut counters = HashMap::new();\n    for word in words {\n\
    \        for c in word.chars() {\n            counters.entry(c).or_insert(0) +=\
    \ 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters {\n        if v\
    \ > max_counters.len() {\n            max_counters = v;\n            max_key =\
    \ String::new();\n        }\n    }\n    max_key", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (key, _) in max_counters {\n        if\
    \ max_counters[key] > max_counters.len() {\n            max_counters = HashMap::new();\n\
    \            max_key = key.clone();\n        }\n    }\n    max_key", "    let\
    \ mut counters = HashMap::new();\n    for word in words {\n        for c in word.chars()\
    \ {\n            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let\
    \ mut max_counters = counters.clone();\n    let mut max_key = String::new();\n\
    \    for (key, _) in max_counters {\n        if *max_counters.entry(key).or_insert(0)\
    \ >= *counters.entry(key).or_insert(0) {\n            max_counters = counters;\n\
    \            max_key = key;\n        }\n    }\n    max_key", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().count();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    let mut max_value = String::new();\n    for\
    \ (key, value) in max_counters {\n        if value > max_value {\n           \
    \ max_value = value;\n            max_key = key;\n        }\n    }\n    max_key",
  "    let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    for (key, _) in max_counters {\n        if max_counters[key]\
    \ > max_counters.len() {\n            max_counters = HashMap::new();\n       \
    \     max_key = key;\n        }\n    }\n    max_key", "    let mut counters =\
    \ HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_word = String::new();\n  \
    \  let mut max_key = String::new();\n    for (key, val) in max_counters {\n  \
    \      if val > max_counters.get(&key).unwrap().unwrap() {\n            max_counters.insert(key,\
    \ val);\n            max_word = key;\n            max_key = key;\n        }\n\
    \    }\n    max_key", "    let mut counter = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for (_, value) in counter {\n        if\
    \ value == max_value {\n            max_key = String::new();\n            max_value\
    \ = value;\n        }\n        max_key.push_str(&c.to_string());\n    }\n    max_key",
  "    let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    let mut max_value = String::new();\n    for (_, v) in\
    \ max_counters.iter() {\n        if v > max_counters.len() {\n            max_counters\
    \ = v;\n            max_key = String::new();\n            max_value = String::new();\n\
    \        }\n        if v == max_counters.len() {\n            max_key += c;\n\
    \        }\n    }\n    max_value", "    let mut counter = HashMap::new();\n  \
    \  for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = -1;\n    for (_, value) in counter.iter() {\n        if value > max_value\
    \ {\n            max_value = value;\n            max_key = String::new();\n  \
    \      }\n        max_key.push_str(&c.to_string());\n    }\n    max_key", "  \
    \  let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    for (_, v) in max_counters.iter() {\n        if v > max_counters.get(&String::new()).unwrap()\
    \ {\n            max_counters.insert(String::new(), v);\n            max_key =\
    \ String::new();\n        }\n    }\n    if max_counters.get(&String::new()).unwrap()\
    \ > 1 {\n        max_key\n    } else {\n        String::new()\n    }", "    let\
    \ mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for (_, value) in counter {\n        if\
    \ value == max_value {\n            max_key = String::from(\"\");\n        }\n\
    \        if value == max_value {\n            max_key.push_str(&word);\n     \
    \   }\n    }\n    max_key", "    let mut counters = HashMap::new();\n    for word\
    \ in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys() {\n        if counters[c]\
    \ > max_counters[c] {\n            max_counters[c] = counters[c];\n          \
    \  max_word = c.to_string();\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter() {\n        let count = word.chars().count();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n  \
    \  for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    max_counters.retain(|_,\
    \ count| count > 1);\n    max_counters.retain(|_, count| count > 0);\n    max_counters.retain(|_,\
    \ count| count > 2);\n    max_counters.retain(|_, count| count > 3);\n    max_counters.retain(|_,\
    \ count| count > 4);\n    max_counters.retain(|_, count| count > 5);\n    max_counters.retain(|_,\
    \ count| count > 6);\n    max_counters.retain(|_, count| count > 7);\n    max_counters.retain(|_,\
    \ count| count > 8);\n    max_counters.retain(|_, count| count > 9);\n    max_counters.retain(|_,\
    \ count| count > 10);\n    max_counters.retain(|_, count| count > 11);\n    max_counters.retain(|_,\
    \ count| count > 12);\n    max_counters.retain(|_, count| count > 13);\n    max_counters.retain(|_,\
    \ count| count > 14);\n    max_counters.retain(|_, count| count > 15);\n    max_counters.retain(|_,\
    \ count| count > 16);\n    max_counters.retain(|_, count| count > 17);\n    max_counters.retain(|_,\
    \ count| count > 18);\n    max_counters.retain(|_, count| count > 19);\n    max_counters.retain(|_,\
    \ count| count > 20);\n    max_counters.retain(|_, count| count > 21);\n    max_counters.retain(|_,\
    \ count| count > 22);\n    max_counters.retain(|_, count| count > 23);\n    max_counters.retain(|_,\
    \ count| count > 24);\n    max_counters.retain(|_, count| count > 25);\n    max_counters.retain(|_,\
    \ count| count > 26);\n    max_counters.retain(|_, count| count > 27);\n    max_counters.retain(|_,\
    \ count| count > 28);\n    max_counters.retain(|_, count| count > 29);\n    max_counters.retain(|_,\
    \ count| count > 30);\n    max_counters.retain(|_, count| count > 31);\n    max_counter",
  "    let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter() {\n        let count = word.chars().count();\n \
    \       if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter() {\n        let\
    \ count = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    let mut max_value = String::new();\n    for (key, value)\
    \ in max_counters {\n        if value > max_value {\n            max_value = value;\n\
    \            max_key = key;\n        }\n    }\n    max_key", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_word = String::new();\n  \
    \  for c in counters.keys() {\n        if counters[c] > max_counters[c] {\n  \
    \          max_counters[c] = counters[c];\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in max_counters.keys() {\n        if\
    \ max_counters[c] > max_counters.len() {\n            max_counters = HashMap::new();\n\
    \            max_word = String::new();\n        }\n        if max_counters[c]\
    \ > 0 {\n            max_counters.entry(c).or_insert(0) += 1;\n        }\n   \
    \ }\n    max_word", "    let mut max_count = std::i32::MAX;\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = std::i32::MAX;\n\
    \        for c in word.chars() {\n            count += 1;\n        }\n       \
    \ if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_chars = String::new();\n\
    \    let mut max_words = 0;\n    for word in words {\n        let mut chars =\
    \ String::new();\n        for c in word.chars() {\n            chars.push_str(&c.to_string());\n\
    \        }\n        if chars.len() > max_chars.len() {\n            max_chars\
    \ = chars;\n            max_words = 1;\n        } else {\n            max_chars\
    \ = chars;\n            max_words += 1;\n        }\n    }\n    if max_words >\
    \ 1 {\n        max_chars.push_str(\"s\");\n    }\n    max_chars", "    let mut\
    \ max_count = words[0].chars().count();\n    let mut max_word = words[0];\n  \
    \  for word in words.iter() {\n        let count = word.chars().count();\n   \
    \     if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut counters = HashMap::new();\n    for word in words\
    \ {\n        for c in word.chars() {\n            if let Some(count) = counters.entry(c).or_insert(0)\
    \ {\n                *count += 1;\n            }\n        }\n    }\n    let mut\
    \ max_count = counters.iter().max().unwrap();\n    let mut max_key = String::new();\n\
    \    for c in max_count.key() {\n        if let Some(key) = counters.entry(c).or_insert(0)\
    \ {\n            if *key > max_count {\n                max_count = key;\n   \
    \             max_key = c;\n            }\n        }\n    }\n    max_key", " \
    \   let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            if let Some(count) = counters.entry(c).or_insert(0)\
    \ {\n                *count += 1;\n            }\n        }\n    }\n    let mut\
    \ max_count = counters.iter().max().unwrap();\n    let mut max_char = counters.iter().filter(|(_,\
    \ count)| count == max_count).next();\n    if let Some((_, count)) = counters.iter().filter(|(_,\
    \ count)| count > max_count).next() {\n        max_count = count;\n        max_char\
    \ = counters.iter().filter(|(_, count)| count == max_count).next();\n    }\n \
    \   max_char.key()", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    max_counters.retain(|_,\
    \ count| count > 1);\n    let mut max_key = String::new();\n    for (_, count)\
    \ in max_counters {\n        if count > 1 {\n            max_key = word;\n   \
    \         break;\n        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter() {\n    \
    \    if v > max_counters.len() {\n            max_counters = v;\n            max_key\
    \ = String::new();\n        }\n    }\n    max_key", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter() {\n        let\
    \ count = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_chars = String::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut chars = String::new();\n        for\
    \ char in word.chars() {\n            chars.push_str(&char);\n        }\n    \
    \    if chars.len() > max_chars.len() {\n            max_chars = chars;\n    \
    \        max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter() {\n        if word.chars().count() > max_count {\n         \
    \   max_count = word.chars().count();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (key, val) in max_counters {\n       \
    \ if val > max_counters.get(&key).unwrap() {\n            max_counters.insert(key,\
    \ val);\n            max_key = key;\n        }\n    }\n    max_key", "    let\
    \ mut counter = HashMap::new();\n    for word in words {\n        for c in word.chars()\
    \ {\n            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let\
    \ mut max_key = String::new();\n    let mut max_value = counter.iter().max().unwrap();\n\
    \    for (_, value) in counter {\n        if value == max_value {\n          \
    \  max_key = String::from(word);\n        }\n    }\n    max_key", "    let mut\
    \ max_count = std::i32::MAX;\n    let mut max_word = String::new();\n    for word\
    \ in words {\n        let mut count = std::i32::MAX;\n        for c in word.chars()\
    \ {\n            if *c != ' ' {\n                count += 1;\n            }\n\
    \        }\n        if count > max_count {\n            max_count = count;\n \
    \           max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter() {\n        let count = word.chars().count();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = std::i32::MAX;\n  \
    \  let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::i32::MAX;\n        for c in word.chars() {\n            count +=\
    \ 1;\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = std::collections::HashSet::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert(c);\n        }\n  \
    \      if count.len() > max_count.len() {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    let mut max_index = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    for i in 0..words.len() {\n        if words[i].chars().count() > max_count\
    \ {\n            max_count = words[i].chars().count();\n            max_word =\
    \ words[i];\n            max_index = i;\n        }\n    }\n    max_word", "  \
    \  let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    for c in max_counters.keys() {\n        if max_counters[c]\
    \ > max_counters[max_key] {\n            max_counters[c] = max_counters[max_key];\n\
    \            max_key = c;\n        }\n    }\n    max_key", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter() {\n        let count = word.chars().count();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max_by_key(|&(_, v)| v);\n    while let Some(key) = max_value\
    \ {\n        max_key = key;\n        max_value = counter.remove(&key);\n    }\n\
    \    max_key", "    let mut counter = HashMap::new();\n    for word in words {\n\
    \        for c in word.chars() {\n            counter.entry(c).or_insert(0) +=\
    \ 1;\n        }\n    }\n    let mut max_key = counter.keys().max_by_key(|&k| counter[k]);\n\
    \    if counter[&max_key] > 1 {\n        max_key\n    } else {\n        String::from(\"\
    \")\n    }", "    let mut max_count = std::collections::HashSet::new();\n    let\
    \ mut max_word = String::new();\n    for word in words {\n        let mut count\
    \ = std::collections::HashSet::new();\n        for c in word.chars() {\n     \
    \       count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for k in counters.keys() {\n        if counters[k]\
    \ > max_counters[k] {\n            max_counters[k] = counters[k];\n          \
    \  max_key = k.to_string();\n        }\n    }\n    max_key", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = words.iter().filter(|word| word.chars().count() == max_count).max().unwrap();\n\
    \    let mut max_word_index = words.iter().position(|word| word.chars().count()\
    \ == max_count).unwrap();\n    while max_word_index != words.len() {\n       \
    \ max_count += 1;\n        max_word = words.iter().filter(|word| word.chars().count()\
    \ == max_count).max().unwrap();\n        max_word_index = words.iter().position(|word|\
    \ word.chars().count() == max_count).unwrap();\n    }\n    max_word", "    let\
    \ mut max_count = std::collections::HashSet::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert(c);\n        }\n  \
    \      if count.len() > max_count.len() {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_word = String::new();\n  \
    \  let mut max_index = -1;\n    for (index, word) in counters.iter().enumerate()\
    \ {\n        if *word > max_counters.get(&'a') {\n            max_counters.insert(*word,\
    \ *word);\n            max_word = word;\n            max_index = index;\n    \
    \    }\n    }\n    max_word", "    let mut counter = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for (_, value) in counter {\n        if\
    \ value == max_value {\n            max_key = String::new();\n            max_value\
    \ = value;\n        }\n        if value == 1 {\n            break;\n        }\n\
    \    }\n    max_key", "    let mut counter = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = counter.keys().iter().max_by_key(|&k|\
    \ counter[k]);\n    if let Some(key) = max_key {\n        return key;\n    }\n\
    \    let mut max_value = counter.values().iter().max_by_key(|&v| v);\n    if let\
    \ Some(value) = max_value {\n        return value;\n    }\n    String::new()",
  "    let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    for c in max_counters.keys() {\n        if max_counters[c]\
    \ > max_counters.entry(c).or_insert(0) {\n            max_counters.entry(c).or_insert(0)\
    \ = max_counters[c];\n            max_key = c;\n        }\n    }\n    max_key",
  "    let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter() {\n        let count = word.chars().count();\n \
    \       if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            if let\
    \ Some(count) = counter.entry(c).or_insert(0) {\n                *count += 1;\n\
    \            }\n        }\n    }\n    let mut max_count = counter.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in max_count.keys() {\n    \
    \    if let Some(count) = counter.get(c) {\n            if *count > max_count\
    \ {\n                max_count = count;\n                max_word = c;\n     \
    \       }\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for (_, value) in counter {\n        if\
    \ value == max_value {\n            max_key = String::new();\n            max_value\
    \ = value;\n        }\n        max_key.push_str(&c.to_string());\n    }\n    max_key"]
stop_tokens:
- "\n}"
