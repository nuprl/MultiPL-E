name: HumanEval_140_fix_spaces
language: rs
prompt: "/// Given a string text, replace all spaces in it with underscores, \n///\
  \ and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with -\nfn fix_spaces(text: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
  Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
  Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
  Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
  ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
  ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
  -Exa_1_2_2_mple\"));\n}\n"
completions: ["    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s", "    let mut s = text;\n\
    \    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n        s.replace(\"  \"\
    , \" -\");\n    }\n    s", "    let mut s = text;\n    s.replace(\"_\", \" \"\
    )\n        .chars()\n        .filter(|c| c.is_whitespace())\n        .for_each(|c|\
    \ s.replace(c, \"-\"));\n    s", "    let mut s = text;\n    s.replace(\"  \"\
    , \"_\");\n    if s.len() > 2 {\n        s.replace(\"  \", \" -\");\n    }\n \
    \   s", "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s", "    let mut s = text;\n\
    \    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n        s.replace(\"  \"\
    , \" -\");\n    }\n    s", "    let mut s = text;\n    s.replace(\"_\", \" \"\
    ).replace(\"  \", \"- \");\n    s", "    let mut s = text;\n    s.replace(\"_\"\
    , \" \").replace(\"  \", \"- \");\n    s", "    let mut s = text;\n    s.replace(\"\
    \  \", \" \");\n    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n\
    \    s", "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s", "    let mut s = text;\n\
    \    s.replace(\"  \", \"_\");\n    s.replace(\"  \", \" \");\n    if s.len()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s", "    let mut s = text;\n\
    \    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s", "    let mut s\
    \ = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n   \
    \     s.replace(\"  \", \" -\");\n    }\n    s", "    let mut s = text;\n    s.replace(\"\
    _\", \" \").replace(\"  \", \"- \");\n    s", "    let mut s = text;\n    s.replace(\"\
    \  \", \"_\");\n    if s.len() > 2 {\n        s.replace(\"  \", \" -\");\n   \
    \ }\n    s", "    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \"\
    , \"- \").trim()", "    let mut s = text;\n    s.replace(\"  \", \" \");\n   \
    \ let mut i = 0;\n    while i < s.len() {\n        if s[i] != ' ' {\n        \
    \    i += 1;\n        } else {\n            if i + 1 < s.len() {\n           \
    \     if s[i + 1] == ' ' {\n                    i += 1;\n                } else\
    \ {\n                    s = &s[0..i];\n                    s.replace(\"  \",\
    \ \"_\");\n                }\n            } else {\n                s = &s[0..i];\n\
    \                s.replace(\"  \", \"_\");\n            }\n        }\n    }\n\
    \    s", "    let mut result = String::new();\n    let mut spaces = 0;\n    for\
    \ ch in text.chars() {\n        if ch == ' ' {\n            spaces += 1;\n   \
    \     } else {\n            spaces = 0;\n        }\n        if spaces == 2 {\n\
    \            result.push_str(\"_\");\n            spaces = 0;\n        } else\
    \ {\n            result.push_str(&format!(\"{}\", ch));\n        }\n    }\n  \
    \  result", "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s", "    let mut s = text;\n\
    \    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s"]
stop_tokens:
- "\n}"
