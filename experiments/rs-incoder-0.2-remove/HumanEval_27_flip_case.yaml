name: HumanEval_27_flip_case
language: rs
prompt: "/// For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\nfn flip_case(string: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
  \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
  \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
  \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\"));\n}\n"
completions: ["    string.chars()\n        .map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars()\n      \
    \  .map(|c| match c {\n            'a' .. 'z' => c as char + 'A' as char,\n  \
    \          'A' .. 'Z' => c as char + 'a' as char,\n            _ => c,\n     \
    \   })\n        .collect()", "    string.chars().map(|c| match c {\n        'a'\
    \ .. 'z' => c as char,\n        'A' .. 'Z' => c as char,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x21,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x21,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars()\n        .map(|c| match c {\n          \
    \  'a' .. 'z' => c as char + 'A' as char,\n            'A' .. 'Z' => c as char\
    \ + 'a' as char,\n            _ => c,\n        })\n        .collect()", "    string.chars()\n\
    \        .map(|c| match c {\n            'a' .. 'z' => c as char + 'A' as char,\n\
    \            'A' .. 'Z' => c as char + 'a' as char,\n            _ => c,\n   \
    \     })\n        .collect()", "    string.chars().map(|c| match c {\n       \
    \ 'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n     \
    \   _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n      \
    \  'A'..='Z' => c as char + 'a' - 'A' as char,\n        'a'..='z' => c as char\
    \ + 'A' - 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char,\n        'A' .. 'Z' => c as char,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char\
    \ + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char,\n        'A' .. 'Z' => c as char,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char\
    \ + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char,\n        'A' .. 'Z' => c as char,\n\
    \        _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            c if c.is_lowercase() => c.to_uppercase(),\n            c if\
    \ c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n        })\n   \
    \     .collect()", "    string.chars()\n        .map(|c| match c {\n         \
    \   'a' .. 'z' => c as char + 'A' as char,\n            'A' .. 'Z' => c as char\
    \ + 'a' as char,\n            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 ^ 0x20,\n        'A' .. 'Z' => c as\
    \ u8 ^ 0x21,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x21,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x21,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x21,\n        _ => c,\n    }).collect()", "    string.chars()\n      \
    \  .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()", "    string.chars().map(|c| match c {\n    \
    \    'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char +\
    \ 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars()\n\
    \        .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()", "    string.chars().map(|c| match c {\n    \
    \    'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n  \
    \      _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            'a' .. 'z' => c as char + 'A' as char,\n            'A' ..\
    \ 'Z' => c as char + 'a' as char,\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as char + 'A' as char,\n        'A' .. 'Z' => c as char + 'a' as char,\n \
    \       _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            c if c.is_lowercase() => c.to_uppercase(),\n            c if\
    \ c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n        })\n   \
    \     .collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as char + 'A' as char,\n        'A' .. 'Z' => c as char + 'a' as char,\n \
    \       _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n  \
    \      'A' .. 'Z' => c as char + 'a' - 'A' as char,\n        'a' .. 'z' => c as\
    \ char + 'A' - 'a' as char,\n        _ => c,\n    }).collect()", '    string.chars().map(|c|
    if c.is_lowercase() then c.to_uppercase() else c.to_lowercase()).collect()', " \
    \   string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars()\n      \
    \  .map(|c| match c {\n            'a' .. 'z' => c as u8 | 0x20,\n           \
    \ 'A' .. 'Z' => c as u8 | 0x20,\n            _ => c,\n        })\n        .collect()",
  "    string.chars()\n        .map(|c| match c {\n            'a' .. 'z' => c as\
    \ char + 'A' as char,\n            'A' .. 'Z' => c as char + 'a' as char,\n  \
    \          _ => c,\n        })\n        .collect()", "    string.chars()\n   \
    \     .map(|c| match c {\n            'a' .. 'z' => c as char + 'A' as char,\n\
    \            'A' .. 'Z' => c as char + 'a' as char,\n            _ => c,\n   \
    \     })\n        .collect()", "    string.chars().map(|c| match c {\n       \
    \ 'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x21,\n     \
    \   _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match c\
    \ {\n            'a' .. 'z' => c as char + 'A' as char,\n            'A' .. 'Z'\
    \ => c as char + 'a' as char,\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as char,\n      \
    \  'A' .. 'Z' => c as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A'..='Z' => c as char + 'a' - 'A' as char,\n        'a'..='z'\
    \ => c as char + 'A' - 'a' as char,\n        _ => c,\n    }).collect()", "   \
    \ string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as char,\n\
    \        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n \
    \       'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        'a' .. 'z' => c as u8 | 0x21,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x21,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars()\n        .map(|c| match c {\n          \
    \  c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()",
  "    string.chars()\n        .map(|c| if c.is_lowercase() { c.to_uppercase() } else\
    \ { c.to_lowercase() })\n        .collect()", "    string.chars().map(|c| match\
    \ c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 |\
    \ 0x20,\n        _ => c,\n    }).collect()", "    string.chars()\n        .map(|c|\
    \ match c {\n            'a' .. 'z' => c as char + 'A' as char,\n            'A'\
    \ .. 'Z' => c as char + 'a' as char,\n            _ => c,\n        })\n      \
    \  .collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' => c\
    \ as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n \
    \       'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars()\n \
    \       .map(|c| if c.is_lowercase() then c.to_uppercase() else c.to_lowercase())\n\
    \        .collect()", "    string.chars().map(|c| match c {\n        'A'..='Z'\
    \ => c as char + 'a' - 'A' as char,\n        'a'..='z' => c as char + 'A' - 'a'\
    \ as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c| match\
    \ c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 |\
    \ 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c| match\
    \ c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 |\
    \ 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c| match\
    \ c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 |\
    \ 0x20,\n        _ => c,\n    }).collect()", "    string.chars()\n        .map(|c|\
    \ match c {\n            'a' .. 'z' => c as char + 'A' as char,\n            'A'\
    \ .. 'Z' => c as char + 'a' as char,\n            _ => c,\n        })\n      \
    \  .collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' => c\
    \ as char + 'A' as char,\n        'A' .. 'Z' => c as char + 'a' as char,\n   \
    \     _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            c if c.is_lowercase() => c.to_uppercase(),\n            c if\
    \ c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n        })\n   \
    \     .collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as char,\n        'A' .. 'Z' => c as char,\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n \
    \       'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as char + 'A' as char,\n        'A' .. 'Z' => c as char + 'a' as char,\n \
    \       _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            c if c.is_lowercase() => c.to_uppercase(),\n            c if\
    \ c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n        })\n   \
    \     .collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars()\n        .map(|c| match c {\n          \
    \  'a' .. 'z' => c as char + 'A' as char,\n            'A' .. 'Z' => c as char\
    \ + 'a' as char,\n            _ => c,\n        })\n        .collect()", "    string.chars()\n\
    \        .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            c if c.is_lowercase() => c.to_uppercase(),\n            c if\
    \ c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n        })\n   \
    \     .collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as char,\n        'A' .. 'Z' => c as char,\n        _ => c,\n    }).collect::<String>().to_owned()",
  "    string.chars()\n        .map(|c| match c {\n            'a' .. 'z' => c as\
    \ char,\n            'A' .. 'Z' => c as char,\n            _ => c,\n        })\n\
    \        .collect::<String>()", "    string.chars().map(|c| match c {\n      \
    \  'A'..='Z' => c as char + 'a' - 'A' as char,\n        'a'..='z' => c as char\
    \ + 'A' - 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", '    string.chars().map(|c|
    if c.is_lowercase() then c.to_uppercase() else c.to_lowercase()).collect()', " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as char + 'A' as char,\n        'A' .. 'Z' => c as char + 'a' as char,\n \
    \       _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            'a' .. 'z' => c as u8 | 0x20,\n            'A' .. 'Z' => c\
    \ as u8 | 0x20,\n            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x21,\n        _ => c,\n    }).collect()", "    string.chars()\n      \
    \  .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()", "    string.chars().map(|c| match c {\n    \
    \    'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char +\
    \ 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as char,\n        'a' .. 'z' => c as char,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'A'..='Z' => c as u8 | 0x20,\n        'a'..='z' => c as u8 | 0x20,\n \
    \       _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n  \
    \      'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char\
    \ + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars()\n\
    \        .map(|c| match c {\n            'a' .. 'z' => c as u8 | 0x20,\n     \
    \       'A' .. 'Z' => c as u8 | 0x20,\n            _ => c,\n        })\n     \
    \   .collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c.to_ascii_uppercase(),\n        'a' .. 'z' => c.to_ascii_lowercase(),\n   \
    \     _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n    \
    \    'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x21,\n  \
    \      _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            c if c.is_lowercase() => c.to_uppercase(),\n            c if\
    \ c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n        })\n   \
    \     .collect()", "    string.chars()\n        .map(|c| match c {\n         \
    \   c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as char,\n      \
    \  'A' .. 'Z' => c as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x21,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A'..='Z' => c.to_ascii_uppercase(),\n        'a'..='z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars()\n      \
    \  .map(|c| match c {\n            'a' .. 'z' => c as char,\n            'A' ..\
    \ 'Z' => c as char,\n            _ => c,\n        })\n        .collect()", " \
    \   string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            'a' .. 'z' => c as\
    \ char + 'A' as char,\n            'A' .. 'Z' => c as char + 'a' as char,\n  \
    \          _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", '    string.chars().map(|c|
    if c.is_lowercase() then c.to_uppercase() else c.to_lowercase()).collect()', " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars()\n        .map(|c| match c {\n           \
    \ c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 ^ 0x20,\n \
    \       'A' .. 'Z' => c as u8 ^ 0x21,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as char + 'A' as char,\n        'A' .. 'Z' => c as char + 'a' as char,\n \
    \       _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n  \
    \      'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'a' .. 'z' => c as u8 ^ 0x20,\n        'A' .. 'Z' => c as u8 ^ 0x21,\n\
    \        _ => c,\n    }).collect()", '    string.chars().map(|c| if c.is_lowercase()
    then c.to_uppercase() else c.to_lowercase()).collect()', "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x21,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char,\n        'A' .. 'Z' => c as char,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char\
    \ + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char,\n        'A' .. 'Z' => c as char,\n\
    \        _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            c if c.is_lowercase() => c.to_uppercase(),\n            c if\
    \ c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n        })\n   \
    \     .collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as char + 'A' as char,\n        'A' .. 'Z' => c as char + 'a' as char,\n \
    \       _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            'a' .. 'z' => c as char,\n            'A' .. 'Z' => c as char,\n\
    \            _ => c,\n        })\n        .collect::<String>()", "    string.chars()\n\
    \        .map(|c| match c {\n            'a' .. 'z' => c as char,\n          \
    \  'A' .. 'Z' => c as char,\n            _ => c,\n        })\n        .collect::<String>()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            'a' .. 'z' => c as\
    \ u8 | 0x20,\n            'A' .. 'Z' => c as u8 | 0x20,\n            _ => c,\n\
    \        })\n        .collect()", "    string.chars().map(|c| match c {\n    \
    \    'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char +\
    \ 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x21,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A'..='Z' => c as u8 | 0x20,\n        'a'..='z' => c as u8\
    \ | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c| match\
    \ c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 |\
    \ 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c| match\
    \ c {\n        'a' .. 'z' => c as char,\n        'A' .. 'Z' => c as char,\n  \
    \      _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n   \
    \     'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x21,\n \
    \       _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n  \
    \      'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x21,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'A' .. 'Z' => c as char,\n        'a' .. 'z' => c as char,\n        _\
    \ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n        'A'\
    \ .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _\
    \ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match c {\n\
    \            c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x21,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as char + 'A' as char,\n        'A' .. 'Z' => c as char + 'a' as char,\n \
    \       _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n  \
    \      'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char\
    \ + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 ^ 0x20,\n        'A' .. 'Z' => c as\
    \ u8 ^ 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as char,\n        'a' .. 'z' => c as char,\n\
    \        _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            'a' .. 'z' => c as u8 | 0x20,\n            'A' .. 'Z' => c\
    \ as u8 | 0x20,\n            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'A'..='Z' => c as char + 'a' - 'A' as char,\n        'a'..='z'\
    \ => c as char + 'A' - 'a' as char,\n        _ => c,\n    }).collect()", "   \
    \ string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars()\n      \
    \  .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            'a' .. 'z' => c as char + 'A' as char,\n            'A' ..\
    \ 'Z' => c as char + 'a' as char,\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n \
    \       'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()"]
stop_tokens:
- "\n}"
