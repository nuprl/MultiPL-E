name: HumanEval_68_pluck
language: rs
prompt: "/// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
  \ The plucked node should be the node with the smallest even value.\n/// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n/// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n/// If there are no even values or the given array is empty, return\
  \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
  \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
  \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
  \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
  \ <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for i in even_values.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if i < smallest_even_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n        }\n \
    \   }\n    return vec![smallest_value, smallest_even_index];", "    let mut min_value\
    \ = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter() {\n        if\
    \ i % 2 == 0 {\n            if min_value == i32::MAX {\n                min_value\
    \ = i;\n                min_idx = i;\n            } else {\n                if\
    \ i < min_value {\n                    min_value = i;\n                    min_idx\
    \ = i;\n                }\n            }\n        }\n    }\n    if min_value ==\
    \ i32::MAX {\n        return vec![];\n    }\n    let mut ret = vec![];\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            if i == min_value {\n\
    \                ret.push(min_idx);\n            } else {\n                ret.push(i);\n\
    \            }\n        }\n    }\n    ret", "    let mut min_value = i32::MAX;\n\
    \    let mut min_idx = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n   \
    \         if min_value < i {\n                min_value = i;\n               \
    \ min_idx = i;\n            }\n        }\n    }\n    if min_idx == -1 { vec![]\
    \ } else { vec![min_value, min_idx] }", "    let mut min_even_value = arr[0];\n\
    \    let mut min_even_index = arr[0];\n    let mut min_even_index_in_arr = 0;\n\
    \    let mut min_even_index_in_arr_temp = 0;\n    let mut min_even_index_in_arr_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp = 0;\n    let\
    \ mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut min_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_",
  "    let mut min_value = arr[0];\n    let mut min_index = 0;\n    let mut min_even_value\
    \ = false;\n    for &x in arr {\n        if x % 2 == 0 {\n            min_even_value\
    \ = true;\n            min_value = x;\n            min_index = x;\n        }\n\
    \        if min_even_value\n            && x < min_value\n            && x < min_index\n\
    \        {\n            min_value = x;\n            min_index = x;\n        }\n\
    \    }\n    let mut even_values = Vec::new();\n    for &x in arr {\n        if\
    \ x % 2 == 0 {\n            even_values.push(x);\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = 0;\n    for &x in even_values {\n        if x <\
    \ smallest_value {\n            smallest_value = x;\n            smallest_index\
    \ = x;\n        }\n    }\n    vec![smallest_value, smallest_index]", "    let\
    \ mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    for i in\
    \ arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_even_value <\
    \ i {\n                min_even_value = i;\n                min_even_index = i;\n\
    \            }\n        }\n    }\n    if min_even_value == 0 {\n        return\
    \ vec![];\n    }\n    let mut even_values = vec![];\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n        }\n  \
    \  }\n    even_values.sort_by_key(|x| x);\n    let mut even_values_index = even_values.iter().rev().enumerate().find(|&(_,\
    \ v)| v == min_even_value);\n    if even_values_index == Some(0) {\n        return\
    \ vec![];\n    }\n    let mut even_values_index = even_values_index.0 + min_even_index;\n\
    \    let mut even_values_index = even_values_index - 1;\n    let mut even_values_index\
    \ = even_values_index / 2;\n    let mut even_values_index = even_values_index\
    \ - 1;\n    let mut even_values_index = even_values_index / 2;\n    let mut even_values_index\
    \ = even_values_index - 1;\n    let mut even_values_index = even_values_index\
    \ / 2;\n    let mut even_values_index = even_values_index - 1;\n    let mut even_values_index\
    \ = even_values_index / 2;\n    let mut even_values_index = even_values_index\
    \ - 1;\n    let mut even_values_index = even_values_index / 2;\n    let mut even_values_index\
    \ = even_values_index - 1;\n    let mut even_values_index = even_values_index\
    \ / 2;\n    let mut even_values_index = even_values_index - 1;\n    let mut even_values_index\
    \ = even_values_index / 2;\n    let mut even_values_index = even_values_index\
    \ - 1;\n    let mut even_values_index = even_values_index / 2;\n    let mut even_values_index\
    \ = even_values_index - 1;\n    let mut even_values_index = even_values_index\
    \ / 2;\n    let mut even_values_index = even_values_index - 1;\n    let mut even_values_index\
    \ = even_values_index / 2;\n    let mut even_values_index = even_values_index\
    \ - 1;\n    let mut even_values_index = even_values_index / 2;\n    let mut even_values_index\
    \ = even_values_index - 1;\n    let mut even_values_index = even_values_index\
    \ / ", "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i < smallest_even_value {\n  \
    \          smallest_even_value = i;\n            smallest_even_index = i;\n  \
    \      }\n    }\n    vec![smallest_value, smallest_even_index]", "    let mut\
    \ min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value > i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    let mut result: Vec<isize> = vec![];\n    if min_idx != arr.len() {\n\
    \        result.push(min_value);\n        result.push(min_idx);\n    }\n    result",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    for i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value.len() {\n\
    \                smallest_value.push(smallest_value[i]);\n                smallest_index.push(smallest_index[i]);\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() == 2 {\n        let mut smallest_value_2 = vec![];\n\
    \        let mut smallest_index_2 = vec![];\n        for i in even_values {\n\
    \            if i < smallest_value_2.len() {\n                smallest_value_2.push(smallest_value[i]);\n\
    \                smallest_index_2.push(smallest_index[i]);\n            }\n  \
    \      }\n        if smallest_value_2.len() == 0 {\n            return vec![];\n\
    \        }\n        if smallest_value_2.len() == 1 {\n            return vec![smallest_value_2[0]];\n\
    \        }\n        if smallest_value_2.len() == 2 {\n            if smallest_value[0]\
    \ < smallest_value_2[0] {\n                return vec![smallest_value_2[0]];\n\
    \            }\n            if smallest_value[1] < smallest_value_2[1] {\n   \
    \             return vec![smallest_value_2[1]];\n            }\n        }\n  \
    \  }\n    if even_values.len() == 3 {\n        let mut smallest_value_3 = vec![];\n\
    \        let mut smallest_index_3 = vec![];\n        for i in even_values {\n\
    \            if i < smallest_value_3.len() {\n                smallest_value_3.push(smallest_value[i]);\n\
    \                smallest_index_3.push(smallest_index[i]);\n            }\n  \
    \      }\n        if smallest_value_3.len() == 0 {\n            return vec![];\n\
    \        }\n        if smallest_value_3.len() == 1 {\n            return vec![smallest_value_3[0]];\n\
    \        }\n        if smallest_value_3.len() == 2 {\n            if smallest_value[0]\
    \ < smallest_value_3[0] {\n                return vec![smallest_value_3[0]];\n\
    \            }\n            if smallest_value[1] < smallest_value_3[1] {\n   \
    \             return vec![smallest_value_3[1]];\n            }\n        }\n  \
    \      if smallest_value_3.len() == 3 {\n            if smallest_value[2] < smallest_value_3[2]\
    \ {\n                return vec![smallest_value_3[2]];\n            }\n      \
    \  }\n    }\n    if even_values.len() == 4 {\n        let mut smallest_value_4\
    \ = vec![];\n        let mut smallest_", "    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    let mut even_values = Vec::new();\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = i;\n\
    \        }\n        if i == smallest_value && i % 2 == 0 {\n            smallest_value\
    \ = i;\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for i in even_values.iter() {\n        if i == smallest_value {\n\
    \            smallest_even_index = i;\n        }\n        if i == smallest_value\
    \ && i % 2 == 0 {\n            smallest_even_value = i;\n        }\n    }\n  \
    \  let mut even_values_copy = even_values.clone();\n    even_values_copy.swap(0,\
    \ smallest_even_index);\n    even_values_copy.swap(smallest_even_index, even_values.len());\n\
    \    even_values_copy", "    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    let mut mut_smallest_value = smallest_value;\n    let mut mut_smallest_index\
    \ = smallest_index;\n    let mut mut_mut_smallest_value = mut_smallest_value;\n\
    \    let mut mut_mut_smallest_index = mut_smallest_index;\n    let mut mut_mut_mut_smallest_value\
    \ = mut_mut_smallest_value;\n    let mut mut_mut_mut_smallest_index = mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_smallest_value = mut_mut_mut_smallest_value;\n  \
    \  let mut mut_mut_mut_mut_smallest_index = mut_mut_mut_smallest_index;\n    let\
    \ mut mut_mut_mut_mut_smallest_value = mut_mut_mut_smallest_value;\n    let mut\
    \ mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_smallest_index;\n    let\
    \ mut mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_smallest_value;\n \
    \   let mut mut_mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_mut_smallest_value;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_mut_mut_mut_smallest_value;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_mut_mut_mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_mut_mu",
  "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_even_index_in_list = -1;\n    let mut smallest_even_index_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list = -1;\n    let\
    \ mut smallest_even_index_in_list_in_list_in_list_in_list = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            min_even_value\
    \ = i;\n            min_even_index = i;\n        }\n    }\n    vec![min_even_value]",
  "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    if min_idx == -1 || min_value == i32::MAX {\n        return vec![];\n\
    \    }\n    let mut result = vec![];\n    for i in arr.iter() {\n        if i\
    \ % 2 == 0 {\n            if min_value == i {\n                result.push(min_idx);\n\
    \            }\n        }\n    }\n    result", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter().cloned() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter().cloned()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    let mut result = vec![];\n    for i in arr.iter().cloned()\
    \ {\n        if i == smallest_value {\n            result.push(i);\n        }\n\
    \    }\n    if result.len() == 0 {\n        return vec![];\n    }\n    result.push(smallest_value);\n\
    \    result.push(smallest_index);\n    result", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for i in even_values.iter()\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    vec![smallest_value,\
    \ smallest_even_index]", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n           \
    \ if min_value > i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    let mut result: Vec<isize> = vec![];\n\
    \    if min_idx != 0 {\n        result.push(min_value);\n        result.push(min_idx);\n\
    \    }\n    result", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in 0..arr.len() {\n  \
    \      if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n         \
    \   if arr[i] < smallest_value {\n                smallest_value = arr[i];\n \
    \               smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in 0..even_values.len() {\n \
    \       if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    vec![smallest_value, smallest_index]", "    let mut even_values = vec![0;\
    \ arr.len()];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    let mut smallest_even_value = 0;\n    for i in 0..arr.len() {\n  \
    \      if arr[i] % 2 == 0 {\n            even_values[i] = arr[i];\n          \
    \  if even_values[i] < smallest_value {\n                smallest_value = even_values[i];\n\
    \                smallest_index = i;\n                smallest_even_value = even_values[i];\n\
    \            }\n        }\n    }\n    if smallest_even_value.is_zero() {\n   \
    \     return vec![];\n    }\n    let mut even_values_copy = even_values.clone();\n\
    \    even_values_copy[smallest_index] = smallest_even_value;\n    let mut even_values_copy2\
    \ = even_values_copy.clone();\n    even_values_copy2[smallest_index] = smallest_index;\n\
    \    let mut even_values_copy3 = even_values_copy2.clone();\n    even_values_copy3[smallest_index]\
    \ = smallest_index;\n    let mut even_values_copy4 = even_values_copy3.clone();\n\
    \    even_values_copy4[smallest_index] = smallest_index;\n    let mut even_values_copy5\
    \ = even_values_copy4.clone();\n    even_values_copy5[smallest_index] = smallest_index;\n\
    \    let mut even_values_copy6 = even_values_copy5.clone();\n    even_values_copy6[smallest_index]\
    \ = smallest_index;\n    let mut even_values_copy7 = even_values_copy6.clone();\n\
    \    even_values_copy7[smallest_index] = smallest_index;\n    let mut even_values_copy8\
    \ = even_values_copy7.clone();\n    even_values_copy8[smallest_index] = smallest_index;\n\
    \    let mut even_values_copy9 = even_values_copy8.clone();\n    even_values_copy9[smallest_index]\
    \ = smallest_index;\n    let mut even_values_copy10 = even_values_copy9.clone();\n\
    \    even_values_copy10[smallest_index] = smallest_index;\n    let mut even_values_copy11\
    \ = even_values_copy10.clone();\n    even_values_copy11[smallest_index] = smallest_index;\n\
    \    let mut even_values_copy12 = even_values_copy11.clone();\n    even_values_copy12[smallest_index]\
    \ = smallest_index;\n    let mut even_values_copy13 = even_values_copy12.clone();\n\
    \    even_values_copy13[smallest_index] = smallest_index;\n    let mut even_values_copy14\
    \ = even", "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n\
    \    let mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value.len()\
    \ {\n                smallest_value.push(smallest_value[i]);\n               \
    \ smallest_index.push(smallest_index[i]);\n            }\n        }\n    }\n \
    \   if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        return vec![even_values[0]];\n    }\n    if even_values.len()\
    \ == 2 {\n        let mut smallest_value = even_values[0];\n        let mut smallest_index\
    \ = even_values[1];\n        for i in even_values.iter().rev() {\n           \
    \ if i % 2 == 0 {\n                if i < smallest_value.len() {\n           \
    \         smallest_value.push(smallest_value[i]);\n                    smallest_index.push(smallest_index[i]);\n\
    \                }\n            }\n        }\n        return vec![smallest_value,\
    \ smallest_index];\n    }\n    let mut smallest_value = even_values[0];\n    let\
    \ mut smallest_index = even_values[1];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_value.len() {\n    \
    \            smallest_value.push(smallest_value[i]);\n                smallest_index.push(smallest_index[i]);\n\
    \            }\n        }\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = even_values[1];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_value.len() {\n    \
    \            smallest_value.push(smallest_value[i]);\n                smallest_index.push(smallest_index[i]);\n\
    \            }\n        }\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = even_values[1];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_value.len() {\n    \
    \            smallest_value.push(smallest_value[i]);\n                smallest_index.push(smallest_index[i]);\n\
    \            }\n        }\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = even_values[1];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_value.len() {\n    \
    \            smallest_value.push(smallest_value[i]);\n                smallest_index.push(smallest_index[i]);\n\
    \            }\n        }\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = even_values[1];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == ", "    let mut even_values = Vec::new();\n    let mut\
    \ smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_even_value\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i == smallest_value {\n                smallest_even_value = i;\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    if smallest_even_value.is_some() {\n        let mut smallest_even_value\
    \ = smallest_even_value.unwrap();\n        let mut smallest_index = smallest_index;\n\
    \        for &i in even_values {\n            if i == smallest_even_value {\n\
    \                smallest_index = i;\n                break;\n            }\n\
    \        }\n        return vec![smallest_value, smallest_index];\n    }\n    let\
    \ mut smallest_even_value = smallest_even_value.unwrap();\n    let mut smallest_index\
    \ = smallest_index;\n    for &i in even_values {\n        if i == smallest_even_value\
    \ {\n            smallest_index = i;\n            break;\n        }\n    }\n \
    \   return vec![smallest_value, smallest_index];", "    let mut min_value = i32::MAX;\n\
    \    let mut min_value_index = 0;\n    for i in arr.iter() {\n        if i % 2\
    \ == 0 {\n            if min_value > i {\n                min_value = i;\n   \
    \             min_value_index = i;\n            }\n        }\n    }\n    let mut\
    \ result = vec![min_value_index];\n    for i in arr.iter() {\n        if i % 2\
    \ == 0 {\n            if min_value > i {\n                min_value = i;\n   \
    \             min_value_index = i;\n            }\n        }\n    }\n    result",
  "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    let mut min_idx2\
    \ = -1;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if min_idx == -1 || min_value < i {\n                min_value = i;\n     \
    \           min_idx = i;\n            }\n        } else {\n            if min_idx2\
    \ == -1 || min_value < i {\n                min_value = i;\n                min_idx2\
    \ = i;\n            }\n        }\n    }\n    if min_idx2 == -1 || min_value <\
    \ min_idx2 {\n        min_idx2 = min_idx;\n    }\n    let mut arr2 = vec![min_value,\
    \ min_idx2];\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n     \
    \       arr2.push(i);\n        }\n    }\n    arr2", "    let mut even_values =\
    \ Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for &i in even_values {\n        if\
    \ i < smallest_even_value {\n            smallest_even_value = i;\n          \
    \  smallest_even_index = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    for &i in arr {\n        if i == smallest_value {\n            result.push(i);\n\
    \            result.push(smallest_index);\n        }\n    }\n    if result.len()\
    \ == 0 {\n        return vec![];\n    }\n    result", "    let mut min_value =\
    \ arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n        if i % 2 ==\
    \ 0 {\n            if min_value > i {\n                min_value = i;\n      \
    \          min_idx = i;\n            }\n        }\n    }\n    let mut result =\
    \ vec![min_value, min_idx];\n    if arr.len() == 0 {\n        return result;\n\
    \    }\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_value\
    \ > i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    result.push(min_value, min_idx);\n    result",
  "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_even_index_in_list = 0;\n    let mut smallest_even_index_in_list_in_list\
    \ = 0;\n    let mut smallest_even_index_in_list_in_list_in_list = 0;\n    let\
    \ mut smallest_even_index_in_list_in_list_in_list_in_list = 0;\n    for &i in\
    \ arr {\n        if i % 2 == 0 {\n            if smallest_even_index == -1 {\n\
    \                smallest_even_index = i;\n                smallest_even_index_in_list\
    \ = 0;\n                smallest_even_index_in_list_in_list = 0;\n           \
    \     smallest_even_index_in_list_in_list_in_list = 0;\n                smallest_even_index_in_list_in_list_in_list_in_list\
    \ = 0;\n            } else {\n                if smallest_even_index_in_list <\
    \ i {\n                    smallest_even_index_in_list = i;\n                \
    \    smallest_even_index_in_list_in_list = 0;\n                    smallest_even_index_in_list_in_list_in_list\
    \ = 0;\n                    smallest_even_index_in_list_in_list_in_list = 0;\n\
    \                    smallest_even_index_in_list_in_list_in_list_in_list = 0;\n\
    \                }\n                if smallest_even_index_in_list_in_list < i\
    \ {\n                    smallest_even_index_in_list_in_list = i;\n          \
    \          smallest_even_index_in_list_in_list_in_list = 0;\n                \
    \    smallest_even_index_in_list_in_list_in_list = 0;\n                    smallest_even_index_in_list_in_list_in_list\
    \ = 0;\n                    smallest_even_index_in_list_in_list_in_list = 0;\n\
    \                }\n                if smallest_even_index_in_list_in_list_in_list\
    \ < i {\n                    smallest_even_index_in_list_in_list_in_list = i;\n\
    \                    smallest_even_index_in_list_in_list_in_list = 0;\n      \
    \              smallest_even_index_in_list_in_list_in_list = 0;\n            \
    \        smallest_even_index_in_list_in_list_in_list = 0;\n                  \
    \  smallest_even_index_in_list_in_list_in_list = 0;\n                    smallest_even_index_in_list_in_list_in_list\
    \ = 0;\n                }\n                if smallest_even_index_in_list_in_list_in_list_in_list\
    \ < i {\n                    smallest_even_index_in_list_in_list_in_list_in_list\
    \ = i;\n                    smallest_even_index_in_list_in_list_in_list = 0;\n\
    \                    smallest_even_index_in_list_in_list_in_list = 0;\n      \
    \              smallest_even_index_in_list_in_list_in_list = 0;\n            \
    \        smallest_even_index_in_list_in_list_in_list = 0;\n                  \
    \  smallest_even_index_in_list_in_list_in_list = 0;\n                    smallest_even_index_in_list_in_list_in_list\
    \ = 0;\n                }\n                if smalle", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 1;\n    let mut min_idx2 = 1;\n    let mut\
    \ min_idx3 = 1;\n    let mut min_idx4 = 1;\n    let mut min_idx5 = 1;\n    let\
    \ mut min_idx6 = 1;\n    let mut min_idx7 = 1;\n    let mut min_idx8 = 1;\n  \
    \  let mut min_idx9 = 1;\n    let mut min_idx10 = 1;\n    let mut min_idx11 =\
    \ 1;\n    let mut min_idx12 = 1;\n    let mut min_idx13 = 1;\n    let mut min_idx14\
    \ = 1;\n    let mut min_idx15 = 1;\n    let mut min_idx16 = 1;\n    let mut min_idx17\
    \ = 1;\n    let mut min_idx18 = 1;\n    let mut min_idx19 = 1;\n    let mut min_idx20\
    \ = 1;\n    let mut min_idx21 = 1;\n    let mut min_idx22 = 1;\n    let mut min_idx23\
    \ = 1;\n    let mut min_idx24 = 1;\n    let mut min_idx25 = 1;\n    let mut min_idx26\
    \ = 1;\n    let mut min_idx27 = 1;\n    let mut min_idx28 = 1;\n    let mut min_idx29\
    \ = 1;\n    let mut min_idx30 = 1;\n    let mut min_idx31 = 1;\n    let mut min_idx32\
    \ = 1;\n    let mut min_idx33 = 1;\n    let mut min_idx34 = 1;\n    let mut min_idx35\
    \ = 1;\n    let mut min_idx36 = 1;\n    let mut min_idx37 = 1;\n    let mut min_idx38\
    \ = 1;\n    let mut min_idx39 = 1;\n    let mut min_idx40 = 1;\n    let mut min_idx41\
    \ = 1;\n    let mut min_idx42 = 1;\n    let mut min_idx43 = 1;\n    let mut min_idx44\
    \ = 1;\n    let mut min_idx45 = 1;\n    let mut min_idx46 = 1;\n    let mut min_idx47\
    \ = 1;\n    let mut min_idx48 = 1;\n    let mut min_idx49 = 1;\n    let mut min_idx50\
    \ = 1;\n    let mut min_idx51 = 1;\n    let mut min_idx52 = 1;\n    let mut min_idx53\
    \ = 1;\n    let mut min_idx54 = 1;\n    let mut min_idx55 = 1;\n    let mut min_idx56\
    \ = 1;\n    let mut min_idx57 = 1;\n    let mut min_idx58 = 1;\n    let mut min_idx59\
    \ = 1;\n    let mut min_idx60 = 1;\n    let mut min_idx61 = 1;\n    let mut min_idx62\
    \ = 1;\n    let mut min_idx", "    let mut even_values = Vec::new();\n    let\
    \ mut min_value = arr[0];\n    let mut min_value_index = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ min_value == i {\n                min_value_index = i;\n            }\n    \
    \    }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    if min_value_index == -1 {\n        return vec![min_value];\n    }\n    let\
    \ mut smallest_value = min_value;\n    let mut smallest_value_index = min_value_index;\n\
    \    for i in even_values.iter() {\n        if i < smallest_value {\n        \
    \    smallest_value = i;\n            smallest_value_index = i;\n        }\n \
    \   }\n    let mut result = vec![smallest_value];\n    for i in even_values.iter()\
    \ {\n        if i == smallest_value {\n            result.push(smallest_value_index);\n\
    \        }\n    }\n    result", "    let mut min_even_value = arr[0];\n    let\
    \ mut min_even_index = -1;\n    let mut min_even_index_in_array = 0;\n    let\
    \ mut min_even_index_in_array_index = 0;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let mut min_even_index_in_array_value = -1;\n    let mut min_even_index_in_array_value\
    \ = -1;\n    let ", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut min_value\
    \ = i32::MAX;\n    let mut min_value_index = -1;\n    let mut min_value_index2\
    \ = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ == i32::MAX {\n                min_value = i;\n                min_value_index\
    \ = i;\n                min_value_index2 = i;\n            } else {\n        \
    \        if i < min_value {\n                    min_value = i;\n            \
    \        min_value_index = i;\n                    min_value_index2 = i;\n   \
    \             }\n            }\n        }\n    }\n    let mut result = vec![min_value];\n\
    \    if min_value_index == min_value_index2 {\n        result.push(min_value_index);\n\
    \    } else {\n        result.push(min_value_index2);\n    }\n    result", " \
    \   let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    let mut index = 0;\n    for value in arr\
    \ {\n        if value % 2 == 0 {\n            even_values.push(value);\n     \
    \       if value < smallest_value {\n                smallest_value = value;\n\
    \                smallest_index = index;\n            }\n        }\n        index\
    \ += 1;\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    if even_values.len() == 1 {\n        return vec![smallest_value, smallest_index];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for value in even_values {\n        if value < smallest_even_value\
    \ {\n            smallest_even_value = value;\n            smallest_even_index\
    \ = index;\n        }\n        index += 1;\n    }\n    vec![smallest_even_value,\
    \ smallest_even_index]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in 0..arr.len() {\n  \
    \      if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n         \
    \   if arr[i] < smallest_value {\n                smallest_value = arr[i];\n \
    \               smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values.iter().position(|&x| x == smallest_value);\n\
    \    for i in 0..even_values.len() {\n        if even_values[i] == smallest_value\
    \ {\n            smallest_even_index = i;\n        }\n    }\n    vec![smallest_value,\
    \ smallest_index, smallest_even_index]", "    let mut min_val = arr[0];\n    let\
    \ mut min_idx = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n          \
    \  if min_val < i {\n                min_val = i;\n                min_idx = i;\n\
    \            }\n        }\n    }\n    let mut result = vec![min_val];\n    if\
    \ min_idx != -1 {\n        result.push(min_idx);\n    }\n    result", "    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    vec![min_value, min_idx]", "    let mut min_value = i32::MAX;\n    let\
    \ mut min_value_index = 0;\n    let mut min_value_index2 = 0;\n    let mut min_value_index3\
    \ = 0;\n    let mut min_value_index4 = 0;\n    let mut min_value_index5 = 0;\n\
    \    let mut min_value_index6 = 0;\n    let mut min_value_index7 = 0;\n    let\
    \ mut min_value_index8 = 0;\n    let mut min_value_index9 = 0;\n    let mut min_value_index10\
    \ = 0;\n    let mut min_value_index11 = 0;\n    let mut min_value_index12 = 0;\n\
    \    let mut min_value_index13 = 0;\n    let mut min_value_index14 = 0;\n    let\
    \ mut min_value_index15 = 0;\n    let mut min_value_index16 = 0;\n    let mut\
    \ min_value_index17 = 0;\n    let mut min_value_index18 = 0;\n    let mut min_value_index19\
    \ = 0;\n    let mut min_value_index20 = 0;\n    let mut min_value_index21 = 0;\n\
    \    let mut min_value_index22 = 0;\n    let mut min_value_index23 = 0;\n    let\
    \ mut min_value_index24 = 0;\n    let mut min_value_index25 = 0;\n    let mut\
    \ min_value_index26 = 0;\n    let mut min_value_index27 = 0;\n    let mut min_value_index28\
    \ = 0;\n    let mut min_value_index29 = 0;\n    let mut min_value_index30 = 0;\n\
    \    let mut min_value_index31 = 0;\n    let mut min_value_index32 = 0;\n    let\
    \ mut min_value_index33 = 0;\n    let mut min_value_index34 = 0;\n    let mut\
    \ min_value_index35 = 0;\n    let mut min_value_index36 = 0;\n    let mut min_value_index37\
    \ = 0;\n    let mut min_value_index38 = 0;\n    let mut min_value_index39 = 0;\n\
    \    let mut min_value_index40 = 0;\n    let mut min_value_index41 = 0;\n    let\
    \ mut min_value_index42 = 0;\n    let mut min_value_index43 = 0;\n    let mut\
    \ min_value_index44 = 0;\n    let mut min_value_index45 = 0;\n    let mut min_value_index46\
    \ = 0;\n    let mut min_value_index47 = 0;\n    let mut min_value_index48 = 0;\n\
    \    let mut min_value_index49 = 0;\n    let mut min_value_index50 = 0;\n    let\
    \ mut min_value_index51 = 0;\n    let mut min_value_index52 = 0;\n    let mut\
    \ min_value_index53 = 0;\n    let mut min_value_index54 = 0;\n    let mut min_value_index55\
    \ = 0;\n    let mut min_value_index56 = 0;\n    let mut ", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n          \
    \  even_values.push(arr[i]);\n            if arr[i] < smallest_value {\n     \
    \           smallest_value = arr[i];\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for i in 0..even_values.len() {\n        if even_values[i]\
    \ < smallest_even_value {\n            smallest_even_value = even_values[i];\n\
    \            smallest_even_index = i;\n        }\n    }\n    let mut result =\
    \ vec![];\n    for i in 0..even_values.len() {\n        if i == smallest_even_index\
    \ {\n            result.push(i);\n        }\n    }\n    if result.len() == 0 {\n\
    \        return vec![];\n    }\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2\
    \ == 0 {\n            if arr[i] < smallest_value {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    if smallest_value == smallest_even_value {\n        let mut result\
    \ = vec![];\n        for i in 0..even_values.len() {\n            if i == smallest_even_index\
    \ {\n                result.push(i);\n            }\n        }\n        if result.len()\
    \ == 0 {\n            return vec![];\n        }\n    }\n    let mut result = vec![];\n\
    \    for i in 0..even_values.len() {\n        if i == smallest_even_index {\n\
    \            result.push(i);\n        }\n    }\n    if result.len() == 0 {\n \
    \       return vec![];\n    }\n    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0\
    \ {\n            if arr[i] < smallest_value {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    if smallest_value == smallest_even_value {\n        let mut result\
    \ = vec![];\n        for i in 0..even_values.len() {\n            if i == smallest_even_index\
    \ {\n                result.push(i);\n            }\n        }\n        if result.len()\
    \ == 0 {\n            return vec![];\n        }\n    }\n    let mut result = vec![];\n\
    \    for i in 0..even_values.len() {\n        if i == smallest_even_index {\n\
    \            result.push(i);\n        }", "    let mut min_val = i32::MAX;\n \
    \   let mut min_idx = -1;\n    for i in arr {\n        if i % 2 == 0 {\n     \
    \       if min_val < i {\n                min_val = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if min_val == i32::MAX {\n      \
    \  return vec![];\n    }\n    let mut result = vec![];\n    for i in arr {\n \
    \       if i % 2 == 0 {\n            if i == min_val {\n                result.push(min_idx);\n\
    \            } else {\n                result.push(i);\n            }\n      \
    \  }\n    }\n    result", "    let mut even_values = Vec::new();\n    let mut\
    \ smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for i in 0..arr.len()\
    \ {\n        if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n   \
    \         if arr[i] < smallest_value {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = 0;\n    for i in 0..even_values.len()\
    \ {\n        if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    let mut result = vec![];\n    for i in 0..even_values.len() {\n        if\
    \ i == smallest_even_index {\n            result.push(smallest_value);\n     \
    \   } else {\n            result.push(even_values[i]);\n        }\n    }\n   \
    \ result", "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i < smallest_even_value {\n  \
    \          smallest_even_value = i;\n            smallest_even_index = i;\n  \
    \      }\n    }\n    let mut result = vec![];\n    for &i in arr {\n        if\
    \ i == smallest_value {\n            result.push(i);\n        }\n        if i\
    \ == smallest_even_value {\n            result.push(i);\n        }\n    }\n  \
    \  if result.len() == 0 {\n        return vec![];\n    }\n    let mut smallest_index\
    \ = result.iter().min().unwrap();\n    let mut smallest_value = result[0];\n \
    \   for &i in result {\n        if i == smallest_value {\n            smallest_index\
    \ = i;\n        }\n    }\n    vec![smallest_value, smallest_index]", "    let\
    \ mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if *i < *min_value {\n            min_value = *i;\n            min_idx\
    \ = i;\n        }\n    }\n    let mut result = vec![];\n    for i in arr.iter()\
    \ {\n        if i == min_idx {\n            result.push(min_value);\n        }\
    \ else {\n            result.push(i);\n        }\n    }\n    result", "    let\
    \ mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n    \
    \        even_values.push(i);\n            if i < smallest_value {\n         \
    \       smallest_value = i;\n                smallest_index = i;\n           \
    \ }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i < smallest_even_value {\n  \
    \          smallest_even_value = i;\n            smallest_even_index = i;\n  \
    \      }\n    }\n    return vec![smallest_value, smallest_even_index, smallest_even_index];",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    let mut smallest_even_value = 0;\n    for i in\
    \ arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n  \
    \          if smallest_value == i {\n                smallest_even_value = i;\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    if smallest_even_value.is_zero() {\n        return vec![smallest_value,\
    \ smallest_index];\n    }\n    for i in even_values.iter() {\n        if smallest_even_value.saturating_sub(i).is_zero()\
    \ {\n            smallest_even_value = i;\n            smallest_value = i;\n \
    \           smallest_index = i;\n        }\n    }\n    return vec![smallest_value,\
    \ smallest_index];", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    let mut result = [min_value, min_idx];\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value ==\
    \ i {\n                result.push(i);\n            }\n        }\n    }\n    result",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            if smallest_value < i {\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    vec![smallest_value, smallest_index]", " \
    \   let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_list = -1;\n    for &x in arr {\n        if x % 2 == 0\
    \ {\n            if min_even_index == -1 || x < min_even_index {\n           \
    \     min_even_value = x;\n                min_even_index = x;\n             \
    \   min_even_index_in_list = x;\n            }\n        } else {\n           \
    \ if min_even_index == -1 || x > min_even_index {\n                min_even_value\
    \ = x;\n                min_even_index = x;\n                min_even_index_in_list\
    \ = x;\n            }\n        }\n    }\n    let mut even_values = Vec::new();\n\
    \    let mut even_values_in_list = Vec::new();\n    for &x in arr {\n        if\
    \ x % 2 == 0 {\n            even_values.push(x);\n            even_values_in_list.push(x);\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    if even_values.len() == 1 {\n        if even_values[0] == min_even_index_in_list\
    \ {\n            return vec![min_even_value];\n        }\n        return vec![min_even_index_in_list];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_even_index_in_list = -1;\n    for &x in even_values\
    \ {\n        if x < smallest_even_index {\n            smallest_even_value = x;\n\
    \            smallest_even_index = x;\n            smallest_even_index_in_list\
    \ = x;\n        }\n    }\n    let mut smallest_even_value_in_list = even_values_in_list[0];\n\
    \    let mut smallest_even_index_in_list_in_list = -1;\n    for &x in even_values_in_list\
    \ {\n        if x < smallest_even_index_in_list {\n            smallest_even_value_in_list\
    \ = x;\n            smallest_even_index_in_list_in_list = x;\n        }\n    }\n\
    \    if smallest_even_value_in_list == min_even_index_in_list {\n        return\
    \ vec![smallest_even_value];\n    }\n    if smallest_even_value_in_list == min_even_index_in_list_in_list\
    \ {\n        return vec![smallest_even_index_in_list];\n    }\n    if even_values.len()\
    \ == 2 {\n        if even_values[0] == even_values[1] {\n            if even_values[0]\
    \ < min_even_index_in_list {\n                return vec![even_values[0]];\n \
    \           }\n            return vec![min_even_index_in_list];\n        }\n \
    \       if even_values[1] == min_even_index_in_list {\n            return vec![even_values[1]];\n\
    \        }\n        return vec![min_even_index_in_list];\n    }\n", "    let mut\
    \ even_values = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n          \
    \  even_values.push(arr[i]);\n            if arr[i] < smallest_value {\n     \
    \           smallest_value = arr[i];\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for i in 0..even_values.len() {\n        if even_values[i]\
    \ < smallest_even_value {\n            smallest_even_value = even_values[i];\n\
    \            smallest_even_index = i;\n        }\n    }\n    vec![smallest_value,\
    \ smallest_index]", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter().rev() {\n\
    \        if i % 2 == 0 {\n            if i < smallest_even_value {\n         \
    \       smallest_even_value = i;\n                smallest_even_index = i;\n \
    \           }\n        }\n    }\n    let mut result = vec![];\n    for i in arr.iter().rev()\
    \ {\n        if i == smallest_value {\n            result.push(i);\n        }\n\
    \    }\n    if result.len() == 0 {\n        return vec![];\n    }\n    result.push(smallest_value);\n\
    \    result.push(smallest_even_index);\n    result", "    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    let mut even_values = Vec::new();\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = i;\n\
    \        }\n        if i == smallest_value && i != smallest_index {\n        \
    \    smallest_value = i;\n        }\n    }\n    if even_values.len() == 0 {\n\
    \        return vec![];\n    }\n    if even_values.len() == 1 {\n        return\
    \ vec![smallest_value];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values.iter().position(|&i| i == smallest_value);\n\
    \    if smallest_even_index == 0 {\n        return vec![smallest_value];\n   \
    \ }\n    if smallest_even_index == even_values.len() - 1 {\n        return vec![smallest_value,\
    \ smallest_even_index];\n    }\n    let mut smallest_even_value = even_values[smallest_even_index];\n\
    \    let mut smallest_even_index = even_values.iter().position(|&i| i == smallest_value);\n\
    \    if smallest_even_index == 0 {\n        return vec![smallest_value, smallest_even_index];\n\
    \    }\n    if smallest_even_index == even_values.len() - 1 {\n        return\
    \ vec![smallest_value, smallest_even_index, smallest_even_index + 1];\n    }\n\
    \    let mut smallest_even_value = even_values[smallest_even_index];\n    let\
    \ mut smallest_even_index = even_values.iter().position(|&i| i == smallest_value);\n\
    \    if smallest_even_index == 0 {\n        return vec![smallest_value, smallest_even_index,\
    \ smallest_even_index + 1];\n    }\n    if smallest_even_index == even_values.len()\
    \ - 1 {\n        return vec![smallest_value, smallest_even_index, smallest_even_index\
    \ + 1, smallest_even_index + 2];\n    }\n    let mut smallest_even_value = even_values[smallest_even_index];\n\
    \    let mut smallest_even_index = even_values.iter().position(|&i| i == smallest_value);\n\
    \    if smallest_even_index == 0 {\n        return vec![smallest_value, smallest_even_index,\
    \ smallest_even_index + 1, smallest_even_index + 2];\n    }\n    if smallest_even_index\
    \ == even_values.len() - 1 {\n        return vec![smallest_value, smallest_even_index,\
    \ smallest_even_index + 1, smallest_even_index + 2, smallest_even_index + 3];\n\
    \    }\n    let mut smallest_even_value = even_value", "    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mu", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter() {\n   \
    \     if i < smallest_even_value {\n            smallest_even_value = i;\n   \
    \         smallest_even_index = i;\n        }\n    }\n    return vec![smallest_value,\
    \ smallest_even_index];", "    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n           \
    \ if smallest_value < i {\n                smallest_value = i;\n             \
    \   smallest_index = i;\n            }\n        }\n    }\n    vec![smallest_value,\
    \ smallest_index]", "    let mut min_value = i32::MAX;\n    let mut min_idx =\
    \ 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ > i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    let mut result: Vec<isize> = vec![];\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value == i {\n\
    \                result.push(min_idx);\n            }\n        }\n    }\n    result",
  "    let mut min_val = arr[0];\n    let mut min_idx = -1;\n    for i in 0..arr.len()\
    \ {\n        if arr[i] < min_val {\n            min_val = arr[i];\n          \
    \  min_idx = i;\n        }\n    }\n    let mut ret: Vec<isize> = vec![];\n   \
    \ for i in 0..arr.len() {\n        if arr[i] == min_val {\n            ret.push(min_val);\n\
    \            ret.push(min_idx);\n        }\n    }\n    ret", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for &i in even_values {\n        if\
    \ i < smallest_even_value {\n            smallest_even_value = i;\n          \
    \  smallest_even_index = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    for &i in even_values {\n        if i == smallest_even_value {\n        \
    \    result.push(i);\n            result.push(smallest_even_index);\n        }\n\
    \    }\n    result", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in 0..arr.len() {\n  \
    \      if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n         \
    \   if arr[i] < smallest_value {\n                smallest_value = arr[i];\n \
    \               smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in 0..even_values.len() {\n \
    \       if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    return vec![smallest_value, smallest_index];", "    let mut min_value = arr[0];\n\
    \    let mut min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            if min_value < i {\n                min_value = i;\n      \
    \          min_idx = i;\n            }\n        }\n    }\n    let mut ret: Vec<isize>\
    \ = vec![];\n    if min_idx != arr.len() {\n        ret.push(min_value);\n   \
    \     ret.push(min_idx);\n    }\n    ret", "    let mut min_value = i32::MAX;\n\
    \    let mut min_idx = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n   \
    \         if min_value == i32::MAX {\n                min_value = i;\n       \
    \         min_idx = i;\n            } else {\n                if i < min_value\
    \ {\n                    min_value = i;\n                    min_idx = i;\n  \
    \              }\n            }\n        }\n    }\n    let mut result: Vec<isize>\
    \ = vec![];\n    if min_value != i32::MAX {\n        result.push(min_value);\n\
    \        result.push(min_idx);\n    }\n    result", "    let mut min_value = arr[0];\n\
    \    let mut min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            if min_value < i {\n                min_value = i;\n      \
    \          min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = arr[0];\n    let mut smallest_even_index_index = 0;\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_index2 = 0;\n    let mut smallest_even_index_value2\
    \ = 0;\n    let mut smallest_even_index_index3 = 0;\n    let mut smallest_even_index_value3\
    \ = 0;\n    let mut smallest_even_index_index4 = 0;\n    let mut smallest_even_index_value4\
    \ = 0;\n    let mut smallest_even_index_index5 = 0;\n    let mut smallest_even_index_value5\
    \ = 0;\n    let mut smallest_even_index_index6 = 0;\n    let mut smallest_even_index_value6\
    \ = 0;\n    let mut smallest_even_index_index7 = 0;\n    let mut smallest_even_index_value7\
    \ = 0;\n    let mut smallest_even_index_index8 = 0;\n    let mut smallest_even_index_value8\
    \ = 0;\n    let mut smallest_even_index_index9 = 0;\n    let mut smallest_even_index_value9\
    \ = 0;\n    let mut smallest_even_index_index10 = 0;\n    let mut smallest_even_index_value10\
    \ = 0;\n    let mut smallest_even_index_index11 = 0;\n    let mut smallest_even_index_value11\
    \ = 0;\n    let mut smallest_even_index_index12 = 0;\n    let mut smallest_even_index_value12\
    \ = 0;\n    let mut smallest_even_index_index13 = 0;\n    let mut smallest_even_index_value13\
    \ = 0;\n    let mut smallest_even_index_index14 = 0;\n    let mut smallest_even_index_value14\
    \ = 0;\n    let mut smallest_even_index_index15 = 0;\n    let mut smallest_even_index_value15\
    \ = 0;\n    let mut smallest_even_index_index16 = 0;\n    let mut smallest_even_index_value16\
    \ = 0;\n    let mut smallest_even_index_index17 = 0;\n    let mut smallest_even_index_value17\
    \ = 0;\n    let mut smallest_even_index_index18 = 0;\n    let mut smallest_even_index_value18\
    \ = 0;\n    let mut smallest_even_index_index19 = 0;\n    let mut smallest_even_index_value19\
    \ = 0;\n    let mut smallest_even_index_index20 = 0;\n    let mut smallest_even_index_value20\
    \ = 0;\n    let mut smallest_even_index_index21 = 0;\n    let mut smallest_even_index_value21\
    \ = 0;\n    let mut smallest_even_index_index22 = 0;\n    let mut smallest_even_index_value22\
    \ = 0;\n    let mut smallest_even_index_index23 = 0;\n    let mut smallest_even",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i < smallest_even_value {\n  \
    \          smallest_even_value = i;\n            smallest_even_index = i;\n  \
    \      }\n    }\n    let mut result = vec![];\n    result.push(smallest_value,\
    \ smallest_index);\n    result.push(smallest_even_value,\n                smallest_even_index);\n\
    \    return result;", "    let mut min_value = i32::MAX;\n    let mut min_idx\
    \ = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ > i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    let mut result = vec![];\n    if min_idx != -1\
    \ {\n        result.push(min_value);\n        result.push(min_idx);\n    }\n \
    \   result", "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_even_index_in_list = -1;\n    let mut smallest_even_index_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list = -1;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            if smallest_even_index\
    \ == -1 || smallest_even_index > i {\n                smallest_even_index = i;\n\
    \                smallest_even_index_in_list = i;\n            }\n        } else\
    \ {\n            if smallest_even_index_in_list_in_list == -1 || smallest_even_index_in_list_in_list\
    \ > i {\n                smallest_even_index_in_list_in_list = i;\n          \
    \      smallest_even_index_in_list_in_list = i;\n            }\n        }\n  \
    \  }\n    if smallest_even_index == -1 {\n        return vec![];\n    }\n    if\
    \ smallest_even_index_in_list_in_list == -1 {\n        return vec![smallest_even_index];\n\
    \    }\n    if smallest_even_index_in_list_in_list_in_list == -1 {\n        return\
    \ vec![smallest_even_index_in_list, smallest_even_index_in_list_in_list];\n  \
    \  }\n    if smallest_even_index_in_list_in_list_in_list > smallest_even_index_in_list\
    \ {\n        return vec![smallest_even_index_in_list, smallest_even_index_in_list_in_list];\n\
    \    }\n    if smallest_even_index_in_list_in_list_in_list < smallest_even_index_in_list\
    \ {\n        return vec![smallest_even_index_in_list_in_list, smallest_even_index_in_list_in_list];\n\
    \    }\n    if smallest_even_index_in_list_in_list_in_list == smallest_even_index_in_list_in_list\
    \ {\n        return vec![smallest_even_index_in_list_in_list, smallest_even_index_in_list_in_list];\n\
    \    }\n    if smallest_even_index_in_list_in_list_in_list == smallest_even_index_in_list_in_list\
    \ {\n        return vec![smallest_even_index_in_list_in_list, smallest_even_index_in_list_in_list];\n\
    \    }\n    if smallest_even_index_in_list_in_list_in_list == smallest_even_index_in_list_in_list\
    \ {\n        return vec![smallest_even_index_in_list_in_list, smallest_even_index_in_list_in_list];\n\
    \    }\n    if smallest_even_index_in_list_in_list_in_list == smallest_even_index_in_list_in_list\
    \ {\n        return vec![smallest_even_index_in_list_in_list, smallest_even_index_in_list_in_list];\n\
    \    }\n    if smallest_even_index_in_list_in_list_in_list == smallest_even_index_in_list_in_",
  "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = arr[0];\n\
    \    let mut smallest_even_index_in_arr = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            if smallest_even_index < i {\n         \
    \       smallest_even_index = i;\n                smallest_even_index_in_arr =\
    \ i;\n            }\n        }\n    }\n    let mut result = vec![smallest_even_value];\n\
    \    if smallest_even_index_in_arr == 0 {\n        return result;\n    }\n   \
    \ for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if smallest_even_index\
    \ < i {\n                result.push(smallest_even_index);\n                smallest_even_index\
    \ = i;\n                smallest_even_index_in_arr = i;\n            }\n     \
    \   }\n    }\n    if smallest_even_index_in_arr == 0 {\n        return result;\n\
    \    }\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n           \
    \ if smallest_even_index < i {\n                result.push(smallest_even_index);\n\
    \                smallest_even_index = i;\n                smallest_even_index_in_arr\
    \ = i;\n            }\n        }\n    }\n    if smallest_even_index_in_arr ==\
    \ 0 {\n        return result;\n    }\n    for i in arr.iter().rev() {\n      \
    \  if i % 2 == 0 {\n            if smallest_even_index < i {\n               \
    \ result.push(smallest_even_index);\n                smallest_even_index = i;\n\
    \                smallest_even_index_in_arr = i;\n            }\n        }\n \
    \   }\n    if smallest_even_index_in_arr == 0 {\n        return result;\n    }\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if smallest_even_index\
    \ < i {\n                result.push(smallest_even_index);\n                smallest_even_index\
    \ = i;\n                smallest_even_index_in_arr = i;\n            }\n     \
    \   }\n    }\n    if smallest_even_index_in_arr == 0 {\n        return result;\n\
    \    }\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n           \
    \ if smallest_even_index < i {\n                result.push(smallest_even_index);\n\
    \                smallest_even_index = i;\n                smallest_even_index_in_arr\
    \ = i;\n            }\n        }\n    }\n    if smallest_even_index_in_arr ==\
    \ 0 {\n        return result;\n    }\n    for i in arr.iter().rev() {\n      \
    \  if i % 2 == 0 {\n            if smallest_even_index < i {\n               \
    \ result.push(smallest_even_index);\n                smallest_even_index = i;\n\
    \                smallest_even_index_in_arr = i;\n            }\n        }\n \
    \   }\n    if smallest_even_index_in_arr == 0 {\n        return result;\n    }\n\
    \    for i in arr.iter().rev() {\n        if i % ", "    let mut min_val = i32::MAX;\n\
    \    let mut min_idx = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            if min_val < i {\n                min_val = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if min_val == i32::MAX {\n      \
    \  return vec![];\n    }\n    let mut result = vec![];\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_val == i {\n                result.push(min_idx);\n\
    \            } else {\n                result.push(i);\n            }\n      \
    \  }\n    }\n    result", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n           \
    \ if min_value < i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    let mut result: Vec<isize> = vec![];\n\
    \    if min_idx != 0 {\n        result.push(min_value);\n        result.push(min_idx);\n\
    \    }\n    result", "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_value_index = -1;\n    for &i in arr {\n       \
    \ if i % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_index\
    \ > i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n            }\n        } else {\n            if smallest_value_index ==\
    \ -1 || smallest_value_index > i {\n                smallest_value_index = i;\n\
    \            }\n        }\n    }\n    let mut result = vec![smallest_even_value];\n\
    \    if smallest_value_index != -1 {\n        result.push(smallest_value_index);\n\
    \    }\n    result", "    let mut min_even = i32::MAX;\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_value = i32::MAX;\n    for i in arr.iter() {\n \
    \       if i % 2 == 0 {\n            if min_even_value < i {\n               \
    \ min_even_value = i;\n                min_even_index = i;\n            }\n  \
    \      } else {\n            if min_even_value == i {\n                min_even_index\
    \ = i;\n            }\n        }\n    }\n    let mut result = vec![min_even_value,\
    \ min_even_index];\n    if min_even_value == i32::MAX {\n        return result;\n\
    \    }\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_even_value\
    \ == i {\n                result.push(min_even_index);\n            }\n      \
    \  } else {\n            if min_even_value == i {\n                result.push(min_even_index);\n\
    \            }\n        }\n    }\n    result", "    let mut min_value = i32::MAX;\n\
    \    let mut min_idx = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n   \
    \         if min_value < i {\n                min_value = i;\n               \
    \ min_idx = i;\n            }\n        }\n    }\n    if min_idx == -1 {\n    \
    \    return vec![];\n    }\n    vec![min_value, min_idx]", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n          \
    \  even_values.push(arr[i]);\n            if arr[i] < smallest_value {\n     \
    \           smallest_value = arr[i];\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for i in 0..even_values.len() {\n        if even_values[i]\
    \ < smallest_even_value {\n            smallest_even_value = even_values[i];\n\
    \            smallest_even_index = i;\n        }\n    }\n    vec![smallest_value,\
    \ smallest_index]", "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_val <\
    \ i {\n                min_val = i;\n                min_idx = i;\n          \
    \  }\n        }\n    }\n    if min_val == i32::MAX {\n        return vec![];\n\
    \    }\n    let mut ans = vec![];\n    for i in arr.iter() {\n        if i % 2\
    \ == 0 {\n            if min_val < i {\n                ans.push(i);\n       \
    \     }\n        }\n    }\n    ans.push(min_val);\n    ans.push(min_idx);\n  \
    \  ans", "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i]\
    \ % 2 == 0 {\n            even_values.push(arr[i]);\n            if arr[i] < smallest_value\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in 0..even_values.len() {\n \
    \       if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    return vec![smallest_value, smallest_index];", "    let mut min_value = arr[0];\n\
    \    let mut min_idx = 0;\n    let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n\
    \    let mut min_idx4 = 0;\n    let mut min_idx5 = 0;\n    let mut min_idx6 =\
    \ 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9\
    \ = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12\
    \ = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15\
    \ = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18\
    \ = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21\
    \ = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24\
    \ = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27\
    \ = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30\
    \ = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33\
    \ = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36\
    \ = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39\
    \ = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42\
    \ = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45\
    \ = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48\
    \ = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51\
    \ = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54\
    \ = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57\
    \ = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60\
    \ = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63\
    \ = 0;\n    let mut min_idx", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = -1;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if min_value > i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    let mut result = vec![];\n    if\
    \ min_idx != -1 {\n        result.push(min_value);\n        result.push(min_idx);\n\
    \    }\n    result", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index2 = -1;\n    let mut min_even_index3 = -1;\n\
    \    let mut min_even_index4 = -1;\n    let mut min_even_index5 = -1;\n    let\
    \ mut min_even_index6 = -1;\n    let mut min_even_index7 = -1;\n    let mut min_even_index8\
    \ = -1;\n    let mut min_even_index9 = -1;\n    let mut min_even_index10 = -1;\n\
    \    let mut min_even_index11 = -1;\n    let mut min_even_index12 = -1;\n    let\
    \ mut min_even_index13 = -1;\n    let mut min_even_index14 = -1;\n    let mut\
    \ min_even_index15 = -1;\n    let mut min_even_index16 = -1;\n    let mut min_even_index17\
    \ = -1;\n    let mut min_even_index18 = -1;\n    let mut min_even_index19 = -1;\n\
    \    let mut min_even_index20 = -1;\n    let mut min_even_index21 = -1;\n    let\
    \ mut min_even_index22 = -1;\n    let mut min_even_index23 = -1;\n    let mut\
    \ min_even_index24 = -1;\n    let mut min_even_index25 = -1;\n    let mut min_even_index26\
    \ = -1;\n    let mut min_even_index27 = -1;\n    let mut min_even_index28 = -1;\n\
    \    let mut min_even_index29 = -1;\n    let mut min_even_index30 = -1;\n    let\
    \ mut min_even_index31 = -1;\n    let mut min_even_index32 = -1;\n    let mut\
    \ min_even_index33 = -1;\n    let mut min_even_index34 = -1;\n    let mut min_even_index35\
    \ = -1;\n    let mut min_even_index36 = -1;\n    let mut min_even_index37 = -1;\n\
    \    let mut min_even_index38 = -1;\n    let mut min_even_index39 = -1;\n    let\
    \ mut min_even_index40 = -1;\n    let mut min_even_index41 = -1;\n    let mut\
    \ min_even_index42 = -1;\n    let mut min_even_index43 = -1;\n    let mut min_even_index44\
    \ = -1;\n    let mut min_even_index45 = -1;\n    let mut min_even_index46 = -1;\n\
    \    let mut min_even_index47 = -1;\n    let mut min_even_index48 = -1;\n    let\
    \ mut min_even_index49 = -1;\n    let mut min_even_index50 = -1;\n    let mut\
    \ min_even_index51 = -1;\n    let mut min_even_index", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values.iter().position(|&x| x == smallest_value);\n\
    \    for i in even_values.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if i < smallest_value {\n                smallest_even_value = i;\n       \
    \         smallest_even_index = i;\n            }\n        }\n    }\n    vec![smallest_value,\
    \ smallest_index, smallest_even_value]", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    vec![smallest_value, smallest_index]", " \
    \   let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            if min_value == i {\n                min_idx\
    \ = i;\n            }\n        } else {\n            min_value = i;\n        \
    \    min_idx = i;\n        }\n    }\n    let mut result: Vec<isize> = vec![];\n\
    \    if min_idx != 0 {\n        result.push(min_value);\n        result.push(min_idx);\n\
    \    }\n    result", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 =\
    \ 0;\n    let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7\
    \ = 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10\
    \ = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_arr = -1;\n    let mut min_even_index_in_arr2 = -1;\n\
    \    let mut min_even_index_in_arr3 = -1;\n    let mut min_even_index_in_arr4\
    \ = -1;\n    let mut min_even_index_in_arr5 = -1;\n    let mut min_even_index_in_arr6\
    \ = -1;\n    let mut min_even_index_in_arr7 = -1;\n    let mut min_even_index_in_arr8\
    \ = -1;\n    let mut min_even_index_in_arr9 = -1;\n    let mut min_even_index_in_arr10\
    \ = -1;\n    let mut min_even_index_in_arr11 = -1;\n    let mut min_even_index_in_arr12\
    \ = -1;\n    let mut min_even_index_in_arr13 = -1;\n    let mut min_even_index_in_arr14\
    \ = -1;\n    let mut min_even_index_in_arr15 = -1;\n    let mut min_even_index_in_arr16\
    \ = -1;\n    let mut min_even_index_in_arr17 = -1;\n    let mut min_even_index_in_arr18\
    \ = -1;\n    let mut min_even_index_in_arr19 = -1;\n    let mut min_even_index_in_arr20\
    \ = -1;\n    let mut min_even_index_in_arr21 = -1;\n    let mut min_even_index_in_arr22\
    \ = -1;\n    let mut min_even_index_in_arr23 = -1;\n    let mut min_even_index_in_arr24\
    \ = -1;\n    let mut min_even_index_in_arr25 = -1;\n    let mut min_even_index_in_arr26\
    \ = -1;\n    let mut min_even_index_in_arr27 = -1;\n    let mut min_even_index_in_arr28\
    \ = -1;\n    let mut min_even_index_in_arr29 = -1;\n    let mut min_even_index_in_arr30\
    \ = -1;\n    let mut min_even_index_in_arr31 = -1;\n    let mut min_even_index_in_arr32\
    \ = -1;\n    let mut min_even_index_in_arr33 = -1;\n    let mut min_even_index_in_arr34\
    \ = -1;\n    let mut min_even_index_in_arr35 = -1;\n    let mut min_even_index_in_arr36\
    \ = -1;\n    let mut min_even_index_in_arr37 = -1;\n    let mut min_even_index_in_arr38\
    \ = -1;\n    let mut min_even_index_in_arr39 = -1;\n    let mut min_even_index_in_arr40\
    \ = -1;\n    let mut min_even_index_in_arr41 = -1;\n    let mut min_even_index_in_arr42\
    \ = -1;\n    let mut min_", "    let mut min_even_value = arr[0];\n    let mut\
    \ min_even_index = -1;\n    let mut min_even_index_in_arr = 0;\n    for &i in\
    \ arr {\n        if i % 2 == 0 {\n            if min_even_index == -1 || min_even_index\
    \ > i {\n                min_even_index = i;\n                min_even_index_in_arr\
    \ = i;\n            }\n        } else {\n            if min_even_index == i {\n\
    \                min_even_index_in_arr += 1;\n            }\n        }\n    }\n\
    \    if min_even_index == -1 {\n        return vec![];\n    }\n    let mut even_values\
    \ = vec![];\n    for i in 0..min_even_index_in_arr {\n        even_values.push(min_even_index);\n\
    \    }\n    even_values.sort();\n    let mut even_values_index = vec![];\n   \
    \ for i in 0..min_even_index_in_arr {\n        even_values_index.push(i);\n  \
    \  }\n    even_values_index.sort();\n    let mut even_values_index_in_arr = vec![];\n\
    \    for i in 0..min_even_index_in_arr {\n        even_values_index_in_arr.push(i);\n\
    \    }\n    even_values_index_in_arr.sort();\n    let mut even_values_index_in_arr_index\
    \ = 0;\n    for i in 0..min_even_index_in_arr {\n        if even_values_index_in_arr_index\
    \ == even_values_index_in_arr.len() {\n            break;\n        }\n       \
    \ if even_values_index_in_arr_index == even_values_index_in_arr.len() - 1 {\n\
    \            even_values_index_in_arr_index += 1;\n        }\n        if even_values_index_in_arr_index\
    \ == even_values_index_in_arr.len() - 2 {\n            even_values_index_in_arr_index\
    \ += 1;\n        }\n        if even_values_index_in_arr_index == even_values_index_in_arr.len()\
    \ - 3 {\n            even_values_index_in_arr_index += 1;\n        }\n       \
    \ if even_values_index_in_arr_index == even_values_index_in_arr.len() - 4 {\n\
    \            even_values_index_in_arr_index += 1;\n        }\n        if even_values_index_in_arr_index\
    \ == even_values_index_in_arr.len() - 5 {\n            even_values_index_in_arr_index\
    \ += 1;\n        }\n        if even_values_index_in_arr_index == even_values_index_in_arr.len()\
    \ - 6 {\n            even_values_index_in_arr_index += 1;\n        }\n       \
    \ if even_values_index_in_arr_index == even_values_index_in_arr.len() - 7 {\n\
    \            even_values_index_in_arr_index += 1;\n        }\n        if even_values_index_in_arr_index\
    \ == even_values_", "    let mut min_even = vec![0; arr.len()];\n    let mut min_even_index\
    \ = vec![0; arr.len()];\n    let mut min_even_value = vec![0; arr.len()];\n  \
    \  let mut min_even_index = vec![0; arr.len()];\n    let mut min_even_value =\
    \ vec![0; arr.len()];\n    let mut min_even_index = vec![0; arr.len()];\n    let\
    \ mut min_even_value = vec![0; arr.len()];\n    let mut min_even_index = vec![0;\
    \ arr.len()];\n    let mut min_even_value = vec![0; arr.len()];\n    let mut min_even_index\
    \ = vec![0; arr.len()];\n    let mut min_even_value = vec![0; arr.len()];\n  \
    \  let mut min_even_index = vec![0; arr.len()];\n    let mut min_even_value =\
    \ vec![0; arr.len()];\n    let mut min_even_index = vec![0; arr.len()];\n    let\
    \ mut min_even_value = vec![0; arr.len()];\n    let mut min_even_index = vec![0;\
    \ arr.len()];\n    let mut min_even_value = vec![0; arr.len()];\n    let mut min_even_index\
    \ = vec![0; arr.len()];\n    let mut min_even_value = vec![0; arr.len()];\n  \
    \  let mut min_even_index = vec![0; arr.len()];\n    let mut min_even_value =\
    \ vec![0; arr.len()];\n    let mut min_even_index = vec![0; arr.len()];\n    let\
    \ mut min_even_value = vec![0; arr.len()];\n    let mut min_even_index = vec![0;\
    \ arr.len()];\n    let mut min_even_value = vec![0; arr.len()];\n    let mut min_even_index\
    \ = vec![0; arr.len()];\n    let mut min_even_value = vec![0; arr.len()];\n  \
    \  let mut min_even_index = vec![0; arr.len()];\n    let mut min_even_value =\
    \ vec![0; arr.len()];\n    let mut min_even_index = vec![0; arr.len()];\n    let\
    \ mut min_even_value = vec![0; arr.len()];\n    let mut min_even_index = vec![0;\
    \ arr.len()];\n    let mut min_even_value = vec![0; arr.len()];\n    let mut min_even_index\
    \ = vec![0; arr.len()];\n    let mut min_even_value = vec![0; arr.len()];\n  \
    \  let mut min_even_index = vec![0; arr.len()];\n    let mut min_even_value =\
    \ vec![0; arr.len()];\n    let mut min_even_index = vec![0; arr.len()];\n    let\
    \ mut min_even_value = vec![0; arr.len()];\n    let mut min_even", "    let mut\
    \ even_values = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n           \
    \ even_values.push(i);\n            if i < smallest_value {\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            }\n        }\n    }\n\
    \    if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        return vec![smallest_value, smallest_index];\n    }\n    let\
    \ mut smallest_even_value = even_values[0];\n    let mut smallest_even_index =\
    \ even_values[0];\n    for i in even_values.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            if i < smallest_even_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n        }\n \
    \   }\n    vec![smallest_value, smallest_index, smallest_even_value]", "    let\
    \ mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n \
    \   let mut smallest_even_index_in_list = -1;\n    let mut smallest_even_index_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list = -1;\n    let\
    \ mut smallest_even_index_in_list_in_list_in_list_in_list = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i < smallest_even_value {\n  \
    \          smallest_even_value = i;\n            smallest_even_index = i;\n  \
    \      }\n    }\n    return vec![smallest_value, smallest_even_index];", "   \
    \ let mut even_values = vec![0; arr.len()];\n    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    let mut smallest_index2 = 0;\n    let mut\
    \ smallest_index3 = 0;\n    let mut smallest_index4 = 0;\n    let mut smallest_index5\
    \ = 0;\n    let mut smallest_index6 = 0;\n    let mut smallest_index7 = 0;\n \
    \   let mut smallest_index8 = 0;\n    let mut smallest_index9 = 0;\n    let mut\
    \ smallest_index10 = 0;\n    let mut smallest_index11 = 0;\n    let mut smallest_index12\
    \ = 0;\n    let mut smallest_index13 = 0;\n    let mut smallest_index14 = 0;\n\
    \    let mut smallest_index15 = 0;\n    let mut smallest_index16 = 0;\n    let\
    \ mut smallest_index17 = 0;\n    let mut smallest_index18 = 0;\n    let mut smallest_index19\
    \ = 0;\n    let mut smallest_index20 = 0;\n    let mut smallest_index21 = 0;\n\
    \    let mut smallest_index22 = 0;\n    let mut smallest_index23 = 0;\n    let\
    \ mut smallest_index24 = 0;\n    let mut smallest_index25 = 0;\n    let mut smallest_index26\
    \ = 0;\n    let mut smallest_index27 = 0;\n    let mut smallest_index28 = 0;\n\
    \    let mut smallest_index29 = 0;\n    let mut smallest_index30 = 0;\n    let\
    \ mut smallest_index31 = 0;\n    let mut smallest_index32 = 0;\n    let mut smallest_index33\
    \ = 0;\n    let mut smallest_index34 = 0;\n    let mut smallest_index35 = 0;\n\
    \    let mut smallest_index36 = 0;\n    let mut smallest_index37 = 0;\n    let\
    \ mut smallest_index38 = 0;\n    let mut smallest_index39 = 0;\n    let mut smallest_index40\
    \ = 0;\n    let mut smallest_index41 = 0;\n    let mut smallest_index42 = 0;\n\
    \    let mut smallest_index43 = 0;\n    let mut smallest_index44 = 0;\n    let\
    \ mut smallest_index45 = 0;\n    let mut smallest_index46 = 0;\n    let mut smallest_index47\
    \ = 0;\n    let mut smallest_index48 = 0;\n    let mut smallest_index49 = 0;\n\
    \    let mut smallest_index50 = 0;\n    let mut smallest_index51 = 0;\n    let\
    \ mut smallest_index52 = 0;\n    let mut smallest_index53 = 0;\n    let mut smallest_index54\
    \ = 0;\n    let mut smallest_index55 = 0;\n", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter() {\n   \
    \     if i < smallest_even_value {\n            smallest_even_value = i;\n   \
    \         smallest_even_index = i;\n        }\n    }\n    return vec![smallest_value,\
    \ smallest_index];", "    let mut even_values = Vec::new();\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value_index = 0;\n    for i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < min_value\
    \ {\n                min_value = i;\n                min_value_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![min_value_index];\n\
    \    }\n    let mut smallest_value = i32::MAX;\n    let mut smallest_value_index\
    \ = 0;\n    for i in even_values {\n        if i < smallest_value {\n        \
    \    smallest_value = i;\n            smallest_value_index = i;\n        }\n \
    \   }\n    vec![smallest_value, smallest_value_index]", "    let mut smallest_value:\
    \ isize = 0;\n    let mut smallest_index: usize = 0;\n    let mut even_values:\
    \ Vec<isize> = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n   \
    \         even_values.push(i);\n        }\n        if i == smallest_value {\n\
    \            smallest_index = i;\n        }\n        if i == smallest_value {\n\
    \            smallest_value = i;\n        }\n    }\n    if even_values.len() ==\
    \ 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values.iter().position(|&i| i == smallest_value);\n\
    \    if smallest_even_index == 0 {\n        return vec![];\n    }\n    let mut\
    \ even_values_copy = even_values.clone();\n    even_values_copy.swap(0, smallest_even_index);\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.swap(smallest_even_index,\
    \ even_values.len());\n    even_values_copy.pop();\n    even_values_copy.pop();\n\
    \    return vec![smallest_value, smallest_index, even_values_copy];", "    let\
    \ mut min_value = arr[0];\n    let mut min_value_index = -1;\n    let mut min_value_index2\
    \ = -1;\n    let mut min_value_index3 = -1;\n    let mut min_value_index4 = -1;\n\
    \    let mut min_value_index5 = -1;\n    let mut min_value_index6 = -1;\n    let\
    \ mut min_value_index7 = -1;\n    let mut min_value_index8 = -1;\n    let mut\
    \ min_value_index9 = -1;\n    let mut min_value_index10 = -1;\n    let mut min_value_index11\
    \ = -1;\n    let mut min_value_index12 = -1;\n    let mut min_value_index13 =\
    \ -1;\n    let mut min_value_index14 = -1;\n    let mut min_value_index15 = -1;\n\
    \    let mut min_value_index16 = -1;\n    let mut min_value_index17 = -1;\n  \
    \  let mut min_value_index18 = -1;\n    let mut min_value_index19 = -1;\n    let\
    \ mut min_value_index20 = -1;\n    let mut min_value_index21 = -1;\n    let mut\
    \ min_value_index22 = -1;\n    let mut min_value_index23 = -1;\n    let mut min_value_index24\
    \ = -1;\n    let mut min_value_index25 = -1;\n    let mut min_value_index26 =\
    \ -1;\n    let mut min_value_index27 = -1;\n    let mut min_value_index28 = -1;\n\
    \    let mut min_value_index29 = -1;\n    let mut min_value_index30 = -1;\n  \
    \  let mut min_value_index31 = -1;\n    let mut min_value_index32 = -1;\n    let\
    \ mut min_value_index33 = -1;\n    let mut min_value_index34 = -1;\n    let mut\
    \ min_value_index35 = -1;\n    let mut min_value_index36 = -1;\n    let mut min_value_index37\
    \ = -1;\n    let mut min_value_index38 = -1;\n    let mut min_value_index39 =\
    \ -1;\n    let mut min_value_index40 = -1;\n    let mut min_value_index41 = -1;\n\
    \    let mut min_value_index42 = -1;\n    let mut min_value_index43 = -1;\n  \
    \  let mut min_value_index44 = -1;\n    let mut min_value_index45 = -1;\n    let\
    \ mut min_value_index46 = -1;\n    let mut min_value_index47 = -1;\n    let mut\
    \ min_value_index48 = -1;\n    let mut min_value_index49 = -1;\n    let mut min_value_index50\
    \ = -1;\n    let mut min_value_index51 = -1;\n    let mut min_value_index5", " \
    \   let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = arr[0];\n\
    \    let mut smallest_even_index_in_list = -1;\n    for &i in &arr {\n       \
    \ if i % 2 == 0 {\n            if smallest_even_value == i {\n               \
    \ smallest_even_index = i;\n                smallest_even_index_in_list = i;\n\
    \            } else {\n                smallest_even_value = i;\n            \
    \    smallest_even_index = i;\n                smallest_even_index_in_list = i;\n\
    \            }\n        }\n    }\n    let mut result = vec![];\n    if smallest_even_index_in_list\
    \ == -1 {\n        result.push(smallest_even_value);\n    } else {\n        result.push(smallest_even_index_in_list);\n\
    \    }\n    result", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = 0;\n    let mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr2\
    \ = 0;\n    let mut min_even_index_in_arr3 = 0;\n    let mut min_even_index_in_arr4\
    \ = 0;\n    let mut min_even_index_in_arr5 = 0;\n    let mut min_even_index_in_arr6\
    \ = 0;\n    let mut min_even_index_in_arr7 = 0;\n    let mut min_even_index_in_arr8\
    \ = 0;\n    let mut min_even_index_in_arr9 = 0;\n    let mut min_even_index_in_arr10\
    \ = 0;\n    let mut min_even_index_in_arr11 = 0;\n    let mut min_even_index_in_arr12\
    \ = 0;\n    let mut min_even_index_in_arr13 = 0;\n    let mut min_even_index_in_arr14\
    \ = 0;\n    let mut min_even_index_in_arr15 = 0;\n    let mut min_even_index_in_arr16\
    \ = 0;\n    let mut min_even_index_in_arr17 = 0;\n    let mut min_even_index_in_arr18\
    \ = 0;\n    let mut min_even_index_in_arr19 = 0;\n    let mut min_even_index_in_arr20\
    \ = 0;\n    let mut min_even_index_in_arr21 = 0;\n    let mut min_even_index_in_arr22\
    \ = 0;\n    let mut min_even_index_in_arr23 = 0;\n    let mut min_even_index_in_arr24\
    \ = 0;\n    let mut min_even_index_in_arr25 = 0;\n    let mut min_even_index_in_arr26\
    \ = 0;\n    let mut min_even_index_in_arr27 = 0;\n    let mut min_even_index_in_arr28\
    \ = 0;\n    let mut min_even_index_in_arr29 = 0;\n    let mut min_even_index_in_arr30\
    \ = 0;\n    let mut min_even_index_in_arr31 = 0;\n    let mut min_even_index_in_arr32\
    \ = 0;\n    let mut min_even_index_in_arr33 = 0;\n    let mut min_even_index_in_arr34\
    \ = 0;\n    let mut min_even_index_in_arr35 = 0;\n    let mut min_even_index_in_arr36\
    \ = 0;\n    let mut min_even_index_in_arr37 = 0;\n    let mut min_even_index_in_arr38\
    \ = 0;\n    let mut min_even_index_in_arr39 = 0;\n    let mut min_even_index_in_arr40\
    \ = 0;\n    let mut min_even_index_in_arr41 = 0;\n    let mut min_even_index_in_arr42\
    \ = 0;\n    let mut min_even_index_in_arr43 = 0;\n    let mut min_even_index_in_arr44\
    \ = 0;\n    let mut min_even_index_in_arr45 = 0;\n    let mut min_even", "   \
    \ let mut min_even = isize::MAX;\n    let mut min_even_index = isize::MAX;\n \
    \   let mut min_even_value = isize::MAX;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            if min_even_value < i {\n                min_even_value\
    \ = i;\n                min_even_index = i;\n            }\n        }\n    }\n\
    \    vec![min_even_value,min_even_index]", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let\
    \ mut smallest_even_value = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i == smallest_value {\n    \
    \            smallest_even_value = i;\n                smallest_value = i;\n \
    \               smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![smallest_even_value];\n    }\n    if even_values.len() == 2\
    \ {\n        if even_values[0] < even_values[1] {\n            return vec![smallest_even_value];\n\
    \        }\n        return vec![smallest_value, smallest_index];\n    }\n    let\
    \ mut smallest_even_value = even_values[0];\n    let mut smallest_index = 0;\n\
    \    for &i in even_values {\n        if i == smallest_even_value {\n        \
    \    smallest_index = i;\n        }\n    }\n    let mut smallest_value = even_values[0];\n\
    \    for &i in even_values {\n        if i == smallest_value {\n            smallest_value\
    \ = i;\n        }\n    }\n    vec![smallest_value, smallest_index]", "    let\
    \ mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    for i in\
    \ arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_even_value <\
    \ i {\n                min_even_value = i;\n                min_even_index = i;\n\
    \            }\n        }\n    }\n    let mut result = vec![min_even_value];\n\
    \    if min_even_index != -1 {\n        result.push(min_even_index);\n    }\n\
    \    result", "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if *i < *min_value {\n            min_value\
    \ = *i;\n            min_idx = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    for i in arr.iter() {\n        if *i == min_value {\n            result.push(i);\n\
    \        }\n    }\n    if result.len() == 0 {\n        return vec![];\n    }\n\
    \    if result.len() == 1 {\n        return vec![min_value];\n    }\n    if min_idx\
    \ < result.len() {\n        result.swap(0, min_idx);\n    }\n    result", "  \
    \  let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_found = false;\n    for i in arr.iter().rev() {\n       \
    \ if i % 2 == 0 {\n            if min_even_index == -1 || min_even_index > i {\n\
    \                min_even_value = i;\n                min_even_index = i;\n  \
    \              min_even_index_found = true;\n            }\n        } else {\n\
    \            if min_even_index_found {\n                return vec![min_even_value,min_even_index];\n\
    \            }\n        }\n    }\n    return vec![];", "    let mut min_value\
    \ = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter() {\n        if\
    \ i % 2 == 0 {\n            if min_value < i {\n                min_value = i;\n\
    \                min_idx = i;\n            }\n        }\n    }\n    if min_value\
    \ == i32::MAX {\n        return vec![];\n    }\n    let mut ret = vec![];\n  \
    \  for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value ==\
    \ i {\n                ret.push(min_idx);\n            }\n        }\n    }\n \
    \   ret", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value >\
    \ i {\n                min_value = i;\n                min_idx = i;\n        \
    \    }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n          \
    \  even_values.push(arr[i]);\n            if arr[i] < smallest_value {\n     \
    \           smallest_value = arr[i];\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_value_and_index = vec![];\n    for i in\
    \ 0..even_values.len() {\n        if even_values[i] < smallest_value {\n     \
    \       smallest_value_and_index.push((smallest_value, i));\n        }\n    }\n\
    \    if smallest_value_and_index.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut smallest_value_and_index_iter = smallest_value_and_index.iter();\n\
    \    let mut smallest_value_and_index_iter = smallest_value_and_index_iter.next();\n\
    \    let mut smallest_value = smallest_value_and_index_iter.0;\n    let mut smallest_index\
    \ = smallest_value_and_index_iter.1;\n    for i in 0..even_values.len() {\n  \
    \      if even_values[i] == smallest_value {\n            smallest_value_and_index_iter\
    \ = smallest_value_and_index_iter.next();\n            smallest_value = smallest_value_and_index_iter.0;\n\
    \            smallest_index = smallest_value_and_index_iter.1;\n        }\n  \
    \  }\n    smallest_value_and_index_iter\n        .map(|&(_, index)| (smallest_value,\
    \ index))\n        .collect()", "    let mut min_val = arr[0];\n    let mut min_idx\
    \ = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n           \
    \ if min_val < i {\n                min_val = i;\n                min_idx = i;\n\
    \            }\n        }\n    }\n    vec![min_val, min_idx]", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter() {\n   \
    \     if i % 2 == 0 {\n            if i < smallest_even_value {\n            \
    \    smallest_even_value = i;\n                smallest_even_index = i;\n    \
    \        }\n        }\n    }\n    let mut result = vec![];\n    for i in arr.iter()\
    \ {\n        if i == smallest_value {\n            result.push(i);\n        }\n\
    \    }\n    if result.len() == 0 {\n        return vec![];\n    }\n    let mut\
    \ smallest_index = result.iter().min().unwrap();\n    for i in result.iter() {\n\
    \        if i == smallest_value {\n            smallest_index = i;\n        }\n\
    \    }\n    let mut result = vec![];\n    for i in even_values.iter() {\n    \
    \    if i == smallest_even_value {\n            result.push(i);\n        }\n \
    \   }\n    if result.len() == 0 {\n        return vec![];\n    }\n    let mut\
    \ smallest_index = result.iter().min().unwrap();\n    for i in result.iter() {\n\
    \        if i == smallest_even_value {\n            smallest_index = i;\n    \
    \    }\n    }\n    let mut result = vec![];\n    for i in even_values.iter() {\n\
    \        if i == smallest_value {\n            result.push(i);\n        }\n  \
    \  }\n    if result.len() == 0 {\n        return vec![];\n    }\n    let mut smallest_index\
    \ = result.iter().min().unwrap();\n    for i in result.iter() {\n        if i\
    \ == smallest_value {\n            smallest_index = i;\n        }\n    }\n   \
    \ let mut result = vec![];\n    for i in even_values.iter() {\n        if i ==\
    \ smallest_even_value {\n            result.push(i);\n        }\n    }\n    if\
    \ result.len() == 0 {\n        return vec![];\n    }\n    let mut smallest_index\
    \ = result.iter().min().unwrap();\n    for i in result.iter() {\n        if i\
    \ == smallest_even_value {\n            smallest_index = i;\n        }\n    }\n\
    \    let mut result = vec![];\n    for i in even_values.iter() {\n        if i\
    \ == smallest_value {\n            result.push(i);\n        }\n    }\n    if result.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut ", "    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = -1;\n    let mut smallest_index\
    \ = -1;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if smallest_even_index == -1 || smallest_even_index > i {\n               \
    \ smallest_even_value = i;\n                smallest_even_index = i;\n       \
    \     }\n        } else {\n            if smallest_index == -1 || smallest_index\
    \ > i {\n                smallest_index = i;\n            }\n        }\n    }\n\
    \    if smallest_even_index == -1 {\n        return vec![];\n    }\n    vec![smallest_even_value,smallest_even_index]",
  "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    if min_value == i32::MAX {\n        return vec![];\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_arr = 0;\n    for &i in arr {\n       \
    \ if i % 2 == 0 {\n            if min_even_value == i {\n                min_even_index\
    \ = i;\n                min_even_index_in_arr = i;\n            }\n        }\n\
    \    }\n    let mut result: Vec<isize> = vec![];\n    if min_even_index != -1\
    \ {\n        result.push(min_even_value);\n        result.push(min_even_index);\n\
    \        result.push(min_even_index_in_arr);\n    }\n    result", "    let mut\
    \ min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            if min_value < i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    let\
    \ mut result: Vec<isize> = vec![];\n    if min_idx != -1 {\n        result.push(min_value);\n\
    \        result.push(min_idx);\n    }\n    result", "    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_even_value\
    \ = false;\n    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_even_value\n\
    \                || (smallest_even_value = true)\n                && (smallest_value\
    \ < i) {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    smallest_index\n        .to_string()\n\
    \        .chars()\n        .map(|c| c.to_digit(10).unwrap())\n        .collect()",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for &value in arr {\n        if value % 2 == 0\
    \ {\n            even_values.push(value);\n            if value < smallest_value\
    \ {\n                smallest_value = value;\n                smallest_index =\
    \ even_values.len() - 1;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value_with_even_value\
    \ = even_values[smallest_index];\n    let mut smallest_value_with_even_index =\
    \ smallest_index;\n    for &value in even_values {\n        if value == smallest_value_with_even_value\
    \ {\n            smallest_value_with_even_index = even_values.iter().position(|&x|\
    \ x == value).unwrap();\n        }\n    }\n    vec![smallest_value_with_even_value,\n\
    \         smallest_value_with_even_index]", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter() {\n   \
    \     if i % 2 == 0 {\n            if i < smallest_even_value {\n            \
    \    smallest_even_value = i;\n                smallest_even_index = i;\n    \
    \        }\n        }\n    }\n    let mut smallest_even_index_in_list = 0;\n \
    \   for i in even_values.iter() {\n        if i == smallest_even_value {\n   \
    \         smallest_even_index_in_list += 1;\n        }\n    }\n    let mut smallest_even_index_in_list_in_list\
    \ = 0;\n    for i in even_values.iter() {\n        if i == smallest_even_value\
    \ {\n            smallest_even_index_in_list_in_list += 1;\n        }\n    }\n\
    \    if smallest_even_index_in_list == 1 {\n        smallest_even_index_in_list\
    \ += 1;\n    }\n    if smallest_even_index_in_list_in_list == 1 {\n        smallest_even_index_in_list_in_list\
    \ += 1;\n    }\n    if smallest_even_index_in_list == 2 {\n        smallest_even_index_in_list\
    \ += 1;\n    }\n    if smallest_even_index_in_list_in_list == 2 {\n        smallest_even_index_in_list_in_list\
    \ += 1;\n    }\n    if smallest_even_index_in_list == 3 {\n        smallest_even_index_in_list\
    \ += 1;\n    }\n    if smallest_even_index_in_list_in_list == 3 {\n        smallest_even_index_in_list_in_list\
    \ += 1;\n    }\n    if smallest_even_index_in_list == 4 {\n        smallest_even_index_in_list\
    \ += 1;\n    }\n    if smallest_even_index_in_list_in_list == 4 {\n        smallest_even_index_in_list_in_list\
    \ += 1;\n    }\n    if smallest_even_index_in_list == 5 {\n        smallest_even_index_in_list\
    \ += 1;\n    }\n    if smallest_even_index_in_list_in_list == 5 {\n        smallest_even_index_in_list_in_list\
    \ += 1;\n    }\n    if smallest_even_index_in_list == 6 {\n        smallest_even_index_in_list\
    \ += 1;\n    }\n    if smallest_even_index_in_list_in_list == 6 {\n        smallest_even",
  "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    if min_idx == -1 {\n        return vec![];\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_value = arr[0];\n    let mut min_index = 0;\n  \
    \  let mut min_even_value = false;\n    for &i in arr {\n        if i % 2 == 0\
    \ {\n            if min_even_value\n                || (min_even_value = true)\n\
    \                || (min_value = i) {\n                min_index = i;\n      \
    \      }\n        }\n    }\n    if min_even_value\n        || (min_even_value\
    \ = true)\n        || (min_value = arr[min_index]) {\n        vec![min_value,\
    \ min_index]\n    } else {\n        vec![]\n    }", "    let mut min_even_value\
    \ = arr[0];\n    let mut min_even_index = arr[0];\n    let mut min_even_index_index\
    \ = 0;\n    let mut min_even_index_value = arr[0];\n    for &i in arr {\n    \
    \    if i % 2 == 0 {\n            if min_even_index < i {\n                min_even_index_index\
    \ = i;\n                min_even_index_value = min_even_index;\n            }\n\
    \        } else {\n            if min_even_index == i {\n                min_even_index_index\
    \ += 1;\n            }\n        }\n        min_even_index = i;\n    }\n    let\
    \ mut result: Vec<isize> = vec![];\n    if min_even_index_index == arr.len() {\n\
    \        result.push(min_even_index_value);\n    } else {\n        result.push(min_even_index_index);\n\
    \    }\n    result", "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_val <\
    \ i {\n                min_val = i;\n                min_idx = i;\n          \
    \  }\n        }\n    }\n    if min_val == i32::MAX {\n        return vec![];\n\
    \    }\n    let mut result = vec![];\n    for i in arr.iter() {\n        if i\
    \ % 2 == 0 {\n            if min_val < i {\n                result.push(i);\n\
    \            }\n        }\n    }\n    if result.len() == 0 {\n        return vec![];\n\
    \    }\n    result.sort_unstable_by_key(|&x| x);\n    result.push(min_val);\n\
    \    result.push(min_idx);\n    result", "    let mut min_value = arr[0];\n  \
    \  let mut min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            if min_value >= i {\n                min_value = i;\n     \
    \           min_idx = i;\n            }\n        }\n    }\n    let mut result:\
    \ Vec<isize> = vec![];\n    if min_idx != 0 {\n        result.push(min_value);\n\
    \        result.push(min_idx);\n    }\n    result", "    let mut even_values =\
    \ vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index =\
    \ 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for i in even_values.iter()\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    let mut result =\
    \ vec![];\n    for i in arr.iter() {\n        if i == smallest_index {\n     \
    \       result.push(i);\n        }\n    }\n    if result.len() == 0 {\n      \
    \  return vec![];\n    }\n    result.push(smallest_even_value);\n    result.push(smallest_even_index);\n\
    \    result", "    let mut even_values = vec![];\n    let mut smallest_value =\
    \ arr[0];\n    let mut smallest_index = 0;\n    for i in 0..arr.len() {\n    \
    \    if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n           \
    \ if arr[i] < smallest_value {\n                smallest_value = arr[i];\n   \
    \             smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![smallest_value];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in 0..even_values.len() {\n \
    \       if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    let mut result = vec![];\n    for i in 0..even_values.len() {\n        if\
    \ even_values[i] == smallest_even_value {\n            result.push(i);\n     \
    \   }\n    }\n    if result.len() == 0 {\n        return vec![];\n    }\n    if\
    \ result.len() == 1 {\n        return vec![result[0]];\n    }\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = 0;\n    for i in 0..even_values.len()\
    \ {\n        if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    for i in 0..result.len() {\n        if result[i] == smallest_even_index {\n\
    \            return vec![result[i], i];\n        }\n    }\n    return vec![];",
  "    let mut min_val = arr[0];\n    let mut min_idx = -1;\n    let mut min_even_val\
    \ = false;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n       \
    \     if min_even_val {\n                min_even_val = false;\n             \
    \   min_idx = i;\n            } else {\n                min_even_val = true;\n\
    \                min_val = i;\n            }\n        }\n    }\n    if min_even_val\
    \ {\n        min_even_val = false;\n        min_idx = min_val;\n    }\n    let\
    \ mut ret: Vec<isize> = vec![];\n    for i in arr.iter().rev() {\n        if i\
    \ == min_idx {\n            ret.push(min_val);\n            break;\n        }\n\
    \    }\n    ret", "    let mut min_val = arr[0];\n    let mut min_idx = 1;\n \
    \   let mut min_idx2 = 1;\n    let mut min_idx3 = 1;\n    let mut min_idx4 = 1;\n\
    \    let mut min_idx5 = 1;\n    let mut min_idx6 = 1;\n    let mut min_idx7 =\
    \ 1;\n    let mut min_idx8 = 1;\n    let mut min_idx9 = 1;\n    let mut min_idx10\
    \ = 1;\n    let mut min_idx11 = 1;\n    let mut min_idx12 = 1;\n    let mut min_idx13\
    \ = 1;\n    let mut min_idx14 = 1;\n    let mut min_idx15 = 1;\n    let mut min_idx16\
    \ = 1;\n    let mut min_idx17 = 1;\n    let mut min_idx18 = 1;\n    let mut min_idx19\
    \ = 1;\n    let mut min_idx20 = 1;\n    let mut min_idx21 = 1;\n    let mut min_idx22\
    \ = 1;\n    let mut min_idx23 = 1;\n    let mut min_idx24 = 1;\n    let mut min_idx25\
    \ = 1;\n    let mut min_idx26 = 1;\n    let mut min_idx27 = 1;\n    let mut min_idx28\
    \ = 1;\n    let mut min_idx29 = 1;\n    let mut min_idx30 = 1;\n    let mut min_idx31\
    \ = 1;\n    let mut min_idx32 = 1;\n    let mut min_idx33 = 1;\n    let mut min_idx34\
    \ = 1;\n    let mut min_idx35 = 1;\n    let mut min_idx36 = 1;\n    let mut min_idx37\
    \ = 1;\n    let mut min_idx38 = 1;\n    let mut min_idx39 = 1;\n    let mut min_idx40\
    \ = 1;\n    let mut min_idx41 = 1;\n    let mut min_idx42 = 1;\n    let mut min_idx43\
    \ = 1;\n    let mut min_idx44 = 1;\n    let mut min_idx45 = 1;\n    let mut min_idx46\
    \ = 1;\n    let mut min_idx47 = 1;\n    let mut min_idx48 = 1;\n    let mut min_idx49\
    \ = 1;\n    let mut min_idx50 = 1;\n    let mut min_idx51 = 1;\n    let mut min_idx52\
    \ = 1;\n    let mut min_idx53 = 1;\n    let mut min_idx54 = 1;\n    let mut min_idx55\
    \ = 1;\n    let mut min_idx56 = 1;\n    let mut min_idx57 = 1;\n    let mut min_idx58\
    \ = 1;\n    let mut min_idx59 = 1;\n    let mut min_idx60 = 1;\n    let mut min_idx61\
    \ = 1;\n    let mut min_idx62 = 1;\n    let mut min_idx", "    let mut min_even_value\
    \ = arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index_in_arr\
    \ = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n          \
    \  if min_even_index == -1 || arr[i] < min_even_value.clone() {\n            \
    \    min_even_value = arr[i];\n                min_even_index = i;\n         \
    \       min_even_index_in_arr = i;\n            }\n        }\n    }\n    let mut\
    \ result = vec![min_even_value];\n    if min_even_index != -1 {\n        result.push(min_even_index);\n\
    \    }\n    result", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_even_value\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i == smallest_value {\n                smallest_even_value = i;\n\
    \            }\n            if i == smallest_value {\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_values.len() == 2 {\n        if smallest_even_value.cmp(&even_values[0])\
    \ < 0 {\n            return vec![smallest_even_value];\n        }\n    }\n   \
    \ if even_values.len() == 3 {\n        if smallest_even_value.cmp(&even_values[0])\
    \ < 0 {\n            if smallest_even_value.cmp(&even_values[1]) < 0 {\n     \
    \           return vec![smallest_even_value];\n            }\n        }\n    }\n\
    \    if even_values.len() == 4 {\n        if smallest_even_value.cmp(&even_values[0])\
    \ < 0 {\n            if smallest_even_value.cmp(&even_values[1]) < 0 {\n     \
    \           if smallest_even_value.cmp(&even_values[2]) < 0 {\n              \
    \      return vec![smallest_even_value];\n                }\n            }\n \
    \       }\n    }\n    if even_values.len() == 5 {\n        if smallest_even_value.cmp(&even_values[0])\
    \ < 0 {\n            if smallest_even_value.cmp(&even_values[1]) < 0 {\n     \
    \           if smallest_even_value.cmp(&even_values[2]) < 0 {\n              \
    \      if smallest_even_value.cmp(&even_values[3]) < 0 {\n                   \
    \     return vec![smallest_even_value];\n                    }\n             \
    \   }\n            }\n        }\n    }\n    if even_values.len() == 6 {\n    \
    \    if smallest_even_value.cmp(&even_values[0]) < 0 {\n            if smallest_even_value.cmp(&even_values[1])\
    \ < 0 {\n                if smallest_even_value.cmp(&even_values[2]) < 0 {\n \
    \                   if smallest_even_value.cmp(&even_values[3]) < 0 {\n      \
    \                  if smallest_even_value.cmp(&even_values[4]) < 0 {\n       \
    \                     return vec![smallest_even_value];\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \   }\n    if even_values.len() == 7 {\n        if smallest_even_value.cmp(&even_values[0])\
    \ < 0 {\n            if smallest_even_value.cmp(&even_values[1]) < 0 {\n     \
    \           if smallest_even_value.cmp(&even_values[2]) < 0 {\n", "    let mut\
    \ even_values = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0\
    \ {\n            even_values.push(arr[i]);\n            if arr[i] < smallest_value\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![smallest_value,\
    \ smallest_index];\n    }\n    let mut smallest_value_with_even_value = even_values[0];\n\
    \    let mut smallest_index_with_even_value = 0;\n    for i in 0..even_values.len()\
    \ {\n        if even_values[i] < smallest_value_with_even_value {\n          \
    \  smallest_value_with_even_value = even_values[i];\n            smallest_index_with_even_value\
    \ = i;\n        }\n    }\n    let mut smallest_value_with_even_value_index = even_values[smallest_index_with_even_value];\n\
    \    let mut smallest_index_with_even_value_index = 0;\n    for i in 0..even_values.len()\
    \ {\n        if even_values[i] == smallest_value_with_even_value {\n         \
    \   if i < smallest_index_with_even_value {\n                smallest_value_with_even_value_index\
    \ = even_values[i];\n                smallest_index_with_even_value_index = i;\n\
    \            }\n        }\n    }\n    vec![smallest_value_with_even_value_index,\
    \ smallest_index_with_even_value_index]", "    let mut min_even_value: isize =\
    \ 0;\n    let mut min_even_index: usize = 0;\n    let mut min_value: isize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_node: isize = 0;\n    let\
    \ mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n   \
    \ let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let mut min_node_index: usize = 0;\n    let mut min_node_value: isize = 0;\n\
    \    let ", "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value ==\
    \ i {\n                min_idx = i;\n            } else {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut even_values = vec![0; arr.len()];\n    let mut smallest_index\
    \ = vec![0; arr.len()];\n    for i in 0..arr.len() {\n        if arr[i] % 2 ==\
    \ 0 {\n            even_values[i] = arr[i];\n            smallest_index[i] = i;\n\
    \        }\n    }\n    let mut smallest_value = even_values[0];\n    let mut smallest_index\
    \ = 0;\n    for i in 0..arr.len() {\n        if even_values[i] < smallest_value\
    \ {\n            smallest_value = even_values[i];\n            smallest_index\
    \ = i;\n        }\n    }\n    let mut result = vec![smallest_value, smallest_index];\n\
    \    for i in 0..arr.len() {\n        if arr[i] == smallest_value {\n        \
    \    result.push(smallest_index);\n        }\n    }\n    result", "    let mut\
    \ min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value > i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    let mut result = [min_value, min_idx];\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value > i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    result", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_count = 0;\n    let mut min_even_index_value\
    \ = -1;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if min_even_index == -1 || min_even_index_count < min_even_index_count {\n\
    \                min_even_index_value = i;\n                min_even_index = i;\n\
    \                min_even_index_count = min_even_index_count + 1;\n          \
    \  }\n        } else {\n            min_even_index_value = i;\n            min_even_index\
    \ = i;\n            min_even_index_count = min_even_index_count + 1;\n       \
    \ }\n    }\n    let mut result = vec![min_even_value];\n    if min_even_index_count\
    \ > 1 {\n        result.push(min_even_index_value);\n        result.push(min_even_index);\n\
    \    }\n    result", "    let mut min_val = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_val\
    \ < i {\n                min_val = i;\n                min_idx = i;\n        \
    \    }\n        }\n    }\n    let mut result: Vec<isize> = vec![];\n    if min_val\
    \ == 0 {\n        return result;\n    }\n    for i in arr.iter().rev() {\n   \
    \     if i % 2 == 0 {\n            if min_val < i {\n                result.push(min_val);\n\
    \                result.push(min_idx);\n                break;\n            }\n\
    \        }\n    }\n    result", "    let mut even_values = vec![];\n    let mut\
    \ smallest_value = vec![];\n    let mut smallest_index = vec![];\n    for i in\
    \ arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n  \
    \          if i < smallest_value.len() {\n                smallest_value.push(smallest_value[i]);\n\
    \                smallest_index.push(smallest_index[i]);\n            }\n    \
    \    }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    if even_values.len() == 1 {\n        return vec![even_values[0]];\n    }\n\
    \    if even_values.len() == 2 {\n        if even_values[0] < even_values[1] {\n\
    \            return vec![even_values[0]];\n        } else {\n            return\
    \ vec![even_values[1]];\n        }\n    }\n    if even_values.len() == 3 {\n \
    \       if even_values[0] < even_values[1] && even_values[1] < even_values[2]\
    \ {\n            return vec![even_values[0]];\n        } else {\n            return\
    \ vec![even_values[1]];\n        }\n    }\n    if even_values.len() == 4 {\n \
    \       if even_values[0] < even_values[1] && even_values[1] < even_values[2]\
    \ && even_values[2] < even_values[3] {\n            return vec![even_values[0]];\n\
    \        } else {\n            return vec![even_values[1]];\n        }\n    }\n\
    \    if even_values.len() == 5 {\n        if even_values[0] < even_values[1] &&\
    \ even_values[1] < even_values[2] && even_values[2] < even_values[3] && even_values[3]\
    \ < even_values[4] {\n            return vec![even_values[0]];\n        } else\
    \ {\n            return vec![even_values[1]];\n        }\n    }\n    if even_values.len()\
    \ == 6 {\n        if even_values[0] < even_values[1] && even_values[1] < even_values[2]\
    \ && even_values[2] < even_values[3] && even_values[3] < even_values[4] && even_values[4]\
    \ < even_values[5] {\n            return vec![even_values[0]];\n        } else\
    \ {\n            return vec![even_values[1]];\n        }\n    }\n    if even_values.len()\
    \ == 7 {\n        if even_values[0] < even_values[1] && even_values[1] < even_values[2]\
    \ && even_values[2] < even_values[3] && even_values[3] < even_values[4] && even_values[4]\
    \ < even_values[5] && even_values[5] < even_values[6] {\n            return vec![even_values[0]];\n\
    \        } else {\n            return vec![even_values[1]];\n        }\n    }\n\
    \    if even_values.len() == 8 {\n        if even_values[0] < even_values[1] && ",
  "    let mut smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_value ==\
    \ 0 {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            } else {\n                if i < smallest_value {\n             \
    \       smallest_value = i;\n                    smallest_index = i;\n       \
    \         }\n            }\n        }\n    }\n    vec![smallest_value, smallest_index]",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value > i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    let mut result: Vec<isize> = vec![];\n    if min_idx != 0 {\n       \
    \ result.push((min_value, min_idx));\n    }\n    result", "    let mut min_even_value\
    \ = arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index_in_arr\
    \ = -1;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if min_even_index == -1 || min_even_index > i {\n                min_even_index\
    \ = i;\n                min_even_index_in_arr = i;\n            }\n        }\n\
    \    }\n    let mut even_values = vec![];\n    for i in arr.iter().rev() {\n \
    \       if i % 2 == 0 {\n            even_values.push(i);\n        }\n    }\n\
    \    if even_values.len() == 0 {\n        return vec![];\n    }\n    if min_even_index\
    \ == -1 {\n        return vec![min_even_value];\n    }\n    if min_even_index_in_arr\
    \ == -1 {\n        return vec![min_even_value];\n    }\n    let mut min_even_index_in_arr2\
    \ = min_even_index_in_arr;\n    let mut min_even_index_in_arr3 = min_even_index_in_arr;\n\
    \    for i in even_values.iter().rev() {\n        if min_even_index_in_arr ==\
    \ -1 {\n            min_even_index_in_arr2 = i;\n        }\n        if min_even_index_in_arr2\
    \ == i {\n            min_even_index_in_arr3 += 1;\n        }\n    }\n    if min_even_index_in_arr3\
    \ == min_even_index_in_arr2 {\n        return vec![min_even_value];\n    }\n \
    \   let mut min_even_index_in_arr4 = min_even_index_in_arr;\n    for i in even_values.iter().rev()\
    \ {\n        if min_even_index_in_arr == -1 {\n            min_even_index_in_arr4\
    \ = i;\n        }\n        if min_even_index_in_arr4 == i {\n            min_even_index_in_arr4\
    \ += 1;\n        }\n    }\n    if min_even_index_in_arr4 == min_even_index_in_arr3\
    \ {\n        return vec![min_even_value];\n    }\n    let mut min_even_index_in_arr5\
    \ = min_even_index_in_arr;\n    for i in even_values.iter().rev() {\n        if\
    \ min_even_index_in_arr == -1 {\n            min_even_index_in_arr5 = i;\n   \
    \     }\n        if min_even_index_in_arr5 == i {\n            min_even_index_in_arr5\
    \ += 1;\n        }\n    }\n    if min_even_index_in_arr5 == min_even_index_in_arr4\
    \ {\n        return vec![min_even_value];\n    }\n    let mut min_even_index_in_arr6\
    \ = min_even_index_in_arr;\n    for i in even_values.iter().rev() {\n        if\
    \ min_even_index_in_arr == -1 {\n            min_even_index_in_arr6 = i;\n   \
    \     }\n        if min_even_index_in_arr6 == i {\n            min_even_index_in_arr6\
    \ += 1;", "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value < i {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    if min_idx == -1 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            if min_value == i {\n                result.push(min_idx);\n    \
    \        }\n        }\n    }\n    result", "    let mut min_value = arr[0];\n\
    \    let mut min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            if min_value == i {\n                min_idx = i;\n       \
    \     }\n            min_value = i;\n        }\n    }\n    let mut result: Vec<isize>\
    \ = vec![];\n    if min_idx != 0 {\n        result.push(min_value);\n        result.push(min_idx);\n\
    \    }\n    result", "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_val <\
    \ i {\n                min_val = i;\n                min_idx = i;\n          \
    \  }\n        }\n    }\n    if min_val == i32::MAX {\n        return vec![];\n\
    \    }\n    let mut result = vec![];\n    for i in arr.iter() {\n        if i\
    \ % 2 == 0 {\n            if min_val < i {\n                result.push(i);\n\
    \            }\n        }\n    }\n    if result.len() == 0 {\n        return vec![];\n\
    \    }\n    if min_idx == -1 {\n        return vec![min_val];\n    }\n    let\
    \ mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for i in result.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_val < i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == i32::MAX {\n        return vec![];\n    }\n    vec![min_val, min_idx]",
  "    let mut smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n\
    \    let mut even_value: Vec<isize> = Vec::new();\n    for &i in arr {\n     \
    \   if i % 2 == 0 {\n            even_value.push(i);\n        }\n        if i\
    \ == smallest_value {\n            smallest_index = arr.iter().position(|&i| i\
    \ == smallest_value);\n        }\n        if i == smallest_value {\n         \
    \   smallest_value = i;\n        }\n    }\n    if even_value.len() == 0 {\n  \
    \      return vec![];\n    }\n    if even_value.len() == 1 {\n        return vec![even_value[0]];\n\
    \    }\n    if even_value.len() == 2 {\n        return vec![even_value[0], even_value[1]];\n\
    \    }\n    if even_value.len() == 3 {\n        return vec![even_value[0], even_value[1],\
    \ even_value[2]];\n    }\n    if even_value.len() == 4 {\n        return vec![even_value[0],\
    \ even_value[1], even_value[2], even_value[3]];\n    }\n    if even_value.len()\
    \ == 5 {\n        return vec![even_value[0], even_value[1], even_value[2], even_value[3],\
    \ even_value[4]];\n    }\n    if even_value.len() == 6 {\n        return vec![even_value[0],\
    \ even_value[1], even_value[2], even_value[3], even_value[4], even_value[5]];\n\
    \    }\n    if even_value.len() == 7 {\n        return vec![even_value[0], even_value[1],\
    \ even_value[2], even_value[3], even_value[4], even_value[5], even_value[6]];\n\
    \    }\n    if even_value.len() == 8 {\n        return vec![even_value[0], even_value[1],\
    \ even_value[2], even_value[3], even_value[4], even_value[5], even_value[6], even_value[7]];\n\
    \    }\n    if even_value.len() == 9 {\n        return vec![even_value[0], even_value[1],\
    \ even_value[2], even_value[3], even_value[4], even_value[5], even_value[6], even_value[7],\
    \ even_value[8]];\n    }\n    if even_value.len() == 10 {\n        return vec![even_value[0],\
    \ even_value[1], even_value[2], even_value[3], even_value[4], even_value[5], even_value[6],\
    \ even_value[7], even_value[8], even_value[9]];\n    }\n    if even_value.len()\
    \ == 11 {\n        return vec![even_value[0], even_value[1], even_value[2], even_value[3],\
    \ even_value[4], even_value[5], even_value[6], even_value[7], even_value[8], even_value[9],\
    \ even_value[10]];\n    }\n    if ", "    let mut min_value = arr[0];\n    let\
    \ mut min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n\
    \            if min_value < i {\n                min_value = i;\n            \
    \    min_idx = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]",
  "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_index = -1;\n    let mut even_value_count = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            even_value_count += 1;\n \
    \           if even_value_count == 1 {\n                smallest_even_value =\
    \ i;\n                smallest_even_index = i;\n                smallest_index\
    \ = i;\n            }\n        } else {\n            even_value_count -= 1;\n\
    \        }\n    }\n    if even_value_count == 0 {\n        return vec![];\n  \
    \  }\n    if even_value_count == 1 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 2 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 3 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 4 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 5 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 6 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 7 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 8 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 9 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 10 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 11 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 12 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 13 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 14 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 15 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 16 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 17 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 18 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 19 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 20 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 21 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 22 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_value_count == 23 {\n        return vec![smallest_even", " \
    \   let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            if min_value < i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    let\
    \ mut result: Vec<isize> = vec![];\n    if min_idx != 0 {\n        result.push(min_value);\n\
    \        result.push(min_idx);\n    }\n    result", "    let mut min_value = i32::MAX;\n\
    \    let mut min_node = 0;\n    let mut min_node_index = 0;\n    let mut min_node_indexes:\
    \ Vec<isize> = Vec::new();\n    for i in 0..arr.len() {\n        if arr[i] < min_value\
    \ {\n            min_value = arr[i];\n            min_node = i;\n        }\n \
    \       if arr[i] == min_value {\n            min_node_indexes.push(min_node);\n\
    \        }\n    }\n    if min_node_indexes.len() == 0 {\n        return vec![];\n\
    \    }\n    min_node_indexes.sort();\n    min_node_indexes.reverse();\n    min_node_indexes.pop();\n\
    \    min_node_indexes.push(min_node);\n    min_node_indexes", "    let mut even_values\
    \ = vec![0; arr.len()];\n    let mut min_value = arr[0];\n    let mut min_index\
    \ = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n          \
    \  even_values[i] = arr[i];\n            if arr[i] < min_value {\n           \
    \     min_value = arr[i];\n                min_index = i;\n            }\n   \
    \     }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut smallest_value = even_values[0];\n    let mut smallest_index = 0;\n\
    \    for i in 0..even_values.len() {\n        if even_values[i] < smallest_value\
    \ {\n            smallest_value = even_values[i];\n            smallest_index\
    \ = i;\n        }\n    }\n    let mut result = vec![];\n    for i in 0..even_values.len()\
    \ {\n        if even_values[i] == smallest_value {\n            result.push(i);\n\
    \        }\n    }\n    if result.len() == 0 {\n        return vec![];\n    }\n\
    \    result.push(smallest_index);\n    result", "    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = -1;\n    let mut smallest_even_index_in_list\
    \ = -1;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if smallest_even_value < i {\n                smallest_even_value = i;\n  \
    \              smallest_even_index = i;\n                smallest_even_index_in_list\
    \ = i;\n            }\n        }\n    }\n    if smallest_even_index_in_list ==\
    \ -1 {\n        return vec![];\n    }\n    let mut smallest_even_index_in_list_2\
    \ = smallest_even_index_in_list;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if smallest_even_value == i {\n                smallest_even_index_in_list_2\
    \ = i;\n            }\n        }\n    }\n    let mut smallest_even_index_in_list_3\
    \ = smallest_even_index_in_list_2;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if smallest_even_value == i {\n                smallest_even_index_in_list_3\
    \ = i;\n            }\n        }\n    }\n    let mut smallest_even_index_in_list_4\
    \ = smallest_even_index_in_list_3;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if smallest_even_value == i {\n                smallest_even_index_in_list_4\
    \ = i;\n            }\n        }\n    }\n    let mut smallest_even_index_in_list_5\
    \ = smallest_even_index_in_list_4;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if smallest_even_value == i {\n                smallest_even_index_in_list_5\
    \ = i;\n            }\n        }\n    }\n    let mut smallest_even_index_in_list_6\
    \ = smallest_even_index_in_list_5;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if smallest_even_value == i {\n                smallest_even_index_in_list_6\
    \ = i;\n            }\n        }\n    }\n    let mut smallest_even_index_in_list_7\
    \ = smallest_even_index_in_list_6;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if smallest_even_value == i {\n                smallest_even_index_in_list_7\
    \ = i;\n            }\n        }\n    }\n    let mut smallest_even_index_in_list_8\
    \ = smallest_even_index_in_list_7;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if smallest_even_value == i {\n                smallest_even_index_in_list_8\
    \ = i;\n            }\n        }\n    }\n    let mut smallest_even_index_in_list_9\
    \ = smallest_even_index_in_list_8;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    let mut min_idx = arr.iter().min_by_key(|&x| {\n        if x % 2 == 0 {\n\
    \            min_value = x;\n            min_idx = 0;\n            true\n    \
    \    } else {\n            false\n        }\n    });\n    if min_idx != arr.len()\
    \ {\n        min_value = arr[min_idx];\n    }\n    let mut mut_arr = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    mut_arr[min_idx] = min_value;\n    mut_arr", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![smallest_value, smallest_index];\n    }\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = even_values[0];\n    for\
    \ i in even_values.iter().rev() {\n        if i % 2 == 0 {\n            if i <\
    \ smallest_even_value {\n                smallest_even_value = i;\n          \
    \      smallest_even_index = i;\n            }\n        }\n    }\n    let mut\
    \ smallest_even_index_in_list = 0;\n    for i in even_values.iter().rev() {\n\
    \        if i == smallest_even_index {\n            smallest_even_index_in_list\
    \ += 1;\n        }\n    }\n    vec![smallest_value, smallest_index, smallest_even_index_in_list]",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr {\n\
    \        if i % 2 == 0 {\n            if min_value < i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    let\
    \ mut result = vec![min_value, min_idx];\n    if arr.len() == 0 {\n        return\
    \ result;\n    }\n    for i in arr {\n        if i % 2 == 0 {\n            if\
    \ min_value < i {\n                min_value = i;\n                min_idx = i;\n\
    \            }\n        }\n    }\n    result.push(min_value, min_idx);\n    result",
  "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    vec![min_value, min_idx]", "    let mut smallest_value: isize = 0;\n\
    \    let mut smallest_index: usize = 0;\n    for &i in arr {\n        if i % 2\
    \ == 0 {\n            if smallest_value == 0 {\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            } else {\n          \
    \      if i < smallest_value {\n                    smallest_value = i;\n    \
    \                smallest_index = i;\n                }\n            }\n     \
    \   }\n    }\n    let mut result: Vec<isize> = vec![];\n    if smallest_value\
    \ % 2 == 0 {\n        result.push(smallest_value);\n        result.push(smallest_index);\n\
    \    } else {\n        result.push(smallest_index);\n    }\n    result", "   \
    \ let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let mut\
    \ even_values = Vec::new();\n    for i in arr.iter() {\n        if i % 2 == 0\
    \ {\n            even_values.push(i);\n        }\n        if i == smallest_value\
    \ {\n            smallest_index = i;\n        }\n        if i == smallest_value\
    \ && i % 2 != 0 {\n            smallest_value = i;\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter() {\n   \
    \     if i == smallest_value {\n            smallest_even_index = i;\n       \
    \ }\n        if i == smallest_value && i % 2 != 0 {\n            smallest_even_value\
    \ = i;\n        }\n    }\n    vec![smallest_value, smallest_index, smallest_even_value]",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for i in even_values.iter() {\n        if i % 2 == 0 {\n         \
    \   if i < smallest_even_value {\n                smallest_even_value = i;\n \
    \               smallest_even_index = i;\n            }\n        }\n    }\n  \
    \  let mut result = vec![];\n    for i in arr.iter() {\n        if i == smallest_value\
    \ {\n            result.push(i);\n        }\n    }\n    if result.len() == 0 {\n\
    \        return vec![];\n    }\n    result.push(smallest_even_value);\n    result.push(smallest_even_index);\n\
    \    result", "    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mu", "    let mut even_values = vec![];\n    let mut smallest_value =\
    \ arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value_even = even_values[0];\n\
    \    let mut smallest_index_even = even_values[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_value_even {\n     \
    \           smallest_value_even = i;\n                smallest_index_even = i;\n\
    \            }\n        }\n    }\n    let mut even_values_sorted = even_values.clone();\n\
    \    even_values_sorted.sort();\n    let mut even_values_sorted_index = even_values.clone();\n\
    \    even_values_sorted_index.sort();\n    let mut even_values_sorted_index_index\
    \ = even_values.clone();\n    even_values_sorted_index_index.sort();\n    let\
    \ mut even_values_sorted_index_index_index = even_values.clone();\n    even_values_sorted_index_index_index.sort();\n\
    \    let mut even_values_sorted_index_index_index_index = even_values.clone();\n\
    \    even_values_sorted_index_index_index_index.sort();\n    let mut even_values_sorted_index_index_index_index_index\
    \ = even_values.clone();\n    even_values_sorted_index_index_index_index_index.sort();\n\
    \    let mut even_values_sorted_index_index_index_index_index_index = even_values.clone();\n\
    \    even_values_sorted_index_index_index_index_index_index.sort();\n    let mut\
    \ even_values_sorted_index_index_index_index_index_index_index = even_values.clone();\n\
    \    even_values_sorted_index_index_index_index_index_index_index_index.sort();\n\
    \    let mut even_values_sorted_index_index_index_index_index_index_index_index\
    \ = even_values.clone();\n    even_values_sorted_index_index_index_index_index_index_index_index_index.sort();\n\
    \    let mut even_values_sorted_index_index_index_index_index_index_index_index_index\
    \ = even_values.clone();\n    even_values_sorted_index_index_index_index_index_index_index_index_index_index_index.sort();\n\
    \    let mut even_values_sorted_index_index_index_index_index_index_index_index_index_index\
    \ = even_values.clone();\n    even_values_sorted_index_index_index_index_index_index_index_index_index_index_index_index.sort();\n\
    \    let mut even_values_sorted_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = even_value", "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if min_value < i {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    if min_idx == -1 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n  \
    \      if arr[i] == min_idx {\n            result.push(min_value);\n         \
    \   i += 1;\n        } else {\n            i += 1;\n        }\n    }\n    result",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    let mut smallest_index2 = 0;\n    let mut smallest_index3\
    \ = 0;\n    let mut smallest_index4 = 0;\n    let mut smallest_index5 = 0;\n \
    \   let mut smallest_index6 = 0;\n    let mut smallest_index7 = 0;\n    let mut\
    \ smallest_index8 = 0;\n    let mut smallest_index9 = 0;\n    let mut smallest_index10\
    \ = 0;\n    let mut smallest_index11 = 0;\n    let mut smallest_index12 = 0;\n\
    \    let mut smallest_index13 = 0;\n    let mut smallest_index14 = 0;\n    let\
    \ mut smallest_index15 = 0;\n    let mut smallest_index16 = 0;\n    let mut smallest_index17\
    \ = 0;\n    let mut smallest_index18 = 0;\n    let mut smallest_index19 = 0;\n\
    \    let mut smallest_index20 = 0;\n    let mut smallest_index21 = 0;\n    let\
    \ mut smallest_index22 = 0;\n    let mut smallest_index23 = 0;\n    let mut smallest_index24\
    \ = 0;\n    let mut smallest_index25 = 0;\n    let mut smallest_index26 = 0;\n\
    \    let mut smallest_index27 = 0;\n    let mut smallest_index28 = 0;\n    let\
    \ mut smallest_index29 = 0;\n    let mut smallest_index30 = 0;\n    let mut smallest_index31\
    \ = 0;\n    let mut smallest_index32 = 0;\n    let mut smallest_index33 = 0;\n\
    \    let mut smallest_index34 = 0;\n    let mut smallest_index35 = 0;\n    let\
    \ mut smallest_index36 = 0;\n    let mut smallest_index37 = 0;\n    let mut smallest_index38\
    \ = 0;\n    let mut smallest_index39 = 0;\n    let mut smallest_index40 = 0;\n\
    \    let mut smallest_index41 = 0;\n    let mut smallest_index42 = 0;\n    let\
    \ mut smallest_index43 = 0;\n    let mut smallest_index44 = 0;\n    let mut smallest_index45\
    \ = 0;\n    let mut smallest_index46 = 0;\n    let mut smallest_index47 = 0;\n\
    \    let mut smallest_index48 = 0;\n    let mut smallest_index49 = 0;\n    let\
    \ mut smallest_index50 = 0;\n    let mut smallest_index51 = 0;\n    let mut smallest_index52\
    \ = 0;\n    let mut smallest_index53 = 0;\n    let mut smallest_index54 = 0;\n\
    \    let mut smallest_index55 = 0;\n    let mut ", "    let mut min_value = arr[0];\n\
    \    let mut min_idx = 1;\n    let mut min_idx = 1;\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            if min_value > i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        } else {\n      \
    \      if min_value < i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    let mut result = vec![min_value,\
    \ min_idx];\n    if min_value == 0 {\n        return vec![];\n    }\n    for &i\
    \ in arr {\n        if i % 2 == 0 {\n            if min_value > i {\n        \
    \        min_value = i;\n                min_idx = i;\n            }\n       \
    \ } else {\n            if min_value < i {\n                min_value = i;\n \
    \               min_idx = i;\n            }\n        }\n    }\n    let mut result\
    \ = vec![min_value, min_idx];\n    if min_value == 0 {\n        return vec![];\n\
    \    }\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_value\
    \ > i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        } else {\n            if min_value < i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    let\
    \ mut result = vec![min_value, min_idx];\n    if min_value == 0 {\n        return\
    \ vec![];\n    }\n    for &i in arr {\n        if i % 2 == 0 {\n            if\
    \ min_value > i {\n                min_value = i;\n                min_idx = i;\n\
    \            }\n        } else {\n            if min_value < i {\n           \
    \     min_value = i;\n                min_idx = i;\n            }\n        }\n\
    \    }\n    let mut result = vec![min_value, min_idx];\n    if min_value == 0\
    \ {\n        return vec![];\n    }\n    for &i in arr {\n        if i % 2 == 0\
    \ {\n            if min_value > i {\n                min_value = i;\n        \
    \        min_idx = i;\n            }\n        } else {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    let mut result = vec![min_value, min_idx];\n \
    \   if min_value == 0 {\n        return vec![];\n    }\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            if min_value > i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        } else {\n      \
    \      if min_value < i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    let mut result = vec![min_value,\
    \ min_idx];\n    if min_value == 0 {\n        return vec![];\n    }\n    for &i\
    \ in arr {\n        if i % 2 == 0 {\n            if min_value > i {\n        \
    \        min_value = i;\n                min_idx = i;\n            }", "    let\
    \ mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr {\n   \
    \     if i % 2 == 0 {\n            if min_val < i {\n                min_val =\
    \ i;\n                min_idx = i;\n            }\n        }\n    }\n    if min_val\
    \ == i32::MAX {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    for i in arr {\n        if i == min_val {\n            result.push(min_idx);\n\
    \        }\n    }\n    result", "    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            if smallest_value < i {\n                smallest_value = i;\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    let\
    \ mut result: Vec<isize> = vec![];\n    if smallest_index != 0 {\n        result.push(smallest_value);\n\
    \        result.push(smallest_index);\n    }\n    result", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for &i in even_values {\n        if\
    \ i < smallest_even_value {\n            smallest_even_value = i;\n          \
    \  smallest_even_index = i;\n        }\n    }\n    vec![smallest_value, smallest_even_index]",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for i in even_values.iter() {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    vec![smallest_value, smallest_even_index]", "    let mut\
    \ min_value = i32::MAX;\n    let mut min_value_index = -1;\n    let mut min_value_index2\
    \ = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ == i32::MAX {\n                min_value = i;\n                min_value_index\
    \ = i;\n            } else {\n                if i < min_value {\n           \
    \         min_value = i;\n                    min_value_index = i;\n         \
    \       }\n            }\n        } else {\n            if min_value == i32::MAX\
    \ {\n                min_value = i;\n                min_value_index2 = i;\n \
    \           } else {\n                if i < min_value {\n                   \
    \ min_value = i;\n                    min_value_index2 = i;\n                }\n\
    \            }\n        }\n    }\n    let mut result = vec![min_value];\n    if\
    \ min_value_index != min_value_index2 {\n        result.push(min_value_index);\n\
    \    }\n    result", "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_even_index_in_arr = 0;\n    let mut smallest_even_index_in_arr2\
    \ = 0;\n    let mut smallest_even_index_in_arr3 = 0;\n    let mut smallest_even_index_in_arr4\
    \ = 0;\n    let mut smallest_even_index_in_arr5 = 0;\n    let mut smallest_even_index_in_arr6\
    \ = 0;\n    let mut smallest_even_index_in_arr7 = 0;\n    let mut smallest_even_index_in_arr8\
    \ = 0;\n    let mut smallest_even_index_in_arr9 = 0;\n    let mut smallest_even_index_in_arr10\
    \ = 0;\n    let mut smallest_even_index_in_arr11 = 0;\n    let mut smallest_even_index_in_arr12\
    \ = 0;\n    let mut smallest_even_index_in_arr13 = 0;\n    let mut smallest_even_index_in_arr14\
    \ = 0;\n    let mut smallest_even_index_in_arr15 = 0;\n    let mut smallest_even_index_in_arr16\
    \ = 0;\n    let mut smallest_even_index_in_arr17 = 0;\n    let mut smallest_even_index_in_arr18\
    \ = 0;\n    let mut smallest_even_index_in_arr19 = 0;\n    let mut smallest_even_index_in_arr20\
    \ = 0;\n    let mut smallest_even_index_in_arr21 = 0;\n    let mut smallest_even_index_in_arr22\
    \ = 0;\n    let mut smallest_even_index_in_arr23 = 0;\n    let mut smallest_even_index_in_arr24\
    \ = 0;\n    let mut smallest_even_index_in_arr25 = 0;\n    let mut smallest_even_index_in_arr26\
    \ = 0;\n    let mut smallest_even_index_in_arr27 = 0;\n    let mut smallest_even_index_in_arr28\
    \ = 0;\n    let mut smallest_even_index_in_arr29 = 0;\n    let mut smallest_even_index_in_arr30\
    \ = 0;\n    let mut smallest_even_index_in_arr31 = 0;\n    let mut smallest_even_index_in_arr32\
    \ = 0;\n    let mut smallest_even_index_in_arr33 = 0;\n    let mut smallest_even_index_in_arr34\
    \ = 0;\n    let mut smallest_even_index_in_arr35 = 0;\n    let mut smallest_even_index_in_arr36\
    \ = 0;\n    let mut smallest_even_index_in_arr37 = 0;\n    let mut smallest_even_index_in_arr38\
    \ = 0;\n    let mut smallest_even_index_in_arr39 = 0;\n    let mut smallest_even_index_in_arr40\
    \ = 0;\n    let mut smallest_even_index_in_arr41 = 0;\n    let mut smallest_even",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if smallest_value\
    \ < i {\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    vec![smallest_value, smallest_index]",
  "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    if min_value == i32::MAX {\n        return vec![];\n    }\n    let mut\
    \ result = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n     \
    \       if min_value == i {\n                result.push(min_idx);\n         \
    \   } else {\n                result.push(i);\n            }\n        }\n    }\n\
    \    result", "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n  \
    \  for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_val < i\
    \ {\n                min_val = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    if min_val == i32::MAX {\n        return vec![];\n    }\n\
    \    let mut result = vec![];\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            if min_val < i {\n                result.push(i);\n       \
    \     }\n        }\n    }\n    result.push(min_val);\n    result.push(min_idx);\n\
    \    result", "    let mut min_value = arr[0];\n    let mut min_value_index =\
    \ -1;\n    let mut even_values = Vec::new();\n    for i in arr.iter() {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n        }\n        if\
    \ i == min_value {\n            min_value_index = i;\n        }\n        if i\
    \ == min_value {\n            min_value = i;\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if min_value_index == -1 {\n    \
    \    return vec![min_value];\n    }\n    let mut min_value_index = min_value_index;\n\
    \    for i in even_values.iter() {\n        if i < min_value_index {\n       \
    \     min_value_index = i;\n        }\n    }\n    vec![min_value, min_value_index]",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < smallest_value {\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = even_values[0];\n    for i in even_values.iter() {\n \
    \       if i < smallest_even_value {\n            smallest_even_value = i;\n \
    \           smallest_even_index = i;\n        }\n    }\n    vec![smallest_value,\
    \ smallest_even_index]", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = -1;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if min_value == i {\n                min_idx = i;\n            } else {\n \
    \               min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    vec![min_value, min_idx]", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter() {\n   \
    \     if i < smallest_even_value {\n            smallest_even_value = i;\n   \
    \         smallest_even_index = i;\n        }\n    }\n    return vec![smallest_value,\
    \ smallest_index];", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    let mut result = vec![];\n    if min_idx != arr.len()\
    \ {\n        result.push((min_value, min_idx));\n    }\n    result", "    let\
    \ mut min_val = arr[0];\n    let mut min_idx = -1;\n    let mut min_even_val =\
    \ false;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n         \
    \   if min_even_val {\n                min_even_val = false;\n               \
    \ min_idx = i;\n            } else {\n                min_even_val = true;\n \
    \               min_val = i;\n            }\n        }\n    }\n    if min_even_val\
    \ {\n        vec![min_val, min_idx]\n    } else {\n        vec![]\n    }", " \
    \   let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            if min_value < i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    let\
    \ mut result = vec![min_value, min_idx];\n    if min_idx != arr.len() {\n    \
    \    result.push(min_idx);\n    }\n    result", "    let mut smallest_value =\
    \ arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_even_value =\
    \ false;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n         \
    \   if smallest_even_value\n                && smallest_value >= i\n         \
    \       && smallest_index > 0\n            {\n                smallest_even_value\
    \ = false;\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            } else {\n                smallest_even_value = true;\n  \
    \              smallest_value = i;\n                smallest_index = i;\n    \
    \        }\n        } else {\n            if smallest_even_value\n           \
    \     && smallest_value >= i\n                && smallest_index > 0\n        \
    \    {\n                smallest_even_value = false;\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            } else {\n          \
    \      smallest_even_value = true;\n                smallest_value = i;\n    \
    \            smallest_index = i;\n            }\n        }\n    }\n    smallest_index\n\
    \        .iter()\n        .map(|x| {\n            if x == 0 {\n              \
    \  0\n            } else {\n                x\n            }\n        })\n   \
    \     .collect()", "    let mut min_value = arr[0];\n    let mut min_idx = 1;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if min_value % 2 ==\
    \ 0 {\n                min_value = i;\n                min_idx = i;\n        \
    \    } else {\n                if min_idx > i {\n                    min_value\
    \ = i;\n                    min_idx = i;\n                }\n            }\n \
    \       }\n    }\n    let mut result = vec![];\n    if min_value % 2 == 0 {\n\
    \        result.push(min_value);\n        result.push(min_idx);\n    } else {\n\
    \        let mut min_value = min_value;\n        let mut min_idx = min_idx;\n\
    \        for &i in arr {\n            if i % 2 == 0 {\n                if min_value\
    \ % 2 == 0 {\n                    min_value = i;\n                    min_idx\
    \ = i;\n                } else {\n                    if min_idx > i {\n     \
    \                   min_value = i;\n                        min_idx = i;\n   \
    \                 }\n                }\n            }\n        }\n        result.push(min_value);\n\
    \        result.push(min_idx);\n    }\n    result", "    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mu", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let\
    \ mut smallest_index2 = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n   \
    \         even_values.push(i);\n        }\n        if i == smallest_value {\n\
    \            smallest_index = i;\n        }\n        if i == smallest_index {\n\
    \            smallest_index2 = i;\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![smallest_value, smallest_index];\n    }\n    if even_values.len()\
    \ == 2 {\n        if smallest_index2 < smallest_index {\n            return vec![smallest_value,\
    \ smallest_index];\n        }\n        return vec![smallest_value, smallest_index2];\n\
    \    }\n    if even_values.len() == 3 {\n        if smallest_index2 < smallest_index\
    \ {\n            return vec![smallest_value, smallest_index];\n        }\n   \
    \     if smallest_index2 > smallest_index {\n            return vec![smallest_value,\
    \ smallest_index2];\n        }\n        return vec![smallest_value, smallest_index];\n\
    \    }\n    if even_values.len() == 4 {\n        if smallest_index2 < smallest_index\
    \ {\n            return vec![smallest_value, smallest_index];\n        }\n   \
    \     if smallest_index2 > smallest_index {\n            return vec![smallest_value,\
    \ smallest_index2];\n        }\n        if smallest_index2 > smallest_index {\n\
    \            return vec![smallest_value, smallest_index];\n        }\n       \
    \ return vec![smallest_value, smallest_index2];\n    }\n    if even_values.len()\
    \ == 5 {\n        if smallest_index2 < smallest_index {\n            return vec![smallest_value,\
    \ smallest_index];\n        }\n        if smallest_index2 > smallest_index {\n\
    \            return vec![smallest_value, smallest_index2];\n        }\n      \
    \  if smallest_index2 > smallest_index {\n            return vec![smallest_value,\
    \ smallest_index];\n        }\n        if smallest_index2 > smallest_index {\n\
    \            return vec![smallest_value, smallest_index2];\n        }\n      \
    \  return vec![smallest_value, smallest_index];\n    }\n    if even_values.len()\
    \ == 6 {\n        if smallest_index2 < smallest_index {\n            return vec![smallest_value,\
    \ smallest_index];\n        }\n        if smallest_index2 > smallest_index {\n\
    \            return vec![smallest_value, smallest_index2];\n        }\n      \
    \  if smallest_index2 > smallest_index {\n            return ", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2 = 0;\n    let mut\
    \ min_idx3 = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if\
    \ min_value == i {\n                min_idx = i;\n            }\n            if\
    \ min_idx == i {\n                min_idx2 = i;\n            }\n            if\
    \ min_idx2 == i {\n                min_idx3 = i;\n            }\n        }\n \
    \   }\n    if min_idx == min_idx2 && min_idx2 == min_idx3 {\n        return vec![min_idx,\
    \ min_idx2, min_idx3];\n    }\n    if min_idx == min_idx2 {\n        return vec![min_idx,\
    \ min_idx2];\n    }\n    if min_idx == min_idx3 {\n        return vec![min_idx,\
    \ min_idx3];\n    }\n    return vec![];", "    let mut min_value = i32::MAX;\n\
    \    let mut min_idx = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            if min_value < i {\n                min_value = i;\n            \
    \    min_idx = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let\
    \ mut smallest_even_value = false;\n    for &i in arr {\n        if i % 2 == 0\
    \ {\n            if smallest_even_value\n                || (smallest_value ==\
    \ 0 && smallest_index == 0)\n            {\n                smallest_even_value\
    \ = true;\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            } else {\n                if smallest_value < i {\n      \
    \              smallest_even_value = true;\n                    smallest_value\
    \ = i;\n                    smallest_index = i;\n                }\n         \
    \   }\n        }\n    }\n    if smallest_even_value\n        || (smallest_value\
    \ == 0 && smallest_index == 0)\n    {\n        return vec![];\n    }\n    vec![smallest_value,\
    \ smallest_index]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = even_values.iter().position(|&x| x < smallest_even_value).unwrap();\n\
    \    for i in even_values.iter() {\n        if i % 2 == 0 {\n            if i\
    \ < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    vec![smallest_value, smallest_index,\
    \ smallest_even_value]", "    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    let mut smallest_even_value = false;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            if smallest_even_value\n                && smallest_value\
    \ <= i\n                && smallest_value < i\n            {\n               \
    \ smallest_even_value = false;\n                smallest_value = i;\n        \
    \        smallest_index = i;\n            }\n        } else {\n            smallest_even_value\
    \ = true;\n        }\n    }\n    smallest_index\n        .to_vec()\n        .iter()\n\
    \        .cloned()\n        .cloned()\n        .collect::<Vec<_>>()", "    let\
    \ mut min_even_value = arr[0];\n    let mut min_even_index = arr[0];\n    for\
    \ i in 1..arr.len() {\n        if arr[i] % 2 == 0 {\n            if min_even_value\
    \ < arr[i] {\n                min_even_value = arr[i];\n                min_even_index\
    \ = i;\n            }\n        }\n    }\n    let mut result = vec![];\n    if\
    \ min_even_value == 0 {\n        return result;\n    }\n    for i in 0..arr.len()\
    \ {\n        if arr[i] == min_even_value {\n            result.push(min_even_index);\n\
    \        }\n    }\n    result", "    let mut even_values = Vec::new();\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < min_value {\n                min_value = i;\n                min_idx = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut min_even_value = even_values[even_values.len() -\
    \ 1];\n    let mut min_even_idx = -1;\n    for i in even_values.iter() {\n   \
    \     if i < min_value {\n            min_even_value = i;\n            min_even_idx\
    \ = i;\n        }\n    }\n    let mut min_idx = -1;\n    for i in even_values.iter()\
    \ {\n        if i == min_value {\n            min_idx = i;\n        }\n    }\n\
    \    vec![min_even_value,min_idx]", "    let mut even_values = Vec::new();\n \
    \   let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n   \
    \         if i < smallest_value {\n                smallest_value = i;\n     \
    \           smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value_and_index\
    \ = vec![];\n    for &i in even_values {\n        if i == smallest_value {\n \
    \           smallest_value_and_index.push((i, smallest_index));\n        }\n \
    \   }\n    smallest_value_and_index.sort_by_key(|&(_, index)| index);\n    smallest_value_and_index.iter().cloned().collect()",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if smallest_value\
    \ < i {\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    vec![smallest_value, smallest_index]",
  "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    vec![min_value, min_idx]", "    let mut min_value = i32::MAX;\n    let\
    \ mut min_idx = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n     \
    \       if min_value < i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    let mut result = vec![];\n    if\
    \ min_value == i32::MAX {\n        return result;\n    }\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_value == i {\n              \
    \  result.push(min_idx);\n                break;\n            }\n        }\n \
    \   }\n    result", "    let mut min_value = i32::MAX;\n    let mut min_idx =\
    \ -1;\n    for i in arr.iter() {\n        if *i < *min_value {\n            min_value\
    \ = *i;\n            min_idx = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    if min_idx != -1 {\n        result.push(min_value);\n        result.push(min_idx);\n\
    \    }\n    result", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for i in even_values.iter() {\n        if i %\
    \ 2 == 0 {\n            if i < smallest_even_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n        }\n \
    \   }\n    return vec![smallest_value, smallest_index, smallest_even_value,\n\
    \                smallest_even_index];", "    let mut min_value = arr[0];\n  \
    \  let mut min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            if min_value >= i {\n                min_value = i;\n     \
    \           min_idx = i;\n            }\n        }\n    }\n    let mut result\
    \ = vec![min_value, min_idx];\n    if arr.len() == 0 {\n        return result;\n\
    \    }\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n           \
    \ if min_value >= i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    for i in arr.iter().rev() {\n   \
    \     if i % 2 == 0 {\n            if min_value >= i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value >=\
    \ i {\n                min_value = i;\n                min_idx = i;\n        \
    \    }\n        }\n    }\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            if min_value >= i {\n                min_value = i;\n     \
    \           min_idx = i;\n            }\n        }\n    }\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value >= i {\n              \
    \  min_value = i;\n                min_idx = i;\n            }\n        }\n  \
    \  }\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if\
    \ min_value >= i {\n                min_value = i;\n                min_idx =\
    \ i;\n            }\n        }\n    }\n    for i in arr.iter().rev() {\n     \
    \   if i % 2 == 0 {\n            if min_value >= i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value >=\
    \ i {\n                min_value = i;\n                min_idx = i;\n        \
    \    }\n        }\n    }\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            if min_value >= i {\n                min_value = i;\n     \
    \           min_idx = i;\n            }\n        }\n    }\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value >= i {\n              \
    \  min_value = i;\n                min_idx = i;\n            }\n        }\n  \
    \  }\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if\
    \ min_value >= i {\n                min_value = i;\n                min_idx =\
    \ i;\n            }\n        }\n    }\n    for i in arr.iter().rev() {\n     \
    \   if i % 2 == 0 {\n            if min_value >= i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value >=\
    \ i {\n", "    let mut min_even_value = arr[0];\n    let mut min_even_index =\
    \ arr[0];\n    let mut min_even_index_count = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            if min_even_value < i {\n                min_even_value\
    \ = i;\n                min_even_index = i;\n                min_even_index_count\
    \ = 1;\n            } else {\n                min_even_index_count += 1;\n   \
    \         }\n        }\n    }\n    if min_even_index_count == 0 {\n        return\
    \ vec![];\n    }\n    let mut min_even_index_with_min_value = min_even_index;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if min_even_value ==\
    \ i {\n                min_even_index_with_min_value = i;\n            }\n   \
    \     }\n    }\n    let mut min_even_index_with_min_value_count = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            if min_even_value == i {\n\
    \                min_even_index_with_min_value_count += 1;\n            }\n  \
    \      }\n    }\n    if min_even_index_with_min_value_count == 0 {\n        return\
    \ vec![];\n    }\n    if min_even_index_with_min_value == min_even_index {\n \
    \       return vec![min_even_value];\n    }\n    if min_even_index_with_min_value\
    \ == min_even_index_with_min_value {\n        return vec![min_even_index_with_min_value];\n\
    \    }\n    if min_even_index_with_min_value == min_even_index_with_min_value_count\
    \ {\n        return vec![min_even_index_with_min_value, min_even_index_with_min_value];\n\
    \    }\n    return vec![min_even_index_with_min_value, min_even_index_with_min_value,\
    \ min_even_index_with_min_value_count];", "    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mu", "    let mut min_value = arr[0];\n\
    \    let mut min_value_index = 0;\n    let mut min_value_index2 = 0;\n    let\
    \ mut min_value_index3 = 0;\n    let mut min_value_index4 = 0;\n    let mut min_value_index5\
    \ = 0;\n    let mut min_value_index6 = 0;\n    let mut min_value_index7 = 0;\n\
    \    let mut min_value_index8 = 0;\n    let mut min_value_index9 = 0;\n    let\
    \ mut min_value_index10 = 0;\n    let mut min_value_index11 = 0;\n    let mut\
    \ min_value_index12 = 0;\n    let mut min_value_index13 = 0;\n    let mut min_value_index14\
    \ = 0;\n    let mut min_value_index15 = 0;\n    let mut min_value_index16 = 0;\n\
    \    let mut min_value_index17 = 0;\n    let mut min_value_index18 = 0;\n    let\
    \ mut min_value_index19 = 0;\n    let mut min_value_index20 = 0;\n    let mut\
    \ min_value_index21 = 0;\n    let mut min_value_index22 = 0;\n    let mut min_value_index23\
    \ = 0;\n    let mut min_value_index24 = 0;\n    let mut min_value_index25 = 0;\n\
    \    let mut min_value_index26 = 0;\n    let mut min_value_index27 = 0;\n    let\
    \ mut min_value_index28 = 0;\n    let mut min_value_index29 = 0;\n    let mut\
    \ min_value_index30 = 0;\n    let mut min_value_index31 = 0;\n    let mut min_value_index32\
    \ = 0;\n    let mut min_value_index33 = 0;\n    let mut min_value_index34 = 0;\n\
    \    let mut min_value_index35 = 0;\n    let mut min_value_index36 = 0;\n    let\
    \ mut min_value_index37 = 0;\n    let mut min_value_index38 = 0;\n    let mut\
    \ min_value_index39 = 0;\n    let mut min_value_index40 = 0;\n    let mut min_value_index41\
    \ = 0;\n    let mut min_value_index42 = 0;\n    let mut min_value_index43 = 0;\n\
    \    let mut min_value_index44 = 0;\n    let mut min_value_index45 = 0;\n    let\
    \ mut min_value_index46 = 0;\n    let mut min_value_index47 = 0;\n    let mut\
    \ min_value_index48 = 0;\n    let mut min_value_index49 = 0;\n    let mut min_value_index50\
    \ = 0;\n    let mut min_value_index51 = 0;\n    let mut min_value_index52 = 0;\n\
    \    let mut min_value_index53 = 0;\n    let mut min_value_index54 = 0;\n    let\
    \ mut min_value_index55 = 0;\n    let mut min_value_index56 = 0;\n    let mut\
    \ min_value", "    let mut min_value = arr[0];\n    let mut min_index = 0;\n \
    \   for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_index = i;\n    \
    \        }\n        }\n    }\n    let mut result: Vec<isize> = vec![];\n    if\
    \ min_index == 0 {\n        return vec![];\n    }\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_index == i {\n              \
    \  result.push(min_value);\n                break;\n            }\n        }\n\
    \    }\n    result", "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] % 2 == 0 {\n     \
    \       if smallest_even_value < arr[i] {\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_index = i;\n            }\n       \
    \ }\n    }\n    vec![smallest_even_value,smallest_even_index]", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2 = 0;\n    let mut\
    \ min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5 = 0;\n    let\
    \ mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8 = 0;\n  \
    \  let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11 =\
    \ 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    for i in arr {\n        if i % 2 ==\
    \ 0 {\n            if min_value > i {\n                min_value = i;\n      \
    \          min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value >\
    \ i {\n                min_value = i;\n                min_idx = i;\n        \
    \    }\n        }\n    }\n    let mut result: Vec<isize> = vec![];\n    for i\
    \ in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value ==\
    \ i {\n                result.push(min_idx);\n            }\n        }\n    }\n\
    \    result", "    let mut min_value = i32::MAX;\n    let mut min_value_index\
    \ = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ == i32::MAX {\n                min_value = i;\n                min_value_index\
    \ = i;\n            } else {\n                if i < min_value {\n           \
    \         min_value = i;\n                    min_value_index = i;\n         \
    \       }\n            }\n        }\n    }\n    let mut result = vec![min_value_index];\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ == i32::MAX {\n                min_value = i;\n                min_value_index\
    \ = i;\n            } else {\n                if i < min_value {\n           \
    \         min_value = i;\n                    min_value_index = i;\n         \
    \       }\n            }\n        }\n    }\n    result", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter() {\n   \
    \     if i < smallest_even_value {\n            smallest_even_value = i;\n   \
    \         smallest_even_index = i;\n        }\n    }\n    return vec![smallest_value,\
    \ smallest_even_index];", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in 0..arr.len() {\n\
    \        if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n       \
    \     if arr[i] < smallest_value.len() {\n                smallest_value = vec![smallest_value[smallest_value.len()\
    \ - 1], arr[i]];\n                smallest_index = vec![i];\n            }\n \
    \       }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n  \
    \  }\n    if even_values.len() == 1 {\n        return vec![smallest_value[smallest_value.len()\
    \ - 1], smallest_index[smallest_index.len() - 1]];\n    }\n    if even_values.len()\
    \ > 1 {\n        let mut smallest_value_2 = vec![];\n        let mut smallest_index_2\
    \ = vec![];\n        for i in 0..even_values.len() {\n            if even_values[i]\
    \ < smallest_value.len() {\n                smallest_value_2 = vec![smallest_value[smallest_value.len()\
    \ - 1], even_values[i]];\n                smallest_index_2 = vec![i];\n      \
    \      }\n        }\n        return vec![smallest_value_2[smallest_value_2.len()\
    \ - 1], smallest_index_2[smallest_index_2.len() - 1]];\n    }\n    return vec![];",
  "    let mut even_values = vec![0; arr.len()];\n    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i]\
    \ % 2 == 0 {\n            even_values[i] = arr[i];\n            if even_values[i]\
    \ < smallest_value {\n                smallest_value = even_values[i];\n     \
    \           smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value_and_index\
    \ = vec![];\n    for i in 0..even_values.len() {\n        if even_values[i] <\
    \ smallest_value {\n            smallest_value_and_index.push((smallest_value,\
    \ i));\n        }\n    }\n    if smallest_value_and_index.len() == 0 {\n     \
    \   return vec![];\n    }\n    let mut smallest_value_and_index_sorted = vec![];\n\
    \    for i in 0..smallest_value_and_index.len() {\n        smallest_value_and_index_sorted.push((smallest_value_and_index[i][0],\
    \ smallest_value_and_index[i][1]));\n    }\n    smallest_value_and_index_sorted.sort();\n\
    \    let mut smallest_value_and_index_sorted = vec![];\n    for i in 0..smallest_value_and_index_sorted.len()\
    \ {\n        smallest_value_and_index_sorted.push((smallest_value_and_index_sorted[i][0],\
    \ smallest_value_and_index_sorted[i][1]));\n    }\n    smallest_value_and_index_sorted",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let\
    \ mut even_values = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n        }\n        if i == smallest_value {\n\
    \            smallest_index = i;\n        }\n        if i == smallest_value &&\
    \ i / 2 < smallest_value {\n            smallest_value = i / 2;\n        }\n \
    \   }\n    if even_values.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut smallest_even_value = even_values[0];\n    let mut smallest_even_index =\
    \ 0;\n    for &i in even_values {\n        if i % 2 == 0 {\n            if i ==\
    \ smallest_even_value {\n                smallest_even_index = i;\n          \
    \  }\n            if i == smallest_even_value && i / 2 < smallest_even_value {\n\
    \                smallest_even_value = i / 2;\n            }\n        }\n    }\n\
    \    vec![smallest_value, smallest_index, smallest_even_value,\n        smallest_even_index]"]
stop_tokens:
- "\n}"
